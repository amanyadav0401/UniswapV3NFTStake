{
	"id": "3ccd31fa77d893a80df929d70f3305d4",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.7.6",
	"solcLongVersion": "0.7.6+commit.7338295f",
	"input": {
		"language": "Solidity",
		"sources": {
			"contracts/CoinSwitch.sol": {
				"content": "//SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.7.0;\n\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"./libraries/TickMath.sol\";\nimport \"./libraries/LiquidityAmounts.sol\";\nimport \"./interfaces/INonfungiblePositionManager.sol\";\n\ncontract StakeLPNFT is ERC20 {\n\n    address admin;\n    INonfungiblePositionManager nftPositionManager;\n    \n\n    constructor(address _admin, INonfungiblePositionManager _nftPositionManager) ERC20(\"Reward\",\"RWD\"){\n           admin = _admin;\n           nftPositionManager = _nftPositionManager;\n    }\n\n    function stakeLP(uint _tokenId) public {\n         nftPositionManager.transferFrom(msg.sender, address(this), _tokenId);\n         (uint96 nonce, address operator, address token0, address token1, uint24 fee, int24 tickLower, int24 tickUpper, uint128 liquidity,uint256 feeGrowthInside0LastX128,\n            uint256 feeGrowthInside1LastX128,\n            uint128 tokensOwed0,\n            uint128 tokensOwed1)=nftPositionManager.positions(_tokenId);\n            int24 tickler = tickLower;\n            uint160 sqrtRatioAX96 = TickMath.getSqrtRatioAtTick(tickLower);\n            uint160 sqrtRatioBX96 = TickMath.getSqrtRatioAtTick(tickUpper);\n            uint256 amount0 = LiquidityAmounts.getAmount0ForLiquidity(sqrtRatioAX96, sqrtRatioBX96, liquidity);\n\n\n    }\n\n\n\n\n}"
			},
			"contracts/interfaces/INonfungiblePositionManager.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.5;\npragma abicoder v2;\n\nimport '@openzeppelin/contracts/token/ERC721/IERC721Metadata.sol';\nimport '@openzeppelin/contracts/token/ERC721/IERC721Enumerable.sol';\n\nimport './IPoolInitializer.sol';\nimport './IERC721Permit.sol';\nimport './IPeripheryPayments.sol';\nimport './IPeripheryImmutableState.sol';\nimport '../libraries/PoolAddress.sol';\n\n/// @title Non-fungible token for positions\n/// @notice Wraps Uniswap V3 positions in a non-fungible token interface which allows for them to be transferred\n/// and authorized.\ninterface INonfungiblePositionManager is\n    IPoolInitializer,\n    IPeripheryPayments,\n    IPeripheryImmutableState,\n    IERC721Metadata,\n    IERC721Enumerable,\n    IERC721Permit\n{\n    /// @notice Emitted when liquidity is increased for a position NFT\n    /// @dev Also emitted when a token is minted\n    /// @param tokenId The ID of the token for which liquidity was increased\n    /// @param liquidity The amount by which liquidity for the NFT position was increased\n    /// @param amount0 The amount of token0 that was paid for the increase in liquidity\n    /// @param amount1 The amount of token1 that was paid for the increase in liquidity\n    event IncreaseLiquidity(uint256 indexed tokenId, uint128 liquidity, uint256 amount0, uint256 amount1);\n    /// @notice Emitted when liquidity is decreased for a position NFT\n    /// @param tokenId The ID of the token for which liquidity was decreased\n    /// @param liquidity The amount by which liquidity for the NFT position was decreased\n    /// @param amount0 The amount of token0 that was accounted for the decrease in liquidity\n    /// @param amount1 The amount of token1 that was accounted for the decrease in liquidity\n    event DecreaseLiquidity(uint256 indexed tokenId, uint128 liquidity, uint256 amount0, uint256 amount1);\n    /// @notice Emitted when tokens are collected for a position NFT\n    /// @dev The amounts reported may not be exactly equivalent to the amounts transferred, due to rounding behavior\n    /// @param tokenId The ID of the token for which underlying tokens were collected\n    /// @param recipient The address of the account that received the collected tokens\n    /// @param amount0 The amount of token0 owed to the position that was collected\n    /// @param amount1 The amount of token1 owed to the position that was collected\n    event Collect(uint256 indexed tokenId, address recipient, uint256 amount0, uint256 amount1);\n\n    /// @notice Returns the position information associated with a given token ID.\n    /// @dev Throws if the token ID is not valid.\n    /// @param tokenId The ID of the token that represents the position\n    /// @return nonce The nonce for permits\n    /// @return operator The address that is approved for spending\n    /// @return token0 The address of the token0 for a specific pool\n    /// @return token1 The address of the token1 for a specific pool\n    /// @return fee The fee associated with the pool\n    /// @return tickLower The lower end of the tick range for the position\n    /// @return tickUpper The higher end of the tick range for the position\n    /// @return liquidity The liquidity of the position\n    /// @return feeGrowthInside0LastX128 The fee growth of token0 as of the last action on the individual position\n    /// @return feeGrowthInside1LastX128 The fee growth of token1 as of the last action on the individual position\n    /// @return tokensOwed0 The uncollected amount of token0 owed to the position as of the last computation\n    /// @return tokensOwed1 The uncollected amount of token1 owed to the position as of the last computation\n    function positions(uint256 tokenId)\n        external\n        view\n        returns (\n            uint96 nonce,\n            address operator,\n            address token0,\n            address token1,\n            uint24 fee,\n            int24 tickLower,\n            int24 tickUpper,\n            uint128 liquidity,\n            uint256 feeGrowthInside0LastX128,\n            uint256 feeGrowthInside1LastX128,\n            uint128 tokensOwed0,\n            uint128 tokensOwed1\n        );\n\n    struct MintParams {\n        address token0;\n        address token1;\n        uint24 fee;\n        int24 tickLower;\n        int24 tickUpper;\n        uint256 amount0Desired;\n        uint256 amount1Desired;\n        uint256 amount0Min;\n        uint256 amount1Min;\n        address recipient;\n        uint256 deadline;\n    }\n\n    /// @notice Creates a new position wrapped in a NFT\n    /// @dev Call this when the pool does exist and is initialized. Note that if the pool is created but not initialized\n    /// a method does not exist, i.e. the pool is assumed to be initialized.\n    /// @param params The params necessary to mint a position, encoded as `MintParams` in calldata\n    /// @return tokenId The ID of the token that represents the minted position\n    /// @return liquidity The amount of liquidity for this position\n    /// @return amount0 The amount of token0\n    /// @return amount1 The amount of token1\n    function mint(MintParams calldata params)\n        external\n        payable\n        returns (\n            uint256 tokenId,\n            uint128 liquidity,\n            uint256 amount0,\n            uint256 amount1\n        );\n\n    struct IncreaseLiquidityParams {\n        uint256 tokenId;\n        uint256 amount0Desired;\n        uint256 amount1Desired;\n        uint256 amount0Min;\n        uint256 amount1Min;\n        uint256 deadline;\n    }\n\n    /// @notice Increases the amount of liquidity in a position, with tokens paid by the `msg.sender`\n    /// @param params tokenId The ID of the token for which liquidity is being increased,\n    /// amount0Desired The desired amount of token0 to be spent,\n    /// amount1Desired The desired amount of token1 to be spent,\n    /// amount0Min The minimum amount of token0 to spend, which serves as a slippage check,\n    /// amount1Min The minimum amount of token1 to spend, which serves as a slippage check,\n    /// deadline The time by which the transaction must be included to effect the change\n    /// @return liquidity The new liquidity amount as a result of the increase\n    /// @return amount0 The amount of token0 to acheive resulting liquidity\n    /// @return amount1 The amount of token1 to acheive resulting liquidity\n    function increaseLiquidity(IncreaseLiquidityParams calldata params)\n        external\n        payable\n        returns (\n            uint128 liquidity,\n            uint256 amount0,\n            uint256 amount1\n        );\n\n    struct DecreaseLiquidityParams {\n        uint256 tokenId;\n        uint128 liquidity;\n        uint256 amount0Min;\n        uint256 amount1Min;\n        uint256 deadline;\n    }\n\n    /// @notice Decreases the amount of liquidity in a position and accounts it to the position\n    /// @param params tokenId The ID of the token for which liquidity is being decreased,\n    /// amount The amount by which liquidity will be decreased,\n    /// amount0Min The minimum amount of token0 that should be accounted for the burned liquidity,\n    /// amount1Min The minimum amount of token1 that should be accounted for the burned liquidity,\n    /// deadline The time by which the transaction must be included to effect the change\n    /// @return amount0 The amount of token0 accounted to the position's tokens owed\n    /// @return amount1 The amount of token1 accounted to the position's tokens owed\n    function decreaseLiquidity(DecreaseLiquidityParams calldata params)\n        external\n        payable\n        returns (uint256 amount0, uint256 amount1);\n\n    struct CollectParams {\n        uint256 tokenId;\n        address recipient;\n        uint128 amount0Max;\n        uint128 amount1Max;\n    }\n\n    /// @notice Collects up to a maximum amount of fees owed to a specific position to the recipient\n    /// @param params tokenId The ID of the NFT for which tokens are being collected,\n    /// recipient The account that should receive the tokens,\n    /// amount0Max The maximum amount of token0 to collect,\n    /// amount1Max The maximum amount of token1 to collect\n    /// @return amount0 The amount of fees collected in token0\n    /// @return amount1 The amount of fees collected in token1\n    function collect(CollectParams calldata params) external payable returns (uint256 amount0, uint256 amount1);\n\n    /// @notice Burns a token ID, which deletes it from the NFT contract. The token must have 0 liquidity and all tokens\n    /// must be collected first.\n    /// @param tokenId The ID of the token that is being burned\n    function burn(uint256 tokenId) external payable;\n}\n"
			},
			"contracts/libraries/LiquidityAmounts.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\nimport '@uniswap/v3-core/contracts/libraries/FullMath.sol';\nimport '@uniswap/v3-core/contracts/libraries/FixedPoint96.sol';\n\n/// @title Liquidity amount functions\n/// @notice Provides functions for computing liquidity amounts from token amounts and prices\nlibrary LiquidityAmounts {\n    /// @notice Downcasts uint256 to uint128\n    /// @param x The uint258 to be downcasted\n    /// @return y The passed value, downcasted to uint128\n    function toUint128(uint256 x) private pure returns (uint128 y) {\n        require((y = uint128(x)) == x);\n    }\n\n    /// @notice Computes the amount of liquidity received for a given amount of token0 and price range\n    /// @dev Calculates amount0 * (sqrt(upper) * sqrt(lower)) / (sqrt(upper) - sqrt(lower))\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\n    /// @param amount0 The amount0 being sent in\n    /// @return liquidity The amount of returned liquidity\n    function getLiquidityForAmount0(\n        uint160 sqrtRatioAX96,\n        uint160 sqrtRatioBX96,\n        uint256 amount0\n    ) internal pure returns (uint128 liquidity) {\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\n        uint256 intermediate = FullMath.mulDiv(sqrtRatioAX96, sqrtRatioBX96, FixedPoint96.Q96);\n        return toUint128(FullMath.mulDiv(amount0, intermediate, sqrtRatioBX96 - sqrtRatioAX96));\n    }\n\n    /// @notice Computes the amount of liquidity received for a given amount of token1 and price range\n    /// @dev Calculates amount1 / (sqrt(upper) - sqrt(lower)).\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\n    /// @param amount1 The amount1 being sent in\n    /// @return liquidity The amount of returned liquidity\n    function getLiquidityForAmount1(\n        uint160 sqrtRatioAX96,\n        uint160 sqrtRatioBX96,\n        uint256 amount1\n    ) internal pure returns (uint128 liquidity) {\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\n        return toUint128(FullMath.mulDiv(amount1, FixedPoint96.Q96, sqrtRatioBX96 - sqrtRatioAX96));\n    }\n\n    /// @notice Computes the maximum amount of liquidity received for a given amount of token0, token1, the current\n    /// pool prices and the prices at the tick boundaries\n    /// @param sqrtRatioX96 A sqrt price representing the current pool prices\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\n    /// @param amount0 The amount of token0 being sent in\n    /// @param amount1 The amount of token1 being sent in\n    /// @return liquidity The maximum amount of liquidity received\n    function getLiquidityForAmounts(\n        uint160 sqrtRatioX96,\n        uint160 sqrtRatioAX96,\n        uint160 sqrtRatioBX96,\n        uint256 amount0,\n        uint256 amount1\n    ) internal pure returns (uint128 liquidity) {\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\n\n        if (sqrtRatioX96 <= sqrtRatioAX96) {\n            liquidity = getLiquidityForAmount0(sqrtRatioAX96, sqrtRatioBX96, amount0);\n        } else if (sqrtRatioX96 < sqrtRatioBX96) {\n            uint128 liquidity0 = getLiquidityForAmount0(sqrtRatioX96, sqrtRatioBX96, amount0);\n            uint128 liquidity1 = getLiquidityForAmount1(sqrtRatioAX96, sqrtRatioX96, amount1);\n\n            liquidity = liquidity0 < liquidity1 ? liquidity0 : liquidity1;\n        } else {\n            liquidity = getLiquidityForAmount1(sqrtRatioAX96, sqrtRatioBX96, amount1);\n        }\n    }\n\n    /// @notice Computes the amount of token0 for a given amount of liquidity and a price range\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\n    /// @param liquidity The liquidity being valued\n    /// @return amount0 The amount of token0\n    function getAmount0ForLiquidity(\n        uint160 sqrtRatioAX96,\n        uint160 sqrtRatioBX96,\n        uint128 liquidity\n    ) internal pure returns (uint256 amount0) {\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\n\n        return\n            FullMath.mulDiv(\n                uint256(liquidity) << FixedPoint96.RESOLUTION,\n                sqrtRatioBX96 - sqrtRatioAX96,\n                sqrtRatioBX96\n            ) / sqrtRatioAX96;\n    }\n\n    /// @notice Computes the amount of token1 for a given amount of liquidity and a price range\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\n    /// @param liquidity The liquidity being valued\n    /// @return amount1 The amount of token1\n    function getAmount1ForLiquidity(\n        uint160 sqrtRatioAX96,\n        uint160 sqrtRatioBX96,\n        uint128 liquidity\n    ) internal pure returns (uint256 amount1) {\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\n\n        return FullMath.mulDiv(liquidity, sqrtRatioBX96 - sqrtRatioAX96, FixedPoint96.Q96);\n    }\n\n    /// @notice Computes the token0 and token1 value for a given amount of liquidity, the current\n    /// pool prices and the prices at the tick boundaries\n    /// @param sqrtRatioX96 A sqrt price representing the current pool prices\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\n    /// @param liquidity The liquidity being valued\n    /// @return amount0 The amount of token0\n    /// @return amount1 The amount of token1\n    function getAmountsForLiquidity(\n        uint160 sqrtRatioX96,\n        uint160 sqrtRatioAX96,\n        uint160 sqrtRatioBX96,\n        uint128 liquidity\n    ) internal pure returns (uint256 amount0, uint256 amount1) {\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\n\n        if (sqrtRatioX96 <= sqrtRatioAX96) {\n            amount0 = getAmount0ForLiquidity(sqrtRatioAX96, sqrtRatioBX96, liquidity);\n        } else if (sqrtRatioX96 < sqrtRatioBX96) {\n            amount0 = getAmount0ForLiquidity(sqrtRatioX96, sqrtRatioBX96, liquidity);\n            amount1 = getAmount1ForLiquidity(sqrtRatioAX96, sqrtRatioX96, liquidity);\n        } else {\n            amount1 = getAmount1ForLiquidity(sqrtRatioAX96, sqrtRatioBX96, liquidity);\n        }\n    }\n}\n"
			},
			"contracts/libraries/TickMath.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0 <0.8.0;\n\n/// @title Math library for computing sqrt prices from ticks and vice versa\n/// @notice Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports\n/// prices between 2**-128 and 2**128\nlibrary TickMath {\n    /// @dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128\n    int24 internal constant MIN_TICK = -887272;\n    /// @dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\n    int24 internal constant MAX_TICK = -MIN_TICK;\n\n    /// @dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\n    uint160 internal constant MIN_SQRT_RATIO = 4295128739;\n    /// @dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\n    uint160 internal constant MAX_SQRT_RATIO = 1461446703485210103287273052203988822378723970342;\n\n    /// @notice Calculates sqrt(1.0001^tick) * 2^96\n    /// @dev Throws if |tick| > max tick\n    /// @param tick The input tick for the above formula\n    /// @return sqrtPriceX96 A Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)\n    /// at the given tick\n    function getSqrtRatioAtTick(int24 tick) internal pure returns (uint160 sqrtPriceX96) {\n        uint256 absTick = tick < 0 ? uint256(-int256(tick)) : uint256(int256(tick));\n        require(absTick <= uint256(MAX_TICK), 'T');\n\n        uint256 ratio = absTick & 0x1 != 0 ? 0xfffcb933bd6fad37aa2d162d1a594001 : 0x100000000000000000000000000000000;\n        if (absTick & 0x2 != 0) ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128;\n        if (absTick & 0x4 != 0) ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;\n        if (absTick & 0x8 != 0) ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;\n        if (absTick & 0x10 != 0) ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128;\n        if (absTick & 0x20 != 0) ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128;\n        if (absTick & 0x40 != 0) ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128;\n        if (absTick & 0x80 != 0) ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;\n        if (absTick & 0x100 != 0) ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;\n        if (absTick & 0x200 != 0) ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128;\n        if (absTick & 0x400 != 0) ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;\n        if (absTick & 0x800 != 0) ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;\n        if (absTick & 0x1000 != 0) ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;\n        if (absTick & 0x2000 != 0) ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;\n        if (absTick & 0x4000 != 0) ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;\n        if (absTick & 0x8000 != 0) ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128;\n        if (absTick & 0x10000 != 0) ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;\n        if (absTick & 0x20000 != 0) ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128;\n        if (absTick & 0x40000 != 0) ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128;\n        if (absTick & 0x80000 != 0) ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128;\n\n        if (tick > 0) ratio = type(uint256).max / ratio;\n\n        // this divides by 1<<32 rounding up to go from a Q128.128 to a Q128.96.\n        // we then downcast because we know the result always fits within 160 bits due to our tick input constraint\n        // we round up in the division so getTickAtSqrtRatio of the output price is always consistent\n        sqrtPriceX96 = uint160((ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1));\n    }\n\n    /// @notice Calculates the greatest tick value such that getRatioAtTick(tick) <= ratio\n    /// @dev Throws in case sqrtPriceX96 < MIN_SQRT_RATIO, as MIN_SQRT_RATIO is the lowest value getRatioAtTick may\n    /// ever return.\n    /// @param sqrtPriceX96 The sqrt ratio for which to compute the tick as a Q64.96\n    /// @return tick The greatest tick for which the ratio is less than or equal to the input ratio\n    function getTickAtSqrtRatio(uint160 sqrtPriceX96) internal pure returns (int24 tick) {\n        // second inequality must be < because the price can never reach the price at the max tick\n        require(sqrtPriceX96 >= MIN_SQRT_RATIO && sqrtPriceX96 < MAX_SQRT_RATIO, 'R');\n        uint256 ratio = uint256(sqrtPriceX96) << 32;\n\n        uint256 r = ratio;\n        uint256 msb = 0;\n\n        assembly {\n            let f := shl(7, gt(r, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(6, gt(r, 0xFFFFFFFFFFFFFFFF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(5, gt(r, 0xFFFFFFFF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(4, gt(r, 0xFFFF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(3, gt(r, 0xFF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(2, gt(r, 0xF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(1, gt(r, 0x3))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := gt(r, 0x1)\n            msb := or(msb, f)\n        }\n\n        if (msb >= 128) r = ratio >> (msb - 127);\n        else r = ratio << (127 - msb);\n\n        int256 log_2 = (int256(msb) - 128) << 64;\n\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(63, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(62, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(61, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(60, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(59, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(58, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(57, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(56, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(55, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(54, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(53, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(52, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(51, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(50, f))\n        }\n\n        int256 log_sqrt10001 = log_2 * 255738958999603826347141; // 128.128 number\n\n        int24 tickLow = int24((log_sqrt10001 - 3402992956809132418596140100660247210) >> 128);\n        int24 tickHi = int24((log_sqrt10001 + 291339464771989622907027621153398088495) >> 128);\n\n        tick = tickLow == tickHi ? tickLow : getSqrtRatioAtTick(tickHi) <= sqrtPriceX96 ? tickHi : tickLow;\n    }\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/ERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\nimport \"../../utils/Context.sol\";\nimport \"./IERC20.sol\";\nimport \"../../math/SafeMath.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20 {\n    using SafeMath for uint256;\n\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n     * a default value of 18.\n     *\n     * To select a different value for {decimals}, use {_setupDecimals}.\n     *\n     * All three of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor (string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n        _decimals = 18;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n     * called.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return _decimals;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\n        _totalSupply = _totalSupply.sub(amount);\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Sets {decimals} to a value other than the default one of 18.\n     *\n     * WARNING: This function should only be called from the constructor. Most\n     * applications that interact with token contracts will not expect\n     * {decimals} to ever change, and may work incorrectly if it does.\n     */\n    function _setupDecimals(uint8 decimals_) internal virtual {\n        _decimals = decimals_;\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be to transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n}\n"
			},
			"@openzeppelin/contracts/token/ERC721/IERC721.sol": {
				"content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\nimport \"../../introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\n      *\n      * Requirements:\n      *\n      * - `from` cannot be the zero address.\n      * - `to` cannot be the zero address.\n      * - `tokenId` token must exist and be owned by `from`.\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n      *\n      * Emits a {Transfer} event.\n      */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n}\n"
			},
			"@uniswap/v3-core/contracts/libraries/FixedPoint96.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.4.0;\n\n/// @title FixedPoint96\n/// @notice A library for handling binary fixed point numbers, see https://en.wikipedia.org/wiki/Q_(number_format)\n/// @dev Used in SqrtPriceMath.sol\nlibrary FixedPoint96 {\n    uint8 internal constant RESOLUTION = 96;\n    uint256 internal constant Q96 = 0x1000000000000000000000000;\n}\n"
			},
			"@uniswap/v3-core/contracts/libraries/FullMath.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.4.0;\n\n/// @title Contains 512-bit math functions\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\n/// @dev Handles \"phantom overflow\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\nlibrary FullMath {\n    /// @notice Calculates floor(a×b÷denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n    /// @param a The multiplicand\n    /// @param b The multiplier\n    /// @param denominator The divisor\n    /// @return result The 256-bit result\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\n    function mulDiv(\n        uint256 a,\n        uint256 b,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        // 512-bit multiply [prod1 prod0] = a * b\n        // Compute the product mod 2**256 and mod 2**256 - 1\n        // then use the Chinese Remainder Theorem to reconstruct\n        // the 512 bit result. The result is stored in two 256\n        // variables such that product = prod1 * 2**256 + prod0\n        uint256 prod0; // Least significant 256 bits of the product\n        uint256 prod1; // Most significant 256 bits of the product\n        assembly {\n            let mm := mulmod(a, b, not(0))\n            prod0 := mul(a, b)\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n        }\n\n        // Handle non-overflow cases, 256 by 256 division\n        if (prod1 == 0) {\n            require(denominator > 0);\n            assembly {\n                result := div(prod0, denominator)\n            }\n            return result;\n        }\n\n        // Make sure the result is less than 2**256.\n        // Also prevents denominator == 0\n        require(denominator > prod1);\n\n        ///////////////////////////////////////////////\n        // 512 by 256 division.\n        ///////////////////////////////////////////////\n\n        // Make division exact by subtracting the remainder from [prod1 prod0]\n        // Compute remainder using mulmod\n        uint256 remainder;\n        assembly {\n            remainder := mulmod(a, b, denominator)\n        }\n        // Subtract 256 bit number from 512 bit number\n        assembly {\n            prod1 := sub(prod1, gt(remainder, prod0))\n            prod0 := sub(prod0, remainder)\n        }\n\n        // Factor powers of two out of denominator\n        // Compute largest power of two divisor of denominator.\n        // Always >= 1.\n        uint256 twos = -denominator & denominator;\n        // Divide denominator by power of two\n        assembly {\n            denominator := div(denominator, twos)\n        }\n\n        // Divide [prod1 prod0] by the factors of two\n        assembly {\n            prod0 := div(prod0, twos)\n        }\n        // Shift in bits from prod1 into prod0. For this we need\n        // to flip `twos` such that it is 2**256 / twos.\n        // If twos is zero, then it becomes one\n        assembly {\n            twos := add(div(sub(0, twos), twos), 1)\n        }\n        prod0 |= prod1 * twos;\n\n        // Invert denominator mod 2**256\n        // Now that denominator is an odd number, it has an inverse\n        // modulo 2**256 such that denominator * inv = 1 mod 2**256.\n        // Compute the inverse by starting with a seed that is correct\n        // correct for four bits. That is, denominator * inv = 1 mod 2**4\n        uint256 inv = (3 * denominator) ^ 2;\n        // Now use Newton-Raphson iteration to improve the precision.\n        // Thanks to Hensel's lifting lemma, this also works in modular\n        // arithmetic, doubling the correct bits in each step.\n        inv *= 2 - denominator * inv; // inverse mod 2**8\n        inv *= 2 - denominator * inv; // inverse mod 2**16\n        inv *= 2 - denominator * inv; // inverse mod 2**32\n        inv *= 2 - denominator * inv; // inverse mod 2**64\n        inv *= 2 - denominator * inv; // inverse mod 2**128\n        inv *= 2 - denominator * inv; // inverse mod 2**256\n\n        // Because the division is now exact we can divide by multiplying\n        // with the modular inverse of denominator. This will give us the\n        // correct result modulo 2**256. Since the precoditions guarantee\n        // that the outcome is less than 2**256, this is the final result.\n        // We don't need to compute the high bits of the result and prod1\n        // is no longer required.\n        result = prod0 * inv;\n        return result;\n    }\n\n    /// @notice Calculates ceil(a×b÷denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n    /// @param a The multiplicand\n    /// @param b The multiplier\n    /// @param denominator The divisor\n    /// @return result The 256-bit result\n    function mulDivRoundingUp(\n        uint256 a,\n        uint256 b,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        result = mulDiv(a, b, denominator);\n        if (mulmod(a, b, denominator) > 0) {\n            require(result < type(uint256).max);\n            result++;\n        }\n    }\n}\n"
			},
			"contracts/libraries/PoolAddress.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Provides functions for deriving a pool address from the factory, tokens, and the fee\nlibrary PoolAddress {\n    bytes32 internal constant POOL_INIT_CODE_HASH = 0xe7dac78d4d759ab9a7a4d3963f93db5fa046c8aba3d385af3a9e981a707722c8;\n     //bydefaulthash0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54\n    /// @notice The identifying key of the pool\n    struct PoolKey {\n        address token0;\n        address token1;\n        uint24 fee;\n    }\n\n\n    /// @notice Returns PoolKey: the ordered tokens with the matched fee levels\n    /// @param tokenA The first token of a pool, unsorted\n    /// @param tokenB The second token of a pool, unsorted\n    /// @param fee The fee level of the pool\n    /// @return Poolkey The pool details with ordered token0 and token1 assignments\n    function getPoolKey(\n        address tokenA,\n        address tokenB,\n        uint24 fee\n    ) internal pure returns (PoolKey memory) {\n        if (tokenA > tokenB) (tokenA, tokenB) = (tokenB, tokenA);\n        return PoolKey({token0: tokenA, token1: tokenB, fee: fee});\n    }\n\n    /// @notice Deterministically computes the pool address given the factory and PoolKey\n    /// @param factory The Uniswap V3 factory contract address\n    /// @param key The PoolKey\n    /// @return pool The contract address of the V3 pool\n    function computeAddress(address factory, PoolKey memory key) internal pure returns (address pool) {\n        require(key.token0 < key.token1);\n        pool = address(\n            uint256(\n                keccak256(\n                    abi.encodePacked(\n                        hex'ff',\n                        factory,\n                        keccak256(abi.encode(key.token0, key.token1, key.fee)),\n                        POOL_INIT_CODE_HASH\n                    )\n                )\n            )\n        );\n    }\n}\n"
			},
			"contracts/interfaces/IPeripheryImmutableState.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Immutable state\n/// @notice Functions that return immutable state of the router\ninterface IPeripheryImmutableState {\n    /// @return Returns the address of the Uniswap V3 factory\n    function factory() external view returns (address);\n\n    /// @return Returns the address of WETH9\n    function WETH9() external view returns (address);\n}\n"
			},
			"contracts/interfaces/IPeripheryPayments.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.5;\n\n/// @title Periphery Payments\n/// @notice Functions to ease deposits and withdrawals of ETH\ninterface IPeripheryPayments {\n    /// @notice Unwraps the contract's WETH9 balance and sends it to recipient as ETH.\n    /// @dev The amountMinimum parameter prevents malicious contracts from stealing WETH9 from users.\n    /// @param amountMinimum The minimum amount of WETH9 to unwrap\n    /// @param recipient The address receiving ETH\n    function unwrapWETH9(uint256 amountMinimum, address recipient) external payable;\n\n    /// @notice Refunds any ETH balance held by this contract to the `msg.sender`\n    /// @dev Useful for bundling with mint or increase liquidity that uses ether, or exact output swaps\n    /// that use ether for the input amount\n    function refundETH() external payable;\n\n    /// @notice Transfers the full amount of a token held by this contract to recipient\n    /// @dev The amountMinimum parameter prevents malicious contracts from stealing the token from users\n    /// @param token The contract address of the token which will be transferred to `recipient`\n    /// @param amountMinimum The minimum amount of token required for a transfer\n    /// @param recipient The destination address of the token\n    function sweepToken(\n        address token,\n        uint256 amountMinimum,\n        address recipient\n    ) external payable;\n}\n"
			},
			"contracts/interfaces/IERC721Permit.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.5;\n\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\n\n/// @title ERC721 with permit\n/// @notice Extension to ERC721 that includes a permit function for signature based approvals\ninterface IERC721Permit is IERC721 {\n    /// @notice The permit typehash used in the permit signature\n    /// @return The typehash for the permit\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n\n    /// @notice The domain separator used in the permit signature\n    /// @return The domain seperator used in encoding of permit signature\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n\n    /// @notice Approve of a specific token ID for spending by spender via signature\n    /// @param spender The account that is being approved\n    /// @param tokenId The ID of the token that is being approved for spending\n    /// @param deadline The deadline timestamp by which the call must be mined for the approve to work\n    /// @param v Must produce valid secp256k1 signature from the holder along with `r` and `s`\n    /// @param r Must produce valid secp256k1 signature from the holder along with `v` and `s`\n    /// @param s Must produce valid secp256k1 signature from the holder along with `r` and `v`\n    function permit(\n        address spender,\n        uint256 tokenId,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external payable;\n}\n"
			},
			"contracts/interfaces/IPoolInitializer.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.5;\npragma abicoder v2;\n\n/// @title Creates and initializes V3 Pools\n/// @notice Provides a method for creating and initializing a pool, if necessary, for bundling with other methods that\n/// require the pool to exist.\ninterface IPoolInitializer {\n    /// @notice Creates a new pool if it does not exist, then initializes if not initialized\n    /// @dev This method can be bundled with others via IMulticall for the first action (e.g. mint) performed against a pool\n    /// @param token0 The contract address of token0 of the pool\n    /// @param token1 The contract address of token1 of the pool\n    /// @param fee The fee amount of the v3 pool for the specified token pair\n    /// @param sqrtPriceX96 The initial square root price of the pool as a Q64.96 value\n    /// @return pool Returns the pool address based on the pair of tokens and fee, will return the newly created pool address if necessary\n    function createAndInitializePoolIfNecessary(\n        address token0,\n        address token1,\n        uint24 fee,\n        uint160 sqrtPriceX96\n    ) external payable returns (address pool);\n}\n"
			},
			"@openzeppelin/contracts/token/ERC721/IERC721Enumerable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\nimport \"./IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Enumerable is IERC721 {\n\n    /**\n     * @dev Returns the total amount of tokens stored by the contract.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\n\n    /**\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n     * Use along with {totalSupply} to enumerate all tokens.\n     */\n    function tokenByIndex(uint256 index) external view returns (uint256);\n}\n"
			},
			"@openzeppelin/contracts/token/ERC721/IERC721Metadata.sol": {
				"content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\nimport \"./IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
			},
			"@openzeppelin/contracts/introspection/IERC165.sol": {
				"content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
			},
			"@openzeppelin/contracts/math/SafeMath.sol": {
				"content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        uint256 c = a + b;\n        if (c < a) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b > a) return (false, 0);\n        return (true, a - b);\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) return (true, 0);\n        uint256 c = a * b;\n        if (c / a != b) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a / b);\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a % b);\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) return 0;\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: division by zero\");\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a % b;\n    }\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			}
		}
	},
	"output": {
		"contracts": {
			"@openzeppelin/contracts/introspection/IERC165.sol": {
				"IERC165": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.",
						"kind": "dev",
						"methods": {
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"supportsInterface(bytes4)": "01ffc9a7"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/introspection/IERC165.sol\":\"IERC165\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/introspection/IERC165.sol\":{\"keccak256\":\"0xd2f30fad5b24c4120f96dbac83aacdb7993ee610a9092bc23c44463da292bf8d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e3d4e72409e392c7694b6405a0136cf073d8da016df33ef8f9ad195f724ebfea\",\"dweb:/ipfs/QmPGcddKq6CgsiKnxUUif2q76wRqP3dmdQ6bKuHCLmb8Wa\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/math/SafeMath.sol": {
				"SafeMath": {
					"abi": [],
					"devdoc": {
						"details": "Wrappers over Solidity's arithmetic operations with added overflow checks. Arithmetic operations in Solidity wrap on overflow. This can easily result in bugs, because programmers usually assume that an overflow raises an error, which is the standard behavior in high level programming languages. `SafeMath` restores this intuition by reverting the transaction when an operation overflows. Using this library instead of the unchecked operations eliminates an entire class of bugs, so it's recommended to use it always.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/math/SafeMath.sol\":622:7216  library SafeMath {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  invalid\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":622:7216  library SafeMath {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220848fa5370bb0b9b551004303f9f885ce7c5efe78235932a802743f9ae264b98e64736f6c63430007060033\n}\n",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220848fa5370bb0b9b551004303f9f885ce7c5efe78235932a802743f9ae264b98e64736f6c63430007060033",
							"opcodes": "PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP5 DUP16 0xA5 CALLDATACOPY SIGNEXTEND 0xB0 0xB9 0xB5 MLOAD STOP NUMBER SUB 0xF9 0xF8 DUP6 0xCE PUSH29 0x5EFE78235932A802743F9AE264B98E64736F6C63430007060033000000 ",
							"sourceMap": "622:6594:1:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220848fa5370bb0b9b551004303f9f885ce7c5efe78235932a802743f9ae264b98e64736f6c63430007060033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP5 DUP16 0xA5 CALLDATACOPY SIGNEXTEND 0xB0 0xB9 0xB5 MLOAD STOP NUMBER SUB 0xF9 0xF8 DUP6 0xCE PUSH29 0x5EFE78235932A802743F9AE264B98E64736F6C63430007060033000000 ",
							"sourceMap": "622:6594:1:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							},
							"internal": {
								"add(uint256,uint256)": "infinite",
								"div(uint256,uint256)": "infinite",
								"div(uint256,uint256,string memory)": "infinite",
								"mod(uint256,uint256)": "infinite",
								"mod(uint256,uint256,string memory)": "infinite",
								"mul(uint256,uint256)": "infinite",
								"sub(uint256,uint256)": "infinite",
								"sub(uint256,uint256,string memory)": "infinite",
								"tryAdd(uint256,uint256)": "infinite",
								"tryDiv(uint256,uint256)": "infinite",
								"tryMod(uint256,uint256)": "infinite",
								"tryMul(uint256,uint256)": "infinite",
								"trySub(uint256,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 622,
									"end": 7216,
									"name": "PUSH #[$]",
									"source": 1,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 622,
									"end": 7216,
									"name": "PUSH [$]",
									"source": 1,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 622,
									"end": 7216,
									"name": "PUSH",
									"source": 1,
									"value": "B"
								},
								{
									"begin": 622,
									"end": 7216,
									"name": "DUP3",
									"source": 1
								},
								{
									"begin": 622,
									"end": 7216,
									"name": "DUP3",
									"source": 1
								},
								{
									"begin": 622,
									"end": 7216,
									"name": "DUP3",
									"source": 1
								},
								{
									"begin": 622,
									"end": 7216,
									"name": "CODECOPY",
									"source": 1
								},
								{
									"begin": 622,
									"end": 7216,
									"name": "DUP1",
									"source": 1
								},
								{
									"begin": 622,
									"end": 7216,
									"name": "MLOAD",
									"source": 1
								},
								{
									"begin": 622,
									"end": 7216,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 622,
									"end": 7216,
									"name": "BYTE",
									"source": 1
								},
								{
									"begin": 622,
									"end": 7216,
									"name": "PUSH",
									"source": 1,
									"value": "73"
								},
								{
									"begin": 622,
									"end": 7216,
									"name": "EQ",
									"source": 1
								},
								{
									"begin": 622,
									"end": 7216,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "1"
								},
								{
									"begin": 622,
									"end": 7216,
									"name": "JUMPI",
									"source": 1
								},
								{
									"begin": 622,
									"end": 7216,
									"name": "INVALID",
									"source": 1
								},
								{
									"begin": 622,
									"end": 7216,
									"name": "tag",
									"source": 1,
									"value": "1"
								},
								{
									"begin": 622,
									"end": 7216,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 622,
									"end": 7216,
									"name": "ADDRESS",
									"source": 1
								},
								{
									"begin": 622,
									"end": 7216,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 622,
									"end": 7216,
									"name": "MSTORE",
									"source": 1
								},
								{
									"begin": 622,
									"end": 7216,
									"name": "PUSH",
									"source": 1,
									"value": "73"
								},
								{
									"begin": 622,
									"end": 7216,
									"name": "DUP2",
									"source": 1
								},
								{
									"begin": 622,
									"end": 7216,
									"name": "MSTORE8",
									"source": 1
								},
								{
									"begin": 622,
									"end": 7216,
									"name": "DUP3",
									"source": 1
								},
								{
									"begin": 622,
									"end": 7216,
									"name": "DUP2",
									"source": 1
								},
								{
									"begin": 622,
									"end": 7216,
									"name": "RETURN",
									"source": 1
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220848fa5370bb0b9b551004303f9f885ce7c5efe78235932a802743f9ae264b98e64736f6c63430007060033",
									".code": [
										{
											"begin": 622,
											"end": 7216,
											"name": "PUSHDEPLOYADDRESS",
											"source": 1
										},
										{
											"begin": 622,
											"end": 7216,
											"name": "ADDRESS",
											"source": 1
										},
										{
											"begin": 622,
											"end": 7216,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 622,
											"end": 7216,
											"name": "PUSH",
											"source": 1,
											"value": "80"
										},
										{
											"begin": 622,
											"end": 7216,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 622,
											"end": 7216,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 622,
											"end": 7216,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 622,
											"end": 7216,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 622,
											"end": 7216,
											"name": "REVERT",
											"source": 1
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Wrappers over Solidity's arithmetic operations with added overflow checks. Arithmetic operations in Solidity wrap on overflow. This can easily result in bugs, because programmers usually assume that an overflow raises an error, which is the standard behavior in high level programming languages. `SafeMath` restores this intuition by reverting the transaction when an operation overflows. Using this library instead of the unchecked operations eliminates an entire class of bugs, so it's recommended to use it always.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/math/SafeMath.sol\":\"SafeMath\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"keccak256\":\"0xe22a1fc7400ae196eba2ad1562d0386462b00a6363b742d55a2fd2021a58586f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4a635cec58fb4141a16cfd408f1a21ac944c335a3beaba541c35d2e95c04536f\",\"dweb:/ipfs/QmXWcz73UenN1ji8jiWMbzxHjjfLbNQwLVKTEB5zNFE34K\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/ERC20.sol": {
				"ERC20": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "string",
									"name": "name_",
									"type": "string"
								},
								{
									"internalType": "string",
									"name": "symbol_",
									"type": "string"
								}
							],
							"stateMutability": "nonpayable",
							"type": "constructor"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "subtractedValue",
									"type": "uint256"
								}
							],
							"name": "decreaseAllowance",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "addedValue",
									"type": "uint256"
								}
							],
							"name": "increaseAllowance",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Implementation of the {IERC20} interface. This implementation is agnostic to the way tokens are created. This means that a supply mechanism has to be added in a derived contract using {_mint}. For a generic mechanism see {ERC20PresetMinterPauser}. TIP: For a detailed writeup see our guide https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How to implement supply mechanisms]. We have followed general OpenZeppelin guidelines: functions revert instead of returning `false` on failure. This behavior is nonetheless conventional and does not conflict with the expectations of ERC20 applications. Additionally, an {Approval} event is emitted on calls to {transferFrom}. This allows applications to reconstruct the allowance for all accounts just by listening to said events. Other implementations of the EIP may not emit these events, as it isn't required by the specification. Finally, the non-standard {decreaseAllowance} and {increaseAllowance} functions have been added to mitigate the well-known issues around setting allowances. See {IERC20-approve}.",
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "See {IERC20-allowance}."
							},
							"approve(address,uint256)": {
								"details": "See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."
							},
							"balanceOf(address)": {
								"details": "See {IERC20-balanceOf}."
							},
							"constructor": {
								"details": "Sets the values for {name} and {symbol}, initializes {decimals} with a default value of 18. To select a different value for {decimals}, use {_setupDecimals}. All three of these values are immutable: they can only be set once during construction."
							},
							"decimals()": {
								"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is called. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
							},
							"decreaseAllowance(address,uint256)": {
								"details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
							},
							"increaseAllowance(address,uint256)": {
								"details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"symbol()": {
								"details": "Returns the symbol of the token, usually a shorter version of the name."
							},
							"totalSupply()": {
								"details": "See {IERC20-totalSupply}."
							},
							"transfer(address,uint256)": {
								"details": "See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."
							},
							"transferFrom(address,address,uint256)": {
								"details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1313:10780  contract ERC20 is Context, IERC20 {... */\n  mstore(0x40, 0x80)\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1950:2088  constructor (string memory name_, string memory symbol_) {... */\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n  mload(0x40)\n  sub(codesize, bytecodeSize)\n  dup1\n  bytecodeSize\n  dup4\n  codecopy\n  dup2\n  dup2\n  add\n  0x40\n  mstore\n  0x40\n  dup2\n  lt\n  iszero\n  tag_2\n  jumpi\n  0x00\n  dup1\n  revert\ntag_2:\n  dup2\n  add\n  swap1\n  dup1\n  dup1\n  mload\n  mload(0x40)\n  swap4\n  swap3\n  swap2\n  swap1\n  dup5\n  0x0100000000\n  dup3\n  gt\n  iszero\n  tag_3\n  jumpi\n  0x00\n  dup1\n  revert\ntag_3:\n  dup4\n  dup3\n  add\n  swap2\n  pop\n  0x20\n  dup3\n  add\n  dup6\n  dup2\n  gt\n  iszero\n  tag_4\n  jumpi\n  0x00\n  dup1\n  revert\ntag_4:\n  dup3\n  mload\n  dup7\n  0x01\n  dup3\n  mul\n  dup4\n  add\n  gt\n  0x0100000000\n  dup3\n  gt\n  or\n  iszero\n  tag_5\n  jumpi\n  0x00\n  dup1\n  revert\ntag_5:\n  dup1\n  dup4\n  mstore\n  0x20\n  dup4\n  add\n  swap3\n  pop\n  pop\n  pop\n  swap1\n  dup1\n  mload\n  swap1\n  0x20\n  add\n  swap1\n  dup1\n  dup4\n  dup4\n  0x00\ntag_6:\n  dup4\n  dup2\n  lt\n  iszero\n  tag_8\n  jumpi\n  dup1\n  dup3\n  add\n  mload\n  dup2\n  dup5\n  add\n  mstore\n  0x20\n  dup2\n  add\n  swap1\n  pop\n  jump(tag_6)\ntag_8:\n  pop\n  pop\n  pop\n  pop\n  swap1\n  pop\n  swap1\n  dup2\n  add\n  swap1\n  0x1f\n  and\n  dup1\n  iszero\n  tag_9\n  jumpi\n  dup1\n  dup3\n  sub\n  dup1\n  mload\n  0x01\n  dup4\n  0x20\n  sub\n  0x0100\n  exp\n  sub\n  not\n  and\n  dup2\n  mstore\n  0x20\n  add\n  swap2\n  pop\ntag_9:\n  pop\n  0x40\n  mstore\n  0x20\n  add\n  dup1\n  mload\n  mload(0x40)\n  swap4\n  swap3\n  swap2\n  swap1\n  dup5\n  0x0100000000\n  dup3\n  gt\n  iszero\n  tag_10\n  jumpi\n  0x00\n  dup1\n  revert\ntag_10:\n  dup4\n  dup3\n  add\n  swap2\n  pop\n  0x20\n  dup3\n  add\n  dup6\n  dup2\n  gt\n  iszero\n  tag_11\n  jumpi\n  0x00\n  dup1\n  revert\ntag_11:\n  dup3\n  mload\n  dup7\n  0x01\n  dup3\n  mul\n  dup4\n  add\n  gt\n  0x0100000000\n  dup3\n  gt\n  or\n  iszero\n  tag_12\n  jumpi\n  0x00\n  dup1\n  revert\ntag_12:\n  dup1\n  dup4\n  mstore\n  0x20\n  dup4\n  add\n  swap3\n  pop\n  pop\n  pop\n  swap1\n  dup1\n  mload\n  swap1\n  0x20\n  add\n  swap1\n  dup1\n  dup4\n  dup4\n  0x00\ntag_13:\n  dup4\n  dup2\n  lt\n  iszero\n  tag_15\n  jumpi\n  dup1\n  dup3\n  add\n  mload\n  dup2\n  dup5\n  add\n  mstore\n  0x20\n  dup2\n  add\n  swap1\n  pop\n  jump(tag_13)\ntag_15:\n  pop\n  pop\n  pop\n  pop\n  swap1\n  pop\n  swap1\n  dup2\n  add\n  swap1\n  0x1f\n  and\n  dup1\n  iszero\n  tag_16\n  jumpi\n  dup1\n  dup3\n  sub\n  dup1\n  mload\n  0x01\n  dup4\n  0x20\n  sub\n  0x0100\n  exp\n  sub\n  not\n  and\n  dup2\n  mstore\n  0x20\n  add\n  swap2\n  pop\ntag_16:\n  pop\n  0x40\n  mstore\n  pop\n  pop\n  pop\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2025:2030  name_ */\n  dup2\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2017:2022  _name */\n  0x03\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2017:2030  _name = name_ */\n  swap1\n  dup1\n  mload\n  swap1\n  0x20\n  add\n  swap1\n  tag_19\n  swap3\n  swap2\n  swap1\n  tag_20\n  jump\t// in\ntag_19:\n  pop\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2050:2057  symbol_ */\n  dup1\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2040:2047  _symbol */\n  0x04\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2040:2057  _symbol = symbol_ */\n  swap1\n  dup1\n  mload\n  swap1\n  0x20\n  add\n  swap1\n  tag_21\n  swap3\n  swap2\n  swap1\n  tag_20\n  jump\t// in\ntag_21:\n  pop\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2079:2081  18 */\n  0x12\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2067:2076  _decimals */\n  0x05\n  0x00\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2067:2081  _decimals = 18 */\n  0x0100\n  exp\n  dup2\n  sload\n  dup2\n  0xff\n  mul\n  not\n  and\n  swap1\n  dup4\n  0xff\n  and\n  mul\n  or\n  swap1\n  sstore\n  pop\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1950:2088  constructor (string memory name_, string memory symbol_) {... */\n  pop\n  pop\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1313:10780  contract ERC20 is Context, IERC20 {... */\n  jump(tag_22)\ntag_20:\n  dup3\n  dup1\n  sload\n  0x01\n  dup2\n  0x01\n  and\n  iszero\n  0x0100\n  mul\n  sub\n  and\n  0x02\n  swap1\n  div\n  swap1\n  0x00\n  mstore\n  keccak256(0x00, 0x20)\n  swap1\n  0x1f\n  add\n  0x20\n  swap1\n  div\n  dup2\n  add\n  swap3\n  dup3\n  tag_24\n  jumpi\n  0x00\n  dup6\n  sstore\n  jump(tag_23)\ntag_24:\n  dup3\n  0x1f\n  lt\n  tag_25\n  jumpi\n  dup1\n  mload\n  not(0xff)\n  and\n  dup4\n  dup1\n  add\n  or\n  dup6\n  sstore\n  jump(tag_23)\ntag_25:\n  dup3\n  dup1\n  add\n  0x01\n  add\n  dup6\n  sstore\n  dup3\n  iszero\n  tag_23\n  jumpi\n  swap2\n  dup3\n  add\ntag_26:\n  dup3\n  dup2\n  gt\n  iszero\n  tag_27\n  jumpi\n  dup3\n  mload\n  dup3\n  sstore\n  swap2\n  0x20\n  add\n  swap2\n  swap1\n  0x01\n  add\n  swap1\n  jump(tag_26)\ntag_27:\ntag_23:\n  pop\n  swap1\n  pop\n  tag_28\n  swap2\n  swap1\n  tag_29\n  jump\t// in\ntag_28:\n  pop\n  swap1\n  jump\t// out\ntag_29:\ntag_30:\n  dup1\n  dup3\n  gt\n  iszero\n  tag_31\n  jumpi\n  0x00\n  dup2\n  0x00\n  swap1\n  sstore\n  pop\n  0x01\n  add\n  jump(tag_30)\ntag_31:\n  pop\n  swap1\n  jump\t// out\ntag_22:\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1313:10780  contract ERC20 is Context, IERC20 {... */\n      mstore(0x40, 0x80)\n      callvalue\n      dup1\n      iszero\n      tag_1\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_1:\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x39509351\n      gt\n      tag_14\n      jumpi\n      dup1\n      0x39509351\n      eq\n      tag_8\n      jumpi\n      dup1\n      0x70a08231\n      eq\n      tag_9\n      jumpi\n      dup1\n      0x95d89b41\n      eq\n      tag_10\n      jumpi\n      dup1\n      0xa457c2d7\n      eq\n      tag_11\n      jumpi\n      dup1\n      0xa9059cbb\n      eq\n      tag_12\n      jumpi\n      dup1\n      0xdd62ed3e\n      eq\n      tag_13\n      jumpi\n      jump(tag_2)\n    tag_14:\n      dup1\n      0x06fdde03\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x095ea7b3\n      eq\n      tag_4\n      jumpi\n      dup1\n      0x18160ddd\n      eq\n      tag_5\n      jumpi\n      dup1\n      0x23b872dd\n      eq\n      tag_6\n      jumpi\n      dup1\n      0x313ce567\n      eq\n      tag_7\n      jumpi\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2153:2242  function name() public view virtual returns (string memory) {... */\n    tag_3:\n      tag_15\n      tag_16\n      jump\t// in\n    tag_15:\n      mload(0x40)\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      dup4\n      dup2\n      dup2\n      mload\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      dup1\n      mload\n      swap1\n      0x20\n      add\n      swap1\n      dup1\n      dup4\n      dup4\n      0x00\n    tag_17:\n      dup4\n      dup2\n      lt\n      iszero\n      tag_19\n      jumpi\n      dup1\n      dup3\n      add\n      mload\n      dup2\n      dup5\n      add\n      mstore\n      0x20\n      dup2\n      add\n      swap1\n      pop\n      jump(tag_17)\n    tag_19:\n      pop\n      pop\n      pop\n      pop\n      swap1\n      pop\n      swap1\n      dup2\n      add\n      swap1\n      0x1f\n      and\n      dup1\n      iszero\n      tag_20\n      jumpi\n      dup1\n      dup3\n      sub\n      dup1\n      mload\n      0x01\n      dup4\n      0x20\n      sub\n      0x0100\n      exp\n      sub\n      not\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n    tag_20:\n      pop\n      swap3\n      pop\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4229:4395  function approve(address spender, uint256 amount) public virtual override returns (bool) {... */\n    tag_4:\n      tag_21\n      0x04\n      dup1\n      calldatasize\n      sub\n      0x40\n      dup2\n      lt\n      iszero\n      tag_22\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_22:\n      dup2\n      add\n      swap1\n      dup1\n      dup1\n      calldataload\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      dup1\n      calldataload\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      pop\n      pop\n      pop\n      tag_23\n      jump\t// in\n    tag_21:\n      mload(0x40)\n      dup1\n      dup3\n      iszero\n      iszero\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3220:3326  function totalSupply() public view virtual override returns (uint256) {... */\n    tag_5:\n      tag_24\n      tag_25\n      jump\t// in\n    tag_24:\n      mload(0x40)\n      dup1\n      dup3\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4862:5179  function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {... */\n    tag_6:\n      tag_26\n      0x04\n      dup1\n      calldatasize\n      sub\n      0x60\n      dup2\n      lt\n      iszero\n      tag_27\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_27:\n      dup2\n      add\n      swap1\n      dup1\n      dup1\n      calldataload\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      dup1\n      calldataload\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      dup1\n      calldataload\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      pop\n      pop\n      pop\n      tag_28\n      jump\t// in\n    tag_26:\n      mload(0x40)\n      dup1\n      dup3\n      iszero\n      iszero\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3071:3160  function decimals() public view virtual returns (uint8) {... */\n    tag_7:\n      tag_29\n      tag_30\n      jump\t// in\n    tag_29:\n      mload(0x40)\n      dup1\n      dup3\n      0xff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5574:5789  function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {... */\n    tag_8:\n      tag_31\n      0x04\n      dup1\n      calldatasize\n      sub\n      0x40\n      dup2\n      lt\n      iszero\n      tag_32\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_32:\n      dup2\n      add\n      swap1\n      dup1\n      dup1\n      calldataload\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      dup1\n      calldataload\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      pop\n      pop\n      pop\n      tag_33\n      jump\t// in\n    tag_31:\n      mload(0x40)\n      dup1\n      dup3\n      iszero\n      iszero\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3384:3509  function balanceOf(address account) public view virtual override returns (uint256) {... */\n    tag_9:\n      tag_34\n      0x04\n      dup1\n      calldatasize\n      sub\n      0x20\n      dup2\n      lt\n      iszero\n      tag_35\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_35:\n      dup2\n      add\n      swap1\n      dup1\n      dup1\n      calldataload\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      pop\n      pop\n      pop\n      tag_36\n      jump\t// in\n    tag_34:\n      mload(0x40)\n      dup1\n      dup3\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2355:2448  function symbol() public view virtual returns (string memory) {... */\n    tag_10:\n      tag_37\n      tag_38\n      jump\t// in\n    tag_37:\n      mload(0x40)\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      dup4\n      dup2\n      dup2\n      mload\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      dup1\n      mload\n      swap1\n      0x20\n      add\n      swap1\n      dup1\n      dup4\n      dup4\n      0x00\n    tag_39:\n      dup4\n      dup2\n      lt\n      iszero\n      tag_41\n      jumpi\n      dup1\n      dup3\n      add\n      mload\n      dup2\n      dup5\n      add\n      mstore\n      0x20\n      dup2\n      add\n      swap1\n      pop\n      jump(tag_39)\n    tag_41:\n      pop\n      pop\n      pop\n      pop\n      swap1\n      pop\n      swap1\n      dup2\n      add\n      swap1\n      0x1f\n      and\n      dup1\n      iszero\n      tag_42\n      jumpi\n      dup1\n      dup3\n      sub\n      dup1\n      mload\n      0x01\n      dup4\n      0x20\n      sub\n      0x0100\n      exp\n      sub\n      not\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n    tag_42:\n      pop\n      swap3\n      pop\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6276:6542  function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {... */\n    tag_11:\n      tag_43\n      0x04\n      dup1\n      calldatasize\n      sub\n      0x40\n      dup2\n      lt\n      iszero\n      tag_44\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_44:\n      dup2\n      add\n      swap1\n      dup1\n      dup1\n      calldataload\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      dup1\n      calldataload\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      pop\n      pop\n      pop\n      tag_45\n      jump\t// in\n    tag_43:\n      mload(0x40)\n      dup1\n      dup3\n      iszero\n      iszero\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3712:3884  function transfer(address recipient, uint256 amount) public virtual override returns (bool) {... */\n    tag_12:\n      tag_46\n      0x04\n      dup1\n      calldatasize\n      sub\n      0x40\n      dup2\n      lt\n      iszero\n      tag_47\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_47:\n      dup2\n      add\n      swap1\n      dup1\n      dup1\n      calldataload\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      dup1\n      calldataload\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      pop\n      pop\n      pop\n      tag_48\n      jump\t// in\n    tag_46:\n      mload(0x40)\n      dup1\n      dup3\n      iszero\n      iszero\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3942:4091  function allowance(address owner, address spender) public view virtual override returns (uint256) {... */\n    tag_13:\n      tag_49\n      0x04\n      dup1\n      calldatasize\n      sub\n      0x40\n      dup2\n      lt\n      iszero\n      tag_50\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_50:\n      dup2\n      add\n      swap1\n      dup1\n      dup1\n      calldataload\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      dup1\n      calldataload\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      pop\n      pop\n      pop\n      tag_51\n      jump\t// in\n    tag_49:\n      mload(0x40)\n      dup1\n      dup3\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2153:2242  function name() public view virtual returns (string memory) {... */\n    tag_16:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2198:2211  string memory */\n      0x60\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2230:2235  _name */\n      0x03\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2223:2235  return _name */\n      dup1\n      sload\n      0x01\n      dup2\n      0x01\n      and\n      iszero\n      0x0100\n      mul\n      sub\n      and\n      0x02\n      swap1\n      div\n      dup1\n      0x1f\n      add\n      0x20\n      dup1\n      swap2\n      div\n      mul\n      0x20\n      add\n      mload(0x40)\n      swap1\n      dup2\n      add\n      0x40\n      mstore\n      dup1\n      swap3\n      swap2\n      swap1\n      dup2\n      dup2\n      mstore\n      0x20\n      add\n      dup3\n      dup1\n      sload\n      0x01\n      dup2\n      0x01\n      and\n      iszero\n      0x0100\n      mul\n      sub\n      and\n      0x02\n      swap1\n      div\n      dup1\n      iszero\n      tag_53\n      jumpi\n      dup1\n      0x1f\n      lt\n      tag_54\n      jumpi\n      0x0100\n      dup1\n      dup4\n      sload\n      div\n      mul\n      dup4\n      mstore\n      swap2\n      0x20\n      add\n      swap2\n      jump(tag_53)\n    tag_54:\n      dup3\n      add\n      swap2\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      swap1\n    tag_55:\n      dup2\n      sload\n      dup2\n      mstore\n      swap1\n      0x01\n      add\n      swap1\n      0x20\n      add\n      dup1\n      dup4\n      gt\n      tag_55\n      jumpi\n      dup3\n      swap1\n      sub\n      0x1f\n      and\n      dup3\n      add\n      swap2\n    tag_53:\n      pop\n      pop\n      pop\n      pop\n      pop\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2153:2242  function name() public view virtual returns (string memory) {... */\n      swap1\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4229:4395  function approve(address spender, uint256 amount) public virtual override returns (bool) {... */\n    tag_23:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4312:4316  bool */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4328:4367  _approve(_msgSender(), spender, amount) */\n      tag_57\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4337:4349  _msgSender() */\n      tag_58\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4337:4347  _msgSender */\n      tag_59\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4337:4349  _msgSender() */\n      jump\t// in\n    tag_58:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4351:4358  spender */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4360:4366  amount */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4328:4336  _approve */\n      tag_60\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4328:4367  _approve(_msgSender(), spender, amount) */\n      jump\t// in\n    tag_57:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4384:4388  true */\n      0x01\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4377:4388  return true */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4229:4395  function approve(address spender, uint256 amount) public virtual override returns (bool) {... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3220:3326  function totalSupply() public view virtual override returns (uint256) {... */\n    tag_25:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3281:3288  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3307:3319  _totalSupply */\n      sload(0x02)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3300:3319  return _totalSupply */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3220:3326  function totalSupply() public view virtual override returns (uint256) {... */\n      swap1\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4862:5179  function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {... */\n    tag_28:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4968:4972  bool */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4984:5020  _transfer(sender, recipient, amount) */\n      tag_63\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4994:5000  sender */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5002:5011  recipient */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5013:5019  amount */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4984:4993  _transfer */\n      tag_64\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4984:5020  _transfer(sender, recipient, amount) */\n      jump\t// in\n    tag_63:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5030:5151  _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\")) */\n      tag_65\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5039:5045  sender */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5047:5059  _msgSender() */\n      tag_66\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5047:5057  _msgSender */\n      tag_59\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5047:5059  _msgSender() */\n      jump\t// in\n    tag_66:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5061:5150  _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\") */\n      tag_67\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5099:5105  amount */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5061:5150  _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\") */\n      mload(0x40)\n      dup1\n      0x60\n      add\n      0x40\n      mstore\n      dup1\n      0x28\n      dup2\n      mstore\n      0x20\n      add\n      data_974d1b4421da69cc60b481194f0dad36a5bb4e23da810da7a7fb30cdba178330\n      0x28\n      swap2\n      codecopy\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5061:5072  _allowances */\n      0x01\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5061:5080  _allowances[sender] */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5073:5079  sender */\n      dup12\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5061:5080  _allowances[sender] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5061:5094  _allowances[sender][_msgSender()] */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5081:5093  _msgSender() */\n      tag_68\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5081:5091  _msgSender */\n      tag_59\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5081:5093  _msgSender() */\n      jump\t// in\n    tag_68:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5061:5094  _allowances[sender][_msgSender()] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      sload\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5061:5098  _allowances[sender][_msgSender()].sub */\n      tag_69\n      swap1\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5061:5150  _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\") */\n      swap3\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_67:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5030:5038  _approve */\n      tag_60\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5030:5151  _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\")) */\n      jump\t// in\n    tag_65:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5168:5172  true */\n      0x01\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5161:5172  return true */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4862:5179  function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {... */\n      swap4\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3071:3160  function decimals() public view virtual returns (uint8) {... */\n    tag_30:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3120:3125  uint8 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3144:3153  _decimals */\n      0x05\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xff\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3137:3153  return _decimals */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3071:3160  function decimals() public view virtual returns (uint8) {... */\n      swap1\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5574:5789  function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {... */\n    tag_33:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5662:5666  bool */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5678:5761  _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue)) */\n      tag_72\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5687:5699  _msgSender() */\n      tag_73\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5687:5697  _msgSender */\n      tag_59\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5687:5699  _msgSender() */\n      jump\t// in\n    tag_73:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5701:5708  spender */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5710:5760  _allowances[_msgSender()][spender].add(addedValue) */\n      tag_74\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5749:5759  addedValue */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5710:5721  _allowances */\n      0x01\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5710:5735  _allowances[_msgSender()] */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5722:5734  _msgSender() */\n      tag_75\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5722:5732  _msgSender */\n      tag_59\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5722:5734  _msgSender() */\n      jump\t// in\n    tag_75:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5710:5735  _allowances[_msgSender()] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5710:5744  _allowances[_msgSender()][spender] */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5736:5743  spender */\n      dup10\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5710:5744  _allowances[_msgSender()][spender] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      sload\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5710:5748  _allowances[_msgSender()][spender].add */\n      tag_76\n      swap1\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5710:5760  _allowances[_msgSender()][spender].add(addedValue) */\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_74:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5678:5686  _approve */\n      tag_60\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5678:5761  _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue)) */\n      jump\t// in\n    tag_72:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5778:5782  true */\n      0x01\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5771:5782  return true */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5574:5789  function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3384:3509  function balanceOf(address account) public view virtual override returns (uint256) {... */\n    tag_36:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3458:3465  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3484:3493  _balances */\n      dup1\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3484:3502  _balances[account] */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3494:3501  account */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3484:3502  _balances[account] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      sload\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3477:3502  return _balances[account] */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3384:3509  function balanceOf(address account) public view virtual override returns (uint256) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2355:2448  function symbol() public view virtual returns (string memory) {... */\n    tag_38:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2402:2415  string memory */\n      0x60\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2434:2441  _symbol */\n      0x04\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2427:2441  return _symbol */\n      dup1\n      sload\n      0x01\n      dup2\n      0x01\n      and\n      iszero\n      0x0100\n      mul\n      sub\n      and\n      0x02\n      swap1\n      div\n      dup1\n      0x1f\n      add\n      0x20\n      dup1\n      swap2\n      div\n      mul\n      0x20\n      add\n      mload(0x40)\n      swap1\n      dup2\n      add\n      0x40\n      mstore\n      dup1\n      swap3\n      swap2\n      swap1\n      dup2\n      dup2\n      mstore\n      0x20\n      add\n      dup3\n      dup1\n      sload\n      0x01\n      dup2\n      0x01\n      and\n      iszero\n      0x0100\n      mul\n      sub\n      and\n      0x02\n      swap1\n      div\n      dup1\n      iszero\n      tag_79\n      jumpi\n      dup1\n      0x1f\n      lt\n      tag_80\n      jumpi\n      0x0100\n      dup1\n      dup4\n      sload\n      div\n      mul\n      dup4\n      mstore\n      swap2\n      0x20\n      add\n      swap2\n      jump(tag_79)\n    tag_80:\n      dup3\n      add\n      swap2\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      swap1\n    tag_81:\n      dup2\n      sload\n      dup2\n      mstore\n      swap1\n      0x01\n      add\n      swap1\n      0x20\n      add\n      dup1\n      dup4\n      gt\n      tag_81\n      jumpi\n      dup3\n      swap1\n      sub\n      0x1f\n      and\n      dup3\n      add\n      swap2\n    tag_79:\n      pop\n      pop\n      pop\n      pop\n      pop\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2355:2448  function symbol() public view virtual returns (string memory) {... */\n      swap1\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6276:6542  function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {... */\n    tag_45:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6369:6373  bool */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6385:6514  _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\")) */\n      tag_83\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6394:6406  _msgSender() */\n      tag_84\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6394:6404  _msgSender */\n      tag_59\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6394:6406  _msgSender() */\n      jump\t// in\n    tag_84:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6408:6415  spender */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6417:6513  _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\") */\n      tag_85\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6456:6471  subtractedValue */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6417:6513  _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\") */\n      mload(0x40)\n      dup1\n      0x60\n      add\n      0x40\n      mstore\n      dup1\n      0x25\n      dup2\n      mstore\n      0x20\n      add\n      data_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8\n      0x25\n      swap2\n      codecopy\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6417:6428  _allowances */\n      0x01\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6417:6442  _allowances[_msgSender()] */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6429:6441  _msgSender() */\n      tag_86\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6429:6439  _msgSender */\n      tag_59\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6429:6441  _msgSender() */\n      jump\t// in\n    tag_86:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6417:6442  _allowances[_msgSender()] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6417:6451  _allowances[_msgSender()][spender] */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6443:6450  spender */\n      dup11\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6417:6451  _allowances[_msgSender()][spender] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      sload\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6417:6455  _allowances[_msgSender()][spender].sub */\n      tag_69\n      swap1\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6417:6513  _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\") */\n      swap3\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_85:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6385:6393  _approve */\n      tag_60\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6385:6514  _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\")) */\n      jump\t// in\n    tag_83:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6531:6535  true */\n      0x01\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6524:6535  return true */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6276:6542  function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3712:3884  function transfer(address recipient, uint256 amount) public virtual override returns (bool) {... */\n    tag_48:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3798:3802  bool */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3814:3856  _transfer(_msgSender(), recipient, amount) */\n      tag_88\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3824:3836  _msgSender() */\n      tag_89\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3824:3834  _msgSender */\n      tag_59\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3824:3836  _msgSender() */\n      jump\t// in\n    tag_89:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3838:3847  recipient */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3849:3855  amount */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3814:3823  _transfer */\n      tag_64\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3814:3856  _transfer(_msgSender(), recipient, amount) */\n      jump\t// in\n    tag_88:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3873:3877  true */\n      0x01\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3866:3877  return true */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3712:3884  function transfer(address recipient, uint256 amount) public virtual override returns (bool) {... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3942:4091  function allowance(address owner, address spender) public view virtual override returns (uint256) {... */\n    tag_51:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4031:4038  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4057:4068  _allowances */\n      0x01\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4057:4075  _allowances[owner] */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4069:4074  owner */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4057:4075  _allowances[owner] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4057:4084  _allowances[owner][spender] */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4076:4083  spender */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4057:4084  _allowances[owner][spender] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      sload\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4050:4084  return _allowances[owner][spender] */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3942:4091  function allowance(address owner, address spender) public view virtual override returns (uint256) {... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/Context.sol\":598:702  function _msgSender() internal view virtual returns (address payable) {... */\n    tag_59:\n        /* \"@openzeppelin/contracts/utils/Context.sol\":651:666  address payable */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Context.sol\":685:695  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/utils/Context.sol\":678:695  return msg.sender */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/Context.sol\":598:702  function _msgSender() internal view virtual returns (address payable) {... */\n      swap1\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9340:9680  function _approve(address owner, address spender, uint256 amount) internal virtual {... */\n    tag_60:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9458:9459  0 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9441:9460  owner != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9441:9446  owner */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9441:9460  owner != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n      iszero\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9433:9501  require(owner != address(0), \"ERC20: approve from the zero address\") */\n      tag_93\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      0x24\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      data_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208\n      0x24\n      swap2\n      codecopy\n      0x40\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_93:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9538:9539  0 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9519:9540  spender != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9519:9526  spender */\n      dup3\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9519:9540  spender != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n      iszero\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9511:9579  require(spender != address(0), \"ERC20: approve to the zero address\") */\n      tag_94\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      0x22\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      data_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029\n      0x22\n      swap2\n      codecopy\n      0x40\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_94:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9620:9626  amount */\n      dup1\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9590:9601  _allowances */\n      0x01\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9590:9608  _allowances[owner] */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9602:9607  owner */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9590:9608  _allowances[owner] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9590:9617  _allowances[owner][spender] */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9609:9616  spender */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9590:9617  _allowances[owner][spender] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9590:9626  _allowances[owner][spender] = amount */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9657:9664  spender */\n      dup2\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9641:9673  Approval(owner, spender, amount) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9650:9655  owner */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9641:9673  Approval(owner, spender, amount) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9666:9672  amount */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9641:9673  Approval(owner, spender, amount) */\n      mload(0x40)\n      dup1\n      dup3\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9340:9680  function _approve(address owner, address spender, uint256 amount) internal virtual {... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7016:7546  function _transfer(address sender, address recipient, uint256 amount) internal virtual {... */\n    tag_64:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7139:7140  0 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7121:7141  sender != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7121:7127  sender */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7121:7141  sender != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n      iszero\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7113:7183  require(sender != address(0), \"ERC20: transfer from the zero address\") */\n      tag_96\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      0x25\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      data_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea\n      0x25\n      swap2\n      codecopy\n      0x40\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_96:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7222:7223  0 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7201:7224  recipient != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7201:7210  recipient */\n      dup3\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7201:7224  recipient != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n      iszero\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7193:7264  require(recipient != address(0), \"ERC20: transfer to the zero address\") */\n      tag_97\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      0x23\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      data_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f\n      0x23\n      swap2\n      codecopy\n      0x40\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_97:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7275:7322  _beforeTokenTransfer(sender, recipient, amount) */\n      tag_98\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7296:7302  sender */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7304:7313  recipient */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7315:7321  amount */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7275:7295  _beforeTokenTransfer */\n      tag_99\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7275:7322  _beforeTokenTransfer(sender, recipient, amount) */\n      jump\t// in\n    tag_98:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7353:7424  _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\") */\n      tag_100\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7375:7381  amount */\n      dup2\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7353:7424  _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\") */\n      mload(0x40)\n      dup1\n      0x60\n      add\n      0x40\n      mstore\n      dup1\n      0x26\n      dup2\n      mstore\n      0x20\n      add\n      data_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6\n      0x26\n      swap2\n      codecopy\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7353:7362  _balances */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7353:7370  _balances[sender] */\n      dup1\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7363:7369  sender */\n      dup8\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7353:7370  _balances[sender] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      sload\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7353:7374  _balances[sender].sub */\n      tag_69\n      swap1\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7353:7424  _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\") */\n      swap3\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_100:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7333:7342  _balances */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7333:7350  _balances[sender] */\n      dup1\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7343:7349  sender */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7333:7350  _balances[sender] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7333:7424  _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\") */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7457:7489  _balances[recipient].add(amount) */\n      tag_101\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7482:7488  amount */\n      dup2\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7457:7466  _balances */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7457:7477  _balances[recipient] */\n      dup1\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7467:7476  recipient */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7457:7477  _balances[recipient] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      sload\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7457:7481  _balances[recipient].add */\n      tag_76\n      swap1\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7457:7489  _balances[recipient].add(amount) */\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_101:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7434:7443  _balances */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7434:7454  _balances[recipient] */\n      dup1\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7444:7453  recipient */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7434:7454  _balances[recipient] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7434:7489  _balances[recipient] = _balances[recipient].add(amount) */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7521:7530  recipient */\n      dup2\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7504:7539  Transfer(sender, recipient, amount) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7513:7519  sender */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7504:7539  Transfer(sender, recipient, amount) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7532:7538  amount */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7504:7539  Transfer(sender, recipient, amount) */\n      mload(0x40)\n      dup1\n      dup3\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7016:7546  function _transfer(address sender, address recipient, uint256 amount) internal virtual {... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":5424:5587  function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {... */\n    tag_69:\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":5510:5517  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":5542:5543  a */\n      dup4\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":5537:5538  b */\n      dup4\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":5537:5543  b <= a */\n      gt\n      iszero\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":5545:5557  errorMessage */\n      dup3\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":5529:5558  require(b <= a, errorMessage) */\n      swap1\n      tag_103\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      dup4\n      dup2\n      dup2\n      mload\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      dup1\n      mload\n      swap1\n      0x20\n      add\n      swap1\n      dup1\n      dup4\n      dup4\n      0x00\n    tag_104:\n      dup4\n      dup2\n      lt\n      iszero\n      tag_106\n      jumpi\n      dup1\n      dup3\n      add\n      mload\n      dup2\n      dup5\n      add\n      mstore\n      0x20\n      dup2\n      add\n      swap1\n      pop\n      jump(tag_104)\n    tag_106:\n      pop\n      pop\n      pop\n      pop\n      swap1\n      pop\n      swap1\n      dup2\n      add\n      swap1\n      0x1f\n      and\n      dup1\n      iszero\n      tag_107\n      jumpi\n      dup1\n      dup3\n      sub\n      dup1\n      mload\n      0x01\n      dup4\n      0x20\n      sub\n      0x0100\n      exp\n      sub\n      not\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n    tag_107:\n      pop\n      swap3\n      pop\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_103:\n      pop\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":5579:5580  b */\n      dup3\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":5575:5576  a */\n      dup5\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":5575:5580  a - b */\n      sub\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":5568:5580  return a - b */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":5424:5587  function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {... */\n      swap4\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":2682:2857  function add(uint256 a, uint256 b) internal pure returns (uint256) {... */\n    tag_76:\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":2740:2747  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":2759:2768  uint256 c */\n      dup1\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":2775:2776  b */\n      dup3\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":2771:2772  a */\n      dup5\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":2771:2776  a + b */\n      add\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":2759:2776  uint256 c = a + b */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":2799:2800  a */\n      dup4\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":2794:2795  c */\n      dup2\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":2794:2800  c >= a */\n      lt\n      iszero\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":2786:2832  require(c >= a, \"SafeMath: addition overflow\") */\n      tag_109\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      0x1b\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      0x536166654d6174683a206164646974696f6e206f766572666c6f770000000000\n      dup2\n      mstore\n      pop\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_109:\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":2849:2850  c */\n      dup1\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":2842:2850  return c */\n      swap2\n      pop\n      pop\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":2682:2857  function add(uint256 a, uint256 b) internal pure returns (uint256) {... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10686:10778  function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { } */\n    tag_99:\n      pop\n      pop\n      pop\n      jump\t// out\n    stop\n    data_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f 45524332303a207472616e7366657220746f20746865207a65726f2061646472657373\n    data_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029 45524332303a20617070726f766520746f20746865207a65726f2061646472657373\n    data_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6 45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e6365\n    data_974d1b4421da69cc60b481194f0dad36a5bb4e23da810da7a7fb30cdba178330 45524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e6365\n    data_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea 45524332303a207472616e736665722066726f6d20746865207a65726f2061646472657373\n    data_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208 45524332303a20617070726f76652066726f6d20746865207a65726f2061646472657373\n    data_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8 45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726f\n\n    auxdata: 0xa2646970667358221220893f8931172667f95a5793784509c38d064ffbacb71651357d503091f9fc5f8364736f6c63430007060033\n}\n",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "60806040523480156200001157600080fd5b50604051620013af380380620013af833981810160405260408110156200003757600080fd5b81019080805160405193929190846401000000008211156200005857600080fd5b838201915060208201858111156200006f57600080fd5b82518660018202830111640100000000821117156200008d57600080fd5b8083526020830192505050908051906020019080838360005b83811015620000c3578082015181840152602081019050620000a6565b50505050905090810190601f168015620000f15780820380516001836020036101000a031916815260200191505b50604052602001805160405193929190846401000000008211156200011557600080fd5b838201915060208201858111156200012c57600080fd5b82518660018202830111640100000000821117156200014a57600080fd5b8083526020830192505050908051906020019080838360005b838110156200018057808201518184015260208101905062000163565b50505050905090810190601f168015620001ae5780820380516001836020036101000a031916815260200191505b506040525050508160039080519060200190620001cd9291906200020b565b508060049080519060200190620001e69291906200020b565b506012600560006101000a81548160ff021916908360ff1602179055505050620002c1565b828054600181600116156101000203166002900490600052602060002090601f0160209004810192826200024357600085556200028f565b82601f106200025e57805160ff19168380011785556200028f565b828001600101855582156200028f579182015b828111156200028e57825182559160200191906001019062000271565b5b5090506200029e9190620002a2565b5090565b5b80821115620002bd576000816000905550600101620002a3565b5090565b6110de80620002d16000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c80633950935111610071578063395093511461025857806370a08231146102bc57806395d89b4114610314578063a457c2d714610397578063a9059cbb146103fb578063dd62ed3e1461045f576100a9565b806306fdde03146100ae578063095ea7b31461013157806318160ddd1461019557806323b872dd146101b3578063313ce56714610237575b600080fd5b6100b66104d7565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156100f65780820151818401526020810190506100db565b50505050905090810190601f1680156101235780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61017d6004803603604081101561014757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610579565b60405180821515815260200191505060405180910390f35b61019d610597565b6040518082815260200191505060405180910390f35b61021f600480360360608110156101c957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506105a1565b60405180821515815260200191505060405180910390f35b61023f61067a565b604051808260ff16815260200191505060405180910390f35b6102a46004803603604081101561026e57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610691565b60405180821515815260200191505060405180910390f35b6102fe600480360360208110156102d257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610744565b6040518082815260200191505060405180910390f35b61031c61078c565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561035c578082015181840152602081019050610341565b50505050905090810190601f1680156103895780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6103e3600480360360408110156103ad57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061082e565b60405180821515815260200191505060405180910390f35b6104476004803603604081101561041157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506108fb565b60405180821515815260200191505060405180910390f35b6104c16004803603604081101561047557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610919565b6040518082815260200191505060405180910390f35b606060038054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561056f5780601f106105445761010080835404028352916020019161056f565b820191906000526020600020905b81548152906001019060200180831161055257829003601f168201915b5050505050905090565b600061058d6105866109a0565b84846109a8565b6001905092915050565b6000600254905090565b60006105ae848484610b9f565b61066f846105ba6109a0565b61066a8560405180606001604052806028815260200161101360289139600160008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006106206109a0565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610e609092919063ffffffff16565b6109a8565b600190509392505050565b6000600560009054906101000a900460ff16905090565b600061073a61069e6109a0565b8461073585600160006106af6109a0565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610f1a90919063ffffffff16565b6109a8565b6001905092915050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b606060048054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156108245780601f106107f957610100808354040283529160200191610824565b820191906000526020600020905b81548152906001019060200180831161080757829003601f168201915b5050505050905090565b60006108f161083b6109a0565b846108ec8560405180606001604052806025815260200161108460259139600160006108656109a0565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610e609092919063ffffffff16565b6109a8565b6001905092915050565b600061090f6109086109a0565b8484610b9f565b6001905092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610a2e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260248152602001806110606024913960400191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610ab4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526022815260200180610fcb6022913960400191505060405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040518082815260200191505060405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610c25576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602581526020018061103b6025913960400191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610cab576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526023815260200180610fa86023913960400191505060405180910390fd5b610cb6838383610fa2565b610d2181604051806060016040528060268152602001610fed602691396000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610e609092919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610db4816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610f1a90919063ffffffff16565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a3505050565b6000838311158290610f0d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610ed2578082015181840152602081019050610eb7565b50505050905090810190601f168015610eff5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5082840390509392505050565b600080828401905083811015610f98576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f536166654d6174683a206164646974696f6e206f766572666c6f77000000000081525060200191505060405180910390fd5b8091505092915050565b50505056fe45524332303a207472616e7366657220746f20746865207a65726f206164647265737345524332303a20617070726f766520746f20746865207a65726f206164647265737345524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e636545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636545524332303a207472616e736665722066726f6d20746865207a65726f206164647265737345524332303a20617070726f76652066726f6d20746865207a65726f206164647265737345524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa2646970667358221220893f8931172667f95a5793784509c38d064ffbacb71651357d503091f9fc5f8364736f6c63430007060033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x13AF CODESIZE SUB DUP1 PUSH3 0x13AF DUP4 CODECOPY DUP2 DUP2 ADD PUSH1 0x40 MSTORE PUSH1 0x40 DUP2 LT ISZERO PUSH3 0x37 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD PUSH1 0x40 MLOAD SWAP4 SWAP3 SWAP2 SWAP1 DUP5 PUSH5 0x100000000 DUP3 GT ISZERO PUSH3 0x58 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP3 ADD DUP6 DUP2 GT ISZERO PUSH3 0x6F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MLOAD DUP7 PUSH1 0x1 DUP3 MUL DUP4 ADD GT PUSH5 0x100000000 DUP3 GT OR ISZERO PUSH3 0x8D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP3 POP POP POP SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH3 0xC3 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH3 0xA6 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH3 0xF1 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP PUSH1 0x40 MSTORE PUSH1 0x20 ADD DUP1 MLOAD PUSH1 0x40 MLOAD SWAP4 SWAP3 SWAP2 SWAP1 DUP5 PUSH5 0x100000000 DUP3 GT ISZERO PUSH3 0x115 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP3 ADD DUP6 DUP2 GT ISZERO PUSH3 0x12C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MLOAD DUP7 PUSH1 0x1 DUP3 MUL DUP4 ADD GT PUSH5 0x100000000 DUP3 GT OR ISZERO PUSH3 0x14A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP3 POP POP POP SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH3 0x180 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH3 0x163 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH3 0x1AE JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP PUSH1 0x40 MSTORE POP POP POP DUP2 PUSH1 0x3 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH3 0x1CD SWAP3 SWAP2 SWAP1 PUSH3 0x20B JUMP JUMPDEST POP DUP1 PUSH1 0x4 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH3 0x1E6 SWAP3 SWAP2 SWAP1 PUSH3 0x20B JUMP JUMPDEST POP PUSH1 0x12 PUSH1 0x5 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 PUSH1 0xFF AND MUL OR SWAP1 SSTORE POP POP POP PUSH3 0x2C1 JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH3 0x243 JUMPI PUSH1 0x0 DUP6 SSTORE PUSH3 0x28F JUMP JUMPDEST DUP3 PUSH1 0x1F LT PUSH3 0x25E JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH3 0x28F JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH3 0x28F JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH3 0x28E JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH3 0x271 JUMP JUMPDEST JUMPDEST POP SWAP1 POP PUSH3 0x29E SWAP2 SWAP1 PUSH3 0x2A2 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH3 0x2BD JUMPI PUSH1 0x0 DUP2 PUSH1 0x0 SWAP1 SSTORE POP PUSH1 0x1 ADD PUSH3 0x2A3 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 0x10DE DUP1 PUSH3 0x2D1 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xA9 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x39509351 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0x258 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x2BC JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x314 JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x397 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x3FB JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x45F JUMPI PUSH2 0xA9 JUMP JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0xAE JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x131 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x195 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x1B3 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x237 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB6 PUSH2 0x4D7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xF6 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0xDB JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x123 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x17D PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x147 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x579 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x19D PUSH2 0x597 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x21F PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x60 DUP2 LT ISZERO PUSH2 0x1C9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x5A1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x23F PUSH2 0x67A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH1 0xFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2A4 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x26E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x691 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2FE PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x2D2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x744 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x31C PUSH2 0x78C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x35C JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x341 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x389 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x3E3 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x3AD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x82E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x447 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x411 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x8FB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x4C1 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x475 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x919 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV DUP1 ISZERO PUSH2 0x56F JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x544 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x56F JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x552 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x58D PUSH2 0x586 PUSH2 0x9A0 JUMP JUMPDEST DUP5 DUP5 PUSH2 0x9A8 JUMP JUMPDEST PUSH1 0x1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5AE DUP5 DUP5 DUP5 PUSH2 0xB9F JUMP JUMPDEST PUSH2 0x66F DUP5 PUSH2 0x5BA PUSH2 0x9A0 JUMP JUMPDEST PUSH2 0x66A DUP6 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x28 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1013 PUSH1 0x28 SWAP2 CODECOPY PUSH1 0x1 PUSH1 0x0 DUP12 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x620 PUSH2 0x9A0 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0xE60 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x9A8 JUMP JUMPDEST PUSH1 0x1 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x5 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x73A PUSH2 0x69E PUSH2 0x9A0 JUMP JUMPDEST DUP5 PUSH2 0x735 DUP6 PUSH1 0x1 PUSH1 0x0 PUSH2 0x6AF PUSH2 0x9A0 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0xF1A SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x9A8 JUMP JUMPDEST PUSH1 0x1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x4 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV DUP1 ISZERO PUSH2 0x824 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x7F9 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x824 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x807 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x8F1 PUSH2 0x83B PUSH2 0x9A0 JUMP JUMPDEST DUP5 PUSH2 0x8EC DUP6 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x25 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1084 PUSH1 0x25 SWAP2 CODECOPY PUSH1 0x1 PUSH1 0x0 PUSH2 0x865 PUSH2 0x9A0 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP11 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0xE60 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x9A8 JUMP JUMPDEST PUSH1 0x1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x90F PUSH2 0x908 PUSH2 0x9A0 JUMP JUMPDEST DUP5 DUP5 PUSH2 0xB9F JUMP JUMPDEST PUSH1 0x1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xA2E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x24 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x1060 PUSH1 0x24 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xAB4 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x22 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0xFCB PUSH1 0x22 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 DUP4 PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xC25 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x25 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x103B PUSH1 0x25 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xCAB JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x23 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0xFA8 PUSH1 0x23 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xCB6 DUP4 DUP4 DUP4 PUSH2 0xFA2 JUMP JUMPDEST PUSH2 0xD21 DUP2 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x26 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xFED PUSH1 0x26 SWAP2 CODECOPY PUSH1 0x0 DUP1 DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0xE60 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x0 DUP1 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH2 0xDB4 DUP2 PUSH1 0x0 DUP1 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0xF1A SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x0 DUP1 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP4 PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 DUP4 GT ISZERO DUP3 SWAP1 PUSH2 0xF0D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xED2 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0xEB7 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0xEFF JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP DUP3 DUP5 SUB SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP5 ADD SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0xF98 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1B DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x536166654D6174683A206164646974696F6E206F766572666C6F770000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST POP POP POP JUMP INVALID GASLIMIT MSTORE NUMBER ORIGIN ADDRESS GASPRICE KECCAK256 PUSH21 0x72616E7366657220746F20746865207A65726F2061 PUSH5 0x6472657373 GASLIMIT MSTORE NUMBER ORIGIN ADDRESS GASPRICE KECCAK256 PUSH2 0x7070 PUSH19 0x6F766520746F20746865207A65726F20616464 PUSH19 0x65737345524332303A207472616E7366657220 PUSH2 0x6D6F PUSH22 0x6E7420657863656564732062616C616E636545524332 ADDRESS GASPRICE KECCAK256 PUSH21 0x72616E7366657220616D6F756E7420657863656564 PUSH20 0x20616C6C6F77616E636545524332303A20747261 PUSH15 0x736665722066726F6D20746865207A PUSH6 0x726F20616464 PUSH19 0x65737345524332303A20617070726F76652066 PUSH19 0x6F6D20746865207A65726F2061646472657373 GASLIMIT MSTORE NUMBER ORIGIN ADDRESS GASPRICE KECCAK256 PUSH5 0x6563726561 PUSH20 0x656420616C6C6F77616E63652062656C6F77207A PUSH6 0x726FA2646970 PUSH7 0x7358221220893F DUP10 BALANCE OR 0x26 PUSH8 0xF95A5793784509C3 DUP14 MOD 0x4F 0xFB 0xAC 0xB7 AND MLOAD CALLDATALOAD PUSH30 0x503091F9FC5F8364736F6C63430007060033000000000000000000000000 ",
							"sourceMap": "1313:9467:2:-:0;;;1950:138;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2025:5;2017;:13;;;;;;;;;;;;:::i;:::-;;2050:7;2040;:17;;;;;;;;;;;;:::i;:::-;;2079:2;2067:9;;:14;;;;;;;;;;;;;;;;;;1950:138;;1313:9467;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b50600436106100a95760003560e01c80633950935111610071578063395093511461025857806370a08231146102bc57806395d89b4114610314578063a457c2d714610397578063a9059cbb146103fb578063dd62ed3e1461045f576100a9565b806306fdde03146100ae578063095ea7b31461013157806318160ddd1461019557806323b872dd146101b3578063313ce56714610237575b600080fd5b6100b66104d7565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156100f65780820151818401526020810190506100db565b50505050905090810190601f1680156101235780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61017d6004803603604081101561014757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610579565b60405180821515815260200191505060405180910390f35b61019d610597565b6040518082815260200191505060405180910390f35b61021f600480360360608110156101c957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506105a1565b60405180821515815260200191505060405180910390f35b61023f61067a565b604051808260ff16815260200191505060405180910390f35b6102a46004803603604081101561026e57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610691565b60405180821515815260200191505060405180910390f35b6102fe600480360360208110156102d257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610744565b6040518082815260200191505060405180910390f35b61031c61078c565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561035c578082015181840152602081019050610341565b50505050905090810190601f1680156103895780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6103e3600480360360408110156103ad57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061082e565b60405180821515815260200191505060405180910390f35b6104476004803603604081101561041157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506108fb565b60405180821515815260200191505060405180910390f35b6104c16004803603604081101561047557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610919565b6040518082815260200191505060405180910390f35b606060038054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561056f5780601f106105445761010080835404028352916020019161056f565b820191906000526020600020905b81548152906001019060200180831161055257829003601f168201915b5050505050905090565b600061058d6105866109a0565b84846109a8565b6001905092915050565b6000600254905090565b60006105ae848484610b9f565b61066f846105ba6109a0565b61066a8560405180606001604052806028815260200161101360289139600160008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006106206109a0565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610e609092919063ffffffff16565b6109a8565b600190509392505050565b6000600560009054906101000a900460ff16905090565b600061073a61069e6109a0565b8461073585600160006106af6109a0565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610f1a90919063ffffffff16565b6109a8565b6001905092915050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b606060048054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156108245780601f106107f957610100808354040283529160200191610824565b820191906000526020600020905b81548152906001019060200180831161080757829003601f168201915b5050505050905090565b60006108f161083b6109a0565b846108ec8560405180606001604052806025815260200161108460259139600160006108656109a0565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610e609092919063ffffffff16565b6109a8565b6001905092915050565b600061090f6109086109a0565b8484610b9f565b6001905092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610a2e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260248152602001806110606024913960400191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610ab4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526022815260200180610fcb6022913960400191505060405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040518082815260200191505060405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610c25576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602581526020018061103b6025913960400191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610cab576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526023815260200180610fa86023913960400191505060405180910390fd5b610cb6838383610fa2565b610d2181604051806060016040528060268152602001610fed602691396000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610e609092919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610db4816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610f1a90919063ffffffff16565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a3505050565b6000838311158290610f0d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610ed2578082015181840152602081019050610eb7565b50505050905090810190601f168015610eff5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5082840390509392505050565b600080828401905083811015610f98576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f536166654d6174683a206164646974696f6e206f766572666c6f77000000000081525060200191505060405180910390fd5b8091505092915050565b50505056fe45524332303a207472616e7366657220746f20746865207a65726f206164647265737345524332303a20617070726f766520746f20746865207a65726f206164647265737345524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e636545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636545524332303a207472616e736665722066726f6d20746865207a65726f206164647265737345524332303a20617070726f76652066726f6d20746865207a65726f206164647265737345524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa2646970667358221220893f8931172667f95a5793784509c38d064ffbacb71651357d503091f9fc5f8364736f6c63430007060033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xA9 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x39509351 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0x258 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x2BC JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x314 JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x397 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x3FB JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x45F JUMPI PUSH2 0xA9 JUMP JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0xAE JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x131 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x195 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x1B3 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x237 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB6 PUSH2 0x4D7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xF6 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0xDB JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x123 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x17D PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x147 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x579 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x19D PUSH2 0x597 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x21F PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x60 DUP2 LT ISZERO PUSH2 0x1C9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x5A1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x23F PUSH2 0x67A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH1 0xFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2A4 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x26E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x691 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2FE PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x2D2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x744 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x31C PUSH2 0x78C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x35C JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x341 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x389 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x3E3 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x3AD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x82E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x447 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x411 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x8FB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x4C1 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x475 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x919 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV DUP1 ISZERO PUSH2 0x56F JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x544 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x56F JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x552 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x58D PUSH2 0x586 PUSH2 0x9A0 JUMP JUMPDEST DUP5 DUP5 PUSH2 0x9A8 JUMP JUMPDEST PUSH1 0x1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5AE DUP5 DUP5 DUP5 PUSH2 0xB9F JUMP JUMPDEST PUSH2 0x66F DUP5 PUSH2 0x5BA PUSH2 0x9A0 JUMP JUMPDEST PUSH2 0x66A DUP6 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x28 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1013 PUSH1 0x28 SWAP2 CODECOPY PUSH1 0x1 PUSH1 0x0 DUP12 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x620 PUSH2 0x9A0 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0xE60 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x9A8 JUMP JUMPDEST PUSH1 0x1 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x5 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x73A PUSH2 0x69E PUSH2 0x9A0 JUMP JUMPDEST DUP5 PUSH2 0x735 DUP6 PUSH1 0x1 PUSH1 0x0 PUSH2 0x6AF PUSH2 0x9A0 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0xF1A SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x9A8 JUMP JUMPDEST PUSH1 0x1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x4 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV DUP1 ISZERO PUSH2 0x824 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x7F9 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x824 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x807 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x8F1 PUSH2 0x83B PUSH2 0x9A0 JUMP JUMPDEST DUP5 PUSH2 0x8EC DUP6 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x25 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1084 PUSH1 0x25 SWAP2 CODECOPY PUSH1 0x1 PUSH1 0x0 PUSH2 0x865 PUSH2 0x9A0 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP11 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0xE60 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x9A8 JUMP JUMPDEST PUSH1 0x1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x90F PUSH2 0x908 PUSH2 0x9A0 JUMP JUMPDEST DUP5 DUP5 PUSH2 0xB9F JUMP JUMPDEST PUSH1 0x1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xA2E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x24 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x1060 PUSH1 0x24 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xAB4 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x22 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0xFCB PUSH1 0x22 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 DUP4 PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xC25 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x25 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x103B PUSH1 0x25 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xCAB JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x23 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0xFA8 PUSH1 0x23 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xCB6 DUP4 DUP4 DUP4 PUSH2 0xFA2 JUMP JUMPDEST PUSH2 0xD21 DUP2 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x26 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xFED PUSH1 0x26 SWAP2 CODECOPY PUSH1 0x0 DUP1 DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0xE60 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x0 DUP1 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH2 0xDB4 DUP2 PUSH1 0x0 DUP1 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0xF1A SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x0 DUP1 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP4 PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 DUP4 GT ISZERO DUP3 SWAP1 PUSH2 0xF0D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xED2 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0xEB7 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0xEFF JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP DUP3 DUP5 SUB SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP5 ADD SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0xF98 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1B DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x536166654D6174683A206164646974696F6E206F766572666C6F770000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST POP POP POP JUMP INVALID GASLIMIT MSTORE NUMBER ORIGIN ADDRESS GASPRICE KECCAK256 PUSH21 0x72616E7366657220746F20746865207A65726F2061 PUSH5 0x6472657373 GASLIMIT MSTORE NUMBER ORIGIN ADDRESS GASPRICE KECCAK256 PUSH2 0x7070 PUSH19 0x6F766520746F20746865207A65726F20616464 PUSH19 0x65737345524332303A207472616E7366657220 PUSH2 0x6D6F PUSH22 0x6E7420657863656564732062616C616E636545524332 ADDRESS GASPRICE KECCAK256 PUSH21 0x72616E7366657220616D6F756E7420657863656564 PUSH20 0x20616C6C6F77616E636545524332303A20747261 PUSH15 0x736665722066726F6D20746865207A PUSH6 0x726F20616464 PUSH19 0x65737345524332303A20617070726F76652066 PUSH19 0x6F6D20746865207A65726F2061646472657373 GASLIMIT MSTORE NUMBER ORIGIN ADDRESS GASPRICE KECCAK256 PUSH5 0x6563726561 PUSH20 0x656420616C6C6F77616E63652062656C6F77207A PUSH6 0x726FA2646970 PUSH7 0x7358221220893F DUP10 BALANCE OR 0x26 PUSH8 0xF95A5793784509C3 DUP14 MOD 0x4F 0xFB 0xAC 0xB7 AND MLOAD CALLDATALOAD PUSH30 0x503091F9FC5F8364736F6C63430007060033000000000000000000000000 ",
							"sourceMap": "1313:9467:2:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2153:89;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4229:166;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;3220:106;;;:::i;:::-;;;;;;;;;;;;;;;;;;;4862:317;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;3071:89;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;5574:215;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;3384:125;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;2355:93;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6276:266;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;3712:172;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;3942:149;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;2153:89;2198:13;2230:5;2223:12;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2153:89;:::o;4229:166::-;4312:4;4328:39;4337:12;:10;:12::i;:::-;4351:7;4360:6;4328:8;:39::i;:::-;4384:4;4377:11;;4229:166;;;;:::o;3220:106::-;3281:7;3307:12;;3300:19;;3220:106;:::o;4862:317::-;4968:4;4984:36;4994:6;5002:9;5013:6;4984:9;:36::i;:::-;5030:121;5039:6;5047:12;:10;:12::i;:::-;5061:89;5099:6;5061:89;;;;;;;;;;;;;;;;;:11;:19;5073:6;5061:19;;;;;;;;;;;;;;;:33;5081:12;:10;:12::i;:::-;5061:33;;;;;;;;;;;;;;;;:37;;:89;;;;;:::i;:::-;5030:8;:121::i;:::-;5168:4;5161:11;;4862:317;;;;;:::o;3071:89::-;3120:5;3144:9;;;;;;;;;;;3137:16;;3071:89;:::o;5574:215::-;5662:4;5678:83;5687:12;:10;:12::i;:::-;5701:7;5710:50;5749:10;5710:11;:25;5722:12;:10;:12::i;:::-;5710:25;;;;;;;;;;;;;;;:34;5736:7;5710:34;;;;;;;;;;;;;;;;:38;;:50;;;;:::i;:::-;5678:8;:83::i;:::-;5778:4;5771:11;;5574:215;;;;:::o;3384:125::-;3458:7;3484:9;:18;3494:7;3484:18;;;;;;;;;;;;;;;;3477:25;;3384:125;;;:::o;2355:93::-;2402:13;2434:7;2427:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2355:93;:::o;6276:266::-;6369:4;6385:129;6394:12;:10;:12::i;:::-;6408:7;6417:96;6456:15;6417:96;;;;;;;;;;;;;;;;;:11;:25;6429:12;:10;:12::i;:::-;6417:25;;;;;;;;;;;;;;;:34;6443:7;6417:34;;;;;;;;;;;;;;;;:38;;:96;;;;;:::i;:::-;6385:8;:129::i;:::-;6531:4;6524:11;;6276:266;;;;:::o;3712:172::-;3798:4;3814:42;3824:12;:10;:12::i;:::-;3838:9;3849:6;3814:9;:42::i;:::-;3873:4;3866:11;;3712:172;;;;:::o;3942:149::-;4031:7;4057:11;:18;4069:5;4057:18;;;;;;;;;;;;;;;:27;4076:7;4057:27;;;;;;;;;;;;;;;;4050:34;;3942:149;;;;:::o;598:104:7:-;651:15;685:10;678:17;;598:104;:::o;9340:340:2:-;9458:1;9441:19;;:5;:19;;;;9433:68;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9538:1;9519:21;;:7;:21;;;;9511:68;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9620:6;9590:11;:18;9602:5;9590:18;;;;;;;;;;;;;;;:27;9609:7;9590:27;;;;;;;;;;;;;;;:36;;;;9657:7;9641:32;;9650:5;9641:32;;;9666:6;9641:32;;;;;;;;;;;;;;;;;;9340:340;;;:::o;7016:530::-;7139:1;7121:20;;:6;:20;;;;7113:70;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7222:1;7201:23;;:9;:23;;;;7193:71;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7275:47;7296:6;7304:9;7315:6;7275:20;:47::i;:::-;7353:71;7375:6;7353:71;;;;;;;;;;;;;;;;;:9;:17;7363:6;7353:17;;;;;;;;;;;;;;;;:21;;:71;;;;;:::i;:::-;7333:9;:17;7343:6;7333:17;;;;;;;;;;;;;;;:91;;;;7457:32;7482:6;7457:9;:20;7467:9;7457:20;;;;;;;;;;;;;;;;:24;;:32;;;;:::i;:::-;7434:9;:20;7444:9;7434:20;;;;;;;;;;;;;;;:55;;;;7521:9;7504:35;;7513:6;7504:35;;;7532:6;7504:35;;;;;;;;;;;;;;;;;;7016:530;;;:::o;5424:163:1:-;5510:7;5542:1;5537;:6;;5545:12;5529:29;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5579:1;5575;:5;5568:12;;5424:163;;;;;:::o;2682:175::-;2740:7;2759:9;2775:1;2771;:5;2759:17;;2799:1;2794;:6;;2786:46;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2849:1;2842:8;;;2682:175;;;;:::o;10686:92:2:-;;;;:::o"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "863600",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"external": {
								"allowance(address,address)": "1431",
								"approve(address,uint256)": "infinite",
								"balanceOf(address)": "1218",
								"decimals()": "1144",
								"decreaseAllowance(address,uint256)": "infinite",
								"increaseAllowance(address,uint256)": "infinite",
								"name()": "infinite",
								"symbol()": "infinite",
								"totalSupply()": "1058",
								"transfer(address,uint256)": "infinite",
								"transferFrom(address,address,uint256)": "infinite"
							},
							"internal": {
								"_approve(address,address,uint256)": "infinite",
								"_beforeTokenTransfer(address,address,uint256)": "15",
								"_burn(address,uint256)": "infinite",
								"_mint(address,uint256)": "infinite",
								"_setupDecimals(uint8)": "infinite",
								"_transfer(address,address,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 1313,
									"end": 10780,
									"name": "PUSH",
									"source": 2,
									"value": "80"
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "PUSH",
									"source": 2,
									"value": "40"
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "MSTORE",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "CALLVALUE",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "ISZERO",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "1"
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "JUMPI",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "REVERT",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "tag",
									"source": 2,
									"value": "1"
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "PUSH",
									"source": 2,
									"value": "40"
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "MLOAD",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "PUSHSIZE",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "CODESIZE",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "SUB",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "PUSHSIZE",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "DUP4",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "CODECOPY",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "PUSH",
									"source": 2,
									"value": "40"
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "MSTORE",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "PUSH",
									"source": 2,
									"value": "40"
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "LT",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "ISZERO",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "2"
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "JUMPI",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "REVERT",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "tag",
									"source": 2,
									"value": "2"
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "MLOAD",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "PUSH",
									"source": 2,
									"value": "40"
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "MLOAD",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "SWAP4",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "SWAP3",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "SWAP2",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "DUP5",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "PUSH",
									"source": 2,
									"value": "100000000"
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "GT",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "ISZERO",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "3"
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "JUMPI",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "REVERT",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "tag",
									"source": 2,
									"value": "3"
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "DUP4",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "SWAP2",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "PUSH",
									"source": 2,
									"value": "20"
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "DUP6",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "GT",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "ISZERO",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "4"
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "JUMPI",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "REVERT",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "tag",
									"source": 2,
									"value": "4"
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "MLOAD",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "DUP7",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "PUSH",
									"source": 2,
									"value": "1"
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "MUL",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "DUP4",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "GT",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "PUSH",
									"source": 2,
									"value": "100000000"
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "GT",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "OR",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "ISZERO",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "5"
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "JUMPI",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "REVERT",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "tag",
									"source": 2,
									"value": "5"
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "DUP4",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "MSTORE",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "PUSH",
									"source": 2,
									"value": "20"
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "DUP4",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "SWAP3",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "MLOAD",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "PUSH",
									"source": 2,
									"value": "20"
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "DUP4",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "DUP4",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "tag",
									"source": 2,
									"value": "6"
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "DUP4",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "LT",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "ISZERO",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "8"
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "JUMPI",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "MLOAD",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "DUP5",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "MSTORE",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "PUSH",
									"source": 2,
									"value": "20"
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "6"
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "JUMP",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "tag",
									"source": 2,
									"value": "8"
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "PUSH",
									"source": 2,
									"value": "1F"
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "AND",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "ISZERO",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "9"
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "JUMPI",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "SUB",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "MLOAD",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "PUSH",
									"source": 2,
									"value": "1"
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "DUP4",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "PUSH",
									"source": 2,
									"value": "20"
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "SUB",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "PUSH",
									"source": 2,
									"value": "100"
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "EXP",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "SUB",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "NOT",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "AND",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "MSTORE",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "PUSH",
									"source": 2,
									"value": "20"
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "SWAP2",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "tag",
									"source": 2,
									"value": "9"
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "PUSH",
									"source": 2,
									"value": "40"
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "MSTORE",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "PUSH",
									"source": 2,
									"value": "20"
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "MLOAD",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "PUSH",
									"source": 2,
									"value": "40"
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "MLOAD",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "SWAP4",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "SWAP3",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "SWAP2",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "DUP5",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "PUSH",
									"source": 2,
									"value": "100000000"
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "GT",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "ISZERO",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "10"
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "JUMPI",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "REVERT",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "tag",
									"source": 2,
									"value": "10"
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "DUP4",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "SWAP2",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "PUSH",
									"source": 2,
									"value": "20"
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "DUP6",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "GT",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "ISZERO",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "11"
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "JUMPI",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "REVERT",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "tag",
									"source": 2,
									"value": "11"
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "MLOAD",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "DUP7",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "PUSH",
									"source": 2,
									"value": "1"
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "MUL",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "DUP4",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "GT",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "PUSH",
									"source": 2,
									"value": "100000000"
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "GT",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "OR",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "ISZERO",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "12"
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "JUMPI",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "REVERT",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "tag",
									"source": 2,
									"value": "12"
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "DUP4",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "MSTORE",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "PUSH",
									"source": 2,
									"value": "20"
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "DUP4",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "SWAP3",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "MLOAD",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "PUSH",
									"source": 2,
									"value": "20"
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "DUP4",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "DUP4",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "tag",
									"source": 2,
									"value": "13"
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "DUP4",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "LT",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "ISZERO",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "15"
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "JUMPI",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "MLOAD",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "DUP5",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "MSTORE",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "PUSH",
									"source": 2,
									"value": "20"
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "13"
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "JUMP",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "tag",
									"source": 2,
									"value": "15"
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "PUSH",
									"source": 2,
									"value": "1F"
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "AND",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "ISZERO",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "16"
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "JUMPI",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "SUB",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "MLOAD",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "PUSH",
									"source": 2,
									"value": "1"
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "DUP4",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "PUSH",
									"source": 2,
									"value": "20"
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "SUB",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "PUSH",
									"source": 2,
									"value": "100"
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "EXP",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "SUB",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "NOT",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "AND",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "MSTORE",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "PUSH",
									"source": 2,
									"value": "20"
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "SWAP2",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "tag",
									"source": 2,
									"value": "16"
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "PUSH",
									"source": 2,
									"value": "40"
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "MSTORE",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 2025,
									"end": 2030,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 2017,
									"end": 2022,
									"name": "PUSH",
									"source": 2,
									"value": "3"
								},
								{
									"begin": 2017,
									"end": 2030,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 2017,
									"end": 2030,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 2017,
									"end": 2030,
									"name": "MLOAD",
									"source": 2
								},
								{
									"begin": 2017,
									"end": 2030,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 2017,
									"end": 2030,
									"name": "PUSH",
									"source": 2,
									"value": "20"
								},
								{
									"begin": 2017,
									"end": 2030,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 2017,
									"end": 2030,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 2017,
									"end": 2030,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "19"
								},
								{
									"begin": 2017,
									"end": 2030,
									"name": "SWAP3",
									"source": 2
								},
								{
									"begin": 2017,
									"end": 2030,
									"name": "SWAP2",
									"source": 2
								},
								{
									"begin": 2017,
									"end": 2030,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 2017,
									"end": 2030,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "20"
								},
								{
									"begin": 2017,
									"end": 2030,
									"name": "JUMP",
									"source": 2,
									"value": "[in]"
								},
								{
									"begin": 2017,
									"end": 2030,
									"name": "tag",
									"source": 2,
									"value": "19"
								},
								{
									"begin": 2017,
									"end": 2030,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 2017,
									"end": 2030,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 2050,
									"end": 2057,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 2040,
									"end": 2047,
									"name": "PUSH",
									"source": 2,
									"value": "4"
								},
								{
									"begin": 2040,
									"end": 2057,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 2040,
									"end": 2057,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 2040,
									"end": 2057,
									"name": "MLOAD",
									"source": 2
								},
								{
									"begin": 2040,
									"end": 2057,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 2040,
									"end": 2057,
									"name": "PUSH",
									"source": 2,
									"value": "20"
								},
								{
									"begin": 2040,
									"end": 2057,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 2040,
									"end": 2057,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 2040,
									"end": 2057,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "21"
								},
								{
									"begin": 2040,
									"end": 2057,
									"name": "SWAP3",
									"source": 2
								},
								{
									"begin": 2040,
									"end": 2057,
									"name": "SWAP2",
									"source": 2
								},
								{
									"begin": 2040,
									"end": 2057,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 2040,
									"end": 2057,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "20"
								},
								{
									"begin": 2040,
									"end": 2057,
									"name": "JUMP",
									"source": 2,
									"value": "[in]"
								},
								{
									"begin": 2040,
									"end": 2057,
									"name": "tag",
									"source": 2,
									"value": "21"
								},
								{
									"begin": 2040,
									"end": 2057,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 2040,
									"end": 2057,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 2079,
									"end": 2081,
									"name": "PUSH",
									"source": 2,
									"value": "12"
								},
								{
									"begin": 2067,
									"end": 2076,
									"name": "PUSH",
									"source": 2,
									"value": "5"
								},
								{
									"begin": 2067,
									"end": 2076,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 2067,
									"end": 2081,
									"name": "PUSH",
									"source": 2,
									"value": "100"
								},
								{
									"begin": 2067,
									"end": 2081,
									"name": "EXP",
									"source": 2
								},
								{
									"begin": 2067,
									"end": 2081,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 2067,
									"end": 2081,
									"name": "SLOAD",
									"source": 2
								},
								{
									"begin": 2067,
									"end": 2081,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 2067,
									"end": 2081,
									"name": "PUSH",
									"source": 2,
									"value": "FF"
								},
								{
									"begin": 2067,
									"end": 2081,
									"name": "MUL",
									"source": 2
								},
								{
									"begin": 2067,
									"end": 2081,
									"name": "NOT",
									"source": 2
								},
								{
									"begin": 2067,
									"end": 2081,
									"name": "AND",
									"source": 2
								},
								{
									"begin": 2067,
									"end": 2081,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 2067,
									"end": 2081,
									"name": "DUP4",
									"source": 2
								},
								{
									"begin": 2067,
									"end": 2081,
									"name": "PUSH",
									"source": 2,
									"value": "FF"
								},
								{
									"begin": 2067,
									"end": 2081,
									"name": "AND",
									"source": 2
								},
								{
									"begin": 2067,
									"end": 2081,
									"name": "MUL",
									"source": 2
								},
								{
									"begin": 2067,
									"end": 2081,
									"name": "OR",
									"source": 2
								},
								{
									"begin": 2067,
									"end": 2081,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 2067,
									"end": 2081,
									"name": "SSTORE",
									"source": 2
								},
								{
									"begin": 2067,
									"end": 2081,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "22"
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "JUMP",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "tag",
									"source": 2,
									"value": "20"
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "SLOAD",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "PUSH",
									"source": 2,
									"value": "1"
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "PUSH",
									"source": 2,
									"value": "1"
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "AND",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "ISZERO",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "PUSH",
									"source": 2,
									"value": "100"
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "MUL",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "SUB",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "AND",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "PUSH",
									"source": 2,
									"value": "2"
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "DIV",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "MSTORE",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "PUSH",
									"source": 2,
									"value": "20"
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "KECCAK256",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "PUSH",
									"source": 2,
									"value": "1F"
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "PUSH",
									"source": 2,
									"value": "20"
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "DIV",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "SWAP3",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "24"
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "JUMPI",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "DUP6",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "SSTORE",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "23"
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "JUMP",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "tag",
									"source": 2,
									"value": "24"
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "PUSH",
									"source": 2,
									"value": "1F"
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "LT",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "25"
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "JUMPI",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "MLOAD",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "PUSH",
									"source": 2,
									"value": "FF"
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "NOT",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "AND",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "DUP4",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "OR",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "DUP6",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "SSTORE",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "23"
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "JUMP",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "tag",
									"source": 2,
									"value": "25"
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "PUSH",
									"source": 2,
									"value": "1"
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "DUP6",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "SSTORE",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "ISZERO",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "23"
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "JUMPI",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "SWAP2",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "tag",
									"source": 2,
									"value": "26"
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "GT",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "ISZERO",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "27"
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "JUMPI",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "MLOAD",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "SSTORE",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "SWAP2",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "PUSH",
									"source": 2,
									"value": "20"
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "SWAP2",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "PUSH",
									"source": 2,
									"value": "1"
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "26"
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "JUMP",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "tag",
									"source": 2,
									"value": "27"
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "tag",
									"source": 2,
									"value": "23"
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "28"
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "SWAP2",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "29"
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "JUMP",
									"source": 2,
									"value": "[in]"
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "tag",
									"source": 2,
									"value": "28"
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "JUMP",
									"source": 2,
									"value": "[out]"
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "tag",
									"source": 2,
									"value": "29"
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "tag",
									"source": 2,
									"value": "30"
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "GT",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "ISZERO",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "31"
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "JUMPI",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "SSTORE",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "PUSH",
									"source": 2,
									"value": "1"
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "30"
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "JUMP",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "tag",
									"source": 2,
									"value": "31"
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "JUMP",
									"source": 2,
									"value": "[out]"
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "tag",
									"source": 2,
									"value": "22"
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "PUSH #[$]",
									"source": 2,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "PUSH [$]",
									"source": 2,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "CODECOPY",
									"source": 2
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 1313,
									"end": 10780,
									"name": "RETURN",
									"source": 2
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220893f8931172667f95a5793784509c38d064ffbacb71651357d503091f9fc5f8364736f6c63430007060033",
									".code": [
										{
											"begin": 1313,
											"end": 10780,
											"name": "PUSH",
											"source": 2,
											"value": "80"
										},
										{
											"begin": 1313,
											"end": 10780,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 1313,
											"end": 10780,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 1313,
											"end": 10780,
											"name": "CALLVALUE",
											"source": 2
										},
										{
											"begin": 1313,
											"end": 10780,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1313,
											"end": 10780,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 1313,
											"end": 10780,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 1313,
											"end": 10780,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1313,
											"end": 10780,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 1313,
											"end": 10780,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1313,
											"end": 10780,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 1313,
											"end": 10780,
											"name": "tag",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 1313,
											"end": 10780,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1313,
											"end": 10780,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1313,
											"end": 10780,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 1313,
											"end": 10780,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 1313,
											"end": 10780,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 1313,
											"end": 10780,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 1313,
											"end": 10780,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1313,
											"end": 10780,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 1313,
											"end": 10780,
											"name": "CALLDATALOAD",
											"source": 2
										},
										{
											"begin": 1313,
											"end": 10780,
											"name": "PUSH",
											"source": 2,
											"value": "E0"
										},
										{
											"begin": 1313,
											"end": 10780,
											"name": "SHR",
											"source": 2
										},
										{
											"begin": 1313,
											"end": 10780,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1313,
											"end": 10780,
											"name": "PUSH",
											"source": 2,
											"value": "39509351"
										},
										{
											"begin": 1313,
											"end": 10780,
											"name": "GT",
											"source": 2
										},
										{
											"begin": 1313,
											"end": 10780,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "14"
										},
										{
											"begin": 1313,
											"end": 10780,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1313,
											"end": 10780,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1313,
											"end": 10780,
											"name": "PUSH",
											"source": 2,
											"value": "39509351"
										},
										{
											"begin": 1313,
											"end": 10780,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 1313,
											"end": 10780,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "8"
										},
										{
											"begin": 1313,
											"end": 10780,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1313,
											"end": 10780,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1313,
											"end": 10780,
											"name": "PUSH",
											"source": 2,
											"value": "70A08231"
										},
										{
											"begin": 1313,
											"end": 10780,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 1313,
											"end": 10780,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "9"
										},
										{
											"begin": 1313,
											"end": 10780,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1313,
											"end": 10780,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1313,
											"end": 10780,
											"name": "PUSH",
											"source": 2,
											"value": "95D89B41"
										},
										{
											"begin": 1313,
											"end": 10780,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 1313,
											"end": 10780,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "10"
										},
										{
											"begin": 1313,
											"end": 10780,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1313,
											"end": 10780,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1313,
											"end": 10780,
											"name": "PUSH",
											"source": 2,
											"value": "A457C2D7"
										},
										{
											"begin": 1313,
											"end": 10780,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 1313,
											"end": 10780,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "11"
										},
										{
											"begin": 1313,
											"end": 10780,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1313,
											"end": 10780,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1313,
											"end": 10780,
											"name": "PUSH",
											"source": 2,
											"value": "A9059CBB"
										},
										{
											"begin": 1313,
											"end": 10780,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 1313,
											"end": 10780,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "12"
										},
										{
											"begin": 1313,
											"end": 10780,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1313,
											"end": 10780,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1313,
											"end": 10780,
											"name": "PUSH",
											"source": 2,
											"value": "DD62ED3E"
										},
										{
											"begin": 1313,
											"end": 10780,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 1313,
											"end": 10780,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "13"
										},
										{
											"begin": 1313,
											"end": 10780,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1313,
											"end": 10780,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 1313,
											"end": 10780,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 1313,
											"end": 10780,
											"name": "tag",
											"source": 2,
											"value": "14"
										},
										{
											"begin": 1313,
											"end": 10780,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1313,
											"end": 10780,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1313,
											"end": 10780,
											"name": "PUSH",
											"source": 2,
											"value": "6FDDE03"
										},
										{
											"begin": 1313,
											"end": 10780,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 1313,
											"end": 10780,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "3"
										},
										{
											"begin": 1313,
											"end": 10780,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1313,
											"end": 10780,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1313,
											"end": 10780,
											"name": "PUSH",
											"source": 2,
											"value": "95EA7B3"
										},
										{
											"begin": 1313,
											"end": 10780,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 1313,
											"end": 10780,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 1313,
											"end": 10780,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1313,
											"end": 10780,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1313,
											"end": 10780,
											"name": "PUSH",
											"source": 2,
											"value": "18160DDD"
										},
										{
											"begin": 1313,
											"end": 10780,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 1313,
											"end": 10780,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "5"
										},
										{
											"begin": 1313,
											"end": 10780,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1313,
											"end": 10780,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1313,
											"end": 10780,
											"name": "PUSH",
											"source": 2,
											"value": "23B872DD"
										},
										{
											"begin": 1313,
											"end": 10780,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 1313,
											"end": 10780,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "6"
										},
										{
											"begin": 1313,
											"end": 10780,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1313,
											"end": 10780,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1313,
											"end": 10780,
											"name": "PUSH",
											"source": 2,
											"value": "313CE567"
										},
										{
											"begin": 1313,
											"end": 10780,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 1313,
											"end": 10780,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "7"
										},
										{
											"begin": 1313,
											"end": 10780,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1313,
											"end": 10780,
											"name": "tag",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 1313,
											"end": 10780,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1313,
											"end": 10780,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 1313,
											"end": 10780,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1313,
											"end": 10780,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "tag",
											"source": 2,
											"value": "3"
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "15"
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "16"
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "tag",
											"source": 2,
											"value": "15"
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "tag",
											"source": 2,
											"value": "17"
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "19"
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "17"
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "tag",
											"source": 2,
											"value": "19"
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "PUSH",
											"source": 2,
											"value": "100"
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "EXP",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "NOT",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "tag",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "RETURN",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "tag",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "21"
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "22"
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "tag",
											"source": 2,
											"value": "22"
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "CALLDATALOAD",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "CALLDATALOAD",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "23"
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "tag",
											"source": 2,
											"value": "21"
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "RETURN",
											"source": 2
										},
										{
											"begin": 3220,
											"end": 3326,
											"name": "tag",
											"source": 2,
											"value": "5"
										},
										{
											"begin": 3220,
											"end": 3326,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3220,
											"end": 3326,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "24"
										},
										{
											"begin": 3220,
											"end": 3326,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "25"
										},
										{
											"begin": 3220,
											"end": 3326,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 3220,
											"end": 3326,
											"name": "tag",
											"source": 2,
											"value": "24"
										},
										{
											"begin": 3220,
											"end": 3326,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3220,
											"end": 3326,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3220,
											"end": 3326,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 3220,
											"end": 3326,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3220,
											"end": 3326,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 3220,
											"end": 3326,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3220,
											"end": 3326,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3220,
											"end": 3326,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 3220,
											"end": 3326,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3220,
											"end": 3326,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3220,
											"end": 3326,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3220,
											"end": 3326,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3220,
											"end": 3326,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3220,
											"end": 3326,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 3220,
											"end": 3326,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3220,
											"end": 3326,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3220,
											"end": 3326,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 3220,
											"end": 3326,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3220,
											"end": 3326,
											"name": "RETURN",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "tag",
											"source": 2,
											"value": "6"
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "26"
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "PUSH",
											"source": 2,
											"value": "60"
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "27"
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "tag",
											"source": 2,
											"value": "27"
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "CALLDATALOAD",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "CALLDATALOAD",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "CALLDATALOAD",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "28"
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "tag",
											"source": 2,
											"value": "26"
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "RETURN",
											"source": 2
										},
										{
											"begin": 3071,
											"end": 3160,
											"name": "tag",
											"source": 2,
											"value": "7"
										},
										{
											"begin": 3071,
											"end": 3160,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3071,
											"end": 3160,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "29"
										},
										{
											"begin": 3071,
											"end": 3160,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "30"
										},
										{
											"begin": 3071,
											"end": 3160,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 3071,
											"end": 3160,
											"name": "tag",
											"source": 2,
											"value": "29"
										},
										{
											"begin": 3071,
											"end": 3160,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3071,
											"end": 3160,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3071,
											"end": 3160,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 3071,
											"end": 3160,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3071,
											"end": 3160,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 3071,
											"end": 3160,
											"name": "PUSH",
											"source": 2,
											"value": "FF"
										},
										{
											"begin": 3071,
											"end": 3160,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 3071,
											"end": 3160,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3071,
											"end": 3160,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3071,
											"end": 3160,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 3071,
											"end": 3160,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3071,
											"end": 3160,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3071,
											"end": 3160,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3071,
											"end": 3160,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3071,
											"end": 3160,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3071,
											"end": 3160,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 3071,
											"end": 3160,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3071,
											"end": 3160,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3071,
											"end": 3160,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 3071,
											"end": 3160,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3071,
											"end": 3160,
											"name": "RETURN",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "tag",
											"source": 2,
											"value": "8"
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "31"
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "32"
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "tag",
											"source": 2,
											"value": "32"
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "CALLDATALOAD",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "CALLDATALOAD",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "33"
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "tag",
											"source": 2,
											"value": "31"
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "RETURN",
											"source": 2
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "tag",
											"source": 2,
											"value": "9"
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "34"
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "35"
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "tag",
											"source": 2,
											"value": "35"
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "CALLDATALOAD",
											"source": 2
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "36"
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "tag",
											"source": 2,
											"value": "34"
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "RETURN",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "tag",
											"source": 2,
											"value": "10"
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "37"
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "38"
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "tag",
											"source": 2,
											"value": "37"
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "tag",
											"source": 2,
											"value": "39"
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "41"
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "39"
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "tag",
											"source": 2,
											"value": "41"
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "42"
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "PUSH",
											"source": 2,
											"value": "100"
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "EXP",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "NOT",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "tag",
											"source": 2,
											"value": "42"
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "RETURN",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "tag",
											"source": 2,
											"value": "11"
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "43"
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "44"
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "tag",
											"source": 2,
											"value": "44"
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "CALLDATALOAD",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "CALLDATALOAD",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "45"
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "tag",
											"source": 2,
											"value": "43"
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "RETURN",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "tag",
											"source": 2,
											"value": "12"
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "46"
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "47"
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "tag",
											"source": 2,
											"value": "47"
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "CALLDATALOAD",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "CALLDATALOAD",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "48"
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "tag",
											"source": 2,
											"value": "46"
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "RETURN",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "tag",
											"source": 2,
											"value": "13"
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "49"
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "50"
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "tag",
											"source": 2,
											"value": "50"
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "CALLDATALOAD",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "CALLDATALOAD",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "51"
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "tag",
											"source": 2,
											"value": "49"
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "RETURN",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "tag",
											"source": 2,
											"value": "16"
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2198,
											"end": 2211,
											"name": "PUSH",
											"source": 2,
											"value": "60"
										},
										{
											"begin": 2230,
											"end": 2235,
											"name": "PUSH",
											"source": 2,
											"value": "3"
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "PUSH",
											"source": 2,
											"value": "100"
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "MUL",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "PUSH",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "DIV",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "DIV",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "MUL",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "PUSH",
											"source": 2,
											"value": "100"
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "MUL",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "PUSH",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "DIV",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "53"
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "54"
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "PUSH",
											"source": 2,
											"value": "100"
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "DIV",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "MUL",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "53"
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "tag",
											"source": 2,
											"value": "54"
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "tag",
											"source": 2,
											"value": "55"
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "GT",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "55"
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "tag",
											"source": 2,
											"value": "53"
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "tag",
											"source": 2,
											"value": "23"
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4312,
											"end": 4316,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 4328,
											"end": 4367,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "57"
										},
										{
											"begin": 4337,
											"end": 4349,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "58"
										},
										{
											"begin": 4337,
											"end": 4347,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "59"
										},
										{
											"begin": 4337,
											"end": 4349,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 4337,
											"end": 4349,
											"name": "tag",
											"source": 2,
											"value": "58"
										},
										{
											"begin": 4337,
											"end": 4349,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4351,
											"end": 4358,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 4360,
											"end": 4366,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 4328,
											"end": 4336,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "60"
										},
										{
											"begin": 4328,
											"end": 4367,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 4328,
											"end": 4367,
											"name": "tag",
											"source": 2,
											"value": "57"
										},
										{
											"begin": 4328,
											"end": 4367,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4384,
											"end": 4388,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 4377,
											"end": 4388,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4377,
											"end": 4388,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 3220,
											"end": 3326,
											"name": "tag",
											"source": 2,
											"value": "25"
										},
										{
											"begin": 3220,
											"end": 3326,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3281,
											"end": 3288,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 3307,
											"end": 3319,
											"name": "PUSH",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 3307,
											"end": 3319,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 3300,
											"end": 3319,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3300,
											"end": 3319,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3220,
											"end": 3326,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3220,
											"end": 3326,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "tag",
											"source": 2,
											"value": "28"
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4968,
											"end": 4972,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 4984,
											"end": 5020,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "63"
										},
										{
											"begin": 4994,
											"end": 5000,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 5002,
											"end": 5011,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 5013,
											"end": 5019,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 4984,
											"end": 4993,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "64"
										},
										{
											"begin": 4984,
											"end": 5020,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 4984,
											"end": 5020,
											"name": "tag",
											"source": 2,
											"value": "63"
										},
										{
											"begin": 4984,
											"end": 5020,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5030,
											"end": 5151,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "65"
										},
										{
											"begin": 5039,
											"end": 5045,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 5047,
											"end": 5059,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "66"
										},
										{
											"begin": 5047,
											"end": 5057,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "59"
										},
										{
											"begin": 5047,
											"end": 5059,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 5047,
											"end": 5059,
											"name": "tag",
											"source": 2,
											"value": "66"
										},
										{
											"begin": 5047,
											"end": 5059,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5061,
											"end": 5150,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "67"
										},
										{
											"begin": 5099,
											"end": 5105,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 5061,
											"end": 5150,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 5061,
											"end": 5150,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 5061,
											"end": 5150,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 5061,
											"end": 5150,
											"name": "PUSH",
											"source": 2,
											"value": "60"
										},
										{
											"begin": 5061,
											"end": 5150,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5061,
											"end": 5150,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 5061,
											"end": 5150,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 5061,
											"end": 5150,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 5061,
											"end": 5150,
											"name": "PUSH",
											"source": 2,
											"value": "28"
										},
										{
											"begin": 5061,
											"end": 5150,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 5061,
											"end": 5150,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 5061,
											"end": 5150,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 5061,
											"end": 5150,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5061,
											"end": 5150,
											"name": "PUSH data",
											"source": 2,
											"value": "974D1B4421DA69CC60B481194F0DAD36A5BB4E23DA810DA7A7FB30CDBA178330"
										},
										{
											"begin": 5061,
											"end": 5150,
											"name": "PUSH",
											"source": 2,
											"value": "28"
										},
										{
											"begin": 5061,
											"end": 5150,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 5061,
											"end": 5150,
											"name": "CODECOPY",
											"source": 2
										},
										{
											"begin": 5061,
											"end": 5072,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 5061,
											"end": 5080,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 5073,
											"end": 5079,
											"name": "DUP12",
											"source": 2
										},
										{
											"begin": 5061,
											"end": 5080,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5061,
											"end": 5080,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 5061,
											"end": 5080,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5061,
											"end": 5080,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 5061,
											"end": 5080,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 5061,
											"end": 5080,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 5061,
											"end": 5080,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 5061,
											"end": 5080,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5061,
											"end": 5080,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5061,
											"end": 5080,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 5061,
											"end": 5080,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 5061,
											"end": 5080,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 5061,
											"end": 5080,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5061,
											"end": 5080,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 5061,
											"end": 5080,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 5061,
											"end": 5094,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 5081,
											"end": 5093,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "68"
										},
										{
											"begin": 5081,
											"end": 5091,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "59"
										},
										{
											"begin": 5081,
											"end": 5093,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 5081,
											"end": 5093,
											"name": "tag",
											"source": 2,
											"value": "68"
										},
										{
											"begin": 5081,
											"end": 5093,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5061,
											"end": 5094,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5061,
											"end": 5094,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 5061,
											"end": 5094,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5061,
											"end": 5094,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 5061,
											"end": 5094,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 5061,
											"end": 5094,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 5061,
											"end": 5094,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 5061,
											"end": 5094,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5061,
											"end": 5094,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5061,
											"end": 5094,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 5061,
											"end": 5094,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 5061,
											"end": 5094,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 5061,
											"end": 5094,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5061,
											"end": 5094,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 5061,
											"end": 5094,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 5061,
											"end": 5094,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 5061,
											"end": 5098,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "69"
										},
										{
											"begin": 5061,
											"end": 5098,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5061,
											"end": 5150,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 5061,
											"end": 5150,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 5061,
											"end": 5150,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5061,
											"end": 5150,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFF"
										},
										{
											"begin": 5061,
											"end": 5150,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 5061,
											"end": 5150,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 5061,
											"end": 5150,
											"name": "tag",
											"source": 2,
											"value": "67"
										},
										{
											"begin": 5061,
											"end": 5150,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5030,
											"end": 5038,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "60"
										},
										{
											"begin": 5030,
											"end": 5151,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 5030,
											"end": 5151,
											"name": "tag",
											"source": 2,
											"value": "65"
										},
										{
											"begin": 5030,
											"end": 5151,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5168,
											"end": 5172,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 5161,
											"end": 5172,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5161,
											"end": 5172,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 3071,
											"end": 3160,
											"name": "tag",
											"source": 2,
											"value": "30"
										},
										{
											"begin": 3071,
											"end": 3160,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3120,
											"end": 3125,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 3144,
											"end": 3153,
											"name": "PUSH",
											"source": 2,
											"value": "5"
										},
										{
											"begin": 3144,
											"end": 3153,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 3144,
											"end": 3153,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3144,
											"end": 3153,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 3144,
											"end": 3153,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3144,
											"end": 3153,
											"name": "PUSH",
											"source": 2,
											"value": "100"
										},
										{
											"begin": 3144,
											"end": 3153,
											"name": "EXP",
											"source": 2
										},
										{
											"begin": 3144,
											"end": 3153,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3144,
											"end": 3153,
											"name": "DIV",
											"source": 2
										},
										{
											"begin": 3144,
											"end": 3153,
											"name": "PUSH",
											"source": 2,
											"value": "FF"
										},
										{
											"begin": 3144,
											"end": 3153,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 3137,
											"end": 3153,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3137,
											"end": 3153,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3071,
											"end": 3160,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3071,
											"end": 3160,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "tag",
											"source": 2,
											"value": "33"
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5662,
											"end": 5666,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 5678,
											"end": 5761,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "72"
										},
										{
											"begin": 5687,
											"end": 5699,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "73"
										},
										{
											"begin": 5687,
											"end": 5697,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "59"
										},
										{
											"begin": 5687,
											"end": 5699,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 5687,
											"end": 5699,
											"name": "tag",
											"source": 2,
											"value": "73"
										},
										{
											"begin": 5687,
											"end": 5699,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5701,
											"end": 5708,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 5710,
											"end": 5760,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "74"
										},
										{
											"begin": 5749,
											"end": 5759,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 5710,
											"end": 5721,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 5710,
											"end": 5735,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 5722,
											"end": 5734,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "75"
										},
										{
											"begin": 5722,
											"end": 5732,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "59"
										},
										{
											"begin": 5722,
											"end": 5734,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 5722,
											"end": 5734,
											"name": "tag",
											"source": 2,
											"value": "75"
										},
										{
											"begin": 5722,
											"end": 5734,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5710,
											"end": 5735,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5710,
											"end": 5735,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 5710,
											"end": 5735,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5710,
											"end": 5735,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 5710,
											"end": 5735,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 5710,
											"end": 5735,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 5710,
											"end": 5735,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 5710,
											"end": 5735,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5710,
											"end": 5735,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5710,
											"end": 5735,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 5710,
											"end": 5735,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 5710,
											"end": 5735,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 5710,
											"end": 5735,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5710,
											"end": 5735,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 5710,
											"end": 5735,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 5710,
											"end": 5744,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 5736,
											"end": 5743,
											"name": "DUP10",
											"source": 2
										},
										{
											"begin": 5710,
											"end": 5744,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5710,
											"end": 5744,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 5710,
											"end": 5744,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5710,
											"end": 5744,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 5710,
											"end": 5744,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 5710,
											"end": 5744,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 5710,
											"end": 5744,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 5710,
											"end": 5744,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5710,
											"end": 5744,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5710,
											"end": 5744,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 5710,
											"end": 5744,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 5710,
											"end": 5744,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 5710,
											"end": 5744,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5710,
											"end": 5744,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 5710,
											"end": 5744,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 5710,
											"end": 5744,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 5710,
											"end": 5748,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "76"
										},
										{
											"begin": 5710,
											"end": 5748,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5710,
											"end": 5760,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 5710,
											"end": 5760,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5710,
											"end": 5760,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFF"
										},
										{
											"begin": 5710,
											"end": 5760,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 5710,
											"end": 5760,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 5710,
											"end": 5760,
											"name": "tag",
											"source": 2,
											"value": "74"
										},
										{
											"begin": 5710,
											"end": 5760,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5678,
											"end": 5686,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "60"
										},
										{
											"begin": 5678,
											"end": 5761,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 5678,
											"end": 5761,
											"name": "tag",
											"source": 2,
											"value": "72"
										},
										{
											"begin": 5678,
											"end": 5761,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5778,
											"end": 5782,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 5771,
											"end": 5782,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5771,
											"end": 5782,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "tag",
											"source": 2,
											"value": "36"
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3458,
											"end": 3465,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 3484,
											"end": 3493,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3484,
											"end": 3502,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 3494,
											"end": 3501,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 3484,
											"end": 3502,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3484,
											"end": 3502,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 3484,
											"end": 3502,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3484,
											"end": 3502,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 3484,
											"end": 3502,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3484,
											"end": 3502,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3484,
											"end": 3502,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 3484,
											"end": 3502,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3484,
											"end": 3502,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3484,
											"end": 3502,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3484,
											"end": 3502,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3484,
											"end": 3502,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 3484,
											"end": 3502,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3484,
											"end": 3502,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 3484,
											"end": 3502,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 3484,
											"end": 3502,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 3477,
											"end": 3502,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3477,
											"end": 3502,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "tag",
											"source": 2,
											"value": "38"
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2402,
											"end": 2415,
											"name": "PUSH",
											"source": 2,
											"value": "60"
										},
										{
											"begin": 2434,
											"end": 2441,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "PUSH",
											"source": 2,
											"value": "100"
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "MUL",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "PUSH",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "DIV",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "DIV",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "MUL",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "PUSH",
											"source": 2,
											"value": "100"
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "MUL",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "PUSH",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "DIV",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "79"
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "80"
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "PUSH",
											"source": 2,
											"value": "100"
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "DIV",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "MUL",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "79"
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "tag",
											"source": 2,
											"value": "80"
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "tag",
											"source": 2,
											"value": "81"
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "GT",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "81"
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "tag",
											"source": 2,
											"value": "79"
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "tag",
											"source": 2,
											"value": "45"
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6369,
											"end": 6373,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 6385,
											"end": 6514,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "83"
										},
										{
											"begin": 6394,
											"end": 6406,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "84"
										},
										{
											"begin": 6394,
											"end": 6404,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "59"
										},
										{
											"begin": 6394,
											"end": 6406,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 6394,
											"end": 6406,
											"name": "tag",
											"source": 2,
											"value": "84"
										},
										{
											"begin": 6394,
											"end": 6406,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6408,
											"end": 6415,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 6417,
											"end": 6513,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "85"
										},
										{
											"begin": 6456,
											"end": 6471,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 6417,
											"end": 6513,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 6417,
											"end": 6513,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 6417,
											"end": 6513,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 6417,
											"end": 6513,
											"name": "PUSH",
											"source": 2,
											"value": "60"
										},
										{
											"begin": 6417,
											"end": 6513,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 6417,
											"end": 6513,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 6417,
											"end": 6513,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 6417,
											"end": 6513,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 6417,
											"end": 6513,
											"name": "PUSH",
											"source": 2,
											"value": "25"
										},
										{
											"begin": 6417,
											"end": 6513,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 6417,
											"end": 6513,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 6417,
											"end": 6513,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 6417,
											"end": 6513,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 6417,
											"end": 6513,
											"name": "PUSH data",
											"source": 2,
											"value": "F8B476F7D28209D77D4A4AC1FE36B9F8259AA1BB6BDDFA6E89DE7E51615CF8A8"
										},
										{
											"begin": 6417,
											"end": 6513,
											"name": "PUSH",
											"source": 2,
											"value": "25"
										},
										{
											"begin": 6417,
											"end": 6513,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 6417,
											"end": 6513,
											"name": "CODECOPY",
											"source": 2
										},
										{
											"begin": 6417,
											"end": 6428,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 6417,
											"end": 6442,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 6429,
											"end": 6441,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "86"
										},
										{
											"begin": 6429,
											"end": 6439,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "59"
										},
										{
											"begin": 6429,
											"end": 6441,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 6429,
											"end": 6441,
											"name": "tag",
											"source": 2,
											"value": "86"
										},
										{
											"begin": 6429,
											"end": 6441,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6417,
											"end": 6442,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6417,
											"end": 6442,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 6417,
											"end": 6442,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6417,
											"end": 6442,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 6417,
											"end": 6442,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 6417,
											"end": 6442,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 6417,
											"end": 6442,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 6417,
											"end": 6442,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 6417,
											"end": 6442,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 6417,
											"end": 6442,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 6417,
											"end": 6442,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 6417,
											"end": 6442,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 6417,
											"end": 6442,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 6417,
											"end": 6442,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 6417,
											"end": 6442,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 6417,
											"end": 6451,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 6443,
											"end": 6450,
											"name": "DUP11",
											"source": 2
										},
										{
											"begin": 6417,
											"end": 6451,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6417,
											"end": 6451,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 6417,
											"end": 6451,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6417,
											"end": 6451,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 6417,
											"end": 6451,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 6417,
											"end": 6451,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 6417,
											"end": 6451,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 6417,
											"end": 6451,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 6417,
											"end": 6451,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 6417,
											"end": 6451,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 6417,
											"end": 6451,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 6417,
											"end": 6451,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 6417,
											"end": 6451,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 6417,
											"end": 6451,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 6417,
											"end": 6451,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 6417,
											"end": 6451,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 6417,
											"end": 6455,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "69"
										},
										{
											"begin": 6417,
											"end": 6455,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 6417,
											"end": 6513,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 6417,
											"end": 6513,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 6417,
											"end": 6513,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 6417,
											"end": 6513,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFF"
										},
										{
											"begin": 6417,
											"end": 6513,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 6417,
											"end": 6513,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 6417,
											"end": 6513,
											"name": "tag",
											"source": 2,
											"value": "85"
										},
										{
											"begin": 6417,
											"end": 6513,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6385,
											"end": 6393,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "60"
										},
										{
											"begin": 6385,
											"end": 6514,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 6385,
											"end": 6514,
											"name": "tag",
											"source": 2,
											"value": "83"
										},
										{
											"begin": 6385,
											"end": 6514,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6531,
											"end": 6535,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 6524,
											"end": 6535,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 6524,
											"end": 6535,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "tag",
											"source": 2,
											"value": "48"
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3798,
											"end": 3802,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 3814,
											"end": 3856,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "88"
										},
										{
											"begin": 3824,
											"end": 3836,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "89"
										},
										{
											"begin": 3824,
											"end": 3834,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "59"
										},
										{
											"begin": 3824,
											"end": 3836,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 3824,
											"end": 3836,
											"name": "tag",
											"source": 2,
											"value": "89"
										},
										{
											"begin": 3824,
											"end": 3836,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3838,
											"end": 3847,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 3849,
											"end": 3855,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 3814,
											"end": 3823,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "64"
										},
										{
											"begin": 3814,
											"end": 3856,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 3814,
											"end": 3856,
											"name": "tag",
											"source": 2,
											"value": "88"
										},
										{
											"begin": 3814,
											"end": 3856,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3873,
											"end": 3877,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 3866,
											"end": 3877,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3866,
											"end": 3877,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "tag",
											"source": 2,
											"value": "51"
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4031,
											"end": 4038,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 4057,
											"end": 4068,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 4057,
											"end": 4075,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 4069,
											"end": 4074,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 4057,
											"end": 4075,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4057,
											"end": 4075,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 4057,
											"end": 4075,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4057,
											"end": 4075,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 4057,
											"end": 4075,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 4057,
											"end": 4075,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 4057,
											"end": 4075,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 4057,
											"end": 4075,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 4057,
											"end": 4075,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4057,
											"end": 4075,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 4057,
											"end": 4075,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 4057,
											"end": 4075,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 4057,
											"end": 4075,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 4057,
											"end": 4075,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 4057,
											"end": 4075,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 4057,
											"end": 4084,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 4076,
											"end": 4083,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 4057,
											"end": 4084,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4057,
											"end": 4084,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 4057,
											"end": 4084,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4057,
											"end": 4084,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 4057,
											"end": 4084,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 4057,
											"end": 4084,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 4057,
											"end": 4084,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 4057,
											"end": 4084,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 4057,
											"end": 4084,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4057,
											"end": 4084,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 4057,
											"end": 4084,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 4057,
											"end": 4084,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 4057,
											"end": 4084,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 4057,
											"end": 4084,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 4057,
											"end": 4084,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 4057,
											"end": 4084,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 4050,
											"end": 4084,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4050,
											"end": 4084,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 598,
											"end": 702,
											"name": "tag",
											"source": 7,
											"value": "59"
										},
										{
											"begin": 598,
											"end": 702,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 651,
											"end": 666,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 685,
											"end": 695,
											"name": "CALLER",
											"source": 7
										},
										{
											"begin": 678,
											"end": 695,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 678,
											"end": 695,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 598,
											"end": 702,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 598,
											"end": 702,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 9340,
											"end": 9680,
											"name": "tag",
											"source": 2,
											"value": "60"
										},
										{
											"begin": 9340,
											"end": 9680,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 9458,
											"end": 9459,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 9441,
											"end": 9460,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 9441,
											"end": 9460,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 9441,
											"end": 9446,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 9441,
											"end": 9460,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 9441,
											"end": 9460,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 9441,
											"end": 9460,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 9441,
											"end": 9460,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 9433,
											"end": 9501,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "93"
										},
										{
											"begin": 9433,
											"end": 9501,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 9433,
											"end": 9501,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 9433,
											"end": 9501,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 9433,
											"end": 9501,
											"name": "PUSH",
											"source": 2,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 9433,
											"end": 9501,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 9433,
											"end": 9501,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 9433,
											"end": 9501,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 9433,
											"end": 9501,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 9433,
											"end": 9501,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 9433,
											"end": 9501,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 9433,
											"end": 9501,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 9433,
											"end": 9501,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 9433,
											"end": 9501,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 9433,
											"end": 9501,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 9433,
											"end": 9501,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 9433,
											"end": 9501,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 9433,
											"end": 9501,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 9433,
											"end": 9501,
											"name": "PUSH",
											"source": 2,
											"value": "24"
										},
										{
											"begin": 9433,
											"end": 9501,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 9433,
											"end": 9501,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 9433,
											"end": 9501,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 9433,
											"end": 9501,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 9433,
											"end": 9501,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 9433,
											"end": 9501,
											"name": "PUSH data",
											"source": 2,
											"value": "C953F4879035ED60E766B34720F656AAB5C697B141D924C283124ECEDB91C208"
										},
										{
											"begin": 9433,
											"end": 9501,
											"name": "PUSH",
											"source": 2,
											"value": "24"
										},
										{
											"begin": 9433,
											"end": 9501,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 9433,
											"end": 9501,
											"name": "CODECOPY",
											"source": 2
										},
										{
											"begin": 9433,
											"end": 9501,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 9433,
											"end": 9501,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 9433,
											"end": 9501,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 9433,
											"end": 9501,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 9433,
											"end": 9501,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 9433,
											"end": 9501,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 9433,
											"end": 9501,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 9433,
											"end": 9501,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 9433,
											"end": 9501,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 9433,
											"end": 9501,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 9433,
											"end": 9501,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 9433,
											"end": 9501,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 9433,
											"end": 9501,
											"name": "tag",
											"source": 2,
											"value": "93"
										},
										{
											"begin": 9433,
											"end": 9501,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 9538,
											"end": 9539,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 9519,
											"end": 9540,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 9519,
											"end": 9540,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 9519,
											"end": 9526,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 9519,
											"end": 9540,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 9519,
											"end": 9540,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 9519,
											"end": 9540,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 9519,
											"end": 9540,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 9511,
											"end": 9579,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "94"
										},
										{
											"begin": 9511,
											"end": 9579,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 9511,
											"end": 9579,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 9511,
											"end": 9579,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 9511,
											"end": 9579,
											"name": "PUSH",
											"source": 2,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 9511,
											"end": 9579,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 9511,
											"end": 9579,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 9511,
											"end": 9579,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 9511,
											"end": 9579,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 9511,
											"end": 9579,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 9511,
											"end": 9579,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 9511,
											"end": 9579,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 9511,
											"end": 9579,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 9511,
											"end": 9579,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 9511,
											"end": 9579,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 9511,
											"end": 9579,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 9511,
											"end": 9579,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 9511,
											"end": 9579,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 9511,
											"end": 9579,
											"name": "PUSH",
											"source": 2,
											"value": "22"
										},
										{
											"begin": 9511,
											"end": 9579,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 9511,
											"end": 9579,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 9511,
											"end": 9579,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 9511,
											"end": 9579,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 9511,
											"end": 9579,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 9511,
											"end": 9579,
											"name": "PUSH data",
											"source": 2,
											"value": "24883CC5FE64ACE9D0DF1893501ECB93C77180F0FF69CCA79AFFB3C316DC8029"
										},
										{
											"begin": 9511,
											"end": 9579,
											"name": "PUSH",
											"source": 2,
											"value": "22"
										},
										{
											"begin": 9511,
											"end": 9579,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 9511,
											"end": 9579,
											"name": "CODECOPY",
											"source": 2
										},
										{
											"begin": 9511,
											"end": 9579,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 9511,
											"end": 9579,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 9511,
											"end": 9579,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 9511,
											"end": 9579,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 9511,
											"end": 9579,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 9511,
											"end": 9579,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 9511,
											"end": 9579,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 9511,
											"end": 9579,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 9511,
											"end": 9579,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 9511,
											"end": 9579,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 9511,
											"end": 9579,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 9511,
											"end": 9579,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 9511,
											"end": 9579,
											"name": "tag",
											"source": 2,
											"value": "94"
										},
										{
											"begin": 9511,
											"end": 9579,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 9620,
											"end": 9626,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 9590,
											"end": 9601,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 9590,
											"end": 9608,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 9602,
											"end": 9607,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 9590,
											"end": 9608,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 9590,
											"end": 9608,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 9590,
											"end": 9608,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 9590,
											"end": 9608,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 9590,
											"end": 9608,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 9590,
											"end": 9608,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 9590,
											"end": 9608,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 9590,
											"end": 9608,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 9590,
											"end": 9608,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 9590,
											"end": 9608,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 9590,
											"end": 9608,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 9590,
											"end": 9608,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 9590,
											"end": 9608,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 9590,
											"end": 9608,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 9590,
											"end": 9608,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 9590,
											"end": 9617,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 9609,
											"end": 9616,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 9590,
											"end": 9617,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 9590,
											"end": 9617,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 9590,
											"end": 9617,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 9590,
											"end": 9617,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 9590,
											"end": 9617,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 9590,
											"end": 9617,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 9590,
											"end": 9617,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 9590,
											"end": 9617,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 9590,
											"end": 9617,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 9590,
											"end": 9617,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 9590,
											"end": 9617,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 9590,
											"end": 9617,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 9590,
											"end": 9617,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 9590,
											"end": 9617,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 9590,
											"end": 9617,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 9590,
											"end": 9626,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 9590,
											"end": 9626,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 9590,
											"end": 9626,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 9590,
											"end": 9626,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 9657,
											"end": 9664,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 9641,
											"end": 9673,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 9641,
											"end": 9673,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 9650,
											"end": 9655,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 9641,
											"end": 9673,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 9641,
											"end": 9673,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 9641,
											"end": 9673,
											"name": "PUSH",
											"source": 2,
											"value": "8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925"
										},
										{
											"begin": 9666,
											"end": 9672,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 9641,
											"end": 9673,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 9641,
											"end": 9673,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 9641,
											"end": 9673,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 9641,
											"end": 9673,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 9641,
											"end": 9673,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 9641,
											"end": 9673,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 9641,
											"end": 9673,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 9641,
											"end": 9673,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 9641,
											"end": 9673,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 9641,
											"end": 9673,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 9641,
											"end": 9673,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 9641,
											"end": 9673,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 9641,
											"end": 9673,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 9641,
											"end": 9673,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 9641,
											"end": 9673,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 9641,
											"end": 9673,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 9641,
											"end": 9673,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 9641,
											"end": 9673,
											"name": "LOG3",
											"source": 2
										},
										{
											"begin": 9340,
											"end": 9680,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 9340,
											"end": 9680,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 9340,
											"end": 9680,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 9340,
											"end": 9680,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 7016,
											"end": 7546,
											"name": "tag",
											"source": 2,
											"value": "64"
										},
										{
											"begin": 7016,
											"end": 7546,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 7139,
											"end": 7140,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 7121,
											"end": 7141,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7121,
											"end": 7141,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 7121,
											"end": 7127,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 7121,
											"end": 7141,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7121,
											"end": 7141,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 7121,
											"end": 7141,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 7121,
											"end": 7141,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 7113,
											"end": 7183,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "96"
										},
										{
											"begin": 7113,
											"end": 7183,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 7113,
											"end": 7183,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 7113,
											"end": 7183,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 7113,
											"end": 7183,
											"name": "PUSH",
											"source": 2,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 7113,
											"end": 7183,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7113,
											"end": 7183,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 7113,
											"end": 7183,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 7113,
											"end": 7183,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 7113,
											"end": 7183,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 7113,
											"end": 7183,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 7113,
											"end": 7183,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 7113,
											"end": 7183,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 7113,
											"end": 7183,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 7113,
											"end": 7183,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7113,
											"end": 7183,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 7113,
											"end": 7183,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 7113,
											"end": 7183,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 7113,
											"end": 7183,
											"name": "PUSH",
											"source": 2,
											"value": "25"
										},
										{
											"begin": 7113,
											"end": 7183,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7113,
											"end": 7183,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 7113,
											"end": 7183,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 7113,
											"end": 7183,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 7113,
											"end": 7183,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 7113,
											"end": 7183,
											"name": "PUSH data",
											"source": 2,
											"value": "BAECC556B46F4ED0F2B4CB599D60785AC8563DD2DC0A5BF12EDEA1C39E5E1FEA"
										},
										{
											"begin": 7113,
											"end": 7183,
											"name": "PUSH",
											"source": 2,
											"value": "25"
										},
										{
											"begin": 7113,
											"end": 7183,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 7113,
											"end": 7183,
											"name": "CODECOPY",
											"source": 2
										},
										{
											"begin": 7113,
											"end": 7183,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 7113,
											"end": 7183,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 7113,
											"end": 7183,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 7113,
											"end": 7183,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 7113,
											"end": 7183,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 7113,
											"end": 7183,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 7113,
											"end": 7183,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 7113,
											"end": 7183,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 7113,
											"end": 7183,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 7113,
											"end": 7183,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 7113,
											"end": 7183,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7113,
											"end": 7183,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 7113,
											"end": 7183,
											"name": "tag",
											"source": 2,
											"value": "96"
										},
										{
											"begin": 7113,
											"end": 7183,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 7222,
											"end": 7223,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 7201,
											"end": 7224,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7201,
											"end": 7224,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 7201,
											"end": 7210,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 7201,
											"end": 7224,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7201,
											"end": 7224,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 7201,
											"end": 7224,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 7201,
											"end": 7224,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 7193,
											"end": 7264,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "97"
										},
										{
											"begin": 7193,
											"end": 7264,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 7193,
											"end": 7264,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 7193,
											"end": 7264,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 7193,
											"end": 7264,
											"name": "PUSH",
											"source": 2,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 7193,
											"end": 7264,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7193,
											"end": 7264,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 7193,
											"end": 7264,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 7193,
											"end": 7264,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 7193,
											"end": 7264,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 7193,
											"end": 7264,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 7193,
											"end": 7264,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 7193,
											"end": 7264,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 7193,
											"end": 7264,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 7193,
											"end": 7264,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7193,
											"end": 7264,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 7193,
											"end": 7264,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 7193,
											"end": 7264,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 7193,
											"end": 7264,
											"name": "PUSH",
											"source": 2,
											"value": "23"
										},
										{
											"begin": 7193,
											"end": 7264,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7193,
											"end": 7264,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 7193,
											"end": 7264,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 7193,
											"end": 7264,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 7193,
											"end": 7264,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 7193,
											"end": 7264,
											"name": "PUSH data",
											"source": 2,
											"value": "557E210F7A69A685100A7E4E3D0A7024C546085CEE28910FD17D0B081D9516F"
										},
										{
											"begin": 7193,
											"end": 7264,
											"name": "PUSH",
											"source": 2,
											"value": "23"
										},
										{
											"begin": 7193,
											"end": 7264,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 7193,
											"end": 7264,
											"name": "CODECOPY",
											"source": 2
										},
										{
											"begin": 7193,
											"end": 7264,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 7193,
											"end": 7264,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 7193,
											"end": 7264,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 7193,
											"end": 7264,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 7193,
											"end": 7264,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 7193,
											"end": 7264,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 7193,
											"end": 7264,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 7193,
											"end": 7264,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 7193,
											"end": 7264,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 7193,
											"end": 7264,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 7193,
											"end": 7264,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7193,
											"end": 7264,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 7193,
											"end": 7264,
											"name": "tag",
											"source": 2,
											"value": "97"
										},
										{
											"begin": 7193,
											"end": 7264,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 7275,
											"end": 7322,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "98"
										},
										{
											"begin": 7296,
											"end": 7302,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 7304,
											"end": 7313,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 7315,
											"end": 7321,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 7275,
											"end": 7295,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "99"
										},
										{
											"begin": 7275,
											"end": 7322,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 7275,
											"end": 7322,
											"name": "tag",
											"source": 2,
											"value": "98"
										},
										{
											"begin": 7275,
											"end": 7322,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 7353,
											"end": 7424,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "100"
										},
										{
											"begin": 7375,
											"end": 7381,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7353,
											"end": 7424,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 7353,
											"end": 7424,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 7353,
											"end": 7424,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 7353,
											"end": 7424,
											"name": "PUSH",
											"source": 2,
											"value": "60"
										},
										{
											"begin": 7353,
											"end": 7424,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 7353,
											"end": 7424,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 7353,
											"end": 7424,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 7353,
											"end": 7424,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 7353,
											"end": 7424,
											"name": "PUSH",
											"source": 2,
											"value": "26"
										},
										{
											"begin": 7353,
											"end": 7424,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7353,
											"end": 7424,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 7353,
											"end": 7424,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 7353,
											"end": 7424,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 7353,
											"end": 7424,
											"name": "PUSH data",
											"source": 2,
											"value": "4107E8A8B9E94BF8FF83080DDEC1C0BFFE897EBC2241B89D44F66B3D274088B6"
										},
										{
											"begin": 7353,
											"end": 7424,
											"name": "PUSH",
											"source": 2,
											"value": "26"
										},
										{
											"begin": 7353,
											"end": 7424,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 7353,
											"end": 7424,
											"name": "CODECOPY",
											"source": 2
										},
										{
											"begin": 7353,
											"end": 7362,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 7353,
											"end": 7370,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 7363,
											"end": 7369,
											"name": "DUP8",
											"source": 2
										},
										{
											"begin": 7353,
											"end": 7370,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7353,
											"end": 7370,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 7353,
											"end": 7370,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7353,
											"end": 7370,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 7353,
											"end": 7370,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7353,
											"end": 7370,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 7353,
											"end": 7370,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 7353,
											"end": 7370,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 7353,
											"end": 7370,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7353,
											"end": 7370,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7353,
											"end": 7370,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 7353,
											"end": 7370,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 7353,
											"end": 7370,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 7353,
											"end": 7370,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 7353,
											"end": 7370,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 7353,
											"end": 7370,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 7353,
											"end": 7374,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "69"
										},
										{
											"begin": 7353,
											"end": 7374,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7353,
											"end": 7424,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 7353,
											"end": 7424,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 7353,
											"end": 7424,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7353,
											"end": 7424,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFF"
										},
										{
											"begin": 7353,
											"end": 7424,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 7353,
											"end": 7424,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 7353,
											"end": 7424,
											"name": "tag",
											"source": 2,
											"value": "100"
										},
										{
											"begin": 7353,
											"end": 7424,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 7333,
											"end": 7342,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 7333,
											"end": 7350,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 7343,
											"end": 7349,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 7333,
											"end": 7350,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7333,
											"end": 7350,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 7333,
											"end": 7350,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7333,
											"end": 7350,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 7333,
											"end": 7350,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7333,
											"end": 7350,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 7333,
											"end": 7350,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 7333,
											"end": 7350,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 7333,
											"end": 7350,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7333,
											"end": 7350,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7333,
											"end": 7350,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 7333,
											"end": 7350,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 7333,
											"end": 7350,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 7333,
											"end": 7350,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 7333,
											"end": 7350,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 7333,
											"end": 7424,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7333,
											"end": 7424,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7333,
											"end": 7424,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 7333,
											"end": 7424,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 7457,
											"end": 7489,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "101"
										},
										{
											"begin": 7482,
											"end": 7488,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7457,
											"end": 7466,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 7457,
											"end": 7477,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 7467,
											"end": 7476,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 7457,
											"end": 7477,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7457,
											"end": 7477,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 7457,
											"end": 7477,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7457,
											"end": 7477,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 7457,
											"end": 7477,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7457,
											"end": 7477,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 7457,
											"end": 7477,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 7457,
											"end": 7477,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 7457,
											"end": 7477,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7457,
											"end": 7477,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7457,
											"end": 7477,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 7457,
											"end": 7477,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 7457,
											"end": 7477,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 7457,
											"end": 7477,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 7457,
											"end": 7477,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 7457,
											"end": 7477,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 7457,
											"end": 7481,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "76"
										},
										{
											"begin": 7457,
											"end": 7481,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7457,
											"end": 7489,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 7457,
											"end": 7489,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7457,
											"end": 7489,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFF"
										},
										{
											"begin": 7457,
											"end": 7489,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 7457,
											"end": 7489,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 7457,
											"end": 7489,
											"name": "tag",
											"source": 2,
											"value": "101"
										},
										{
											"begin": 7457,
											"end": 7489,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 7434,
											"end": 7443,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 7434,
											"end": 7454,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 7444,
											"end": 7453,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 7434,
											"end": 7454,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7434,
											"end": 7454,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 7434,
											"end": 7454,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7434,
											"end": 7454,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 7434,
											"end": 7454,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7434,
											"end": 7454,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 7434,
											"end": 7454,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 7434,
											"end": 7454,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 7434,
											"end": 7454,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7434,
											"end": 7454,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7434,
											"end": 7454,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 7434,
											"end": 7454,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 7434,
											"end": 7454,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 7434,
											"end": 7454,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 7434,
											"end": 7454,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 7434,
											"end": 7489,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7434,
											"end": 7489,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7434,
											"end": 7489,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 7434,
											"end": 7489,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 7521,
											"end": 7530,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7504,
											"end": 7539,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7504,
											"end": 7539,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 7513,
											"end": 7519,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 7504,
											"end": 7539,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7504,
											"end": 7539,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 7504,
											"end": 7539,
											"name": "PUSH",
											"source": 2,
											"value": "DDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF"
										},
										{
											"begin": 7532,
											"end": 7538,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 7504,
											"end": 7539,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 7504,
											"end": 7539,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 7504,
											"end": 7539,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 7504,
											"end": 7539,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 7504,
											"end": 7539,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7504,
											"end": 7539,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 7504,
											"end": 7539,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 7504,
											"end": 7539,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 7504,
											"end": 7539,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 7504,
											"end": 7539,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 7504,
											"end": 7539,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 7504,
											"end": 7539,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 7504,
											"end": 7539,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 7504,
											"end": 7539,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 7504,
											"end": 7539,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 7504,
											"end": 7539,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 7504,
											"end": 7539,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7504,
											"end": 7539,
											"name": "LOG3",
											"source": 2
										},
										{
											"begin": 7016,
											"end": 7546,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 7016,
											"end": 7546,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 7016,
											"end": 7546,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 7016,
											"end": 7546,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 5424,
											"end": 5587,
											"name": "tag",
											"source": 1,
											"value": "69"
										},
										{
											"begin": 5424,
											"end": 5587,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 5510,
											"end": 5517,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 5542,
											"end": 5543,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 5537,
											"end": 5538,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 5537,
											"end": 5543,
											"name": "GT",
											"source": 1
										},
										{
											"begin": 5537,
											"end": 5543,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 5545,
											"end": 5557,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "103"
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "PUSH",
											"source": 1,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "tag",
											"source": 1,
											"value": "104"
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "LT",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "106"
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "104"
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "tag",
											"source": 1,
											"value": "106"
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "PUSH",
											"source": 1,
											"value": "1F"
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "107"
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "EXP",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "NOT",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "tag",
											"source": 1,
											"value": "107"
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "tag",
											"source": 1,
											"value": "103"
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 5579,
											"end": 5580,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 5575,
											"end": 5576,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 5575,
											"end": 5580,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 5568,
											"end": 5580,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 5568,
											"end": 5580,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 5424,
											"end": 5587,
											"name": "SWAP4",
											"source": 1
										},
										{
											"begin": 5424,
											"end": 5587,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 5424,
											"end": 5587,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 5424,
											"end": 5587,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 5424,
											"end": 5587,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 5424,
											"end": 5587,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 2682,
											"end": 2857,
											"name": "tag",
											"source": 1,
											"value": "76"
										},
										{
											"begin": 2682,
											"end": 2857,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2740,
											"end": 2747,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 2759,
											"end": 2768,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 2775,
											"end": 2776,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 2771,
											"end": 2772,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 2771,
											"end": 2776,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 2759,
											"end": 2776,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2759,
											"end": 2776,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 2799,
											"end": 2800,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 2794,
											"end": 2795,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2794,
											"end": 2800,
											"name": "LT",
											"source": 1
										},
										{
											"begin": 2794,
											"end": 2800,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "109"
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "PUSH",
											"source": 1,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "PUSH",
											"source": 1,
											"value": "1B"
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "PUSH",
											"source": 1,
											"value": "536166654D6174683A206164646974696F6E206F766572666C6F770000000000"
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "tag",
											"source": 1,
											"value": "109"
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2849,
											"end": 2850,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 2842,
											"end": 2850,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 2842,
											"end": 2850,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 2842,
											"end": 2850,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 2682,
											"end": 2857,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 2682,
											"end": 2857,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 2682,
											"end": 2857,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 2682,
											"end": 2857,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 2682,
											"end": 2857,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 10686,
											"end": 10778,
											"name": "tag",
											"source": 2,
											"value": "99"
										},
										{
											"begin": 10686,
											"end": 10778,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 10686,
											"end": 10778,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 10686,
											"end": 10778,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 10686,
											"end": 10778,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 10686,
											"end": 10778,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										}
									],
									".data": {
										"24883CC5FE64ACE9D0DF1893501ECB93C77180F0FF69CCA79AFFB3C316DC8029": "45524332303a20617070726f766520746f20746865207a65726f2061646472657373",
										"4107E8A8B9E94BF8FF83080DDEC1C0BFFE897EBC2241B89D44F66B3D274088B6": "45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e6365",
										"557E210F7A69A685100A7E4E3D0A7024C546085CEE28910FD17D0B081D9516F": "45524332303a207472616e7366657220746f20746865207a65726f2061646472657373",
										"974D1B4421DA69CC60B481194F0DAD36A5BB4E23DA810DA7A7FB30CDBA178330": "45524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e6365",
										"BAECC556B46F4ED0F2B4CB599D60785AC8563DD2DC0A5BF12EDEA1C39E5E1FEA": "45524332303a207472616e736665722066726f6d20746865207a65726f2061646472657373",
										"C953F4879035ED60E766B34720F656AAB5C697B141D924C283124ECEDB91C208": "45524332303a20617070726f76652066726f6d20746865207a65726f2061646472657373",
										"F8B476F7D28209D77D4A4AC1FE36B9F8259AA1BB6BDDFA6E89DE7E51615CF8A8": "45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726f"
									}
								}
							}
						},
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"decimals()": "313ce567",
							"decreaseAllowance(address,uint256)": "a457c2d7",
							"increaseAllowance(address,uint256)": "39509351",
							"name()": "06fdde03",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC20} interface. This implementation is agnostic to the way tokens are created. This means that a supply mechanism has to be added in a derived contract using {_mint}. For a generic mechanism see {ERC20PresetMinterPauser}. TIP: For a detailed writeup see our guide https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How to implement supply mechanisms]. We have followed general OpenZeppelin guidelines: functions revert instead of returning `false` on failure. This behavior is nonetheless conventional and does not conflict with the expectations of ERC20 applications. Additionally, an {Approval} event is emitted on calls to {transferFrom}. This allows applications to reconstruct the allowance for all accounts just by listening to said events. Other implementations of the EIP may not emit these events, as it isn't required by the specification. Finally, the non-standard {decreaseAllowance} and {increaseAllowance} functions have been added to mitigate the well-known issues around setting allowances. See {IERC20-approve}.\",\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"constructor\":{\"details\":\"Sets the values for {name} and {symbol}, initializes {decimals} with a default value of 18. To select a different value for {decimals}, use {_setupDecimals}. All three of these values are immutable: they can only be set once during construction.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is called. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":\"ERC20\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"keccak256\":\"0xe22a1fc7400ae196eba2ad1562d0386462b00a6363b742d55a2fd2021a58586f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4a635cec58fb4141a16cfd408f1a21ac944c335a3beaba541c35d2e95c04536f\",\"dweb:/ipfs/QmXWcz73UenN1ji8jiWMbzxHjjfLbNQwLVKTEB5zNFE34K\"]},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"keccak256\":\"0x36b5ca4eabe888b39b10973621ca0dcc9b1508f8d06db9ddf045d7aa7c867d4a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ccbd79e8d556aa7011babb0e5d1e55a966add74853e7ba0274ff184bd96ef002\",\"dweb:/ipfs/QmV28ozNRUFDiDUMvCwcFmLTQPG6nfvgeKr4cmbHWoegtH\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xbd74f587ab9b9711801baf667db1426e4a03fd2d7f15af33e0e0d0394e7cef76\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2d0913dfbfce90d170df0d496ad7596c0778518e5fa7aba6c32562522546f66b\",\"dweb:/ipfs/QmR6B8nLj2PJf5e1JWD9Nk7ErkAwkqUwadCnvE82FJr1RU\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ded47ec7c96750f9bd04bbbc84f659992d4ba901cb7b532a52cd468272cf378f\",\"dweb:/ipfs/QmfBrGtQP7rZEqEg6Wz6jh2N2Kukpj1z5v3CGWmAqrzm96\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 383,
								"contract": "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
								"label": "_balances",
								"offset": 0,
								"slot": "0",
								"type": "t_mapping(t_address,t_uint256)"
							},
							{
								"astId": 389,
								"contract": "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
								"label": "_allowances",
								"offset": 0,
								"slot": "1",
								"type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
							},
							{
								"astId": 391,
								"contract": "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
								"label": "_totalSupply",
								"offset": 0,
								"slot": "2",
								"type": "t_uint256"
							},
							{
								"astId": 393,
								"contract": "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
								"label": "_name",
								"offset": 0,
								"slot": "3",
								"type": "t_string_storage"
							},
							{
								"astId": 395,
								"contract": "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
								"label": "_symbol",
								"offset": 0,
								"slot": "4",
								"type": "t_string_storage"
							},
							{
								"astId": 397,
								"contract": "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
								"label": "_decimals",
								"offset": 0,
								"slot": "5",
								"type": "t_uint8"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_mapping(t_address,t_mapping(t_address,t_uint256))": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => mapping(address => uint256))",
								"numberOfBytes": "32",
								"value": "t_mapping(t_address,t_uint256)"
							},
							"t_mapping(t_address,t_uint256)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_string_storage": {
								"encoding": "bytes",
								"label": "string",
								"numberOfBytes": "32"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							},
							"t_uint8": {
								"encoding": "inplace",
								"label": "uint8",
								"numberOfBytes": "1"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"IERC20": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC20 standard as defined in the EIP.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the amount of tokens owned by `account`."
							},
							"totalSupply()": {
								"details": "Returns the amount of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves `amount` tokens from the caller's account to `recipient`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves `amount` tokens from `sender` to `recipient` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `recipient`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `sender` to `recipient` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xbd74f587ab9b9711801baf667db1426e4a03fd2d7f15af33e0e0d0394e7cef76\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2d0913dfbfce90d170df0d496ad7596c0778518e5fa7aba6c32562522546f66b\",\"dweb:/ipfs/QmR6B8nLj2PJf5e1JWD9Nk7ErkAwkqUwadCnvE82FJr1RU\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC721/IERC721.sol": {
				"IERC721": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "approved",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "ApprovalForAll",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "getApproved",
							"outputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "isApprovedForAll",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ownerOf",
							"outputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "_approved",
									"type": "bool"
								}
							],
							"name": "setApprovalForAll",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Required interface of an ERC721 compliant contract.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when `owner` enables `approved` to manage the `tokenId` token."
							},
							"ApprovalForAll(address,address,bool)": {
								"details": "Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `tokenId` token is transferred from `from` to `to`."
							}
						},
						"kind": "dev",
						"methods": {
							"approve(address,uint256)": {
								"details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the number of tokens in ``owner``'s account."
							},
							"getApproved(uint256)": {
								"details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"isApprovedForAll(address,address)": {
								"details": "Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"
							},
							"ownerOf(uint256)": {
								"details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"safeTransferFrom(address,address,uint256)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
							},
							"safeTransferFrom(address,address,uint256,bytes)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
							},
							"setApprovalForAll(address,bool)": {
								"details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."
							},
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Transfers `tokenId` token from `from` to `to`. WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"getApproved(uint256)": "081812fc",
							"isApprovedForAll(address,address)": "e985e9c5",
							"ownerOf(uint256)": "6352211e",
							"safeTransferFrom(address,address,uint256)": "42842e0e",
							"safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
							"setApprovalForAll(address,bool)": "a22cb465",
							"supportsInterface(bytes4)": "01ffc9a7",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Required interface of an ERC721 compliant contract.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":\"IERC721\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/introspection/IERC165.sol\":{\"keccak256\":\"0xd2f30fad5b24c4120f96dbac83aacdb7993ee610a9092bc23c44463da292bf8d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e3d4e72409e392c7694b6405a0136cf073d8da016df33ef8f9ad195f724ebfea\",\"dweb:/ipfs/QmPGcddKq6CgsiKnxUUif2q76wRqP3dmdQ6bKuHCLmb8Wa\"]},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0xb11597841d47f7a773bca63ca323c76f804cb5d944788de0327db5526319dc82\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://930d2da1934886a1098753be4173dd89c45ca0b306a1930accd37e00b1af4aaf\",\"dweb:/ipfs/QmVSXnvEV41d43k8cfpANHoTYMKgBDBL8iCbxkLfEtQZBe\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC721/IERC721Enumerable.sol": {
				"IERC721Enumerable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "approved",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "ApprovalForAll",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "getApproved",
							"outputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "isApprovedForAll",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ownerOf",
							"outputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "_approved",
									"type": "bool"
								}
							],
							"name": "setApprovalForAll",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "index",
									"type": "uint256"
								}
							],
							"name": "tokenByIndex",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "index",
									"type": "uint256"
								}
							],
							"name": "tokenOfOwnerByIndex",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "See https://eips.ethereum.org/EIPS/eip-721",
						"kind": "dev",
						"methods": {
							"approve(address,uint256)": {
								"details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the number of tokens in ``owner``'s account."
							},
							"getApproved(uint256)": {
								"details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"isApprovedForAll(address,address)": {
								"details": "Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"
							},
							"ownerOf(uint256)": {
								"details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"safeTransferFrom(address,address,uint256)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
							},
							"safeTransferFrom(address,address,uint256,bytes)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
							},
							"setApprovalForAll(address,bool)": {
								"details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."
							},
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							},
							"tokenByIndex(uint256)": {
								"details": "Returns a token ID at a given `index` of all the tokens stored by the contract. Use along with {totalSupply} to enumerate all tokens."
							},
							"tokenOfOwnerByIndex(address,uint256)": {
								"details": "Returns a token ID owned by `owner` at a given `index` of its token list. Use along with {balanceOf} to enumerate all of ``owner``'s tokens."
							},
							"totalSupply()": {
								"details": "Returns the total amount of tokens stored by the contract."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Transfers `tokenId` token from `from` to `to`. WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."
							}
						},
						"title": "ERC-721 Non-Fungible Token Standard, optional enumeration extension",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"getApproved(uint256)": "081812fc",
							"isApprovedForAll(address,address)": "e985e9c5",
							"ownerOf(uint256)": "6352211e",
							"safeTransferFrom(address,address,uint256)": "42842e0e",
							"safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
							"setApprovalForAll(address,bool)": "a22cb465",
							"supportsInterface(bytes4)": "01ffc9a7",
							"tokenByIndex(uint256)": "4f6ccce7",
							"tokenOfOwnerByIndex(address,uint256)": "2f745c59",
							"totalSupply()": "18160ddd",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-721\",\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"tokenByIndex(uint256)\":{\"details\":\"Returns a token ID at a given `index` of all the tokens stored by the contract. Use along with {totalSupply} to enumerate all tokens.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"Returns a token ID owned by `owner` at a given `index` of its token list. Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\"},\"totalSupply()\":{\"details\":\"Returns the total amount of tokens stored by the contract.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"title\":\"ERC-721 Non-Fungible Token Standard, optional enumeration extension\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/IERC721Enumerable.sol\":\"IERC721Enumerable\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/introspection/IERC165.sol\":{\"keccak256\":\"0xd2f30fad5b24c4120f96dbac83aacdb7993ee610a9092bc23c44463da292bf8d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e3d4e72409e392c7694b6405a0136cf073d8da016df33ef8f9ad195f724ebfea\",\"dweb:/ipfs/QmPGcddKq6CgsiKnxUUif2q76wRqP3dmdQ6bKuHCLmb8Wa\"]},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0xb11597841d47f7a773bca63ca323c76f804cb5d944788de0327db5526319dc82\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://930d2da1934886a1098753be4173dd89c45ca0b306a1930accd37e00b1af4aaf\",\"dweb:/ipfs/QmVSXnvEV41d43k8cfpANHoTYMKgBDBL8iCbxkLfEtQZBe\"]},\"@openzeppelin/contracts/token/ERC721/IERC721Enumerable.sol\":{\"keccak256\":\"0x2789dfea2d73182683d637db5729201f6730dae6113030a94c828f8688f38f2f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://36374eaa68c0737bf7e1ae13d55327b4868fb0825e971ee729f4b8d355ededb4\",\"dweb:/ipfs/QmYN9yuzz4P5SumiT6rgYgTEY8MhnPQapMwx2LHxRKju7r\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC721/IERC721Metadata.sol": {
				"IERC721Metadata": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "approved",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "ApprovalForAll",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "getApproved",
							"outputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "isApprovedForAll",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ownerOf",
							"outputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "_approved",
									"type": "bool"
								}
							],
							"name": "setApprovalForAll",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "tokenURI",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "See https://eips.ethereum.org/EIPS/eip-721",
						"kind": "dev",
						"methods": {
							"approve(address,uint256)": {
								"details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the number of tokens in ``owner``'s account."
							},
							"getApproved(uint256)": {
								"details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"isApprovedForAll(address,address)": {
								"details": "Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"
							},
							"name()": {
								"details": "Returns the token collection name."
							},
							"ownerOf(uint256)": {
								"details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"safeTransferFrom(address,address,uint256)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
							},
							"safeTransferFrom(address,address,uint256,bytes)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
							},
							"setApprovalForAll(address,bool)": {
								"details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."
							},
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							},
							"symbol()": {
								"details": "Returns the token collection symbol."
							},
							"tokenURI(uint256)": {
								"details": "Returns the Uniform Resource Identifier (URI) for `tokenId` token."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Transfers `tokenId` token from `from` to `to`. WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."
							}
						},
						"title": "ERC-721 Non-Fungible Token Standard, optional metadata extension",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"getApproved(uint256)": "081812fc",
							"isApprovedForAll(address,address)": "e985e9c5",
							"name()": "06fdde03",
							"ownerOf(uint256)": "6352211e",
							"safeTransferFrom(address,address,uint256)": "42842e0e",
							"safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
							"setApprovalForAll(address,bool)": "a22cb465",
							"supportsInterface(bytes4)": "01ffc9a7",
							"symbol()": "95d89b41",
							"tokenURI(uint256)": "c87b56dd",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-721\",\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"name()\":{\"details\":\"Returns the token collection name.\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"symbol()\":{\"details\":\"Returns the token collection symbol.\"},\"tokenURI(uint256)\":{\"details\":\"Returns the Uniform Resource Identifier (URI) for `tokenId` token.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"title\":\"ERC-721 Non-Fungible Token Standard, optional metadata extension\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/IERC721Metadata.sol\":\"IERC721Metadata\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/introspection/IERC165.sol\":{\"keccak256\":\"0xd2f30fad5b24c4120f96dbac83aacdb7993ee610a9092bc23c44463da292bf8d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e3d4e72409e392c7694b6405a0136cf073d8da016df33ef8f9ad195f724ebfea\",\"dweb:/ipfs/QmPGcddKq6CgsiKnxUUif2q76wRqP3dmdQ6bKuHCLmb8Wa\"]},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0xb11597841d47f7a773bca63ca323c76f804cb5d944788de0327db5526319dc82\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://930d2da1934886a1098753be4173dd89c45ca0b306a1930accd37e00b1af4aaf\",\"dweb:/ipfs/QmVSXnvEV41d43k8cfpANHoTYMKgBDBL8iCbxkLfEtQZBe\"]},\"@openzeppelin/contracts/token/ERC721/IERC721Metadata.sol\":{\"keccak256\":\"0xc82c7d1d732081d9bd23f1555ebdf8f3bc1738bc42c2bfc4b9aa7564d9fa3573\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5cb07e4ff3352161510a0d1536fe93f3c62526358e073a8bab2a8abbb27d0da1\",\"dweb:/ipfs/QmX7K1JjnWKT1JzZT92Qx5zNJQYbssE533TLFHP88hj2fb\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"Context": {
					"abi": [],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ded47ec7c96750f9bd04bbbc84f659992d4ba901cb7b532a52cd468272cf378f\",\"dweb:/ipfs/QmfBrGtQP7rZEqEg6Wz6jh2N2Kukpj1z5v3CGWmAqrzm96\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@uniswap/v3-core/contracts/libraries/FixedPoint96.sol": {
				"FixedPoint96": {
					"abi": [],
					"devdoc": {
						"details": "Used in SqrtPriceMath.sol",
						"kind": "dev",
						"methods": {},
						"title": "FixedPoint96",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@uniswap/v3-core/contracts/libraries/FixedPoint96.sol\":245:379  library FixedPoint96 {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  invalid\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@uniswap/v3-core/contracts/libraries/FixedPoint96.sol\":245:379  library FixedPoint96 {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220cd935ffdb208c4bfcd616e182c179927af7f6b697fdd91a406af805697b740b164736f6c63430007060033\n}\n",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220cd935ffdb208c4bfcd616e182c179927af7f6b697fdd91a406af805697b740b164736f6c63430007060033",
							"opcodes": "PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xCD SWAP4 0x5F REVERT 0xB2 ADDMOD 0xC4 0xBF 0xCD PUSH2 0x6E18 0x2C OR SWAP10 0x27 0xAF PUSH32 0x6B697FDD91A406AF805697B740B164736F6C6343000706003300000000000000 ",
							"sourceMap": "245:134:8:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220cd935ffdb208c4bfcd616e182c179927af7f6b697fdd91a406af805697b740b164736f6c63430007060033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xCD SWAP4 0x5F REVERT 0xB2 ADDMOD 0xC4 0xBF 0xCD PUSH2 0x6E18 0x2C OR SWAP10 0x27 0xAF PUSH32 0x6B697FDD91A406AF805697B740B164736F6C6343000706003300000000000000 ",
							"sourceMap": "245:134:8:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 245,
									"end": 379,
									"name": "PUSH #[$]",
									"source": 8,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 245,
									"end": 379,
									"name": "PUSH [$]",
									"source": 8,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 245,
									"end": 379,
									"name": "PUSH",
									"source": 8,
									"value": "B"
								},
								{
									"begin": 245,
									"end": 379,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 245,
									"end": 379,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 245,
									"end": 379,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 245,
									"end": 379,
									"name": "CODECOPY",
									"source": 8
								},
								{
									"begin": 245,
									"end": 379,
									"name": "DUP1",
									"source": 8
								},
								{
									"begin": 245,
									"end": 379,
									"name": "MLOAD",
									"source": 8
								},
								{
									"begin": 245,
									"end": 379,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 245,
									"end": 379,
									"name": "BYTE",
									"source": 8
								},
								{
									"begin": 245,
									"end": 379,
									"name": "PUSH",
									"source": 8,
									"value": "73"
								},
								{
									"begin": 245,
									"end": 379,
									"name": "EQ",
									"source": 8
								},
								{
									"begin": 245,
									"end": 379,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "1"
								},
								{
									"begin": 245,
									"end": 379,
									"name": "JUMPI",
									"source": 8
								},
								{
									"begin": 245,
									"end": 379,
									"name": "INVALID",
									"source": 8
								},
								{
									"begin": 245,
									"end": 379,
									"name": "tag",
									"source": 8,
									"value": "1"
								},
								{
									"begin": 245,
									"end": 379,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 245,
									"end": 379,
									"name": "ADDRESS",
									"source": 8
								},
								{
									"begin": 245,
									"end": 379,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 245,
									"end": 379,
									"name": "MSTORE",
									"source": 8
								},
								{
									"begin": 245,
									"end": 379,
									"name": "PUSH",
									"source": 8,
									"value": "73"
								},
								{
									"begin": 245,
									"end": 379,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 245,
									"end": 379,
									"name": "MSTORE8",
									"source": 8
								},
								{
									"begin": 245,
									"end": 379,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 245,
									"end": 379,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 245,
									"end": 379,
									"name": "RETURN",
									"source": 8
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220cd935ffdb208c4bfcd616e182c179927af7f6b697fdd91a406af805697b740b164736f6c63430007060033",
									".code": [
										{
											"begin": 245,
											"end": 379,
											"name": "PUSHDEPLOYADDRESS",
											"source": 8
										},
										{
											"begin": 245,
											"end": 379,
											"name": "ADDRESS",
											"source": 8
										},
										{
											"begin": 245,
											"end": 379,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 245,
											"end": 379,
											"name": "PUSH",
											"source": 8,
											"value": "80"
										},
										{
											"begin": 245,
											"end": 379,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 245,
											"end": 379,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 245,
											"end": 379,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 245,
											"end": 379,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 245,
											"end": 379,
											"name": "REVERT",
											"source": 8
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Used in SqrtPriceMath.sol\",\"kind\":\"dev\",\"methods\":{},\"title\":\"FixedPoint96\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"A library for handling binary fixed point numbers, see https://en.wikipedia.org/wiki/Q_(number_format)\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@uniswap/v3-core/contracts/libraries/FixedPoint96.sol\":\"FixedPoint96\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@uniswap/v3-core/contracts/libraries/FixedPoint96.sol\":{\"keccak256\":\"0x0ba8a9b95a956a4050749c0158e928398c447c91469682ca8a7cc7e77a7fe032\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://186d3b528866065a5856f96d2aeec698efa99f8da913e9adf34f8cc296cc993d\",\"dweb:/ipfs/QmUAiMvtAQp8c9dy57bqJYzG7hkb1uChiPaQmt264skoqP\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"notice": "A library for handling binary fixed point numbers, see https://en.wikipedia.org/wiki/Q_(number_format)",
						"version": 1
					}
				}
			},
			"@uniswap/v3-core/contracts/libraries/FullMath.sol": {
				"FullMath": {
					"abi": [],
					"devdoc": {
						"details": "Handles \"phantom overflow\" i.e., allows multiplication and division where an intermediate value overflows 256 bits",
						"kind": "dev",
						"methods": {},
						"title": "Contains 512-bit math functions",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":355:5117  library FullMath {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  invalid\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":355:5117  library FullMath {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220f97ae9e42c2ca1a926a83032172f3d2633a16d41956edef5682492ed27764f4464736f6c63430007060033\n}\n",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220f97ae9e42c2ca1a926a83032172f3d2633a16d41956edef5682492ed27764f4464736f6c63430007060033",
							"opcodes": "PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xF9 PUSH27 0xE9E42C2CA1A926A83032172F3D2633A16D41956EDEF5682492ED27 PUSH23 0x4F4464736F6C6343000706003300000000000000000000 ",
							"sourceMap": "355:4762:9:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220f97ae9e42c2ca1a926a83032172f3d2633a16d41956edef5682492ed27764f4464736f6c63430007060033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xF9 PUSH27 0xE9E42C2CA1A926A83032172F3D2633A16D41956EDEF5682492ED27 PUSH23 0x4F4464736F6C6343000706003300000000000000000000 ",
							"sourceMap": "355:4762:9:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							},
							"internal": {
								"mulDiv(uint256,uint256,uint256)": "infinite",
								"mulDivRoundingUp(uint256,uint256,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 355,
									"end": 5117,
									"name": "PUSH #[$]",
									"source": 9,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 355,
									"end": 5117,
									"name": "PUSH [$]",
									"source": 9,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 355,
									"end": 5117,
									"name": "PUSH",
									"source": 9,
									"value": "B"
								},
								{
									"begin": 355,
									"end": 5117,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 355,
									"end": 5117,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 355,
									"end": 5117,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 355,
									"end": 5117,
									"name": "CODECOPY",
									"source": 9
								},
								{
									"begin": 355,
									"end": 5117,
									"name": "DUP1",
									"source": 9
								},
								{
									"begin": 355,
									"end": 5117,
									"name": "MLOAD",
									"source": 9
								},
								{
									"begin": 355,
									"end": 5117,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 355,
									"end": 5117,
									"name": "BYTE",
									"source": 9
								},
								{
									"begin": 355,
									"end": 5117,
									"name": "PUSH",
									"source": 9,
									"value": "73"
								},
								{
									"begin": 355,
									"end": 5117,
									"name": "EQ",
									"source": 9
								},
								{
									"begin": 355,
									"end": 5117,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "1"
								},
								{
									"begin": 355,
									"end": 5117,
									"name": "JUMPI",
									"source": 9
								},
								{
									"begin": 355,
									"end": 5117,
									"name": "INVALID",
									"source": 9
								},
								{
									"begin": 355,
									"end": 5117,
									"name": "tag",
									"source": 9,
									"value": "1"
								},
								{
									"begin": 355,
									"end": 5117,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 355,
									"end": 5117,
									"name": "ADDRESS",
									"source": 9
								},
								{
									"begin": 355,
									"end": 5117,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 355,
									"end": 5117,
									"name": "MSTORE",
									"source": 9
								},
								{
									"begin": 355,
									"end": 5117,
									"name": "PUSH",
									"source": 9,
									"value": "73"
								},
								{
									"begin": 355,
									"end": 5117,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 355,
									"end": 5117,
									"name": "MSTORE8",
									"source": 9
								},
								{
									"begin": 355,
									"end": 5117,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 355,
									"end": 5117,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 355,
									"end": 5117,
									"name": "RETURN",
									"source": 9
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220f97ae9e42c2ca1a926a83032172f3d2633a16d41956edef5682492ed27764f4464736f6c63430007060033",
									".code": [
										{
											"begin": 355,
											"end": 5117,
											"name": "PUSHDEPLOYADDRESS",
											"source": 9
										},
										{
											"begin": 355,
											"end": 5117,
											"name": "ADDRESS",
											"source": 9
										},
										{
											"begin": 355,
											"end": 5117,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 355,
											"end": 5117,
											"name": "PUSH",
											"source": 9,
											"value": "80"
										},
										{
											"begin": 355,
											"end": 5117,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 355,
											"end": 5117,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 355,
											"end": 5117,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 355,
											"end": 5117,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 355,
											"end": 5117,
											"name": "REVERT",
											"source": 9
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Handles \\\"phantom overflow\\\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\",\"kind\":\"dev\",\"methods\":{},\"title\":\"Contains 512-bit math functions\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@uniswap/v3-core/contracts/libraries/FullMath.sol\":\"FullMath\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@uniswap/v3-core/contracts/libraries/FullMath.sol\":{\"keccak256\":\"0xe511530871deaef86692cea9adb6076d26d7b47fd4815ce51af52af981026057\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bc5a6ae776be3e7dcbd23d49ffbc9d792fed0ddf4b111ebb64b9bb2133ec263e\",\"dweb:/ipfs/QmbAUtWqvipzEARQpFpkzYKBELy3qeW5WXnZxHFU84sxG7\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"notice": "Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision",
						"version": 1
					}
				}
			},
			"contracts/CoinSwitch.sol": {
				"StakeLPNFT": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_admin",
									"type": "address"
								},
								{
									"internalType": "contract INonfungiblePositionManager",
									"name": "_nftPositionManager",
									"type": "address"
								}
							],
							"stateMutability": "nonpayable",
							"type": "constructor"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "subtractedValue",
									"type": "uint256"
								}
							],
							"name": "decreaseAllowance",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "addedValue",
									"type": "uint256"
								}
							],
							"name": "increaseAllowance",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "_tokenId",
									"type": "uint256"
								}
							],
							"name": "stakeLP",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "See {IERC20-allowance}."
							},
							"approve(address,uint256)": {
								"details": "See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."
							},
							"balanceOf(address)": {
								"details": "See {IERC20-balanceOf}."
							},
							"decimals()": {
								"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is called. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
							},
							"decreaseAllowance(address,uint256)": {
								"details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
							},
							"increaseAllowance(address,uint256)": {
								"details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"symbol()": {
								"details": "Returns the symbol of the token, usually a shorter version of the name."
							},
							"totalSupply()": {
								"details": "See {IERC20-totalSupply}."
							},
							"transfer(address,uint256)": {
								"details": "See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."
							},
							"transferFrom(address,address,uint256)": {
								"details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/CoinSwitch.sol\":313:1377  contract StakeLPNFT is ERC20 {... */\n  mstore(0x40, 0x80)\n    /* \"contracts/CoinSwitch.sol\":426:611  constructor(address _admin, INonfungiblePositionManager _nftPositionManager) ERC20(\"Reward\",\"RWD\"){... */\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n  mload(0x40)\n  sub(codesize, bytecodeSize)\n  dup1\n  bytecodeSize\n  dup4\n  codecopy\n  dup2\n  dup2\n  add\n  0x40\n  mstore\n  0x40\n  dup2\n  lt\n  iszero\n  tag_2\n  jumpi\n  0x00\n  dup1\n  revert\ntag_2:\n  dup2\n  add\n  swap1\n  dup1\n  dup1\n  mload\n  swap1\n  0x20\n  add\n  swap1\n  swap3\n  swap2\n  swap1\n  dup1\n  mload\n  swap1\n  0x20\n  add\n  swap1\n  swap3\n  swap2\n  swap1\n  pop\n  pop\n  pop\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1950:2088  constructor (string memory name_, string memory symbol_) {... */\n  mload(0x40)\n  dup1\n  0x40\n  add\n  0x40\n  mstore\n  dup1\n  0x06\n  dup2\n  mstore\n  0x20\n  add\n  0x5265776172640000000000000000000000000000000000000000000000000000\n  dup2\n  mstore\n  pop\n  mload(0x40)\n  dup1\n  0x40\n  add\n  0x40\n  mstore\n  dup1\n  0x03\n  dup2\n  mstore\n  0x20\n  add\n  0x5257440000000000000000000000000000000000000000000000000000000000\n  dup2\n  mstore\n  pop\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2025:2030  name_ */\n  dup2\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2017:2022  _name */\n  0x03\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2017:2030  _name = name_ */\n  swap1\n  dup1\n  mload\n  swap1\n  0x20\n  add\n  swap1\n  tag_6\n  swap3\n  swap2\n  swap1\n  tag_7\n  jump\t// in\ntag_6:\n  pop\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2050:2057  symbol_ */\n  dup1\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2040:2047  _symbol */\n  0x04\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2040:2057  _symbol = symbol_ */\n  swap1\n  dup1\n  mload\n  swap1\n  0x20\n  add\n  swap1\n  tag_8\n  swap3\n  swap2\n  swap1\n  tag_7\n  jump\t// in\ntag_8:\n  pop\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2079:2081  18 */\n  0x12\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2067:2076  _decimals */\n  0x05\n  0x00\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2067:2081  _decimals = 18 */\n  0x0100\n  exp\n  dup2\n  sload\n  dup2\n  0xff\n  mul\n  not\n  and\n  swap1\n  dup4\n  0xff\n  and\n  mul\n  or\n  swap1\n  sstore\n  pop\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1950:2088  constructor (string memory name_, string memory symbol_) {... */\n  pop\n  pop\n    /* \"contracts/CoinSwitch.sol\":545:551  _admin */\n  dup2\n    /* \"contracts/CoinSwitch.sol\":537:542  admin */\n  0x05\n  0x01\n    /* \"contracts/CoinSwitch.sol\":537:551  admin = _admin */\n  0x0100\n  exp\n  dup2\n  sload\n  dup2\n  0xffffffffffffffffffffffffffffffffffffffff\n  mul\n  not\n  and\n  swap1\n  dup4\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n  mul\n  or\n  swap1\n  sstore\n  pop\n    /* \"contracts/CoinSwitch.sol\":585:604  _nftPositionManager */\n  dup1\n    /* \"contracts/CoinSwitch.sol\":564:582  nftPositionManager */\n  0x06\n  0x00\n    /* \"contracts/CoinSwitch.sol\":564:604  nftPositionManager = _nftPositionManager */\n  0x0100\n  exp\n  dup2\n  sload\n  dup2\n  0xffffffffffffffffffffffffffffffffffffffff\n  mul\n  not\n  and\n  swap1\n  dup4\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n  mul\n  or\n  swap1\n  sstore\n  pop\n    /* \"contracts/CoinSwitch.sol\":426:611  constructor(address _admin, INonfungiblePositionManager _nftPositionManager) ERC20(\"Reward\",\"RWD\"){... */\n  pop\n  pop\n    /* \"contracts/CoinSwitch.sol\":313:1377  contract StakeLPNFT is ERC20 {... */\n  jump(tag_10)\ntag_7:\n  dup3\n  dup1\n  sload\n  0x01\n  dup2\n  0x01\n  and\n  iszero\n  0x0100\n  mul\n  sub\n  and\n  0x02\n  swap1\n  div\n  swap1\n  0x00\n  mstore\n  keccak256(0x00, 0x20)\n  swap1\n  0x1f\n  add\n  0x20\n  swap1\n  div\n  dup2\n  add\n  swap3\n  dup3\n  tag_12\n  jumpi\n  0x00\n  dup6\n  sstore\n  jump(tag_11)\ntag_12:\n  dup3\n  0x1f\n  lt\n  tag_13\n  jumpi\n  dup1\n  mload\n  not(0xff)\n  and\n  dup4\n  dup1\n  add\n  or\n  dup6\n  sstore\n  jump(tag_11)\ntag_13:\n  dup3\n  dup1\n  add\n  0x01\n  add\n  dup6\n  sstore\n  dup3\n  iszero\n  tag_11\n  jumpi\n  swap2\n  dup3\n  add\ntag_14:\n  dup3\n  dup2\n  gt\n  iszero\n  tag_15\n  jumpi\n  dup3\n  mload\n  dup3\n  sstore\n  swap2\n  0x20\n  add\n  swap2\n  swap1\n  0x01\n  add\n  swap1\n  jump(tag_14)\ntag_15:\ntag_11:\n  pop\n  swap1\n  pop\n  tag_16\n  swap2\n  swap1\n  tag_17\n  jump\t// in\ntag_16:\n  pop\n  swap1\n  jump\t// out\ntag_17:\ntag_18:\n  dup1\n  dup3\n  gt\n  iszero\n  tag_19\n  jumpi\n  0x00\n  dup2\n  0x00\n  swap1\n  sstore\n  pop\n  0x01\n  add\n  jump(tag_18)\ntag_19:\n  pop\n  swap1\n  jump\t// out\ntag_10:\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/CoinSwitch.sol\":313:1377  contract StakeLPNFT is ERC20 {... */\n      mstore(0x40, 0x80)\n      callvalue\n      dup1\n      iszero\n      tag_1\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_1:\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x70a08231\n      gt\n      tag_15\n      jumpi\n      dup1\n      0x70a08231\n      eq\n      tag_9\n      jumpi\n      dup1\n      0x95d89b41\n      eq\n      tag_10\n      jumpi\n      dup1\n      0xa457c2d7\n      eq\n      tag_11\n      jumpi\n      dup1\n      0xa9059cbb\n      eq\n      tag_12\n      jumpi\n      dup1\n      0xdd62ed3e\n      eq\n      tag_13\n      jumpi\n      dup1\n      0xe5da2cb2\n      eq\n      tag_14\n      jumpi\n      jump(tag_2)\n    tag_15:\n      dup1\n      0x06fdde03\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x095ea7b3\n      eq\n      tag_4\n      jumpi\n      dup1\n      0x18160ddd\n      eq\n      tag_5\n      jumpi\n      dup1\n      0x23b872dd\n      eq\n      tag_6\n      jumpi\n      dup1\n      0x313ce567\n      eq\n      tag_7\n      jumpi\n      dup1\n      0x39509351\n      eq\n      tag_8\n      jumpi\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2153:2242  function name() public view virtual returns (string memory) {... */\n    tag_3:\n      tag_16\n      tag_17\n      jump\t// in\n    tag_16:\n      mload(0x40)\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      dup4\n      dup2\n      dup2\n      mload\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      dup1\n      mload\n      swap1\n      0x20\n      add\n      swap1\n      dup1\n      dup4\n      dup4\n      0x00\n    tag_18:\n      dup4\n      dup2\n      lt\n      iszero\n      tag_20\n      jumpi\n      dup1\n      dup3\n      add\n      mload\n      dup2\n      dup5\n      add\n      mstore\n      0x20\n      dup2\n      add\n      swap1\n      pop\n      jump(tag_18)\n    tag_20:\n      pop\n      pop\n      pop\n      pop\n      swap1\n      pop\n      swap1\n      dup2\n      add\n      swap1\n      0x1f\n      and\n      dup1\n      iszero\n      tag_21\n      jumpi\n      dup1\n      dup3\n      sub\n      dup1\n      mload\n      0x01\n      dup4\n      0x20\n      sub\n      0x0100\n      exp\n      sub\n      not\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n    tag_21:\n      pop\n      swap3\n      pop\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4229:4395  function approve(address spender, uint256 amount) public virtual override returns (bool) {... */\n    tag_4:\n      tag_22\n      0x04\n      dup1\n      calldatasize\n      sub\n      0x40\n      dup2\n      lt\n      iszero\n      tag_23\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_23:\n      dup2\n      add\n      swap1\n      dup1\n      dup1\n      calldataload\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      dup1\n      calldataload\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      pop\n      pop\n      pop\n      tag_24\n      jump\t// in\n    tag_22:\n      mload(0x40)\n      dup1\n      dup3\n      iszero\n      iszero\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3220:3326  function totalSupply() public view virtual override returns (uint256) {... */\n    tag_5:\n      tag_25\n      tag_26\n      jump\t// in\n    tag_25:\n      mload(0x40)\n      dup1\n      dup3\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4862:5179  function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {... */\n    tag_6:\n      tag_27\n      0x04\n      dup1\n      calldatasize\n      sub\n      0x60\n      dup2\n      lt\n      iszero\n      tag_28\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_28:\n      dup2\n      add\n      swap1\n      dup1\n      dup1\n      calldataload\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      dup1\n      calldataload\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      dup1\n      calldataload\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      pop\n      pop\n      pop\n      tag_29\n      jump\t// in\n    tag_27:\n      mload(0x40)\n      dup1\n      dup3\n      iszero\n      iszero\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3071:3160  function decimals() public view virtual returns (uint8) {... */\n    tag_7:\n      tag_30\n      tag_31\n      jump\t// in\n    tag_30:\n      mload(0x40)\n      dup1\n      dup3\n      0xff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5574:5789  function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {... */\n    tag_8:\n      tag_32\n      0x04\n      dup1\n      calldatasize\n      sub\n      0x40\n      dup2\n      lt\n      iszero\n      tag_33\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_33:\n      dup2\n      add\n      swap1\n      dup1\n      dup1\n      calldataload\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      dup1\n      calldataload\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      pop\n      pop\n      pop\n      tag_34\n      jump\t// in\n    tag_32:\n      mload(0x40)\n      dup1\n      dup3\n      iszero\n      iszero\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3384:3509  function balanceOf(address account) public view virtual override returns (uint256) {... */\n    tag_9:\n      tag_35\n      0x04\n      dup1\n      calldatasize\n      sub\n      0x20\n      dup2\n      lt\n      iszero\n      tag_36\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_36:\n      dup2\n      add\n      swap1\n      dup1\n      dup1\n      calldataload\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      pop\n      pop\n      pop\n      tag_37\n      jump\t// in\n    tag_35:\n      mload(0x40)\n      dup1\n      dup3\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2355:2448  function symbol() public view virtual returns (string memory) {... */\n    tag_10:\n      tag_38\n      tag_39\n      jump\t// in\n    tag_38:\n      mload(0x40)\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      dup4\n      dup2\n      dup2\n      mload\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      dup1\n      mload\n      swap1\n      0x20\n      add\n      swap1\n      dup1\n      dup4\n      dup4\n      0x00\n    tag_40:\n      dup4\n      dup2\n      lt\n      iszero\n      tag_42\n      jumpi\n      dup1\n      dup3\n      add\n      mload\n      dup2\n      dup5\n      add\n      mstore\n      0x20\n      dup2\n      add\n      swap1\n      pop\n      jump(tag_40)\n    tag_42:\n      pop\n      pop\n      pop\n      pop\n      swap1\n      pop\n      swap1\n      dup2\n      add\n      swap1\n      0x1f\n      and\n      dup1\n      iszero\n      tag_43\n      jumpi\n      dup1\n      dup3\n      sub\n      dup1\n      mload\n      0x01\n      dup4\n      0x20\n      sub\n      0x0100\n      exp\n      sub\n      not\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n    tag_43:\n      pop\n      swap3\n      pop\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6276:6542  function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {... */\n    tag_11:\n      tag_44\n      0x04\n      dup1\n      calldatasize\n      sub\n      0x40\n      dup2\n      lt\n      iszero\n      tag_45\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_45:\n      dup2\n      add\n      swap1\n      dup1\n      dup1\n      calldataload\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      dup1\n      calldataload\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      pop\n      pop\n      pop\n      tag_46\n      jump\t// in\n    tag_44:\n      mload(0x40)\n      dup1\n      dup3\n      iszero\n      iszero\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3712:3884  function transfer(address recipient, uint256 amount) public virtual override returns (bool) {... */\n    tag_12:\n      tag_47\n      0x04\n      dup1\n      calldatasize\n      sub\n      0x40\n      dup2\n      lt\n      iszero\n      tag_48\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_48:\n      dup2\n      add\n      swap1\n      dup1\n      dup1\n      calldataload\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      dup1\n      calldataload\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      pop\n      pop\n      pop\n      tag_49\n      jump\t// in\n    tag_47:\n      mload(0x40)\n      dup1\n      dup3\n      iszero\n      iszero\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3942:4091  function allowance(address owner, address spender) public view virtual override returns (uint256) {... */\n    tag_13:\n      tag_50\n      0x04\n      dup1\n      calldatasize\n      sub\n      0x40\n      dup2\n      lt\n      iszero\n      tag_51\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_51:\n      dup2\n      add\n      swap1\n      dup1\n      dup1\n      calldataload\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      dup1\n      calldataload\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      pop\n      pop\n      pop\n      tag_52\n      jump\t// in\n    tag_50:\n      mload(0x40)\n      dup1\n      dup3\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/CoinSwitch.sol\":617:1371  function stakeLP(uint _tokenId) public {... */\n    tag_14:\n      tag_53\n      0x04\n      dup1\n      calldatasize\n      sub\n      0x20\n      dup2\n      lt\n      iszero\n      tag_54\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_54:\n      dup2\n      add\n      swap1\n      dup1\n      dup1\n      calldataload\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      pop\n      pop\n      pop\n      tag_55\n      jump\t// in\n    tag_53:\n      stop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2153:2242  function name() public view virtual returns (string memory) {... */\n    tag_17:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2198:2211  string memory */\n      0x60\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2230:2235  _name */\n      0x03\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2223:2235  return _name */\n      dup1\n      sload\n      0x01\n      dup2\n      0x01\n      and\n      iszero\n      0x0100\n      mul\n      sub\n      and\n      0x02\n      swap1\n      div\n      dup1\n      0x1f\n      add\n      0x20\n      dup1\n      swap2\n      div\n      mul\n      0x20\n      add\n      mload(0x40)\n      swap1\n      dup2\n      add\n      0x40\n      mstore\n      dup1\n      swap3\n      swap2\n      swap1\n      dup2\n      dup2\n      mstore\n      0x20\n      add\n      dup3\n      dup1\n      sload\n      0x01\n      dup2\n      0x01\n      and\n      iszero\n      0x0100\n      mul\n      sub\n      and\n      0x02\n      swap1\n      div\n      dup1\n      iszero\n      tag_57\n      jumpi\n      dup1\n      0x1f\n      lt\n      tag_58\n      jumpi\n      0x0100\n      dup1\n      dup4\n      sload\n      div\n      mul\n      dup4\n      mstore\n      swap2\n      0x20\n      add\n      swap2\n      jump(tag_57)\n    tag_58:\n      dup3\n      add\n      swap2\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      swap1\n    tag_59:\n      dup2\n      sload\n      dup2\n      mstore\n      swap1\n      0x01\n      add\n      swap1\n      0x20\n      add\n      dup1\n      dup4\n      gt\n      tag_59\n      jumpi\n      dup3\n      swap1\n      sub\n      0x1f\n      and\n      dup3\n      add\n      swap2\n    tag_57:\n      pop\n      pop\n      pop\n      pop\n      pop\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2153:2242  function name() public view virtual returns (string memory) {... */\n      swap1\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4229:4395  function approve(address spender, uint256 amount) public virtual override returns (bool) {... */\n    tag_24:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4312:4316  bool */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4328:4367  _approve(_msgSender(), spender, amount) */\n      tag_61\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4337:4349  _msgSender() */\n      tag_62\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4337:4347  _msgSender */\n      tag_63\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4337:4349  _msgSender() */\n      jump\t// in\n    tag_62:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4351:4358  spender */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4360:4366  amount */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4328:4336  _approve */\n      tag_64\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4328:4367  _approve(_msgSender(), spender, amount) */\n      jump\t// in\n    tag_61:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4384:4388  true */\n      0x01\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4377:4388  return true */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4229:4395  function approve(address spender, uint256 amount) public virtual override returns (bool) {... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3220:3326  function totalSupply() public view virtual override returns (uint256) {... */\n    tag_26:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3281:3288  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3307:3319  _totalSupply */\n      sload(0x02)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3300:3319  return _totalSupply */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3220:3326  function totalSupply() public view virtual override returns (uint256) {... */\n      swap1\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4862:5179  function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {... */\n    tag_29:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4968:4972  bool */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4984:5020  _transfer(sender, recipient, amount) */\n      tag_67\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4994:5000  sender */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5002:5011  recipient */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5013:5019  amount */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4984:4993  _transfer */\n      tag_68\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4984:5020  _transfer(sender, recipient, amount) */\n      jump\t// in\n    tag_67:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5030:5151  _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\")) */\n      tag_69\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5039:5045  sender */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5047:5059  _msgSender() */\n      tag_70\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5047:5057  _msgSender */\n      tag_63\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5047:5059  _msgSender() */\n      jump\t// in\n    tag_70:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5061:5150  _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\") */\n      tag_71\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5099:5105  amount */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5061:5150  _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\") */\n      mload(0x40)\n      dup1\n      0x60\n      add\n      0x40\n      mstore\n      dup1\n      0x28\n      dup2\n      mstore\n      0x20\n      add\n      data_974d1b4421da69cc60b481194f0dad36a5bb4e23da810da7a7fb30cdba178330\n      0x28\n      swap2\n      codecopy\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5061:5072  _allowances */\n      0x01\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5061:5080  _allowances[sender] */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5073:5079  sender */\n      dup12\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5061:5080  _allowances[sender] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5061:5094  _allowances[sender][_msgSender()] */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5081:5093  _msgSender() */\n      tag_72\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5081:5091  _msgSender */\n      tag_63\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5081:5093  _msgSender() */\n      jump\t// in\n    tag_72:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5061:5094  _allowances[sender][_msgSender()] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      sload\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5061:5098  _allowances[sender][_msgSender()].sub */\n      tag_73\n      swap1\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5061:5150  _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\") */\n      swap3\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_71:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5030:5038  _approve */\n      tag_64\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5030:5151  _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\")) */\n      jump\t// in\n    tag_69:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5168:5172  true */\n      0x01\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5161:5172  return true */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4862:5179  function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {... */\n      swap4\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3071:3160  function decimals() public view virtual returns (uint8) {... */\n    tag_31:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3120:3125  uint8 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3144:3153  _decimals */\n      0x05\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xff\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3137:3153  return _decimals */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3071:3160  function decimals() public view virtual returns (uint8) {... */\n      swap1\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5574:5789  function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {... */\n    tag_34:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5662:5666  bool */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5678:5761  _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue)) */\n      tag_76\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5687:5699  _msgSender() */\n      tag_77\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5687:5697  _msgSender */\n      tag_63\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5687:5699  _msgSender() */\n      jump\t// in\n    tag_77:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5701:5708  spender */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5710:5760  _allowances[_msgSender()][spender].add(addedValue) */\n      tag_78\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5749:5759  addedValue */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5710:5721  _allowances */\n      0x01\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5710:5735  _allowances[_msgSender()] */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5722:5734  _msgSender() */\n      tag_79\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5722:5732  _msgSender */\n      tag_63\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5722:5734  _msgSender() */\n      jump\t// in\n    tag_79:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5710:5735  _allowances[_msgSender()] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5710:5744  _allowances[_msgSender()][spender] */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5736:5743  spender */\n      dup10\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5710:5744  _allowances[_msgSender()][spender] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      sload\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5710:5748  _allowances[_msgSender()][spender].add */\n      tag_80\n      swap1\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5710:5760  _allowances[_msgSender()][spender].add(addedValue) */\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_78:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5678:5686  _approve */\n      tag_64\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5678:5761  _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue)) */\n      jump\t// in\n    tag_76:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5778:5782  true */\n      0x01\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5771:5782  return true */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5574:5789  function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3384:3509  function balanceOf(address account) public view virtual override returns (uint256) {... */\n    tag_37:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3458:3465  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3484:3493  _balances */\n      dup1\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3484:3502  _balances[account] */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3494:3501  account */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3484:3502  _balances[account] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      sload\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3477:3502  return _balances[account] */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3384:3509  function balanceOf(address account) public view virtual override returns (uint256) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2355:2448  function symbol() public view virtual returns (string memory) {... */\n    tag_39:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2402:2415  string memory */\n      0x60\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2434:2441  _symbol */\n      0x04\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2427:2441  return _symbol */\n      dup1\n      sload\n      0x01\n      dup2\n      0x01\n      and\n      iszero\n      0x0100\n      mul\n      sub\n      and\n      0x02\n      swap1\n      div\n      dup1\n      0x1f\n      add\n      0x20\n      dup1\n      swap2\n      div\n      mul\n      0x20\n      add\n      mload(0x40)\n      swap1\n      dup2\n      add\n      0x40\n      mstore\n      dup1\n      swap3\n      swap2\n      swap1\n      dup2\n      dup2\n      mstore\n      0x20\n      add\n      dup3\n      dup1\n      sload\n      0x01\n      dup2\n      0x01\n      and\n      iszero\n      0x0100\n      mul\n      sub\n      and\n      0x02\n      swap1\n      div\n      dup1\n      iszero\n      tag_83\n      jumpi\n      dup1\n      0x1f\n      lt\n      tag_84\n      jumpi\n      0x0100\n      dup1\n      dup4\n      sload\n      div\n      mul\n      dup4\n      mstore\n      swap2\n      0x20\n      add\n      swap2\n      jump(tag_83)\n    tag_84:\n      dup3\n      add\n      swap2\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      swap1\n    tag_85:\n      dup2\n      sload\n      dup2\n      mstore\n      swap1\n      0x01\n      add\n      swap1\n      0x20\n      add\n      dup1\n      dup4\n      gt\n      tag_85\n      jumpi\n      dup3\n      swap1\n      sub\n      0x1f\n      and\n      dup3\n      add\n      swap2\n    tag_83:\n      pop\n      pop\n      pop\n      pop\n      pop\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2355:2448  function symbol() public view virtual returns (string memory) {... */\n      swap1\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6276:6542  function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {... */\n    tag_46:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6369:6373  bool */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6385:6514  _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\")) */\n      tag_87\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6394:6406  _msgSender() */\n      tag_88\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6394:6404  _msgSender */\n      tag_63\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6394:6406  _msgSender() */\n      jump\t// in\n    tag_88:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6408:6415  spender */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6417:6513  _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\") */\n      tag_89\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6456:6471  subtractedValue */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6417:6513  _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\") */\n      mload(0x40)\n      dup1\n      0x60\n      add\n      0x40\n      mstore\n      dup1\n      0x25\n      dup2\n      mstore\n      0x20\n      add\n      data_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8\n      0x25\n      swap2\n      codecopy\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6417:6428  _allowances */\n      0x01\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6417:6442  _allowances[_msgSender()] */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6429:6441  _msgSender() */\n      tag_90\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6429:6439  _msgSender */\n      tag_63\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6429:6441  _msgSender() */\n      jump\t// in\n    tag_90:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6417:6442  _allowances[_msgSender()] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6417:6451  _allowances[_msgSender()][spender] */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6443:6450  spender */\n      dup11\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6417:6451  _allowances[_msgSender()][spender] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      sload\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6417:6455  _allowances[_msgSender()][spender].sub */\n      tag_73\n      swap1\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6417:6513  _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\") */\n      swap3\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_89:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6385:6393  _approve */\n      tag_64\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6385:6514  _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\")) */\n      jump\t// in\n    tag_87:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6531:6535  true */\n      0x01\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6524:6535  return true */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6276:6542  function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3712:3884  function transfer(address recipient, uint256 amount) public virtual override returns (bool) {... */\n    tag_49:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3798:3802  bool */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3814:3856  _transfer(_msgSender(), recipient, amount) */\n      tag_92\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3824:3836  _msgSender() */\n      tag_93\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3824:3834  _msgSender */\n      tag_63\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3824:3836  _msgSender() */\n      jump\t// in\n    tag_93:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3838:3847  recipient */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3849:3855  amount */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3814:3823  _transfer */\n      tag_68\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3814:3856  _transfer(_msgSender(), recipient, amount) */\n      jump\t// in\n    tag_92:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3873:3877  true */\n      0x01\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3866:3877  return true */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3712:3884  function transfer(address recipient, uint256 amount) public virtual override returns (bool) {... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3942:4091  function allowance(address owner, address spender) public view virtual override returns (uint256) {... */\n    tag_52:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4031:4038  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4057:4068  _allowances */\n      0x01\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4057:4075  _allowances[owner] */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4069:4074  owner */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4057:4075  _allowances[owner] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4057:4084  _allowances[owner][spender] */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4076:4083  spender */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4057:4084  _allowances[owner][spender] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      sload\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4050:4084  return _allowances[owner][spender] */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3942:4091  function allowance(address owner, address spender) public view virtual override returns (uint256) {... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/CoinSwitch.sol\":617:1371  function stakeLP(uint _tokenId) public {... */\n    tag_55:\n        /* \"contracts/CoinSwitch.sol\":667:685  nftPositionManager */\n      0x06\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/CoinSwitch.sol\":667:698  nftPositionManager.transferFrom */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0x23b872dd\n        /* \"contracts/CoinSwitch.sol\":699:709  msg.sender */\n      caller\n        /* \"contracts/CoinSwitch.sol\":719:723  this */\n      address\n        /* \"contracts/CoinSwitch.sol\":726:734  _tokenId */\n      dup5\n        /* \"contracts/CoinSwitch.sol\":667:735  nftPositionManager.transferFrom(msg.sender, address(this), _tokenId) */\n      mload(0x40)\n      dup5\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup5\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      dup4\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      dup3\n      dup2\n      mstore\n      0x20\n      add\n      swap4\n      pop\n      pop\n      pop\n      pop\n      0x00\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_96\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_96:\n      pop\n      gas\n      call\n      iszero\n      dup1\n      iszero\n      tag_98\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_98:\n      pop\n      pop\n      pop\n      pop\n        /* \"contracts/CoinSwitch.sol\":747:759  uint96 nonce */\n      0x00\n        /* \"contracts/CoinSwitch.sol\":761:777  address operator */\n      dup1\n        /* \"contracts/CoinSwitch.sol\":779:793  address token0 */\n      0x00\n        /* \"contracts/CoinSwitch.sol\":795:809  address token1 */\n      dup1\n        /* \"contracts/CoinSwitch.sol\":811:821  uint24 fee */\n      0x00\n        /* \"contracts/CoinSwitch.sol\":823:838  int24 tickLower */\n      dup1\n        /* \"contracts/CoinSwitch.sol\":840:855  int24 tickUpper */\n      0x00\n        /* \"contracts/CoinSwitch.sol\":857:874  uint128 liquidity */\n      dup1\n        /* \"contracts/CoinSwitch.sol\":875:907  uint256 feeGrowthInside0LastX128 */\n      0x00\n        /* \"contracts/CoinSwitch.sol\":921:953  uint256 feeGrowthInside1LastX128 */\n      dup1\n        /* \"contracts/CoinSwitch.sol\":967:986  uint128 tokensOwed0 */\n      0x00\n        /* \"contracts/CoinSwitch.sol\":1000:1019  uint128 tokensOwed1 */\n      dup1\n        /* \"contracts/CoinSwitch.sol\":1021:1039  nftPositionManager */\n      0x06\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/CoinSwitch.sol\":1021:1049  nftPositionManager.positions */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0x99fbab88\n        /* \"contracts/CoinSwitch.sol\":1050:1058  _tokenId */\n      dup15\n        /* \"contracts/CoinSwitch.sol\":1021:1059  nftPositionManager.positions(_tokenId) */\n      mload(0x40)\n      dup3\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup3\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      0x0180\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup7\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_99\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_99:\n      pop\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_101\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_101:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      0x0180\n      dup2\n      lt\n      iszero\n      tag_102\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_102:\n      dup2\n      add\n      swap1\n      dup1\n      dup1\n      mload\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      dup1\n      mload\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      dup1\n      mload\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      dup1\n      mload\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      dup1\n      mload\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      dup1\n      mload\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      dup1\n      mload\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      dup1\n      mload\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      dup1\n      mload\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      dup1\n      mload\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      dup1\n      mload\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      dup1\n      mload\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      pop\n      pop\n      pop\n        /* \"contracts/CoinSwitch.sol\":746:1059  (uint96 nonce, address operator, address token0, address token1, uint24 fee, int24 tickLower, int24 tickUpper, uint128 liquidity,uint256 feeGrowthInside0LastX128,... */\n      swap12\n      pop\n      swap12\n      pop\n      swap12\n      pop\n      swap12\n      pop\n      swap12\n      pop\n      swap12\n      pop\n      swap12\n      pop\n      swap12\n      pop\n      swap12\n      pop\n      swap12\n      pop\n      swap12\n      pop\n      swap12\n      pop\n        /* \"contracts/CoinSwitch.sol\":1073:1086  int24 tickler */\n      0x00\n        /* \"contracts/CoinSwitch.sol\":1089:1098  tickLower */\n      dup8\n        /* \"contracts/CoinSwitch.sol\":1073:1098  int24 tickler = tickLower */\n      swap1\n      pop\n        /* \"contracts/CoinSwitch.sol\":1112:1133  uint160 sqrtRatioAX96 */\n      0x00\n        /* \"contracts/CoinSwitch.sol\":1136:1174  TickMath.getSqrtRatioAtTick(tickLower) */\n      tag_103\n        /* \"contracts/CoinSwitch.sol\":1164:1173  tickLower */\n      dup10\n        /* \"contracts/CoinSwitch.sol\":1136:1163  TickMath.getSqrtRatioAtTick */\n      tag_104\n        /* \"contracts/CoinSwitch.sol\":1136:1174  TickMath.getSqrtRatioAtTick(tickLower) */\n      jump\t// in\n    tag_103:\n        /* \"contracts/CoinSwitch.sol\":1112:1174  uint160 sqrtRatioAX96 = TickMath.getSqrtRatioAtTick(tickLower) */\n      swap1\n      pop\n        /* \"contracts/CoinSwitch.sol\":1188:1209  uint160 sqrtRatioBX96 */\n      0x00\n        /* \"contracts/CoinSwitch.sol\":1212:1250  TickMath.getSqrtRatioAtTick(tickUpper) */\n      tag_105\n        /* \"contracts/CoinSwitch.sol\":1240:1249  tickUpper */\n      dup10\n        /* \"contracts/CoinSwitch.sol\":1212:1239  TickMath.getSqrtRatioAtTick */\n      tag_104\n        /* \"contracts/CoinSwitch.sol\":1212:1250  TickMath.getSqrtRatioAtTick(tickUpper) */\n      jump\t// in\n    tag_105:\n        /* \"contracts/CoinSwitch.sol\":1188:1250  uint160 sqrtRatioBX96 = TickMath.getSqrtRatioAtTick(tickUpper) */\n      swap1\n      pop\n        /* \"contracts/CoinSwitch.sol\":1264:1279  uint256 amount0 */\n      0x00\n        /* \"contracts/CoinSwitch.sol\":1282:1362  LiquidityAmounts.getAmount0ForLiquidity(sqrtRatioAX96, sqrtRatioBX96, liquidity) */\n      tag_106\n        /* \"contracts/CoinSwitch.sol\":1322:1335  sqrtRatioAX96 */\n      dup4\n        /* \"contracts/CoinSwitch.sol\":1337:1350  sqrtRatioBX96 */\n      dup4\n        /* \"contracts/CoinSwitch.sol\":1352:1361  liquidity */\n      dup12\n        /* \"contracts/CoinSwitch.sol\":1282:1321  LiquidityAmounts.getAmount0ForLiquidity */\n      tag_107\n        /* \"contracts/CoinSwitch.sol\":1282:1362  LiquidityAmounts.getAmount0ForLiquidity(sqrtRatioAX96, sqrtRatioBX96, liquidity) */\n      jump\t// in\n    tag_106:\n        /* \"contracts/CoinSwitch.sol\":1264:1362  uint256 amount0 = LiquidityAmounts.getAmount0ForLiquidity(sqrtRatioAX96, sqrtRatioBX96, liquidity) */\n      swap1\n      pop\n        /* \"contracts/CoinSwitch.sol\":617:1371  function stakeLP(uint _tokenId) public {... */\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/Context.sol\":598:702  function _msgSender() internal view virtual returns (address payable) {... */\n    tag_63:\n        /* \"@openzeppelin/contracts/utils/Context.sol\":651:666  address payable */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Context.sol\":685:695  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/utils/Context.sol\":678:695  return msg.sender */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/Context.sol\":598:702  function _msgSender() internal view virtual returns (address payable) {... */\n      swap1\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9340:9680  function _approve(address owner, address spender, uint256 amount) internal virtual {... */\n    tag_64:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9458:9459  0 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9441:9460  owner != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9441:9446  owner */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9441:9460  owner != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n      iszero\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9433:9501  require(owner != address(0), \"ERC20: approve from the zero address\") */\n      tag_110\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      0x24\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      data_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208\n      0x24\n      swap2\n      codecopy\n      0x40\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_110:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9538:9539  0 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9519:9540  spender != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9519:9526  spender */\n      dup3\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9519:9540  spender != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n      iszero\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9511:9579  require(spender != address(0), \"ERC20: approve to the zero address\") */\n      tag_111\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      0x22\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      data_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029\n      0x22\n      swap2\n      codecopy\n      0x40\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_111:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9620:9626  amount */\n      dup1\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9590:9601  _allowances */\n      0x01\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9590:9608  _allowances[owner] */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9602:9607  owner */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9590:9608  _allowances[owner] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9590:9617  _allowances[owner][spender] */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9609:9616  spender */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9590:9617  _allowances[owner][spender] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9590:9626  _allowances[owner][spender] = amount */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9657:9664  spender */\n      dup2\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9641:9673  Approval(owner, spender, amount) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9650:9655  owner */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9641:9673  Approval(owner, spender, amount) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9666:9672  amount */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9641:9673  Approval(owner, spender, amount) */\n      mload(0x40)\n      dup1\n      dup3\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9340:9680  function _approve(address owner, address spender, uint256 amount) internal virtual {... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7016:7546  function _transfer(address sender, address recipient, uint256 amount) internal virtual {... */\n    tag_68:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7139:7140  0 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7121:7141  sender != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7121:7127  sender */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7121:7141  sender != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n      iszero\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7113:7183  require(sender != address(0), \"ERC20: transfer from the zero address\") */\n      tag_113\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      0x25\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      data_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea\n      0x25\n      swap2\n      codecopy\n      0x40\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_113:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7222:7223  0 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7201:7224  recipient != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7201:7210  recipient */\n      dup3\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7201:7224  recipient != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n      iszero\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7193:7264  require(recipient != address(0), \"ERC20: transfer to the zero address\") */\n      tag_114\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      0x23\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      data_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f\n      0x23\n      swap2\n      codecopy\n      0x40\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_114:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7275:7322  _beforeTokenTransfer(sender, recipient, amount) */\n      tag_115\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7296:7302  sender */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7304:7313  recipient */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7315:7321  amount */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7275:7295  _beforeTokenTransfer */\n      tag_116\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7275:7322  _beforeTokenTransfer(sender, recipient, amount) */\n      jump\t// in\n    tag_115:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7353:7424  _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\") */\n      tag_117\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7375:7381  amount */\n      dup2\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7353:7424  _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\") */\n      mload(0x40)\n      dup1\n      0x60\n      add\n      0x40\n      mstore\n      dup1\n      0x26\n      dup2\n      mstore\n      0x20\n      add\n      data_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6\n      0x26\n      swap2\n      codecopy\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7353:7362  _balances */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7353:7370  _balances[sender] */\n      dup1\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7363:7369  sender */\n      dup8\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7353:7370  _balances[sender] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      sload\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7353:7374  _balances[sender].sub */\n      tag_73\n      swap1\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7353:7424  _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\") */\n      swap3\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_117:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7333:7342  _balances */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7333:7350  _balances[sender] */\n      dup1\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7343:7349  sender */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7333:7350  _balances[sender] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7333:7424  _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\") */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7457:7489  _balances[recipient].add(amount) */\n      tag_118\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7482:7488  amount */\n      dup2\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7457:7466  _balances */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7457:7477  _balances[recipient] */\n      dup1\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7467:7476  recipient */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7457:7477  _balances[recipient] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      sload\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7457:7481  _balances[recipient].add */\n      tag_80\n      swap1\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7457:7489  _balances[recipient].add(amount) */\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_118:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7434:7443  _balances */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7434:7454  _balances[recipient] */\n      dup1\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7444:7453  recipient */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7434:7454  _balances[recipient] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7434:7489  _balances[recipient] = _balances[recipient].add(amount) */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7521:7530  recipient */\n      dup2\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7504:7539  Transfer(sender, recipient, amount) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7513:7519  sender */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7504:7539  Transfer(sender, recipient, amount) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7532:7538  amount */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7504:7539  Transfer(sender, recipient, amount) */\n      mload(0x40)\n      dup1\n      dup3\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7016:7546  function _transfer(address sender, address recipient, uint256 amount) internal virtual {... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":5424:5587  function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {... */\n    tag_73:\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":5510:5517  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":5542:5543  a */\n      dup4\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":5537:5538  b */\n      dup4\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":5537:5543  b <= a */\n      gt\n      iszero\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":5545:5557  errorMessage */\n      dup3\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":5529:5558  require(b <= a, errorMessage) */\n      swap1\n      tag_120\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      dup4\n      dup2\n      dup2\n      mload\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      dup1\n      mload\n      swap1\n      0x20\n      add\n      swap1\n      dup1\n      dup4\n      dup4\n      0x00\n    tag_121:\n      dup4\n      dup2\n      lt\n      iszero\n      tag_123\n      jumpi\n      dup1\n      dup3\n      add\n      mload\n      dup2\n      dup5\n      add\n      mstore\n      0x20\n      dup2\n      add\n      swap1\n      pop\n      jump(tag_121)\n    tag_123:\n      pop\n      pop\n      pop\n      pop\n      swap1\n      pop\n      swap1\n      dup2\n      add\n      swap1\n      0x1f\n      and\n      dup1\n      iszero\n      tag_124\n      jumpi\n      dup1\n      dup3\n      sub\n      dup1\n      mload\n      0x01\n      dup4\n      0x20\n      sub\n      0x0100\n      exp\n      sub\n      not\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n    tag_124:\n      pop\n      swap3\n      pop\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_120:\n      pop\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":5579:5580  b */\n      dup3\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":5575:5576  a */\n      dup5\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":5575:5580  a - b */\n      sub\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":5568:5580  return a - b */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":5424:5587  function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {... */\n      swap4\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":2682:2857  function add(uint256 a, uint256 b) internal pure returns (uint256) {... */\n    tag_80:\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":2740:2747  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":2759:2768  uint256 c */\n      dup1\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":2775:2776  b */\n      dup3\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":2771:2772  a */\n      dup5\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":2771:2776  a + b */\n      add\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":2759:2776  uint256 c = a + b */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":2799:2800  a */\n      dup4\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":2794:2795  c */\n      dup2\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":2794:2800  c >= a */\n      lt\n      iszero\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":2786:2832  require(c >= a, \"SafeMath: addition overflow\") */\n      tag_126\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      0x1b\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      0x536166654d6174683a206164646974696f6e206f766572666c6f770000000000\n      dup2\n      mstore\n      pop\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_126:\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":2849:2850  c */\n      dup1\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":2842:2850  return c */\n      swap2\n      pop\n      pop\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":2682:2857  function add(uint256 a, uint256 b) internal pure returns (uint256) {... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/libraries/TickMath.sol\":1362:3942  function getSqrtRatioAtTick(int24 tick) internal pure returns (uint160 sqrtPriceX96) {... */\n    tag_104:\n        /* \"contracts/libraries/TickMath.sol\":1425:1445  uint160 sqrtPriceX96 */\n      0x00\n        /* \"contracts/libraries/TickMath.sol\":1457:1472  uint256 absTick */\n      dup1\n        /* \"contracts/libraries/TickMath.sol\":1482:1483  0 */\n      0x00\n        /* \"contracts/libraries/TickMath.sol\":1475:1479  tick */\n      dup4\n        /* \"contracts/libraries/TickMath.sol\":1475:1483  tick < 0 */\n      0x02\n      signextend\n      slt\n        /* \"contracts/libraries/TickMath.sol\":1475:1532  tick < 0 ? uint256(-int256(tick)) : uint256(int256(tick)) */\n      tag_128\n      jumpi\n        /* \"contracts/libraries/TickMath.sol\":1526:1530  tick */\n      dup3\n        /* \"contracts/libraries/TickMath.sol\":1519:1531  int256(tick) */\n      0x02\n      signextend\n        /* \"contracts/libraries/TickMath.sol\":1475:1532  tick < 0 ? uint256(-int256(tick)) : uint256(int256(tick)) */\n      jump(tag_129)\n    tag_128:\n        /* \"contracts/libraries/TickMath.sol\":1502:1506  tick */\n      dup3\n        /* \"contracts/libraries/TickMath.sol\":1495:1507  int256(tick) */\n      0x02\n      signextend\n        /* \"contracts/libraries/TickMath.sol\":1494:1507  -int256(tick) */\n      0x00\n      sub\n        /* \"contracts/libraries/TickMath.sol\":1475:1532  tick < 0 ? uint256(-int256(tick)) : uint256(int256(tick)) */\n    tag_129:\n        /* \"contracts/libraries/TickMath.sol\":1457:1532  uint256 absTick = tick < 0 ? uint256(-int256(tick)) : uint256(int256(tick)) */\n      swap1\n      pop\n        /* \"contracts/libraries/TickMath.sol\":484:491  -887272 */\n      0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffff27618\n        /* \"contracts/libraries/TickMath.sol\":644:653  -MIN_TICK */\n      0x00\n      sub\n        /* \"contracts/libraries/TickMath.sol\":1561:1578  uint256(MAX_TICK) */\n      0x02\n      signextend\n        /* \"contracts/libraries/TickMath.sol\":1550:1557  absTick */\n      dup2\n        /* \"contracts/libraries/TickMath.sol\":1550:1578  absTick <= uint256(MAX_TICK) */\n      gt\n      iszero\n        /* \"contracts/libraries/TickMath.sol\":1542:1584  require(absTick <= uint256(MAX_TICK), 'T') */\n      tag_130\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      0x01\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      0x5400000000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      pop\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_130:\n        /* \"contracts/libraries/TickMath.sol\":1595:1608  uint256 ratio */\n      0x00\n        /* \"contracts/libraries/TickMath.sol\":1628:1629  0 */\n      dup1\n        /* \"contracts/libraries/TickMath.sol\":1621:1624  0x1 */\n      0x01\n        /* \"contracts/libraries/TickMath.sol\":1611:1618  absTick */\n      dup4\n        /* \"contracts/libraries/TickMath.sol\":1611:1624  absTick & 0x1 */\n      and\n        /* \"contracts/libraries/TickMath.sol\":1611:1629  absTick & 0x1 != 0 */\n      eq\n      iszero\n        /* \"contracts/libraries/TickMath.sol\":1611:1704  absTick & 0x1 != 0 ? 0xfffcb933bd6fad37aa2d162d1a594001 : 0x100000000000000000000000000000000 */\n      tag_131\n      jumpi\n        /* \"contracts/libraries/TickMath.sol\":1669:1704  0x100000000000000000000000000000000 */\n      0x0100000000000000000000000000000000\n        /* \"contracts/libraries/TickMath.sol\":1611:1704  absTick & 0x1 != 0 ? 0xfffcb933bd6fad37aa2d162d1a594001 : 0x100000000000000000000000000000000 */\n      jump(tag_132)\n    tag_131:\n        /* \"contracts/libraries/TickMath.sol\":1632:1666  0xfffcb933bd6fad37aa2d162d1a594001 */\n      0xfffcb933bd6fad37aa2d162d1a594001\n        /* \"contracts/libraries/TickMath.sol\":1611:1704  absTick & 0x1 != 0 ? 0xfffcb933bd6fad37aa2d162d1a594001 : 0x100000000000000000000000000000000 */\n    tag_132:\n        /* \"contracts/libraries/TickMath.sol\":1595:1704  uint256 ratio = absTick & 0x1 != 0 ? 0xfffcb933bd6fad37aa2d162d1a594001 : 0x100000000000000000000000000000000 */\n      0xffffffffffffffffffffffffffffffffff\n      and\n      swap1\n      pop\n        /* \"contracts/libraries/TickMath.sol\":1735:1736  0 */\n      0x00\n        /* \"contracts/libraries/TickMath.sol\":1728:1731  0x2 */\n      0x02\n        /* \"contracts/libraries/TickMath.sol\":1718:1725  absTick */\n      dup4\n        /* \"contracts/libraries/TickMath.sol\":1718:1731  absTick & 0x2 */\n      and\n        /* \"contracts/libraries/TickMath.sol\":1718:1736  absTick & 0x2 != 0 */\n      eq\n        /* \"contracts/libraries/TickMath.sol\":1714:1797  if (absTick & 0x2 != 0) ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128 */\n      tag_133\n      jumpi\n        /* \"contracts/libraries/TickMath.sol\":1794:1797  128 */\n      0x80\n        /* \"contracts/libraries/TickMath.sol\":1755:1789  0xfff97272373d413259a46990580e213a */\n      0xfff97272373d413259a46990580e213a\n        /* \"contracts/libraries/TickMath.sol\":1747:1752  ratio */\n      dup3\n        /* \"contracts/libraries/TickMath.sol\":1747:1789  ratio * 0xfff97272373d413259a46990580e213a */\n      mul\n        /* \"contracts/libraries/TickMath.sol\":1746:1797  (ratio * 0xfff97272373d413259a46990580e213a) >> 128 */\n      swap1\n      shr\n        /* \"contracts/libraries/TickMath.sol\":1738:1797  ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128 */\n      swap1\n      pop\n        /* \"contracts/libraries/TickMath.sol\":1714:1797  if (absTick & 0x2 != 0) ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128 */\n    tag_133:\n        /* \"contracts/libraries/TickMath.sol\":1828:1829  0 */\n      0x00\n        /* \"contracts/libraries/TickMath.sol\":1821:1824  0x4 */\n      0x04\n        /* \"contracts/libraries/TickMath.sol\":1811:1818  absTick */\n      dup4\n        /* \"contracts/libraries/TickMath.sol\":1811:1824  absTick & 0x4 */\n      and\n        /* \"contracts/libraries/TickMath.sol\":1811:1829  absTick & 0x4 != 0 */\n      eq\n        /* \"contracts/libraries/TickMath.sol\":1807:1890  if (absTick & 0x4 != 0) ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128 */\n      tag_134\n      jumpi\n        /* \"contracts/libraries/TickMath.sol\":1887:1890  128 */\n      0x80\n        /* \"contracts/libraries/TickMath.sol\":1848:1882  0xfff2e50f5f656932ef12357cf3c7fdcc */\n      0xfff2e50f5f656932ef12357cf3c7fdcc\n        /* \"contracts/libraries/TickMath.sol\":1840:1845  ratio */\n      dup3\n        /* \"contracts/libraries/TickMath.sol\":1840:1882  ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc */\n      mul\n        /* \"contracts/libraries/TickMath.sol\":1839:1890  (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128 */\n      swap1\n      shr\n        /* \"contracts/libraries/TickMath.sol\":1831:1890  ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128 */\n      swap1\n      pop\n        /* \"contracts/libraries/TickMath.sol\":1807:1890  if (absTick & 0x4 != 0) ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128 */\n    tag_134:\n        /* \"contracts/libraries/TickMath.sol\":1921:1922  0 */\n      0x00\n        /* \"contracts/libraries/TickMath.sol\":1914:1917  0x8 */\n      0x08\n        /* \"contracts/libraries/TickMath.sol\":1904:1911  absTick */\n      dup4\n        /* \"contracts/libraries/TickMath.sol\":1904:1917  absTick & 0x8 */\n      and\n        /* \"contracts/libraries/TickMath.sol\":1904:1922  absTick & 0x8 != 0 */\n      eq\n        /* \"contracts/libraries/TickMath.sol\":1900:1983  if (absTick & 0x8 != 0) ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128 */\n      tag_135\n      jumpi\n        /* \"contracts/libraries/TickMath.sol\":1980:1983  128 */\n      0x80\n        /* \"contracts/libraries/TickMath.sol\":1941:1975  0xffe5caca7e10e4e61c3624eaa0941cd0 */\n      0xffe5caca7e10e4e61c3624eaa0941cd0\n        /* \"contracts/libraries/TickMath.sol\":1933:1938  ratio */\n      dup3\n        /* \"contracts/libraries/TickMath.sol\":1933:1975  ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0 */\n      mul\n        /* \"contracts/libraries/TickMath.sol\":1932:1983  (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128 */\n      swap1\n      shr\n        /* \"contracts/libraries/TickMath.sol\":1924:1983  ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128 */\n      swap1\n      pop\n        /* \"contracts/libraries/TickMath.sol\":1900:1983  if (absTick & 0x8 != 0) ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128 */\n    tag_135:\n        /* \"contracts/libraries/TickMath.sol\":2015:2016  0 */\n      0x00\n        /* \"contracts/libraries/TickMath.sol\":2007:2011  0x10 */\n      0x10\n        /* \"contracts/libraries/TickMath.sol\":1997:2004  absTick */\n      dup4\n        /* \"contracts/libraries/TickMath.sol\":1997:2011  absTick & 0x10 */\n      and\n        /* \"contracts/libraries/TickMath.sol\":1997:2016  absTick & 0x10 != 0 */\n      eq\n        /* \"contracts/libraries/TickMath.sol\":1993:2077  if (absTick & 0x10 != 0) ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128 */\n      tag_136\n      jumpi\n        /* \"contracts/libraries/TickMath.sol\":2074:2077  128 */\n      0x80\n        /* \"contracts/libraries/TickMath.sol\":2035:2069  0xffcb9843d60f6159c9db58835c926644 */\n      0xffcb9843d60f6159c9db58835c926644\n        /* \"contracts/libraries/TickMath.sol\":2027:2032  ratio */\n      dup3\n        /* \"contracts/libraries/TickMath.sol\":2027:2069  ratio * 0xffcb9843d60f6159c9db58835c926644 */\n      mul\n        /* \"contracts/libraries/TickMath.sol\":2026:2077  (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128 */\n      swap1\n      shr\n        /* \"contracts/libraries/TickMath.sol\":2018:2077  ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128 */\n      swap1\n      pop\n        /* \"contracts/libraries/TickMath.sol\":1993:2077  if (absTick & 0x10 != 0) ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128 */\n    tag_136:\n        /* \"contracts/libraries/TickMath.sol\":2109:2110  0 */\n      0x00\n        /* \"contracts/libraries/TickMath.sol\":2101:2105  0x20 */\n      0x20\n        /* \"contracts/libraries/TickMath.sol\":2091:2098  absTick */\n      dup4\n        /* \"contracts/libraries/TickMath.sol\":2091:2105  absTick & 0x20 */\n      and\n        /* \"contracts/libraries/TickMath.sol\":2091:2110  absTick & 0x20 != 0 */\n      eq\n        /* \"contracts/libraries/TickMath.sol\":2087:2171  if (absTick & 0x20 != 0) ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128 */\n      tag_137\n      jumpi\n        /* \"contracts/libraries/TickMath.sol\":2168:2171  128 */\n      0x80\n        /* \"contracts/libraries/TickMath.sol\":2129:2163  0xff973b41fa98c081472e6896dfb254c0 */\n      0xff973b41fa98c081472e6896dfb254c0\n        /* \"contracts/libraries/TickMath.sol\":2121:2126  ratio */\n      dup3\n        /* \"contracts/libraries/TickMath.sol\":2121:2163  ratio * 0xff973b41fa98c081472e6896dfb254c0 */\n      mul\n        /* \"contracts/libraries/TickMath.sol\":2120:2171  (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128 */\n      swap1\n      shr\n        /* \"contracts/libraries/TickMath.sol\":2112:2171  ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128 */\n      swap1\n      pop\n        /* \"contracts/libraries/TickMath.sol\":2087:2171  if (absTick & 0x20 != 0) ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128 */\n    tag_137:\n        /* \"contracts/libraries/TickMath.sol\":2203:2204  0 */\n      0x00\n        /* \"contracts/libraries/TickMath.sol\":2195:2199  0x40 */\n      0x40\n        /* \"contracts/libraries/TickMath.sol\":2185:2192  absTick */\n      dup4\n        /* \"contracts/libraries/TickMath.sol\":2185:2199  absTick & 0x40 */\n      and\n        /* \"contracts/libraries/TickMath.sol\":2185:2204  absTick & 0x40 != 0 */\n      eq\n        /* \"contracts/libraries/TickMath.sol\":2181:2265  if (absTick & 0x40 != 0) ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128 */\n      tag_138\n      jumpi\n        /* \"contracts/libraries/TickMath.sol\":2262:2265  128 */\n      0x80\n        /* \"contracts/libraries/TickMath.sol\":2223:2257  0xff2ea16466c96a3843ec78b326b52861 */\n      0xff2ea16466c96a3843ec78b326b52861\n        /* \"contracts/libraries/TickMath.sol\":2215:2220  ratio */\n      dup3\n        /* \"contracts/libraries/TickMath.sol\":2215:2257  ratio * 0xff2ea16466c96a3843ec78b326b52861 */\n      mul\n        /* \"contracts/libraries/TickMath.sol\":2214:2265  (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128 */\n      swap1\n      shr\n        /* \"contracts/libraries/TickMath.sol\":2206:2265  ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128 */\n      swap1\n      pop\n        /* \"contracts/libraries/TickMath.sol\":2181:2265  if (absTick & 0x40 != 0) ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128 */\n    tag_138:\n        /* \"contracts/libraries/TickMath.sol\":2297:2298  0 */\n      0x00\n        /* \"contracts/libraries/TickMath.sol\":2289:2293  0x80 */\n      0x80\n        /* \"contracts/libraries/TickMath.sol\":2279:2286  absTick */\n      dup4\n        /* \"contracts/libraries/TickMath.sol\":2279:2293  absTick & 0x80 */\n      and\n        /* \"contracts/libraries/TickMath.sol\":2279:2298  absTick & 0x80 != 0 */\n      eq\n        /* \"contracts/libraries/TickMath.sol\":2275:2359  if (absTick & 0x80 != 0) ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128 */\n      tag_139\n      jumpi\n        /* \"contracts/libraries/TickMath.sol\":2356:2359  128 */\n      0x80\n        /* \"contracts/libraries/TickMath.sol\":2317:2351  0xfe5dee046a99a2a811c461f1969c3053 */\n      0xfe5dee046a99a2a811c461f1969c3053\n        /* \"contracts/libraries/TickMath.sol\":2309:2314  ratio */\n      dup3\n        /* \"contracts/libraries/TickMath.sol\":2309:2351  ratio * 0xfe5dee046a99a2a811c461f1969c3053 */\n      mul\n        /* \"contracts/libraries/TickMath.sol\":2308:2359  (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128 */\n      swap1\n      shr\n        /* \"contracts/libraries/TickMath.sol\":2300:2359  ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128 */\n      swap1\n      pop\n        /* \"contracts/libraries/TickMath.sol\":2275:2359  if (absTick & 0x80 != 0) ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128 */\n    tag_139:\n        /* \"contracts/libraries/TickMath.sol\":2392:2393  0 */\n      0x00\n        /* \"contracts/libraries/TickMath.sol\":2383:2388  0x100 */\n      0x0100\n        /* \"contracts/libraries/TickMath.sol\":2373:2380  absTick */\n      dup4\n        /* \"contracts/libraries/TickMath.sol\":2373:2388  absTick & 0x100 */\n      and\n        /* \"contracts/libraries/TickMath.sol\":2373:2393  absTick & 0x100 != 0 */\n      eq\n        /* \"contracts/libraries/TickMath.sol\":2369:2454  if (absTick & 0x100 != 0) ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128 */\n      tag_140\n      jumpi\n        /* \"contracts/libraries/TickMath.sol\":2451:2454  128 */\n      0x80\n        /* \"contracts/libraries/TickMath.sol\":2412:2446  0xfcbe86c7900a88aedcffc83b479aa3a4 */\n      0xfcbe86c7900a88aedcffc83b479aa3a4\n        /* \"contracts/libraries/TickMath.sol\":2404:2409  ratio */\n      dup3\n        /* \"contracts/libraries/TickMath.sol\":2404:2446  ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4 */\n      mul\n        /* \"contracts/libraries/TickMath.sol\":2403:2454  (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128 */\n      swap1\n      shr\n        /* \"contracts/libraries/TickMath.sol\":2395:2454  ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128 */\n      swap1\n      pop\n        /* \"contracts/libraries/TickMath.sol\":2369:2454  if (absTick & 0x100 != 0) ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128 */\n    tag_140:\n        /* \"contracts/libraries/TickMath.sol\":2487:2488  0 */\n      0x00\n        /* \"contracts/libraries/TickMath.sol\":2478:2483  0x200 */\n      0x0200\n        /* \"contracts/libraries/TickMath.sol\":2468:2475  absTick */\n      dup4\n        /* \"contracts/libraries/TickMath.sol\":2468:2483  absTick & 0x200 */\n      and\n        /* \"contracts/libraries/TickMath.sol\":2468:2488  absTick & 0x200 != 0 */\n      eq\n        /* \"contracts/libraries/TickMath.sol\":2464:2549  if (absTick & 0x200 != 0) ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128 */\n      tag_141\n      jumpi\n        /* \"contracts/libraries/TickMath.sol\":2546:2549  128 */\n      0x80\n        /* \"contracts/libraries/TickMath.sol\":2507:2541  0xf987a7253ac413176f2b074cf7815e54 */\n      0xf987a7253ac413176f2b074cf7815e54\n        /* \"contracts/libraries/TickMath.sol\":2499:2504  ratio */\n      dup3\n        /* \"contracts/libraries/TickMath.sol\":2499:2541  ratio * 0xf987a7253ac413176f2b074cf7815e54 */\n      mul\n        /* \"contracts/libraries/TickMath.sol\":2498:2549  (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128 */\n      swap1\n      shr\n        /* \"contracts/libraries/TickMath.sol\":2490:2549  ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128 */\n      swap1\n      pop\n        /* \"contracts/libraries/TickMath.sol\":2464:2549  if (absTick & 0x200 != 0) ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128 */\n    tag_141:\n        /* \"contracts/libraries/TickMath.sol\":2582:2583  0 */\n      0x00\n        /* \"contracts/libraries/TickMath.sol\":2573:2578  0x400 */\n      0x0400\n        /* \"contracts/libraries/TickMath.sol\":2563:2570  absTick */\n      dup4\n        /* \"contracts/libraries/TickMath.sol\":2563:2578  absTick & 0x400 */\n      and\n        /* \"contracts/libraries/TickMath.sol\":2563:2583  absTick & 0x400 != 0 */\n      eq\n        /* \"contracts/libraries/TickMath.sol\":2559:2644  if (absTick & 0x400 != 0) ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128 */\n      tag_142\n      jumpi\n        /* \"contracts/libraries/TickMath.sol\":2641:2644  128 */\n      0x80\n        /* \"contracts/libraries/TickMath.sol\":2602:2636  0xf3392b0822b70005940c7a398e4b70f3 */\n      0xf3392b0822b70005940c7a398e4b70f3\n        /* \"contracts/libraries/TickMath.sol\":2594:2599  ratio */\n      dup3\n        /* \"contracts/libraries/TickMath.sol\":2594:2636  ratio * 0xf3392b0822b70005940c7a398e4b70f3 */\n      mul\n        /* \"contracts/libraries/TickMath.sol\":2593:2644  (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128 */\n      swap1\n      shr\n        /* \"contracts/libraries/TickMath.sol\":2585:2644  ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128 */\n      swap1\n      pop\n        /* \"contracts/libraries/TickMath.sol\":2559:2644  if (absTick & 0x400 != 0) ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128 */\n    tag_142:\n        /* \"contracts/libraries/TickMath.sol\":2677:2678  0 */\n      0x00\n        /* \"contracts/libraries/TickMath.sol\":2668:2673  0x800 */\n      0x0800\n        /* \"contracts/libraries/TickMath.sol\":2658:2665  absTick */\n      dup4\n        /* \"contracts/libraries/TickMath.sol\":2658:2673  absTick & 0x800 */\n      and\n        /* \"contracts/libraries/TickMath.sol\":2658:2678  absTick & 0x800 != 0 */\n      eq\n        /* \"contracts/libraries/TickMath.sol\":2654:2739  if (absTick & 0x800 != 0) ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128 */\n      tag_143\n      jumpi\n        /* \"contracts/libraries/TickMath.sol\":2736:2739  128 */\n      0x80\n        /* \"contracts/libraries/TickMath.sol\":2697:2731  0xe7159475a2c29b7443b29c7fa6e889d9 */\n      0xe7159475a2c29b7443b29c7fa6e889d9\n        /* \"contracts/libraries/TickMath.sol\":2689:2694  ratio */\n      dup3\n        /* \"contracts/libraries/TickMath.sol\":2689:2731  ratio * 0xe7159475a2c29b7443b29c7fa6e889d9 */\n      mul\n        /* \"contracts/libraries/TickMath.sol\":2688:2739  (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128 */\n      swap1\n      shr\n        /* \"contracts/libraries/TickMath.sol\":2680:2739  ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128 */\n      swap1\n      pop\n        /* \"contracts/libraries/TickMath.sol\":2654:2739  if (absTick & 0x800 != 0) ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128 */\n    tag_143:\n        /* \"contracts/libraries/TickMath.sol\":2773:2774  0 */\n      0x00\n        /* \"contracts/libraries/TickMath.sol\":2763:2769  0x1000 */\n      0x1000\n        /* \"contracts/libraries/TickMath.sol\":2753:2760  absTick */\n      dup4\n        /* \"contracts/libraries/TickMath.sol\":2753:2769  absTick & 0x1000 */\n      and\n        /* \"contracts/libraries/TickMath.sol\":2753:2774  absTick & 0x1000 != 0 */\n      eq\n        /* \"contracts/libraries/TickMath.sol\":2749:2835  if (absTick & 0x1000 != 0) ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128 */\n      tag_144\n      jumpi\n        /* \"contracts/libraries/TickMath.sol\":2832:2835  128 */\n      0x80\n        /* \"contracts/libraries/TickMath.sol\":2793:2827  0xd097f3bdfd2022b8845ad8f792aa5825 */\n      0xd097f3bdfd2022b8845ad8f792aa5825\n        /* \"contracts/libraries/TickMath.sol\":2785:2790  ratio */\n      dup3\n        /* \"contracts/libraries/TickMath.sol\":2785:2827  ratio * 0xd097f3bdfd2022b8845ad8f792aa5825 */\n      mul\n        /* \"contracts/libraries/TickMath.sol\":2784:2835  (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128 */\n      swap1\n      shr\n        /* \"contracts/libraries/TickMath.sol\":2776:2835  ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128 */\n      swap1\n      pop\n        /* \"contracts/libraries/TickMath.sol\":2749:2835  if (absTick & 0x1000 != 0) ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128 */\n    tag_144:\n        /* \"contracts/libraries/TickMath.sol\":2869:2870  0 */\n      0x00\n        /* \"contracts/libraries/TickMath.sol\":2859:2865  0x2000 */\n      0x2000\n        /* \"contracts/libraries/TickMath.sol\":2849:2856  absTick */\n      dup4\n        /* \"contracts/libraries/TickMath.sol\":2849:2865  absTick & 0x2000 */\n      and\n        /* \"contracts/libraries/TickMath.sol\":2849:2870  absTick & 0x2000 != 0 */\n      eq\n        /* \"contracts/libraries/TickMath.sol\":2845:2931  if (absTick & 0x2000 != 0) ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128 */\n      tag_145\n      jumpi\n        /* \"contracts/libraries/TickMath.sol\":2928:2931  128 */\n      0x80\n        /* \"contracts/libraries/TickMath.sol\":2889:2923  0xa9f746462d870fdf8a65dc1f90e061e5 */\n      0xa9f746462d870fdf8a65dc1f90e061e5\n        /* \"contracts/libraries/TickMath.sol\":2881:2886  ratio */\n      dup3\n        /* \"contracts/libraries/TickMath.sol\":2881:2923  ratio * 0xa9f746462d870fdf8a65dc1f90e061e5 */\n      mul\n        /* \"contracts/libraries/TickMath.sol\":2880:2931  (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128 */\n      swap1\n      shr\n        /* \"contracts/libraries/TickMath.sol\":2872:2931  ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128 */\n      swap1\n      pop\n        /* \"contracts/libraries/TickMath.sol\":2845:2931  if (absTick & 0x2000 != 0) ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128 */\n    tag_145:\n        /* \"contracts/libraries/TickMath.sol\":2965:2966  0 */\n      0x00\n        /* \"contracts/libraries/TickMath.sol\":2955:2961  0x4000 */\n      0x4000\n        /* \"contracts/libraries/TickMath.sol\":2945:2952  absTick */\n      dup4\n        /* \"contracts/libraries/TickMath.sol\":2945:2961  absTick & 0x4000 */\n      and\n        /* \"contracts/libraries/TickMath.sol\":2945:2966  absTick & 0x4000 != 0 */\n      eq\n        /* \"contracts/libraries/TickMath.sol\":2941:3027  if (absTick & 0x4000 != 0) ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128 */\n      tag_146\n      jumpi\n        /* \"contracts/libraries/TickMath.sol\":3024:3027  128 */\n      0x80\n        /* \"contracts/libraries/TickMath.sol\":2985:3019  0x70d869a156d2a1b890bb3df62baf32f7 */\n      0x70d869a156d2a1b890bb3df62baf32f7\n        /* \"contracts/libraries/TickMath.sol\":2977:2982  ratio */\n      dup3\n        /* \"contracts/libraries/TickMath.sol\":2977:3019  ratio * 0x70d869a156d2a1b890bb3df62baf32f7 */\n      mul\n        /* \"contracts/libraries/TickMath.sol\":2976:3027  (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128 */\n      swap1\n      shr\n        /* \"contracts/libraries/TickMath.sol\":2968:3027  ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128 */\n      swap1\n      pop\n        /* \"contracts/libraries/TickMath.sol\":2941:3027  if (absTick & 0x4000 != 0) ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128 */\n    tag_146:\n        /* \"contracts/libraries/TickMath.sol\":3061:3062  0 */\n      0x00\n        /* \"contracts/libraries/TickMath.sol\":3051:3057  0x8000 */\n      0x8000\n        /* \"contracts/libraries/TickMath.sol\":3041:3048  absTick */\n      dup4\n        /* \"contracts/libraries/TickMath.sol\":3041:3057  absTick & 0x8000 */\n      and\n        /* \"contracts/libraries/TickMath.sol\":3041:3062  absTick & 0x8000 != 0 */\n      eq\n        /* \"contracts/libraries/TickMath.sol\":3037:3123  if (absTick & 0x8000 != 0) ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128 */\n      tag_147\n      jumpi\n        /* \"contracts/libraries/TickMath.sol\":3120:3123  128 */\n      0x80\n        /* \"contracts/libraries/TickMath.sol\":3081:3115  0x31be135f97d08fd981231505542fcfa6 */\n      0x31be135f97d08fd981231505542fcfa6\n        /* \"contracts/libraries/TickMath.sol\":3073:3078  ratio */\n      dup3\n        /* \"contracts/libraries/TickMath.sol\":3073:3115  ratio * 0x31be135f97d08fd981231505542fcfa6 */\n      mul\n        /* \"contracts/libraries/TickMath.sol\":3072:3123  (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128 */\n      swap1\n      shr\n        /* \"contracts/libraries/TickMath.sol\":3064:3123  ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128 */\n      swap1\n      pop\n        /* \"contracts/libraries/TickMath.sol\":3037:3123  if (absTick & 0x8000 != 0) ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128 */\n    tag_147:\n        /* \"contracts/libraries/TickMath.sol\":3158:3159  0 */\n      0x00\n        /* \"contracts/libraries/TickMath.sol\":3147:3154  0x10000 */\n      0x010000\n        /* \"contracts/libraries/TickMath.sol\":3137:3144  absTick */\n      dup4\n        /* \"contracts/libraries/TickMath.sol\":3137:3154  absTick & 0x10000 */\n      and\n        /* \"contracts/libraries/TickMath.sol\":3137:3159  absTick & 0x10000 != 0 */\n      eq\n        /* \"contracts/libraries/TickMath.sol\":3133:3219  if (absTick & 0x10000 != 0) ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128 */\n      tag_148\n      jumpi\n        /* \"contracts/libraries/TickMath.sol\":3216:3219  128 */\n      0x80\n        /* \"contracts/libraries/TickMath.sol\":3178:3211  0x9aa508b5b7a84e1c677de54f3e99bc9 */\n      0x09aa508b5b7a84e1c677de54f3e99bc9\n        /* \"contracts/libraries/TickMath.sol\":3170:3175  ratio */\n      dup3\n        /* \"contracts/libraries/TickMath.sol\":3170:3211  ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9 */\n      mul\n        /* \"contracts/libraries/TickMath.sol\":3169:3219  (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128 */\n      swap1\n      shr\n        /* \"contracts/libraries/TickMath.sol\":3161:3219  ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128 */\n      swap1\n      pop\n        /* \"contracts/libraries/TickMath.sol\":3133:3219  if (absTick & 0x10000 != 0) ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128 */\n    tag_148:\n        /* \"contracts/libraries/TickMath.sol\":3254:3255  0 */\n      0x00\n        /* \"contracts/libraries/TickMath.sol\":3243:3250  0x20000 */\n      0x020000\n        /* \"contracts/libraries/TickMath.sol\":3233:3240  absTick */\n      dup4\n        /* \"contracts/libraries/TickMath.sol\":3233:3250  absTick & 0x20000 */\n      and\n        /* \"contracts/libraries/TickMath.sol\":3233:3255  absTick & 0x20000 != 0 */\n      eq\n        /* \"contracts/libraries/TickMath.sol\":3229:3314  if (absTick & 0x20000 != 0) ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128 */\n      tag_149\n      jumpi\n        /* \"contracts/libraries/TickMath.sol\":3311:3314  128 */\n      0x80\n        /* \"contracts/libraries/TickMath.sol\":3274:3306  0x5d6af8dedb81196699c329225ee604 */\n      0x5d6af8dedb81196699c329225ee604\n        /* \"contracts/libraries/TickMath.sol\":3266:3271  ratio */\n      dup3\n        /* \"contracts/libraries/TickMath.sol\":3266:3306  ratio * 0x5d6af8dedb81196699c329225ee604 */\n      mul\n        /* \"contracts/libraries/TickMath.sol\":3265:3314  (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128 */\n      swap1\n      shr\n        /* \"contracts/libraries/TickMath.sol\":3257:3314  ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128 */\n      swap1\n      pop\n        /* \"contracts/libraries/TickMath.sol\":3229:3314  if (absTick & 0x20000 != 0) ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128 */\n    tag_149:\n        /* \"contracts/libraries/TickMath.sol\":3349:3350  0 */\n      0x00\n        /* \"contracts/libraries/TickMath.sol\":3338:3345  0x40000 */\n      0x040000\n        /* \"contracts/libraries/TickMath.sol\":3328:3335  absTick */\n      dup4\n        /* \"contracts/libraries/TickMath.sol\":3328:3345  absTick & 0x40000 */\n      and\n        /* \"contracts/libraries/TickMath.sol\":3328:3350  absTick & 0x40000 != 0 */\n      eq\n        /* \"contracts/libraries/TickMath.sol\":3324:3407  if (absTick & 0x40000 != 0) ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128 */\n      tag_150\n      jumpi\n        /* \"contracts/libraries/TickMath.sol\":3404:3407  128 */\n      0x80\n        /* \"contracts/libraries/TickMath.sol\":3369:3399  0x2216e584f5fa1ea926041bedfe98 */\n      0x2216e584f5fa1ea926041bedfe98\n        /* \"contracts/libraries/TickMath.sol\":3361:3366  ratio */\n      dup3\n        /* \"contracts/libraries/TickMath.sol\":3361:3399  ratio * 0x2216e584f5fa1ea926041bedfe98 */\n      mul\n        /* \"contracts/libraries/TickMath.sol\":3360:3407  (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128 */\n      swap1\n      shr\n        /* \"contracts/libraries/TickMath.sol\":3352:3407  ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128 */\n      swap1\n      pop\n        /* \"contracts/libraries/TickMath.sol\":3324:3407  if (absTick & 0x40000 != 0) ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128 */\n    tag_150:\n        /* \"contracts/libraries/TickMath.sol\":3442:3443  0 */\n      0x00\n        /* \"contracts/libraries/TickMath.sol\":3431:3438  0x80000 */\n      0x080000\n        /* \"contracts/libraries/TickMath.sol\":3421:3428  absTick */\n      dup4\n        /* \"contracts/libraries/TickMath.sol\":3421:3438  absTick & 0x80000 */\n      and\n        /* \"contracts/libraries/TickMath.sol\":3421:3443  absTick & 0x80000 != 0 */\n      eq\n        /* \"contracts/libraries/TickMath.sol\":3417:3495  if (absTick & 0x80000 != 0) ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128 */\n      tag_151\n      jumpi\n        /* \"contracts/libraries/TickMath.sol\":3492:3495  128 */\n      0x80\n        /* \"contracts/libraries/TickMath.sol\":3462:3487  0x48a170391f7dc42444e8fa2 */\n      0x048a170391f7dc42444e8fa2\n        /* \"contracts/libraries/TickMath.sol\":3454:3459  ratio */\n      dup3\n        /* \"contracts/libraries/TickMath.sol\":3454:3487  ratio * 0x48a170391f7dc42444e8fa2 */\n      mul\n        /* \"contracts/libraries/TickMath.sol\":3453:3495  (ratio * 0x48a170391f7dc42444e8fa2) >> 128 */\n      swap1\n      shr\n        /* \"contracts/libraries/TickMath.sol\":3445:3495  ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128 */\n      swap1\n      pop\n        /* \"contracts/libraries/TickMath.sol\":3417:3495  if (absTick & 0x80000 != 0) ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128 */\n    tag_151:\n        /* \"contracts/libraries/TickMath.sol\":3517:3518  0 */\n      0x00\n        /* \"contracts/libraries/TickMath.sol\":3510:3514  tick */\n      dup5\n        /* \"contracts/libraries/TickMath.sol\":3510:3518  tick > 0 */\n      0x02\n      signextend\n      sgt\n        /* \"contracts/libraries/TickMath.sol\":3506:3553  if (tick > 0) ratio = type(uint256).max / ratio */\n      iszero\n      tag_152\n      jumpi\n        /* \"contracts/libraries/TickMath.sol\":3548:3553  ratio */\n      dup1\n        /* \"contracts/libraries/TickMath.sol\":3528:3545  type(uint256).max */\n      0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n        /* \"contracts/libraries/TickMath.sol\":3528:3553  type(uint256).max / ratio */\n      dup2\n      tag_153\n      jumpi\n      invalid\n    tag_153:\n      div\n        /* \"contracts/libraries/TickMath.sol\":3520:3553  ratio = type(uint256).max / ratio */\n      swap1\n      pop\n        /* \"contracts/libraries/TickMath.sol\":3506:3553  if (tick > 0) ratio = type(uint256).max / ratio */\n    tag_152:\n        /* \"contracts/libraries/TickMath.sol\":3924:3925  0 */\n      0x00\n        /* \"contracts/libraries/TickMath.sol\":3912:3919  1 << 32 */\n      0x0100000000\n        /* \"contracts/libraries/TickMath.sol\":3903:3908  ratio */\n      dup3\n        /* \"contracts/libraries/TickMath.sol\":3903:3920  ratio % (1 << 32) */\n      dup2\n      tag_154\n      jumpi\n      invalid\n    tag_154:\n      mod\n        /* \"contracts/libraries/TickMath.sol\":3903:3925  ratio % (1 << 32) == 0 */\n      eq\n        /* \"contracts/libraries/TickMath.sol\":3903:3933  ratio % (1 << 32) == 0 ? 0 : 1 */\n      tag_155\n      jumpi\n        /* \"contracts/libraries/TickMath.sol\":3932:3933  1 */\n      0x01\n        /* \"contracts/libraries/TickMath.sol\":3903:3933  ratio % (1 << 32) == 0 ? 0 : 1 */\n      jump(tag_156)\n    tag_155:\n        /* \"contracts/libraries/TickMath.sol\":3928:3929  0 */\n      0x00\n        /* \"contracts/libraries/TickMath.sol\":3903:3933  ratio % (1 << 32) == 0 ? 0 : 1 */\n    tag_156:\n        /* \"contracts/libraries/TickMath.sol\":3886:3934  (ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1) */\n      0xff\n      and\n        /* \"contracts/libraries/TickMath.sol\":3896:3898  32 */\n      0x20\n        /* \"contracts/libraries/TickMath.sol\":3887:3892  ratio */\n      dup3\n        /* \"contracts/libraries/TickMath.sol\":3887:3898  ratio >> 32 */\n      swap1\n      shr\n        /* \"contracts/libraries/TickMath.sol\":3886:3934  (ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1) */\n      add\n        /* \"contracts/libraries/TickMath.sol\":3863:3935  sqrtPriceX96 = uint160((ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1)) */\n      swap3\n      pop\n        /* \"contracts/libraries/TickMath.sol\":1362:3942  function getSqrtRatioAtTick(int24 tick) internal pure returns (uint160 sqrtPriceX96) {... */\n      pop\n      pop\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"contracts/libraries/LiquidityAmounts.sol\":4241:4739  function getAmount0ForLiquidity(... */\n    tag_107:\n        /* \"contracts/libraries/LiquidityAmounts.sol\":4391:4406  uint256 amount0 */\n      0x00\n        /* \"contracts/libraries/LiquidityAmounts.sol\":4438:4451  sqrtRatioBX96 */\n      dup3\n        /* \"contracts/libraries/LiquidityAmounts.sol\":4422:4451  sqrtRatioAX96 > sqrtRatioBX96 */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/libraries/LiquidityAmounts.sol\":4422:4435  sqrtRatioAX96 */\n      dup5\n        /* \"contracts/libraries/LiquidityAmounts.sol\":4422:4451  sqrtRatioAX96 > sqrtRatioBX96 */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      gt\n        /* \"contracts/libraries/LiquidityAmounts.sol\":4418:4516  if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96) */\n      iszero\n      tag_158\n      jumpi\n        /* \"contracts/libraries/LiquidityAmounts.sol\":4487:4500  sqrtRatioBX96 */\n      dup3\n        /* \"contracts/libraries/LiquidityAmounts.sol\":4502:4515  sqrtRatioAX96 */\n      dup5\n        /* \"contracts/libraries/LiquidityAmounts.sol\":4453:4516  (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96) */\n      dup1\n      swap5\n      pop\n      dup2\n      swap6\n      pop\n      pop\n      pop\n        /* \"contracts/libraries/LiquidityAmounts.sol\":4418:4516  if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96) */\n    tag_158:\n        /* \"contracts/libraries/LiquidityAmounts.sol\":4719:4732  sqrtRatioAX96 */\n      dup4\n        /* \"contracts/libraries/LiquidityAmounts.sol\":4546:4732  FullMath.mulDiv(... */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/libraries/LiquidityAmounts.sol\":4546:4716  FullMath.mulDiv(... */\n      tag_159\n        /* \"@uniswap/v3-core/contracts/libraries/FixedPoint96.sol\":309:311  96 */\n      0x60\n        /* \"contracts/libraries/LiquidityAmounts.sol\":4579:4624  uint256(liquidity) << FixedPoint96.RESOLUTION */\n      0xff\n      and\n        /* \"contracts/libraries/LiquidityAmounts.sol\":4587:4596  liquidity */\n      dup5\n        /* \"contracts/libraries/LiquidityAmounts.sol\":4579:4597  uint256(liquidity) */\n      0xffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/libraries/LiquidityAmounts.sol\":4579:4624  uint256(liquidity) << FixedPoint96.RESOLUTION */\n      swap1\n      shl\n        /* \"contracts/libraries/LiquidityAmounts.sol\":4658:4671  sqrtRatioAX96 */\n      dup7\n        /* \"contracts/libraries/LiquidityAmounts.sol\":4642:4655  sqrtRatioBX96 */\n      dup7\n        /* \"contracts/libraries/LiquidityAmounts.sol\":4642:4671  sqrtRatioBX96 - sqrtRatioAX96 */\n      sub\n        /* \"contracts/libraries/LiquidityAmounts.sol\":4546:4716  FullMath.mulDiv(... */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/libraries/LiquidityAmounts.sol\":4689:4702  sqrtRatioBX96 */\n      dup7\n        /* \"contracts/libraries/LiquidityAmounts.sol\":4546:4716  FullMath.mulDiv(... */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/libraries/LiquidityAmounts.sol\":4546:4561  FullMath.mulDiv */\n      tag_160\n        /* \"contracts/libraries/LiquidityAmounts.sol\":4546:4716  FullMath.mulDiv(... */\n      jump\t// in\n    tag_159:\n        /* \"contracts/libraries/LiquidityAmounts.sol\":4546:4732  FullMath.mulDiv(... */\n      dup2\n      tag_161\n      jumpi\n      invalid\n    tag_161:\n      div\n        /* \"contracts/libraries/LiquidityAmounts.sol\":4527:4732  return... */\n      swap1\n      pop\n        /* \"contracts/libraries/LiquidityAmounts.sol\":4241:4739  function getAmount0ForLiquidity(... */\n      swap4\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10686:10778  function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { } */\n    tag_116:\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":742:4518  function mulDiv(... */\n    tag_160:\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":854:868  uint256 result */\n      0x00\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":1183:1196  uint256 prod0 */\n      dup1\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":1251:1264  uint256 prod1 */\n      0x00\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":1368:1369  0 */\n      dup1\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":1364:1370  not(0) */\n      not\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":1361:1362  b */\n      dup6\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":1358:1359  a */\n      dup8\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":1351:1371  mulmod(a, b, not(0)) */\n      mulmod\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":1400:1401  b */\n      dup6\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":1397:1398  a */\n      dup8\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":1393:1402  mul(a, b) */\n      mul\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":1384:1402  prod0 := mul(a, b) */\n      swap3\n      pop\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":1451:1456  prod0 */\n      dup3\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":1447:1449  mm */\n      dup2\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":1444:1457  lt(mm, prod0) */\n      lt\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":1436:1441  prod0 */\n      dup4\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":1432:1434  mm */\n      dup3\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":1428:1442  sub(mm, prod0) */\n      sub\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":1424:1458  sub(sub(mm, prod0), lt(mm, prod0)) */\n      sub\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":1415:1458  prod1 := sub(sub(mm, prod0), lt(mm, prod0)) */\n      swap2\n      pop\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":1327:1468  {... */\n      pop\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":1549:1550  0 */\n      0x00\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":1540:1545  prod1 */\n      dup2\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":1540:1550  prod1 == 0 */\n      eq\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":1536:1715  if (prod1 == 0) {... */\n      iszero\n      tag_164\n      jumpi\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":1588:1589  0 */\n      0x00\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":1574:1585  denominator */\n      dup5\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":1574:1589  denominator > 0 */\n      gt\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":1566:1590  require(denominator > 0) */\n      tag_165\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_165:\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":1652:1663  denominator */\n      dup4\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":1645:1650  prod0 */\n      dup3\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":1641:1664  div(prod0, denominator) */\n      div\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":1631:1664  result := div(prod0, denominator) */\n      swap3\n      pop\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":1691:1704  return result */\n      pop\n      pop\n      jump(tag_163)\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":1536:1715  if (prod1 == 0) {... */\n    tag_164:\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":1842:1847  prod1 */\n      dup1\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":1828:1839  denominator */\n      dup5\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":1828:1847  denominator > prod1 */\n      gt\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":1820:1848  require(denominator > prod1) */\n      tag_166\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_166:\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":2125:2142  uint256 remainder */\n      0x00\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":2201:2212  denominator */\n      dup5\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":2198:2199  b */\n      dup7\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":2195:2196  a */\n      dup9\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":2188:2213  mulmod(a, b, denominator) */\n      mulmod\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":2175:2213  remainder := mulmod(a, b, denominator) */\n      swap1\n      pop\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":2344:2349  prod0 */\n      dup3\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":2333:2342  remainder */\n      dup2\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":2330:2350  gt(remainder, prod0) */\n      gt\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":2323:2328  prod1 */\n      dup3\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":2319:2351  sub(prod1, gt(remainder, prod0)) */\n      sub\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":2310:2351  prod1 := sub(prod1, gt(remainder, prod0)) */\n      swap2\n      pop\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":2384:2393  remainder */\n      dup1\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":2377:2382  prod0 */\n      dup4\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":2373:2394  sub(prod0, remainder) */\n      sub\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":2364:2394  prod0 := sub(prod0, remainder) */\n      swap3\n      pop\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":2553:2565  uint256 twos */\n      0x00\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":2583:2594  denominator */\n      dup6\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":2569:2580  denominator */\n      dup7\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":2568:2580  -denominator */\n      0x00\n      sub\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":2568:2594  -denominator & denominator */\n      and\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":2553:2594  uint256 twos = -denominator & denominator */\n      swap1\n      pop\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":2705:2709  twos */\n      dup1\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":2692:2703  denominator */\n      dup7\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":2688:2710  div(denominator, twos) */\n      div\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":2673:2710  denominator := div(denominator, twos) */\n      swap6\n      pop\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":2827:2831  twos */\n      dup1\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":2820:2825  prod0 */\n      dup5\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":2816:2832  div(prod0, twos) */\n      div\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":2807:2832  prod0 := div(prod0, twos) */\n      swap4\n      pop\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":3081:3082  1 */\n      0x01\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":3074:3078  twos */\n      dup2\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":3067:3071  twos */\n      dup3\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":3064:3065  0 */\n      0x00\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":3060:3072  sub(0, twos) */\n      sub\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":3056:3079  div(sub(0, twos), twos) */\n      div\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":3052:3083  add(div(sub(0, twos), twos), 1) */\n      add\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":3044:3083  twos := add(div(sub(0, twos), twos), 1) */\n      swap1\n      pop\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":3119:3123  twos */\n      dup1\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":3111:3116  prod1 */\n      dup4\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":3111:3123  prod1 * twos */\n      mul\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":3102:3123  prod0 |= prod1 * twos */\n      dup5\n      or\n      swap4\n      pop\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":3457:3468  uint256 inv */\n      0x00\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":3491:3492  2 */\n      0x02\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":3476:3487  denominator */\n      dup8\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":3472:3473  3 */\n      0x03\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":3472:3487  3 * denominator */\n      mul\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":3471:3492  (3 * denominator) ^ 2 */\n      xor\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":3457:3492  uint256 inv = (3 * denominator) ^ 2 */\n      swap1\n      pop\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":3732:3735  inv */\n      dup1\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":3718:3729  denominator */\n      dup8\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":3718:3735  denominator * inv */\n      mul\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":3714:3715  2 */\n      0x02\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":3714:3735  2 - denominator * inv */\n      sub\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":3707:3735  inv *= 2 - denominator * inv */\n      dup2\n      mul\n      swap1\n      pop\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":3790:3793  inv */\n      dup1\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":3776:3787  denominator */\n      dup8\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":3776:3793  denominator * inv */\n      mul\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":3772:3773  2 */\n      0x02\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":3772:3793  2 - denominator * inv */\n      sub\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":3765:3793  inv *= 2 - denominator * inv */\n      dup2\n      mul\n      swap1\n      pop\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":3849:3852  inv */\n      dup1\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":3835:3846  denominator */\n      dup8\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":3835:3852  denominator * inv */\n      mul\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":3831:3832  2 */\n      0x02\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":3831:3852  2 - denominator * inv */\n      sub\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":3824:3852  inv *= 2 - denominator * inv */\n      dup2\n      mul\n      swap1\n      pop\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":3908:3911  inv */\n      dup1\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":3894:3905  denominator */\n      dup8\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":3894:3911  denominator * inv */\n      mul\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":3890:3891  2 */\n      0x02\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":3890:3911  2 - denominator * inv */\n      sub\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":3883:3911  inv *= 2 - denominator * inv */\n      dup2\n      mul\n      swap1\n      pop\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":3967:3970  inv */\n      dup1\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":3953:3964  denominator */\n      dup8\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":3953:3970  denominator * inv */\n      mul\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":3949:3950  2 */\n      0x02\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":3949:3970  2 - denominator * inv */\n      sub\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":3942:3970  inv *= 2 - denominator * inv */\n      dup2\n      mul\n      swap1\n      pop\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":4027:4030  inv */\n      dup1\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":4013:4024  denominator */\n      dup8\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":4013:4030  denominator * inv */\n      mul\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":4009:4010  2 */\n      0x02\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":4009:4030  2 - denominator * inv */\n      sub\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":4002:4030  inv *= 2 - denominator * inv */\n      dup2\n      mul\n      swap1\n      pop\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":4485:4488  inv */\n      dup1\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":4477:4482  prod0 */\n      dup6\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":4477:4488  prod0 * inv */\n      mul\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":4468:4488  result = prod0 * inv */\n      swap6\n      pop\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":4498:4511  return result */\n      pop\n      pop\n      pop\n      pop\n      pop\n        /* \"@uniswap/v3-core/contracts/libraries/FullMath.sol\":742:4518  function mulDiv(... */\n    tag_163:\n      swap4\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n    stop\n    data_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f 45524332303a207472616e7366657220746f20746865207a65726f2061646472657373\n    data_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029 45524332303a20617070726f766520746f20746865207a65726f2061646472657373\n    data_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6 45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e6365\n    data_974d1b4421da69cc60b481194f0dad36a5bb4e23da810da7a7fb30cdba178330 45524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e6365\n    data_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea 45524332303a207472616e736665722066726f6d20746865207a65726f2061646472657373\n    data_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208 45524332303a20617070726f76652066726f6d20746865207a65726f2061646472657373\n    data_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8 45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726f\n\n    auxdata: 0xa2646970667358221220f1220b28f3e8c125c5bab44f39a7f76649bec66a4c32b3875555d919eba2848264736f6c63430007060033\n}\n",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "60806040523480156200001157600080fd5b5060405162001b9738038062001b97833981810160405260408110156200003757600080fd5b8101908080519060200190929190805190602001909291905050506040518060400160405280600681526020017f52657761726400000000000000000000000000000000000000000000000000008152506040518060400160405280600381526020017f52574400000000000000000000000000000000000000000000000000000000008152508160039080519060200190620000d692919062000198565b508060049080519060200190620000ef92919062000198565b506012600560006101000a81548160ff021916908360ff160217905550505081600560016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050506200024e565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282620001d057600085556200021c565b82601f10620001eb57805160ff19168380011785556200021c565b828001600101855582156200021c579182015b828111156200021b578251825591602001919060010190620001fe565b5b5090506200022b91906200022f565b5090565b5b808211156200024a57600081600090555060010162000230565b5090565b611939806200025e6000396000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c806370a082311161007157806370a08231146102c757806395d89b411461031f578063a457c2d7146103a2578063a9059cbb14610406578063dd62ed3e1461046a578063e5da2cb2146104e2576100b4565b806306fdde03146100b9578063095ea7b31461013c57806318160ddd146101a057806323b872dd146101be578063313ce567146102425780633950935114610263575b600080fd5b6100c1610510565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101015780820151818401526020810190506100e6565b50505050905090810190601f16801561012e5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6101886004803603604081101561015257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506105b2565b60405180821515815260200191505060405180910390f35b6101a86105d0565b6040518082815260200191505060405180910390f35b61022a600480360360608110156101d457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506105da565b60405180821515815260200191505060405180910390f35b61024a6106b3565b604051808260ff16815260200191505060405180910390f35b6102af6004803603604081101561027957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506106ca565b60405180821515815260200191505060405180910390f35b610309600480360360208110156102dd57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061077d565b6040518082815260200191505060405180910390f35b6103276107c5565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561036757808201518184015260208101905061034c565b50505050905090810190601f1680156103945780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6103ee600480360360408110156103b857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610867565b60405180821515815260200191505060405180910390f35b6104526004803603604081101561041c57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610934565b60405180821515815260200191505060405180910390f35b6104cc6004803603604081101561048057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610952565b6040518082815260200191505060405180910390f35b61050e600480360360208110156104f857600080fd5b81019080803590602001909291905050506109d9565b005b606060038054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156105a85780601f1061057d576101008083540402835291602001916105a8565b820191906000526020600020905b81548152906001019060200180831161058b57829003601f168201915b5050505050905090565b60006105c66105bf610c2b565b8484610c33565b6001905092915050565b6000600254905090565b60006105e7848484610e2a565b6106a8846105f3610c2b565b6106a38560405180606001604052806028815260200161186e60289139600160008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000610659610c2b565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546110eb9092919063ffffffff16565b610c33565b600190509392505050565b6000600560009054906101000a900460ff16905090565b60006107736106d7610c2b565b8461076e85600160006106e8610c2b565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546111a590919063ffffffff16565b610c33565b6001905092915050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b606060048054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561085d5780601f106108325761010080835404028352916020019161085d565b820191906000526020600020905b81548152906001019060200180831161084057829003601f168201915b5050505050905090565b600061092a610874610c2b565b84610925856040518060600160405280602581526020016118df602591396001600061089e610c2b565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546110eb9092919063ffffffff16565b610c33565b6001905092915050565b6000610948610941610c2b565b8484610e2a565b6001905092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050600060405180830381600087803b158015610a8a57600080fd5b505af1158015610a9e573d6000803e3d6000fd5b50505050600080600080600080600080600080600080600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166399fbab888e6040518263ffffffff1660e01b8152600401808281526020019150506101806040518083038186803b158015610b2857600080fd5b505afa158015610b3c573d6000803e3d6000fd5b505050506040513d610180811015610b5357600080fd5b810190808051906020019092919080519060200190929190805190602001909291908051906020019092919080519060200190929190805190602001909291908051906020019092919080519060200190929190805190602001909291908051906020019092919080519060200190929190805190602001909291905050509b509b509b509b509b509b509b509b509b509b509b509b5060008790506000610bfa8961122d565b90506000610c078961122d565b90506000610c1683838b611668565b90505050505050505050505050505050505050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610cb9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260248152602001806118bb6024913960400191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610d3f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260228152602001806118266022913960400191505060405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040518082815260200191505060405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610eb0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260258152602001806118966025913960400191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610f36576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260238152602001806118036023913960400191505060405180910390fd5b610f41838383611723565b610fac81604051806060016040528060268152602001611848602691396000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546110eb9092919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061103f816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546111a590919063ffffffff16565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a3505050565b6000838311158290611198576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561115d578082015181840152602081019050611142565b50505050905090810190601f16801561118a5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5082840390509392505050565b600080828401905083811015611223576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f536166654d6174683a206164646974696f6e206f766572666c6f77000000000081525060200191505060405180910390fd5b8091505092915050565b60008060008360020b12611244578260020b61124c565b8260020b6000035b90507ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff2761860000360020b8111156112ea576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260018152602001807f540000000000000000000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b60008060018316141561130e57700100000000000000000000000000000000611320565b6ffffcb933bd6fad37aa2d162d1a5940015b70ffffffffffffffffffffffffffffffffff1690506000600283161461135a5760806ffff97272373d413259a46990580e213a8202901c90505b6000600483161461137f5760806ffff2e50f5f656932ef12357cf3c7fdcc8202901c90505b600060088316146113a45760806fffe5caca7e10e4e61c3624eaa0941cd08202901c90505b600060108316146113c95760806fffcb9843d60f6159c9db58835c9266448202901c90505b600060208316146113ee5760806fff973b41fa98c081472e6896dfb254c08202901c90505b600060408316146114135760806fff2ea16466c96a3843ec78b326b528618202901c90505b600060808316146114385760806ffe5dee046a99a2a811c461f1969c30538202901c90505b600061010083161461145e5760806ffcbe86c7900a88aedcffc83b479aa3a48202901c90505b60006102008316146114845760806ff987a7253ac413176f2b074cf7815e548202901c90505b60006104008316146114aa5760806ff3392b0822b70005940c7a398e4b70f38202901c90505b60006108008316146114d05760806fe7159475a2c29b7443b29c7fa6e889d98202901c90505b60006110008316146114f65760806fd097f3bdfd2022b8845ad8f792aa58258202901c90505b600061200083161461151c5760806fa9f746462d870fdf8a65dc1f90e061e58202901c90505b60006140008316146115425760806f70d869a156d2a1b890bb3df62baf32f78202901c90505b60006180008316146115685760806f31be135f97d08fd981231505542fcfa68202901c90505b60006201000083161461158f5760806f09aa508b5b7a84e1c677de54f3e99bc98202901c90505b6000620200008316146115b55760806e5d6af8dedb81196699c329225ee6048202901c90505b6000620400008316146115da5760806d2216e584f5fa1ea926041bedfe988202901c90505b6000620800008316146115fd5760806b048a170391f7dc42444e8fa28202901c90505b60008460020b131561163657807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8161163257fe5b0490505b6000640100000000828161164657fe5b0614611653576001611656565b60005b60ff16602082901c0192505050919050565b60008273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1611156116a957828480945081955050505b8373ffffffffffffffffffffffffffffffffffffffff16611712606060ff16846fffffffffffffffffffffffffffffffff16901b86860373ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff16611728565b8161171957fe5b0490509392505050565b505050565b600080600080198587098587029250828110838203039150506000811415611763576000841161175757600080fd5b838204925050506117fb565b80841161176f57600080fd5b600084868809905082811182039150808303925060008586600003169050808604955080840493506001818260000304019050808302841793506000600287600302189050808702600203810290508087026002038102905080870260020381029050808702600203810290508087026002038102905080870260020381029050808502955050505050505b939250505056fe45524332303a207472616e7366657220746f20746865207a65726f206164647265737345524332303a20617070726f766520746f20746865207a65726f206164647265737345524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e636545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636545524332303a207472616e736665722066726f6d20746865207a65726f206164647265737345524332303a20617070726f76652066726f6d20746865207a65726f206164647265737345524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa2646970667358221220f1220b28f3e8c125c5bab44f39a7f76649bec66a4c32b3875555d919eba2848264736f6c63430007060033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x1B97 CODESIZE SUB DUP1 PUSH3 0x1B97 DUP4 CODECOPY DUP2 DUP2 ADD PUSH1 0x40 MSTORE PUSH1 0x40 DUP2 LT ISZERO PUSH3 0x37 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x6 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5265776172640000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x3 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5257440000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP DUP2 PUSH1 0x3 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH3 0xD6 SWAP3 SWAP2 SWAP1 PUSH3 0x198 JUMP JUMPDEST POP DUP1 PUSH1 0x4 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH3 0xEF SWAP3 SWAP2 SWAP1 PUSH3 0x198 JUMP JUMPDEST POP PUSH1 0x12 PUSH1 0x5 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 PUSH1 0xFF AND MUL OR SWAP1 SSTORE POP POP POP DUP2 PUSH1 0x5 PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 PUSH1 0x6 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP POP PUSH3 0x24E JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH3 0x1D0 JUMPI PUSH1 0x0 DUP6 SSTORE PUSH3 0x21C JUMP JUMPDEST DUP3 PUSH1 0x1F LT PUSH3 0x1EB JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH3 0x21C JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH3 0x21C JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH3 0x21B JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH3 0x1FE JUMP JUMPDEST JUMPDEST POP SWAP1 POP PUSH3 0x22B SWAP2 SWAP1 PUSH3 0x22F JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH3 0x24A JUMPI PUSH1 0x0 DUP2 PUSH1 0x0 SWAP1 SSTORE POP PUSH1 0x1 ADD PUSH3 0x230 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 0x1939 DUP1 PUSH3 0x25E PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xB4 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x70A08231 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x2C7 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x31F JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x3A2 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x406 JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x46A JUMPI DUP1 PUSH4 0xE5DA2CB2 EQ PUSH2 0x4E2 JUMPI PUSH2 0xB4 JUMP JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0xB9 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x13C JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x1A0 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x1BE JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x242 JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0x263 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xC1 PUSH2 0x510 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x101 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0xE6 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x12E JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x188 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x152 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x5B2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1A8 PUSH2 0x5D0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x22A PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x60 DUP2 LT ISZERO PUSH2 0x1D4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x5DA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x24A PUSH2 0x6B3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH1 0xFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2AF PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x279 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x6CA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x309 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x2DD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x77D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x327 PUSH2 0x7C5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x367 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x34C JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x394 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x3EE PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x3B8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x867 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x452 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x41C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x934 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x4CC PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x480 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x952 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x50E PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x4F8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x9D9 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV DUP1 ISZERO PUSH2 0x5A8 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x57D JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x5A8 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x58B JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5C6 PUSH2 0x5BF PUSH2 0xC2B JUMP JUMPDEST DUP5 DUP5 PUSH2 0xC33 JUMP JUMPDEST PUSH1 0x1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5E7 DUP5 DUP5 DUP5 PUSH2 0xE2A JUMP JUMPDEST PUSH2 0x6A8 DUP5 PUSH2 0x5F3 PUSH2 0xC2B JUMP JUMPDEST PUSH2 0x6A3 DUP6 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x28 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x186E PUSH1 0x28 SWAP2 CODECOPY PUSH1 0x1 PUSH1 0x0 DUP12 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x659 PUSH2 0xC2B JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x10EB SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0xC33 JUMP JUMPDEST PUSH1 0x1 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x5 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x773 PUSH2 0x6D7 PUSH2 0xC2B JUMP JUMPDEST DUP5 PUSH2 0x76E DUP6 PUSH1 0x1 PUSH1 0x0 PUSH2 0x6E8 PUSH2 0xC2B JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x11A5 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0xC33 JUMP JUMPDEST PUSH1 0x1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x4 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV DUP1 ISZERO PUSH2 0x85D JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x832 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x85D JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x840 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x92A PUSH2 0x874 PUSH2 0xC2B JUMP JUMPDEST DUP5 PUSH2 0x925 DUP6 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x25 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x18DF PUSH1 0x25 SWAP2 CODECOPY PUSH1 0x1 PUSH1 0x0 PUSH2 0x89E PUSH2 0xC2B JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP11 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x10EB SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0xC33 JUMP JUMPDEST PUSH1 0x1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x948 PUSH2 0x941 PUSH2 0xC2B JUMP JUMPDEST DUP5 DUP5 PUSH2 0xE2A JUMP JUMPDEST PUSH1 0x1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x6 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x23B872DD CALLER ADDRESS DUP5 PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP4 POP POP POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xA8A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xA9E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x6 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x99FBAB88 DUP15 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH2 0x180 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xB28 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xB3C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH2 0x180 DUP2 LT ISZERO PUSH2 0xB53 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP SWAP12 POP SWAP12 POP SWAP12 POP SWAP12 POP SWAP12 POP SWAP12 POP SWAP12 POP SWAP12 POP SWAP12 POP SWAP12 POP SWAP12 POP SWAP12 POP PUSH1 0x0 DUP8 SWAP1 POP PUSH1 0x0 PUSH2 0xBFA DUP10 PUSH2 0x122D JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xC07 DUP10 PUSH2 0x122D JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xC16 DUP4 DUP4 DUP12 PUSH2 0x1668 JUMP JUMPDEST SWAP1 POP POP POP POP POP POP POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xCB9 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x24 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x18BB PUSH1 0x24 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xD3F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x22 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x1826 PUSH1 0x22 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 DUP4 PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xEB0 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x25 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x1896 PUSH1 0x25 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xF36 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x23 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x1803 PUSH1 0x23 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xF41 DUP4 DUP4 DUP4 PUSH2 0x1723 JUMP JUMPDEST PUSH2 0xFAC DUP2 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x26 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1848 PUSH1 0x26 SWAP2 CODECOPY PUSH1 0x0 DUP1 DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x10EB SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x0 DUP1 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH2 0x103F DUP2 PUSH1 0x0 DUP1 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x11A5 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x0 DUP1 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP4 PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 DUP4 GT ISZERO DUP3 SWAP1 PUSH2 0x1198 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x115D JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x1142 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x118A JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP DUP3 DUP5 SUB SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP5 ADD SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0x1223 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1B DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x536166654D6174683A206164646974696F6E206F766572666C6F770000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 PUSH1 0x2 SIGNEXTEND SLT PUSH2 0x1244 JUMPI DUP3 PUSH1 0x2 SIGNEXTEND PUSH2 0x124C JUMP JUMPDEST DUP3 PUSH1 0x2 SIGNEXTEND PUSH1 0x0 SUB JUMPDEST SWAP1 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF27618 PUSH1 0x0 SUB PUSH1 0x2 SIGNEXTEND DUP2 GT ISZERO PUSH2 0x12EA JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x5400000000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x1 DUP4 AND EQ ISZERO PUSH2 0x130E JUMPI PUSH17 0x100000000000000000000000000000000 PUSH2 0x1320 JUMP JUMPDEST PUSH16 0xFFFCB933BD6FAD37AA2D162D1A594001 JUMPDEST PUSH17 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP PUSH1 0x0 PUSH1 0x2 DUP4 AND EQ PUSH2 0x135A JUMPI PUSH1 0x80 PUSH16 0xFFF97272373D413259A46990580E213A DUP3 MUL SWAP1 SHR SWAP1 POP JUMPDEST PUSH1 0x0 PUSH1 0x4 DUP4 AND EQ PUSH2 0x137F JUMPI PUSH1 0x80 PUSH16 0xFFF2E50F5F656932EF12357CF3C7FDCC DUP3 MUL SWAP1 SHR SWAP1 POP JUMPDEST PUSH1 0x0 PUSH1 0x8 DUP4 AND EQ PUSH2 0x13A4 JUMPI PUSH1 0x80 PUSH16 0xFFE5CACA7E10E4E61C3624EAA0941CD0 DUP3 MUL SWAP1 SHR SWAP1 POP JUMPDEST PUSH1 0x0 PUSH1 0x10 DUP4 AND EQ PUSH2 0x13C9 JUMPI PUSH1 0x80 PUSH16 0xFFCB9843D60F6159C9DB58835C926644 DUP3 MUL SWAP1 SHR SWAP1 POP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP4 AND EQ PUSH2 0x13EE JUMPI PUSH1 0x80 PUSH16 0xFF973B41FA98C081472E6896DFB254C0 DUP3 MUL SWAP1 SHR SWAP1 POP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP4 AND EQ PUSH2 0x1413 JUMPI PUSH1 0x80 PUSH16 0xFF2EA16466C96A3843EC78B326B52861 DUP3 MUL SWAP1 SHR SWAP1 POP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP4 AND EQ PUSH2 0x1438 JUMPI PUSH1 0x80 PUSH16 0xFE5DEE046A99A2A811C461F1969C3053 DUP3 MUL SWAP1 SHR SWAP1 POP JUMPDEST PUSH1 0x0 PUSH2 0x100 DUP4 AND EQ PUSH2 0x145E JUMPI PUSH1 0x80 PUSH16 0xFCBE86C7900A88AEDCFFC83B479AA3A4 DUP3 MUL SWAP1 SHR SWAP1 POP JUMPDEST PUSH1 0x0 PUSH2 0x200 DUP4 AND EQ PUSH2 0x1484 JUMPI PUSH1 0x80 PUSH16 0xF987A7253AC413176F2B074CF7815E54 DUP3 MUL SWAP1 SHR SWAP1 POP JUMPDEST PUSH1 0x0 PUSH2 0x400 DUP4 AND EQ PUSH2 0x14AA JUMPI PUSH1 0x80 PUSH16 0xF3392B0822B70005940C7A398E4B70F3 DUP3 MUL SWAP1 SHR SWAP1 POP JUMPDEST PUSH1 0x0 PUSH2 0x800 DUP4 AND EQ PUSH2 0x14D0 JUMPI PUSH1 0x80 PUSH16 0xE7159475A2C29B7443B29C7FA6E889D9 DUP3 MUL SWAP1 SHR SWAP1 POP JUMPDEST PUSH1 0x0 PUSH2 0x1000 DUP4 AND EQ PUSH2 0x14F6 JUMPI PUSH1 0x80 PUSH16 0xD097F3BDFD2022B8845AD8F792AA5825 DUP3 MUL SWAP1 SHR SWAP1 POP JUMPDEST PUSH1 0x0 PUSH2 0x2000 DUP4 AND EQ PUSH2 0x151C JUMPI PUSH1 0x80 PUSH16 0xA9F746462D870FDF8A65DC1F90E061E5 DUP3 MUL SWAP1 SHR SWAP1 POP JUMPDEST PUSH1 0x0 PUSH2 0x4000 DUP4 AND EQ PUSH2 0x1542 JUMPI PUSH1 0x80 PUSH16 0x70D869A156D2A1B890BB3DF62BAF32F7 DUP3 MUL SWAP1 SHR SWAP1 POP JUMPDEST PUSH1 0x0 PUSH2 0x8000 DUP4 AND EQ PUSH2 0x1568 JUMPI PUSH1 0x80 PUSH16 0x31BE135F97D08FD981231505542FCFA6 DUP3 MUL SWAP1 SHR SWAP1 POP JUMPDEST PUSH1 0x0 PUSH3 0x10000 DUP4 AND EQ PUSH2 0x158F JUMPI PUSH1 0x80 PUSH16 0x9AA508B5B7A84E1C677DE54F3E99BC9 DUP3 MUL SWAP1 SHR SWAP1 POP JUMPDEST PUSH1 0x0 PUSH3 0x20000 DUP4 AND EQ PUSH2 0x15B5 JUMPI PUSH1 0x80 PUSH15 0x5D6AF8DEDB81196699C329225EE604 DUP3 MUL SWAP1 SHR SWAP1 POP JUMPDEST PUSH1 0x0 PUSH3 0x40000 DUP4 AND EQ PUSH2 0x15DA JUMPI PUSH1 0x80 PUSH14 0x2216E584F5FA1EA926041BEDFE98 DUP3 MUL SWAP1 SHR SWAP1 POP JUMPDEST PUSH1 0x0 PUSH3 0x80000 DUP4 AND EQ PUSH2 0x15FD JUMPI PUSH1 0x80 PUSH12 0x48A170391F7DC42444E8FA2 DUP3 MUL SWAP1 SHR SWAP1 POP JUMPDEST PUSH1 0x0 DUP5 PUSH1 0x2 SIGNEXTEND SGT ISZERO PUSH2 0x1636 JUMPI DUP1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 PUSH2 0x1632 JUMPI INVALID JUMPDEST DIV SWAP1 POP JUMPDEST PUSH1 0x0 PUSH5 0x100000000 DUP3 DUP2 PUSH2 0x1646 JUMPI INVALID JUMPDEST MOD EQ PUSH2 0x1653 JUMPI PUSH1 0x1 PUSH2 0x1656 JUMP JUMPDEST PUSH1 0x0 JUMPDEST PUSH1 0xFF AND PUSH1 0x20 DUP3 SWAP1 SHR ADD SWAP3 POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND GT ISZERO PUSH2 0x16A9 JUMPI DUP3 DUP5 DUP1 SWAP5 POP DUP2 SWAP6 POP POP POP JUMPDEST DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1712 PUSH1 0x60 PUSH1 0xFF AND DUP5 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 SHL DUP7 DUP7 SUB PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1728 JUMP JUMPDEST DUP2 PUSH2 0x1719 JUMPI INVALID JUMPDEST DIV SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 NOT DUP6 DUP8 MULMOD DUP6 DUP8 MUL SWAP3 POP DUP3 DUP2 LT DUP4 DUP3 SUB SUB SWAP2 POP POP PUSH1 0x0 DUP2 EQ ISZERO PUSH2 0x1763 JUMPI PUSH1 0x0 DUP5 GT PUSH2 0x1757 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 DUP3 DIV SWAP3 POP POP POP PUSH2 0x17FB JUMP JUMPDEST DUP1 DUP5 GT PUSH2 0x176F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP5 DUP7 DUP9 MULMOD SWAP1 POP DUP3 DUP2 GT DUP3 SUB SWAP2 POP DUP1 DUP4 SUB SWAP3 POP PUSH1 0x0 DUP6 DUP7 PUSH1 0x0 SUB AND SWAP1 POP DUP1 DUP7 DIV SWAP6 POP DUP1 DUP5 DIV SWAP4 POP PUSH1 0x1 DUP2 DUP3 PUSH1 0x0 SUB DIV ADD SWAP1 POP DUP1 DUP4 MUL DUP5 OR SWAP4 POP PUSH1 0x0 PUSH1 0x2 DUP8 PUSH1 0x3 MUL XOR SWAP1 POP DUP1 DUP8 MUL PUSH1 0x2 SUB DUP2 MUL SWAP1 POP DUP1 DUP8 MUL PUSH1 0x2 SUB DUP2 MUL SWAP1 POP DUP1 DUP8 MUL PUSH1 0x2 SUB DUP2 MUL SWAP1 POP DUP1 DUP8 MUL PUSH1 0x2 SUB DUP2 MUL SWAP1 POP DUP1 DUP8 MUL PUSH1 0x2 SUB DUP2 MUL SWAP1 POP DUP1 DUP8 MUL PUSH1 0x2 SUB DUP2 MUL SWAP1 POP DUP1 DUP6 MUL SWAP6 POP POP POP POP POP POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP INVALID GASLIMIT MSTORE NUMBER ORIGIN ADDRESS GASPRICE KECCAK256 PUSH21 0x72616E7366657220746F20746865207A65726F2061 PUSH5 0x6472657373 GASLIMIT MSTORE NUMBER ORIGIN ADDRESS GASPRICE KECCAK256 PUSH2 0x7070 PUSH19 0x6F766520746F20746865207A65726F20616464 PUSH19 0x65737345524332303A207472616E7366657220 PUSH2 0x6D6F PUSH22 0x6E7420657863656564732062616C616E636545524332 ADDRESS GASPRICE KECCAK256 PUSH21 0x72616E7366657220616D6F756E7420657863656564 PUSH20 0x20616C6C6F77616E636545524332303A20747261 PUSH15 0x736665722066726F6D20746865207A PUSH6 0x726F20616464 PUSH19 0x65737345524332303A20617070726F76652066 PUSH19 0x6F6D20746865207A65726F2061646472657373 GASLIMIT MSTORE NUMBER ORIGIN ADDRESS GASPRICE KECCAK256 PUSH5 0x6563726561 PUSH20 0x656420616C6C6F77616E63652062656C6F77207A PUSH6 0x726FA2646970 PUSH7 0x7358221220F122 SIGNEXTEND 0x28 RETURN 0xE8 0xC1 0x25 0xC5 0xBA 0xB4 0x4F CODECOPY 0xA7 0xF7 PUSH7 0x49BEC66A4C32B3 DUP8 SSTORE SSTORE 0xD9 NOT 0xEB LOG2 DUP5 DUP3 PUSH5 0x736F6C6343 STOP SMOD MOD STOP CALLER ",
							"sourceMap": "313:1064:10:-:0;;;426:185;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1950:138:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2025:5;2017;:13;;;;;;;;;;;;:::i;:::-;;2050:7;2040;:17;;;;;;;;;;;;:::i;:::-;;2079:2;2067:9;;:14;;;;;;;;;;;;;;;;;;1950:138;;545:6:10::1;537:5;;:14;;;;;;;;;;;;;;;;;;585:19;564:18;;:40;;;;;;;;;;;;;;;;;;426:185:::0;;313:1064;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b50600436106100b45760003560e01c806370a082311161007157806370a08231146102c757806395d89b411461031f578063a457c2d7146103a2578063a9059cbb14610406578063dd62ed3e1461046a578063e5da2cb2146104e2576100b4565b806306fdde03146100b9578063095ea7b31461013c57806318160ddd146101a057806323b872dd146101be578063313ce567146102425780633950935114610263575b600080fd5b6100c1610510565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101015780820151818401526020810190506100e6565b50505050905090810190601f16801561012e5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6101886004803603604081101561015257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506105b2565b60405180821515815260200191505060405180910390f35b6101a86105d0565b6040518082815260200191505060405180910390f35b61022a600480360360608110156101d457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506105da565b60405180821515815260200191505060405180910390f35b61024a6106b3565b604051808260ff16815260200191505060405180910390f35b6102af6004803603604081101561027957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506106ca565b60405180821515815260200191505060405180910390f35b610309600480360360208110156102dd57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061077d565b6040518082815260200191505060405180910390f35b6103276107c5565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561036757808201518184015260208101905061034c565b50505050905090810190601f1680156103945780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6103ee600480360360408110156103b857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610867565b60405180821515815260200191505060405180910390f35b6104526004803603604081101561041c57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610934565b60405180821515815260200191505060405180910390f35b6104cc6004803603604081101561048057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610952565b6040518082815260200191505060405180910390f35b61050e600480360360208110156104f857600080fd5b81019080803590602001909291905050506109d9565b005b606060038054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156105a85780601f1061057d576101008083540402835291602001916105a8565b820191906000526020600020905b81548152906001019060200180831161058b57829003601f168201915b5050505050905090565b60006105c66105bf610c2b565b8484610c33565b6001905092915050565b6000600254905090565b60006105e7848484610e2a565b6106a8846105f3610c2b565b6106a38560405180606001604052806028815260200161186e60289139600160008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000610659610c2b565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546110eb9092919063ffffffff16565b610c33565b600190509392505050565b6000600560009054906101000a900460ff16905090565b60006107736106d7610c2b565b8461076e85600160006106e8610c2b565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546111a590919063ffffffff16565b610c33565b6001905092915050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b606060048054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561085d5780601f106108325761010080835404028352916020019161085d565b820191906000526020600020905b81548152906001019060200180831161084057829003601f168201915b5050505050905090565b600061092a610874610c2b565b84610925856040518060600160405280602581526020016118df602591396001600061089e610c2b565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546110eb9092919063ffffffff16565b610c33565b6001905092915050565b6000610948610941610c2b565b8484610e2a565b6001905092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050600060405180830381600087803b158015610a8a57600080fd5b505af1158015610a9e573d6000803e3d6000fd5b50505050600080600080600080600080600080600080600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166399fbab888e6040518263ffffffff1660e01b8152600401808281526020019150506101806040518083038186803b158015610b2857600080fd5b505afa158015610b3c573d6000803e3d6000fd5b505050506040513d610180811015610b5357600080fd5b810190808051906020019092919080519060200190929190805190602001909291908051906020019092919080519060200190929190805190602001909291908051906020019092919080519060200190929190805190602001909291908051906020019092919080519060200190929190805190602001909291905050509b509b509b509b509b509b509b509b509b509b509b509b5060008790506000610bfa8961122d565b90506000610c078961122d565b90506000610c1683838b611668565b90505050505050505050505050505050505050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610cb9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260248152602001806118bb6024913960400191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610d3f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260228152602001806118266022913960400191505060405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040518082815260200191505060405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610eb0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260258152602001806118966025913960400191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610f36576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260238152602001806118036023913960400191505060405180910390fd5b610f41838383611723565b610fac81604051806060016040528060268152602001611848602691396000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546110eb9092919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061103f816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546111a590919063ffffffff16565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a3505050565b6000838311158290611198576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561115d578082015181840152602081019050611142565b50505050905090810190601f16801561118a5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5082840390509392505050565b600080828401905083811015611223576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f536166654d6174683a206164646974696f6e206f766572666c6f77000000000081525060200191505060405180910390fd5b8091505092915050565b60008060008360020b12611244578260020b61124c565b8260020b6000035b90507ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff2761860000360020b8111156112ea576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260018152602001807f540000000000000000000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b60008060018316141561130e57700100000000000000000000000000000000611320565b6ffffcb933bd6fad37aa2d162d1a5940015b70ffffffffffffffffffffffffffffffffff1690506000600283161461135a5760806ffff97272373d413259a46990580e213a8202901c90505b6000600483161461137f5760806ffff2e50f5f656932ef12357cf3c7fdcc8202901c90505b600060088316146113a45760806fffe5caca7e10e4e61c3624eaa0941cd08202901c90505b600060108316146113c95760806fffcb9843d60f6159c9db58835c9266448202901c90505b600060208316146113ee5760806fff973b41fa98c081472e6896dfb254c08202901c90505b600060408316146114135760806fff2ea16466c96a3843ec78b326b528618202901c90505b600060808316146114385760806ffe5dee046a99a2a811c461f1969c30538202901c90505b600061010083161461145e5760806ffcbe86c7900a88aedcffc83b479aa3a48202901c90505b60006102008316146114845760806ff987a7253ac413176f2b074cf7815e548202901c90505b60006104008316146114aa5760806ff3392b0822b70005940c7a398e4b70f38202901c90505b60006108008316146114d05760806fe7159475a2c29b7443b29c7fa6e889d98202901c90505b60006110008316146114f65760806fd097f3bdfd2022b8845ad8f792aa58258202901c90505b600061200083161461151c5760806fa9f746462d870fdf8a65dc1f90e061e58202901c90505b60006140008316146115425760806f70d869a156d2a1b890bb3df62baf32f78202901c90505b60006180008316146115685760806f31be135f97d08fd981231505542fcfa68202901c90505b60006201000083161461158f5760806f09aa508b5b7a84e1c677de54f3e99bc98202901c90505b6000620200008316146115b55760806e5d6af8dedb81196699c329225ee6048202901c90505b6000620400008316146115da5760806d2216e584f5fa1ea926041bedfe988202901c90505b6000620800008316146115fd5760806b048a170391f7dc42444e8fa28202901c90505b60008460020b131561163657807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8161163257fe5b0490505b6000640100000000828161164657fe5b0614611653576001611656565b60005b60ff16602082901c0192505050919050565b60008273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1611156116a957828480945081955050505b8373ffffffffffffffffffffffffffffffffffffffff16611712606060ff16846fffffffffffffffffffffffffffffffff16901b86860373ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff16611728565b8161171957fe5b0490509392505050565b505050565b600080600080198587098587029250828110838203039150506000811415611763576000841161175757600080fd5b838204925050506117fb565b80841161176f57600080fd5b600084868809905082811182039150808303925060008586600003169050808604955080840493506001818260000304019050808302841793506000600287600302189050808702600203810290508087026002038102905080870260020381029050808702600203810290508087026002038102905080870260020381029050808502955050505050505b939250505056fe45524332303a207472616e7366657220746f20746865207a65726f206164647265737345524332303a20617070726f766520746f20746865207a65726f206164647265737345524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e636545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636545524332303a207472616e736665722066726f6d20746865207a65726f206164647265737345524332303a20617070726f76652066726f6d20746865207a65726f206164647265737345524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa2646970667358221220f1220b28f3e8c125c5bab44f39a7f76649bec66a4c32b3875555d919eba2848264736f6c63430007060033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xB4 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x70A08231 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x2C7 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x31F JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x3A2 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x406 JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x46A JUMPI DUP1 PUSH4 0xE5DA2CB2 EQ PUSH2 0x4E2 JUMPI PUSH2 0xB4 JUMP JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0xB9 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x13C JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x1A0 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x1BE JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x242 JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0x263 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xC1 PUSH2 0x510 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x101 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0xE6 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x12E JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x188 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x152 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x5B2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1A8 PUSH2 0x5D0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x22A PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x60 DUP2 LT ISZERO PUSH2 0x1D4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x5DA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x24A PUSH2 0x6B3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH1 0xFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2AF PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x279 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x6CA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x309 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x2DD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x77D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x327 PUSH2 0x7C5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x367 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x34C JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x394 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x3EE PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x3B8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x867 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x452 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x41C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x934 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x4CC PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x480 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x952 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x50E PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x4F8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x9D9 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV DUP1 ISZERO PUSH2 0x5A8 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x57D JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x5A8 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x58B JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5C6 PUSH2 0x5BF PUSH2 0xC2B JUMP JUMPDEST DUP5 DUP5 PUSH2 0xC33 JUMP JUMPDEST PUSH1 0x1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5E7 DUP5 DUP5 DUP5 PUSH2 0xE2A JUMP JUMPDEST PUSH2 0x6A8 DUP5 PUSH2 0x5F3 PUSH2 0xC2B JUMP JUMPDEST PUSH2 0x6A3 DUP6 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x28 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x186E PUSH1 0x28 SWAP2 CODECOPY PUSH1 0x1 PUSH1 0x0 DUP12 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x659 PUSH2 0xC2B JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x10EB SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0xC33 JUMP JUMPDEST PUSH1 0x1 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x5 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x773 PUSH2 0x6D7 PUSH2 0xC2B JUMP JUMPDEST DUP5 PUSH2 0x76E DUP6 PUSH1 0x1 PUSH1 0x0 PUSH2 0x6E8 PUSH2 0xC2B JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x11A5 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0xC33 JUMP JUMPDEST PUSH1 0x1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x4 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV DUP1 ISZERO PUSH2 0x85D JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x832 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x85D JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x840 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x92A PUSH2 0x874 PUSH2 0xC2B JUMP JUMPDEST DUP5 PUSH2 0x925 DUP6 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x25 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x18DF PUSH1 0x25 SWAP2 CODECOPY PUSH1 0x1 PUSH1 0x0 PUSH2 0x89E PUSH2 0xC2B JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP11 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x10EB SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0xC33 JUMP JUMPDEST PUSH1 0x1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x948 PUSH2 0x941 PUSH2 0xC2B JUMP JUMPDEST DUP5 DUP5 PUSH2 0xE2A JUMP JUMPDEST PUSH1 0x1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x6 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x23B872DD CALLER ADDRESS DUP5 PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP4 POP POP POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xA8A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xA9E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x6 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x99FBAB88 DUP15 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH2 0x180 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xB28 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xB3C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH2 0x180 DUP2 LT ISZERO PUSH2 0xB53 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP SWAP12 POP SWAP12 POP SWAP12 POP SWAP12 POP SWAP12 POP SWAP12 POP SWAP12 POP SWAP12 POP SWAP12 POP SWAP12 POP SWAP12 POP SWAP12 POP PUSH1 0x0 DUP8 SWAP1 POP PUSH1 0x0 PUSH2 0xBFA DUP10 PUSH2 0x122D JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xC07 DUP10 PUSH2 0x122D JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xC16 DUP4 DUP4 DUP12 PUSH2 0x1668 JUMP JUMPDEST SWAP1 POP POP POP POP POP POP POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xCB9 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x24 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x18BB PUSH1 0x24 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xD3F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x22 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x1826 PUSH1 0x22 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 DUP4 PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xEB0 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x25 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x1896 PUSH1 0x25 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xF36 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x23 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x1803 PUSH1 0x23 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xF41 DUP4 DUP4 DUP4 PUSH2 0x1723 JUMP JUMPDEST PUSH2 0xFAC DUP2 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x26 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1848 PUSH1 0x26 SWAP2 CODECOPY PUSH1 0x0 DUP1 DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x10EB SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x0 DUP1 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH2 0x103F DUP2 PUSH1 0x0 DUP1 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x11A5 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x0 DUP1 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP4 PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 DUP4 GT ISZERO DUP3 SWAP1 PUSH2 0x1198 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x115D JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x1142 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x118A JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP DUP3 DUP5 SUB SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP5 ADD SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0x1223 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1B DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x536166654D6174683A206164646974696F6E206F766572666C6F770000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 PUSH1 0x2 SIGNEXTEND SLT PUSH2 0x1244 JUMPI DUP3 PUSH1 0x2 SIGNEXTEND PUSH2 0x124C JUMP JUMPDEST DUP3 PUSH1 0x2 SIGNEXTEND PUSH1 0x0 SUB JUMPDEST SWAP1 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF27618 PUSH1 0x0 SUB PUSH1 0x2 SIGNEXTEND DUP2 GT ISZERO PUSH2 0x12EA JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x5400000000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x1 DUP4 AND EQ ISZERO PUSH2 0x130E JUMPI PUSH17 0x100000000000000000000000000000000 PUSH2 0x1320 JUMP JUMPDEST PUSH16 0xFFFCB933BD6FAD37AA2D162D1A594001 JUMPDEST PUSH17 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP PUSH1 0x0 PUSH1 0x2 DUP4 AND EQ PUSH2 0x135A JUMPI PUSH1 0x80 PUSH16 0xFFF97272373D413259A46990580E213A DUP3 MUL SWAP1 SHR SWAP1 POP JUMPDEST PUSH1 0x0 PUSH1 0x4 DUP4 AND EQ PUSH2 0x137F JUMPI PUSH1 0x80 PUSH16 0xFFF2E50F5F656932EF12357CF3C7FDCC DUP3 MUL SWAP1 SHR SWAP1 POP JUMPDEST PUSH1 0x0 PUSH1 0x8 DUP4 AND EQ PUSH2 0x13A4 JUMPI PUSH1 0x80 PUSH16 0xFFE5CACA7E10E4E61C3624EAA0941CD0 DUP3 MUL SWAP1 SHR SWAP1 POP JUMPDEST PUSH1 0x0 PUSH1 0x10 DUP4 AND EQ PUSH2 0x13C9 JUMPI PUSH1 0x80 PUSH16 0xFFCB9843D60F6159C9DB58835C926644 DUP3 MUL SWAP1 SHR SWAP1 POP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP4 AND EQ PUSH2 0x13EE JUMPI PUSH1 0x80 PUSH16 0xFF973B41FA98C081472E6896DFB254C0 DUP3 MUL SWAP1 SHR SWAP1 POP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP4 AND EQ PUSH2 0x1413 JUMPI PUSH1 0x80 PUSH16 0xFF2EA16466C96A3843EC78B326B52861 DUP3 MUL SWAP1 SHR SWAP1 POP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP4 AND EQ PUSH2 0x1438 JUMPI PUSH1 0x80 PUSH16 0xFE5DEE046A99A2A811C461F1969C3053 DUP3 MUL SWAP1 SHR SWAP1 POP JUMPDEST PUSH1 0x0 PUSH2 0x100 DUP4 AND EQ PUSH2 0x145E JUMPI PUSH1 0x80 PUSH16 0xFCBE86C7900A88AEDCFFC83B479AA3A4 DUP3 MUL SWAP1 SHR SWAP1 POP JUMPDEST PUSH1 0x0 PUSH2 0x200 DUP4 AND EQ PUSH2 0x1484 JUMPI PUSH1 0x80 PUSH16 0xF987A7253AC413176F2B074CF7815E54 DUP3 MUL SWAP1 SHR SWAP1 POP JUMPDEST PUSH1 0x0 PUSH2 0x400 DUP4 AND EQ PUSH2 0x14AA JUMPI PUSH1 0x80 PUSH16 0xF3392B0822B70005940C7A398E4B70F3 DUP3 MUL SWAP1 SHR SWAP1 POP JUMPDEST PUSH1 0x0 PUSH2 0x800 DUP4 AND EQ PUSH2 0x14D0 JUMPI PUSH1 0x80 PUSH16 0xE7159475A2C29B7443B29C7FA6E889D9 DUP3 MUL SWAP1 SHR SWAP1 POP JUMPDEST PUSH1 0x0 PUSH2 0x1000 DUP4 AND EQ PUSH2 0x14F6 JUMPI PUSH1 0x80 PUSH16 0xD097F3BDFD2022B8845AD8F792AA5825 DUP3 MUL SWAP1 SHR SWAP1 POP JUMPDEST PUSH1 0x0 PUSH2 0x2000 DUP4 AND EQ PUSH2 0x151C JUMPI PUSH1 0x80 PUSH16 0xA9F746462D870FDF8A65DC1F90E061E5 DUP3 MUL SWAP1 SHR SWAP1 POP JUMPDEST PUSH1 0x0 PUSH2 0x4000 DUP4 AND EQ PUSH2 0x1542 JUMPI PUSH1 0x80 PUSH16 0x70D869A156D2A1B890BB3DF62BAF32F7 DUP3 MUL SWAP1 SHR SWAP1 POP JUMPDEST PUSH1 0x0 PUSH2 0x8000 DUP4 AND EQ PUSH2 0x1568 JUMPI PUSH1 0x80 PUSH16 0x31BE135F97D08FD981231505542FCFA6 DUP3 MUL SWAP1 SHR SWAP1 POP JUMPDEST PUSH1 0x0 PUSH3 0x10000 DUP4 AND EQ PUSH2 0x158F JUMPI PUSH1 0x80 PUSH16 0x9AA508B5B7A84E1C677DE54F3E99BC9 DUP3 MUL SWAP1 SHR SWAP1 POP JUMPDEST PUSH1 0x0 PUSH3 0x20000 DUP4 AND EQ PUSH2 0x15B5 JUMPI PUSH1 0x80 PUSH15 0x5D6AF8DEDB81196699C329225EE604 DUP3 MUL SWAP1 SHR SWAP1 POP JUMPDEST PUSH1 0x0 PUSH3 0x40000 DUP4 AND EQ PUSH2 0x15DA JUMPI PUSH1 0x80 PUSH14 0x2216E584F5FA1EA926041BEDFE98 DUP3 MUL SWAP1 SHR SWAP1 POP JUMPDEST PUSH1 0x0 PUSH3 0x80000 DUP4 AND EQ PUSH2 0x15FD JUMPI PUSH1 0x80 PUSH12 0x48A170391F7DC42444E8FA2 DUP3 MUL SWAP1 SHR SWAP1 POP JUMPDEST PUSH1 0x0 DUP5 PUSH1 0x2 SIGNEXTEND SGT ISZERO PUSH2 0x1636 JUMPI DUP1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 PUSH2 0x1632 JUMPI INVALID JUMPDEST DIV SWAP1 POP JUMPDEST PUSH1 0x0 PUSH5 0x100000000 DUP3 DUP2 PUSH2 0x1646 JUMPI INVALID JUMPDEST MOD EQ PUSH2 0x1653 JUMPI PUSH1 0x1 PUSH2 0x1656 JUMP JUMPDEST PUSH1 0x0 JUMPDEST PUSH1 0xFF AND PUSH1 0x20 DUP3 SWAP1 SHR ADD SWAP3 POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND GT ISZERO PUSH2 0x16A9 JUMPI DUP3 DUP5 DUP1 SWAP5 POP DUP2 SWAP6 POP POP POP JUMPDEST DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1712 PUSH1 0x60 PUSH1 0xFF AND DUP5 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 SHL DUP7 DUP7 SUB PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1728 JUMP JUMPDEST DUP2 PUSH2 0x1719 JUMPI INVALID JUMPDEST DIV SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 NOT DUP6 DUP8 MULMOD DUP6 DUP8 MUL SWAP3 POP DUP3 DUP2 LT DUP4 DUP3 SUB SUB SWAP2 POP POP PUSH1 0x0 DUP2 EQ ISZERO PUSH2 0x1763 JUMPI PUSH1 0x0 DUP5 GT PUSH2 0x1757 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 DUP3 DIV SWAP3 POP POP POP PUSH2 0x17FB JUMP JUMPDEST DUP1 DUP5 GT PUSH2 0x176F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP5 DUP7 DUP9 MULMOD SWAP1 POP DUP3 DUP2 GT DUP3 SUB SWAP2 POP DUP1 DUP4 SUB SWAP3 POP PUSH1 0x0 DUP6 DUP7 PUSH1 0x0 SUB AND SWAP1 POP DUP1 DUP7 DIV SWAP6 POP DUP1 DUP5 DIV SWAP4 POP PUSH1 0x1 DUP2 DUP3 PUSH1 0x0 SUB DIV ADD SWAP1 POP DUP1 DUP4 MUL DUP5 OR SWAP4 POP PUSH1 0x0 PUSH1 0x2 DUP8 PUSH1 0x3 MUL XOR SWAP1 POP DUP1 DUP8 MUL PUSH1 0x2 SUB DUP2 MUL SWAP1 POP DUP1 DUP8 MUL PUSH1 0x2 SUB DUP2 MUL SWAP1 POP DUP1 DUP8 MUL PUSH1 0x2 SUB DUP2 MUL SWAP1 POP DUP1 DUP8 MUL PUSH1 0x2 SUB DUP2 MUL SWAP1 POP DUP1 DUP8 MUL PUSH1 0x2 SUB DUP2 MUL SWAP1 POP DUP1 DUP8 MUL PUSH1 0x2 SUB DUP2 MUL SWAP1 POP DUP1 DUP6 MUL SWAP6 POP POP POP POP POP POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP INVALID GASLIMIT MSTORE NUMBER ORIGIN ADDRESS GASPRICE KECCAK256 PUSH21 0x72616E7366657220746F20746865207A65726F2061 PUSH5 0x6472657373 GASLIMIT MSTORE NUMBER ORIGIN ADDRESS GASPRICE KECCAK256 PUSH2 0x7070 PUSH19 0x6F766520746F20746865207A65726F20616464 PUSH19 0x65737345524332303A207472616E7366657220 PUSH2 0x6D6F PUSH22 0x6E7420657863656564732062616C616E636545524332 ADDRESS GASPRICE KECCAK256 PUSH21 0x72616E7366657220616D6F756E7420657863656564 PUSH20 0x20616C6C6F77616E636545524332303A20747261 PUSH15 0x736665722066726F6D20746865207A PUSH6 0x726F20616464 PUSH19 0x65737345524332303A20617070726F76652066 PUSH19 0x6F6D20746865207A65726F2061646472657373 GASLIMIT MSTORE NUMBER ORIGIN ADDRESS GASPRICE KECCAK256 PUSH5 0x6563726561 PUSH20 0x656420616C6C6F77616E63652062656C6F77207A PUSH6 0x726FA2646970 PUSH7 0x7358221220F122 SIGNEXTEND 0x28 RETURN 0xE8 0xC1 0x25 0xC5 0xBA 0xB4 0x4F CODECOPY 0xA7 0xF7 PUSH7 0x49BEC66A4C32B3 DUP8 SSTORE SSTORE 0xD9 NOT 0xEB LOG2 DUP5 DUP3 PUSH5 0x736F6C6343 STOP SMOD MOD STOP CALLER ",
							"sourceMap": "313:1064:10:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2153:89:2;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4229:166;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;3220:106;;;:::i;:::-;;;;;;;;;;;;;;;;;;;4862:317;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;3071:89;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;5574:215;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;3384:125;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;2355:93;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6276:266;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;3712:172;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;3942:149;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;617:754:10;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;2153:89:2;2198:13;2230:5;2223:12;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2153:89;:::o;4229:166::-;4312:4;4328:39;4337:12;:10;:12::i;:::-;4351:7;4360:6;4328:8;:39::i;:::-;4384:4;4377:11;;4229:166;;;;:::o;3220:106::-;3281:7;3307:12;;3300:19;;3220:106;:::o;4862:317::-;4968:4;4984:36;4994:6;5002:9;5013:6;4984:9;:36::i;:::-;5030:121;5039:6;5047:12;:10;:12::i;:::-;5061:89;5099:6;5061:89;;;;;;;;;;;;;;;;;:11;:19;5073:6;5061:19;;;;;;;;;;;;;;;:33;5081:12;:10;:12::i;:::-;5061:33;;;;;;;;;;;;;;;;:37;;:89;;;;;:::i;:::-;5030:8;:121::i;:::-;5168:4;5161:11;;4862:317;;;;;:::o;3071:89::-;3120:5;3144:9;;;;;;;;;;;3137:16;;3071:89;:::o;5574:215::-;5662:4;5678:83;5687:12;:10;:12::i;:::-;5701:7;5710:50;5749:10;5710:11;:25;5722:12;:10;:12::i;:::-;5710:25;;;;;;;;;;;;;;;:34;5736:7;5710:34;;;;;;;;;;;;;;;;:38;;:50;;;;:::i;:::-;5678:8;:83::i;:::-;5778:4;5771:11;;5574:215;;;;:::o;3384:125::-;3458:7;3484:9;:18;3494:7;3484:18;;;;;;;;;;;;;;;;3477:25;;3384:125;;;:::o;2355:93::-;2402:13;2434:7;2427:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2355:93;:::o;6276:266::-;6369:4;6385:129;6394:12;:10;:12::i;:::-;6408:7;6417:96;6456:15;6417:96;;;;;;;;;;;;;;;;;:11;:25;6429:12;:10;:12::i;:::-;6417:25;;;;;;;;;;;;;;;:34;6443:7;6417:34;;;;;;;;;;;;;;;;:38;;:96;;;;;:::i;:::-;6385:8;:129::i;:::-;6531:4;6524:11;;6276:266;;;;:::o;3712:172::-;3798:4;3814:42;3824:12;:10;:12::i;:::-;3838:9;3849:6;3814:9;:42::i;:::-;3873:4;3866:11;;3712:172;;;;:::o;3942:149::-;4031:7;4057:11;:18;4069:5;4057:18;;;;;;;;;;;;;;;:27;4076:7;4057:27;;;;;;;;;;;;;;;;4050:34;;3942:149;;;;:::o;617:754:10:-;667:18;;;;;;;;;;;:31;;;699:10;719:4;726:8;667:68;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;747:12;761:16;779:14;795;811:10;823:15;840;857:17;875:32;921;967:19;1000;1021:18;;;;;;;;;;;:28;;;1050:8;1021:38;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;746:313;;;;;;;;;;;;;;;;;;;;;;;;1073:13;1089:9;1073:25;;1112:21;1136:38;1164:9;1136:27;:38::i;:::-;1112:62;;1188:21;1212:38;1240:9;1212:27;:38::i;:::-;1188:62;;1264:15;1282:80;1322:13;1337;1352:9;1282:39;:80::i;:::-;1264:98;;617:754;;;;;;;;;;;;;;;;;:::o;598:104:7:-;651:15;685:10;678:17;;598:104;:::o;9340:340:2:-;9458:1;9441:19;;:5;:19;;;;9433:68;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9538:1;9519:21;;:7;:21;;;;9511:68;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9620:6;9590:11;:18;9602:5;9590:18;;;;;;;;;;;;;;;:27;9609:7;9590:27;;;;;;;;;;;;;;;:36;;;;9657:7;9641:32;;9650:5;9641:32;;;9666:6;9641:32;;;;;;;;;;;;;;;;;;9340:340;;;:::o;7016:530::-;7139:1;7121:20;;:6;:20;;;;7113:70;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7222:1;7201:23;;:9;:23;;;;7193:71;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7275:47;7296:6;7304:9;7315:6;7275:20;:47::i;:::-;7353:71;7375:6;7353:71;;;;;;;;;;;;;;;;;:9;:17;7363:6;7353:17;;;;;;;;;;;;;;;;:21;;:71;;;;;:::i;:::-;7333:9;:17;7343:6;7333:17;;;;;;;;;;;;;;;:91;;;;7457:32;7482:6;7457:9;:20;7467:9;7457:20;;;;;;;;;;;;;;;;:24;;:32;;;;:::i;:::-;7434:9;:20;7444:9;7434:20;;;;;;;;;;;;;;;:55;;;;7521:9;7504:35;;7513:6;7504:35;;;7532:6;7504:35;;;;;;;;;;;;;;;;;;7016:530;;;:::o;5424:163:1:-;5510:7;5542:1;5537;:6;;5545:12;5529:29;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5579:1;5575;:5;5568:12;;5424:163;;;;;:::o;2682:175::-;2740:7;2759:9;2775:1;2771;:5;2759:17;;2799:1;2794;:6;;2786:46;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2849:1;2842:8;;;2682:175;;;;:::o;1362:2580:18:-;1425:20;1457:15;1482:1;1475:4;:8;;;:57;;1526:4;1519:12;;1475:57;;;1502:4;1495:12;;1494:13;;1475:57;1457:75;;484:7;644:9;;1561:17;;1550:7;:28;;1542:42;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1595:13;1628:1;1621:3;1611:7;:13;:18;;:93;;1669:35;1611:93;;;1632:34;1611:93;1595:109;;;;1735:1;1728:3;1718:7;:13;:18;1714:83;;1794:3;1755:34;1747:5;:42;1746:51;;1738:59;;1714:83;1828:1;1821:3;1811:7;:13;:18;1807:83;;1887:3;1848:34;1840:5;:42;1839:51;;1831:59;;1807:83;1921:1;1914:3;1904:7;:13;:18;1900:83;;1980:3;1941:34;1933:5;:42;1932:51;;1924:59;;1900:83;2015:1;2007:4;1997:7;:14;:19;1993:84;;2074:3;2035:34;2027:5;:42;2026:51;;2018:59;;1993:84;2109:1;2101:4;2091:7;:14;:19;2087:84;;2168:3;2129:34;2121:5;:42;2120:51;;2112:59;;2087:84;2203:1;2195:4;2185:7;:14;:19;2181:84;;2262:3;2223:34;2215:5;:42;2214:51;;2206:59;;2181:84;2297:1;2289:4;2279:7;:14;:19;2275:84;;2356:3;2317:34;2309:5;:42;2308:51;;2300:59;;2275:84;2392:1;2383:5;2373:7;:15;:20;2369:85;;2451:3;2412:34;2404:5;:42;2403:51;;2395:59;;2369:85;2487:1;2478:5;2468:7;:15;:20;2464:85;;2546:3;2507:34;2499:5;:42;2498:51;;2490:59;;2464:85;2582:1;2573:5;2563:7;:15;:20;2559:85;;2641:3;2602:34;2594:5;:42;2593:51;;2585:59;;2559:85;2677:1;2668:5;2658:7;:15;:20;2654:85;;2736:3;2697:34;2689:5;:42;2688:51;;2680:59;;2654:85;2773:1;2763:6;2753:7;:16;:21;2749:86;;2832:3;2793:34;2785:5;:42;2784:51;;2776:59;;2749:86;2869:1;2859:6;2849:7;:16;:21;2845:86;;2928:3;2889:34;2881:5;:42;2880:51;;2872:59;;2845:86;2965:1;2955:6;2945:7;:16;:21;2941:86;;3024:3;2985:34;2977:5;:42;2976:51;;2968:59;;2941:86;3061:1;3051:6;3041:7;:16;:21;3037:86;;3120:3;3081:34;3073:5;:42;3072:51;;3064:59;;3037:86;3158:1;3147:7;3137;:17;:22;3133:86;;3216:3;3178:33;3170:5;:41;3169:50;;3161:58;;3133:86;3254:1;3243:7;3233;:17;:22;3229:85;;3311:3;3274:32;3266:5;:40;3265:49;;3257:57;;3229:85;3349:1;3338:7;3328;:17;:22;3324:83;;3404:3;3369:30;3361:5;:38;3360:47;;3352:55;;3324:83;3442:1;3431:7;3421;:17;:22;3417:78;;3492:3;3462:25;3454:5;:33;3453:42;;3445:50;;3417:78;3517:1;3510:4;:8;;;3506:47;;;3548:5;3528:17;:25;;;;;;3520:33;;3506:47;3924:1;3912:7;3903:5;:17;;;;;;:22;:30;;3932:1;3903:30;;;3928:1;3903:30;3886:48;;3896:2;3887:5;:11;;3886:48;3863:72;;1362:2580;;;;;:::o;4241:498:16:-;4391:15;4438:13;4422:29;;:13;:29;;;4418:98;;;4487:13;4502;4453:63;;;;;;;;4418:98;4719:13;4546:186;;:170;309:2:8;4579:45:16;;4587:9;4579:18;;:45;;4658:13;4642;:29;4546:170;;4689:13;4546:170;;:15;:170::i;:::-;:186;;;;;;4527:205;;4241:498;;;;;:::o;10686:92:2:-;;;;:::o;742:3776:9:-;854:14;1183:13;1251;1368:1;1364:6;1361:1;1358;1351:20;1400:1;1397;1393:9;1384:18;;1451:5;1447:2;1444:13;1436:5;1432:2;1428:14;1424:34;1415:43;;1327:141;1549:1;1540:5;:10;1536:179;;;1588:1;1574:11;:15;1566:24;;;;;;1652:11;1645:5;1641:23;1631:33;;1691:13;;;;1536:179;1842:5;1828:11;:19;1820:28;;;;;;2125:17;2201:11;2198:1;2195;2188:25;2175:38;;2344:5;2333:9;2330:20;2323:5;2319:32;2310:41;;2384:9;2377:5;2373:21;2364:30;;2553:12;2583:11;2569;2568:12;;:26;2553:41;;2705:4;2692:11;2688:22;2673:37;;2827:4;2820:5;2816:16;2807:25;;3081:1;3074:4;3067;3064:1;3060:12;3056:23;3052:31;3044:39;;3119:4;3111:5;:12;3102:21;;;;3457:11;3491:1;3476:11;3472:1;:15;3471:21;3457:35;;3732:3;3718:11;:17;3714:1;:21;3707:28;;;;3790:3;3776:11;:17;3772:1;:21;3765:28;;;;3849:3;3835:11;:17;3831:1;:21;3824:28;;;;3908:3;3894:11;:17;3890:1;:21;3883:28;;;;3967:3;3953:11;:17;3949:1;:21;3942:28;;;;4027:3;4013:11;:17;4009:1;:21;4002:28;;;;4485:3;4477:5;:11;4468:20;;4498:13;;;;;742:3776;;;;;;:::o"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "1291400",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"external": {
								"allowance(address,address)": "1409",
								"approve(address,uint256)": "infinite",
								"balanceOf(address)": "1196",
								"decimals()": "1144",
								"decreaseAllowance(address,uint256)": "infinite",
								"increaseAllowance(address,uint256)": "infinite",
								"name()": "infinite",
								"stakeLP(uint256)": "infinite",
								"symbol()": "infinite",
								"totalSupply()": "1058",
								"transfer(address,uint256)": "infinite",
								"transferFrom(address,address,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 313,
									"end": 1377,
									"name": "PUSH",
									"source": 10,
									"value": "80"
								},
								{
									"begin": 313,
									"end": 1377,
									"name": "PUSH",
									"source": 10,
									"value": "40"
								},
								{
									"begin": 313,
									"end": 1377,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 426,
									"end": 611,
									"name": "CALLVALUE",
									"source": 10
								},
								{
									"begin": 426,
									"end": 611,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 426,
									"end": 611,
									"name": "ISZERO",
									"source": 10
								},
								{
									"begin": 426,
									"end": 611,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "1"
								},
								{
									"begin": 426,
									"end": 611,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": 426,
									"end": 611,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 426,
									"end": 611,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 426,
									"end": 611,
									"name": "REVERT",
									"source": 10
								},
								{
									"begin": 426,
									"end": 611,
									"name": "tag",
									"source": 10,
									"value": "1"
								},
								{
									"begin": 426,
									"end": 611,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 426,
									"end": 611,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 426,
									"end": 611,
									"name": "PUSH",
									"source": 10,
									"value": "40"
								},
								{
									"begin": 426,
									"end": 611,
									"name": "MLOAD",
									"source": 10
								},
								{
									"begin": 426,
									"end": 611,
									"name": "PUSHSIZE",
									"source": 10
								},
								{
									"begin": 426,
									"end": 611,
									"name": "CODESIZE",
									"source": 10
								},
								{
									"begin": 426,
									"end": 611,
									"name": "SUB",
									"source": 10
								},
								{
									"begin": 426,
									"end": 611,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 426,
									"end": 611,
									"name": "PUSHSIZE",
									"source": 10
								},
								{
									"begin": 426,
									"end": 611,
									"name": "DUP4",
									"source": 10
								},
								{
									"begin": 426,
									"end": 611,
									"name": "CODECOPY",
									"source": 10
								},
								{
									"begin": 426,
									"end": 611,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 426,
									"end": 611,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 426,
									"end": 611,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 426,
									"end": 611,
									"name": "PUSH",
									"source": 10,
									"value": "40"
								},
								{
									"begin": 426,
									"end": 611,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 426,
									"end": 611,
									"name": "PUSH",
									"source": 10,
									"value": "40"
								},
								{
									"begin": 426,
									"end": 611,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 426,
									"end": 611,
									"name": "LT",
									"source": 10
								},
								{
									"begin": 426,
									"end": 611,
									"name": "ISZERO",
									"source": 10
								},
								{
									"begin": 426,
									"end": 611,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "2"
								},
								{
									"begin": 426,
									"end": 611,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": 426,
									"end": 611,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 426,
									"end": 611,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 426,
									"end": 611,
									"name": "REVERT",
									"source": 10
								},
								{
									"begin": 426,
									"end": 611,
									"name": "tag",
									"source": 10,
									"value": "2"
								},
								{
									"begin": 426,
									"end": 611,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 426,
									"end": 611,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 426,
									"end": 611,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 426,
									"end": 611,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 426,
									"end": 611,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 426,
									"end": 611,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 426,
									"end": 611,
									"name": "MLOAD",
									"source": 10
								},
								{
									"begin": 426,
									"end": 611,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 426,
									"end": 611,
									"name": "PUSH",
									"source": 10,
									"value": "20"
								},
								{
									"begin": 426,
									"end": 611,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 426,
									"end": 611,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 426,
									"end": 611,
									"name": "SWAP3",
									"source": 10
								},
								{
									"begin": 426,
									"end": 611,
									"name": "SWAP2",
									"source": 10
								},
								{
									"begin": 426,
									"end": 611,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 426,
									"end": 611,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 426,
									"end": 611,
									"name": "MLOAD",
									"source": 10
								},
								{
									"begin": 426,
									"end": 611,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 426,
									"end": 611,
									"name": "PUSH",
									"source": 10,
									"value": "20"
								},
								{
									"begin": 426,
									"end": 611,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 426,
									"end": 611,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 426,
									"end": 611,
									"name": "SWAP3",
									"source": 10
								},
								{
									"begin": 426,
									"end": 611,
									"name": "SWAP2",
									"source": 10
								},
								{
									"begin": 426,
									"end": 611,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 426,
									"end": 611,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 426,
									"end": 611,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 426,
									"end": 611,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "PUSH",
									"source": 2,
									"value": "40"
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "MLOAD",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "PUSH",
									"source": 2,
									"value": "40"
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "PUSH",
									"source": 2,
									"value": "40"
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "MSTORE",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "PUSH",
									"source": 2,
									"value": "6"
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "MSTORE",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "PUSH",
									"source": 2,
									"value": "20"
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "PUSH",
									"source": 2,
									"value": "5265776172640000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "MSTORE",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "PUSH",
									"source": 2,
									"value": "40"
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "MLOAD",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "PUSH",
									"source": 2,
									"value": "40"
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "PUSH",
									"source": 2,
									"value": "40"
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "MSTORE",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "PUSH",
									"source": 2,
									"value": "3"
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "MSTORE",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "PUSH",
									"source": 2,
									"value": "20"
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "PUSH",
									"source": 2,
									"value": "5257440000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "MSTORE",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 2025,
									"end": 2030,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 2017,
									"end": 2022,
									"name": "PUSH",
									"source": 2,
									"value": "3"
								},
								{
									"begin": 2017,
									"end": 2030,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 2017,
									"end": 2030,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 2017,
									"end": 2030,
									"name": "MLOAD",
									"source": 2
								},
								{
									"begin": 2017,
									"end": 2030,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 2017,
									"end": 2030,
									"name": "PUSH",
									"source": 2,
									"value": "20"
								},
								{
									"begin": 2017,
									"end": 2030,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 2017,
									"end": 2030,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 2017,
									"end": 2030,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "6"
								},
								{
									"begin": 2017,
									"end": 2030,
									"name": "SWAP3",
									"source": 2
								},
								{
									"begin": 2017,
									"end": 2030,
									"name": "SWAP2",
									"source": 2
								},
								{
									"begin": 2017,
									"end": 2030,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 2017,
									"end": 2030,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "7"
								},
								{
									"begin": 2017,
									"end": 2030,
									"name": "JUMP",
									"source": 2,
									"value": "[in]"
								},
								{
									"begin": 2017,
									"end": 2030,
									"name": "tag",
									"source": 2,
									"value": "6"
								},
								{
									"begin": 2017,
									"end": 2030,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 2017,
									"end": 2030,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 2050,
									"end": 2057,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 2040,
									"end": 2047,
									"name": "PUSH",
									"source": 2,
									"value": "4"
								},
								{
									"begin": 2040,
									"end": 2057,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 2040,
									"end": 2057,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 2040,
									"end": 2057,
									"name": "MLOAD",
									"source": 2
								},
								{
									"begin": 2040,
									"end": 2057,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 2040,
									"end": 2057,
									"name": "PUSH",
									"source": 2,
									"value": "20"
								},
								{
									"begin": 2040,
									"end": 2057,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 2040,
									"end": 2057,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 2040,
									"end": 2057,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "8"
								},
								{
									"begin": 2040,
									"end": 2057,
									"name": "SWAP3",
									"source": 2
								},
								{
									"begin": 2040,
									"end": 2057,
									"name": "SWAP2",
									"source": 2
								},
								{
									"begin": 2040,
									"end": 2057,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 2040,
									"end": 2057,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "7"
								},
								{
									"begin": 2040,
									"end": 2057,
									"name": "JUMP",
									"source": 2,
									"value": "[in]"
								},
								{
									"begin": 2040,
									"end": 2057,
									"name": "tag",
									"source": 2,
									"value": "8"
								},
								{
									"begin": 2040,
									"end": 2057,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 2040,
									"end": 2057,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 2079,
									"end": 2081,
									"name": "PUSH",
									"source": 2,
									"value": "12"
								},
								{
									"begin": 2067,
									"end": 2076,
									"name": "PUSH",
									"source": 2,
									"value": "5"
								},
								{
									"begin": 2067,
									"end": 2076,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 2067,
									"end": 2081,
									"name": "PUSH",
									"source": 2,
									"value": "100"
								},
								{
									"begin": 2067,
									"end": 2081,
									"name": "EXP",
									"source": 2
								},
								{
									"begin": 2067,
									"end": 2081,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 2067,
									"end": 2081,
									"name": "SLOAD",
									"source": 2
								},
								{
									"begin": 2067,
									"end": 2081,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 2067,
									"end": 2081,
									"name": "PUSH",
									"source": 2,
									"value": "FF"
								},
								{
									"begin": 2067,
									"end": 2081,
									"name": "MUL",
									"source": 2
								},
								{
									"begin": 2067,
									"end": 2081,
									"name": "NOT",
									"source": 2
								},
								{
									"begin": 2067,
									"end": 2081,
									"name": "AND",
									"source": 2
								},
								{
									"begin": 2067,
									"end": 2081,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 2067,
									"end": 2081,
									"name": "DUP4",
									"source": 2
								},
								{
									"begin": 2067,
									"end": 2081,
									"name": "PUSH",
									"source": 2,
									"value": "FF"
								},
								{
									"begin": 2067,
									"end": 2081,
									"name": "AND",
									"source": 2
								},
								{
									"begin": 2067,
									"end": 2081,
									"name": "MUL",
									"source": 2
								},
								{
									"begin": 2067,
									"end": 2081,
									"name": "OR",
									"source": 2
								},
								{
									"begin": 2067,
									"end": 2081,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 2067,
									"end": 2081,
									"name": "SSTORE",
									"source": 2
								},
								{
									"begin": 2067,
									"end": 2081,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 1950,
									"end": 2088,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 545,
									"end": 551,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 537,
									"end": 542,
									"name": "PUSH",
									"source": 10,
									"value": "5"
								},
								{
									"begin": 537,
									"end": 542,
									"name": "PUSH",
									"source": 10,
									"value": "1"
								},
								{
									"begin": 537,
									"end": 551,
									"name": "PUSH",
									"source": 10,
									"value": "100"
								},
								{
									"begin": 537,
									"end": 551,
									"name": "EXP",
									"source": 10
								},
								{
									"begin": 537,
									"end": 551,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 537,
									"end": 551,
									"name": "SLOAD",
									"source": 10
								},
								{
									"begin": 537,
									"end": 551,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 537,
									"end": 551,
									"name": "PUSH",
									"source": 10,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 537,
									"end": 551,
									"name": "MUL",
									"source": 10
								},
								{
									"begin": 537,
									"end": 551,
									"name": "NOT",
									"source": 10
								},
								{
									"begin": 537,
									"end": 551,
									"name": "AND",
									"source": 10
								},
								{
									"begin": 537,
									"end": 551,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 537,
									"end": 551,
									"name": "DUP4",
									"source": 10
								},
								{
									"begin": 537,
									"end": 551,
									"name": "PUSH",
									"source": 10,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 537,
									"end": 551,
									"name": "AND",
									"source": 10
								},
								{
									"begin": 537,
									"end": 551,
									"name": "MUL",
									"source": 10
								},
								{
									"begin": 537,
									"end": 551,
									"name": "OR",
									"source": 10
								},
								{
									"begin": 537,
									"end": 551,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 537,
									"end": 551,
									"name": "SSTORE",
									"source": 10
								},
								{
									"begin": 537,
									"end": 551,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 585,
									"end": 604,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 564,
									"end": 582,
									"name": "PUSH",
									"source": 10,
									"value": "6"
								},
								{
									"begin": 564,
									"end": 582,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 564,
									"end": 604,
									"name": "PUSH",
									"source": 10,
									"value": "100"
								},
								{
									"begin": 564,
									"end": 604,
									"name": "EXP",
									"source": 10
								},
								{
									"begin": 564,
									"end": 604,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 564,
									"end": 604,
									"name": "SLOAD",
									"source": 10
								},
								{
									"begin": 564,
									"end": 604,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 564,
									"end": 604,
									"name": "PUSH",
									"source": 10,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 564,
									"end": 604,
									"name": "MUL",
									"source": 10
								},
								{
									"begin": 564,
									"end": 604,
									"name": "NOT",
									"source": 10
								},
								{
									"begin": 564,
									"end": 604,
									"name": "AND",
									"source": 10
								},
								{
									"begin": 564,
									"end": 604,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 564,
									"end": 604,
									"name": "DUP4",
									"source": 10
								},
								{
									"begin": 564,
									"end": 604,
									"name": "PUSH",
									"source": 10,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 564,
									"end": 604,
									"name": "AND",
									"source": 10
								},
								{
									"begin": 564,
									"end": 604,
									"name": "MUL",
									"source": 10
								},
								{
									"begin": 564,
									"end": 604,
									"name": "OR",
									"source": 10
								},
								{
									"begin": 564,
									"end": 604,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 564,
									"end": 604,
									"name": "SSTORE",
									"source": 10
								},
								{
									"begin": 564,
									"end": 604,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 426,
									"end": 611,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 426,
									"end": 611,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 313,
									"end": 1377,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "10"
								},
								{
									"begin": 313,
									"end": 1377,
									"name": "JUMP",
									"source": 10
								},
								{
									"begin": 313,
									"end": 1377,
									"name": "tag",
									"source": 10,
									"value": "7"
								},
								{
									"begin": 313,
									"end": 1377,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 313,
									"end": 1377,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 313,
									"end": 1377,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 313,
									"end": 1377,
									"name": "SLOAD",
									"source": 10
								},
								{
									"begin": 313,
									"end": 1377,
									"name": "PUSH",
									"source": 10,
									"value": "1"
								},
								{
									"begin": 313,
									"end": 1377,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 313,
									"end": 1377,
									"name": "PUSH",
									"source": 10,
									"value": "1"
								},
								{
									"begin": 313,
									"end": 1377,
									"name": "AND",
									"source": 10
								},
								{
									"begin": 313,
									"end": 1377,
									"name": "ISZERO",
									"source": 10
								},
								{
									"begin": 313,
									"end": 1377,
									"name": "PUSH",
									"source": 10,
									"value": "100"
								},
								{
									"begin": 313,
									"end": 1377,
									"name": "MUL",
									"source": 10
								},
								{
									"begin": 313,
									"end": 1377,
									"name": "SUB",
									"source": 10
								},
								{
									"begin": 313,
									"end": 1377,
									"name": "AND",
									"source": 10
								},
								{
									"begin": 313,
									"end": 1377,
									"name": "PUSH",
									"source": 10,
									"value": "2"
								},
								{
									"begin": 313,
									"end": 1377,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 313,
									"end": 1377,
									"name": "DIV",
									"source": 10
								},
								{
									"begin": 313,
									"end": 1377,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 313,
									"end": 1377,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 313,
									"end": 1377,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 313,
									"end": 1377,
									"name": "PUSH",
									"source": 10,
									"value": "20"
								},
								{
									"begin": 313,
									"end": 1377,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 313,
									"end": 1377,
									"name": "KECCAK256",
									"source": 10
								},
								{
									"begin": 313,
									"end": 1377,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 313,
									"end": 1377,
									"name": "PUSH",
									"source": 10,
									"value": "1F"
								},
								{
									"begin": 313,
									"end": 1377,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 313,
									"end": 1377,
									"name": "PUSH",
									"source": 10,
									"value": "20"
								},
								{
									"begin": 313,
									"end": 1377,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 313,
									"end": 1377,
									"name": "DIV",
									"source": 10
								},
								{
									"begin": 313,
									"end": 1377,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 313,
									"end": 1377,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 313,
									"end": 1377,
									"name": "SWAP3",
									"source": 10
								},
								{
									"begin": 313,
									"end": 1377,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 313,
									"end": 1377,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "12"
								},
								{
									"begin": 313,
									"end": 1377,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": 313,
									"end": 1377,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 313,
									"end": 1377,
									"name": "DUP6",
									"source": 10
								},
								{
									"begin": 313,
									"end": 1377,
									"name": "SSTORE",
									"source": 10
								},
								{
									"begin": 313,
									"end": 1377,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "11"
								},
								{
									"begin": 313,
									"end": 1377,
									"name": "JUMP",
									"source": 10
								},
								{
									"begin": 313,
									"end": 1377,
									"name": "tag",
									"source": 10,
									"value": "12"
								},
								{
									"begin": 313,
									"end": 1377,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 313,
									"end": 1377,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 313,
									"end": 1377,
									"name": "PUSH",
									"source": 10,
									"value": "1F"
								},
								{
									"begin": 313,
									"end": 1377,
									"name": "LT",
									"source": 10
								},
								{
									"begin": 313,
									"end": 1377,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "13"
								},
								{
									"begin": 313,
									"end": 1377,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": 313,
									"end": 1377,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 313,
									"end": 1377,
									"name": "MLOAD",
									"source": 10
								},
								{
									"begin": 313,
									"end": 1377,
									"name": "PUSH",
									"source": 10,
									"value": "FF"
								},
								{
									"begin": 313,
									"end": 1377,
									"name": "NOT",
									"source": 10
								},
								{
									"begin": 313,
									"end": 1377,
									"name": "AND",
									"source": 10
								},
								{
									"begin": 313,
									"end": 1377,
									"name": "DUP4",
									"source": 10
								},
								{
									"begin": 313,
									"end": 1377,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 313,
									"end": 1377,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 313,
									"end": 1377,
									"name": "OR",
									"source": 10
								},
								{
									"begin": 313,
									"end": 1377,
									"name": "DUP6",
									"source": 10
								},
								{
									"begin": 313,
									"end": 1377,
									"name": "SSTORE",
									"source": 10
								},
								{
									"begin": 313,
									"end": 1377,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "11"
								},
								{
									"begin": 313,
									"end": 1377,
									"name": "JUMP",
									"source": 10
								},
								{
									"begin": 313,
									"end": 1377,
									"name": "tag",
									"source": 10,
									"value": "13"
								},
								{
									"begin": 313,
									"end": 1377,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 313,
									"end": 1377,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 313,
									"end": 1377,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 313,
									"end": 1377,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 313,
									"end": 1377,
									"name": "PUSH",
									"source": 10,
									"value": "1"
								},
								{
									"begin": 313,
									"end": 1377,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 313,
									"end": 1377,
									"name": "DUP6",
									"source": 10
								},
								{
									"begin": 313,
									"end": 1377,
									"name": "SSTORE",
									"source": 10
								},
								{
									"begin": 313,
									"end": 1377,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 313,
									"end": 1377,
									"name": "ISZERO",
									"source": 10
								},
								{
									"begin": 313,
									"end": 1377,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "11"
								},
								{
									"begin": 313,
									"end": 1377,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": 313,
									"end": 1377,
									"name": "SWAP2",
									"source": 10
								},
								{
									"begin": 313,
									"end": 1377,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 313,
									"end": 1377,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 313,
									"end": 1377,
									"name": "tag",
									"source": 10,
									"value": "14"
								},
								{
									"begin": 313,
									"end": 1377,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 313,
									"end": 1377,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 313,
									"end": 1377,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 313,
									"end": 1377,
									"name": "GT",
									"source": 10
								},
								{
									"begin": 313,
									"end": 1377,
									"name": "ISZERO",
									"source": 10
								},
								{
									"begin": 313,
									"end": 1377,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "15"
								},
								{
									"begin": 313,
									"end": 1377,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": 313,
									"end": 1377,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 313,
									"end": 1377,
									"name": "MLOAD",
									"source": 10
								},
								{
									"begin": 313,
									"end": 1377,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 313,
									"end": 1377,
									"name": "SSTORE",
									"source": 10
								},
								{
									"begin": 313,
									"end": 1377,
									"name": "SWAP2",
									"source": 10
								},
								{
									"begin": 313,
									"end": 1377,
									"name": "PUSH",
									"source": 10,
									"value": "20"
								},
								{
									"begin": 313,
									"end": 1377,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 313,
									"end": 1377,
									"name": "SWAP2",
									"source": 10
								},
								{
									"begin": 313,
									"end": 1377,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 313,
									"end": 1377,
									"name": "PUSH",
									"source": 10,
									"value": "1"
								},
								{
									"begin": 313,
									"end": 1377,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 313,
									"end": 1377,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 313,
									"end": 1377,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "14"
								},
								{
									"begin": 313,
									"end": 1377,
									"name": "JUMP",
									"source": 10
								},
								{
									"begin": 313,
									"end": 1377,
									"name": "tag",
									"source": 10,
									"value": "15"
								},
								{
									"begin": 313,
									"end": 1377,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 313,
									"end": 1377,
									"name": "tag",
									"source": 10,
									"value": "11"
								},
								{
									"begin": 313,
									"end": 1377,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 313,
									"end": 1377,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 313,
									"end": 1377,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 313,
									"end": 1377,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 313,
									"end": 1377,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "16"
								},
								{
									"begin": 313,
									"end": 1377,
									"name": "SWAP2",
									"source": 10
								},
								{
									"begin": 313,
									"end": 1377,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 313,
									"end": 1377,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "17"
								},
								{
									"begin": 313,
									"end": 1377,
									"name": "JUMP",
									"source": 10,
									"value": "[in]"
								},
								{
									"begin": 313,
									"end": 1377,
									"name": "tag",
									"source": 10,
									"value": "16"
								},
								{
									"begin": 313,
									"end": 1377,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 313,
									"end": 1377,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 313,
									"end": 1377,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 313,
									"end": 1377,
									"name": "JUMP",
									"source": 10,
									"value": "[out]"
								},
								{
									"begin": 313,
									"end": 1377,
									"name": "tag",
									"source": 10,
									"value": "17"
								},
								{
									"begin": 313,
									"end": 1377,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 313,
									"end": 1377,
									"name": "tag",
									"source": 10,
									"value": "18"
								},
								{
									"begin": 313,
									"end": 1377,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 313,
									"end": 1377,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 313,
									"end": 1377,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 313,
									"end": 1377,
									"name": "GT",
									"source": 10
								},
								{
									"begin": 313,
									"end": 1377,
									"name": "ISZERO",
									"source": 10
								},
								{
									"begin": 313,
									"end": 1377,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "19"
								},
								{
									"begin": 313,
									"end": 1377,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": 313,
									"end": 1377,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 313,
									"end": 1377,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 313,
									"end": 1377,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 313,
									"end": 1377,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 313,
									"end": 1377,
									"name": "SSTORE",
									"source": 10
								},
								{
									"begin": 313,
									"end": 1377,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 313,
									"end": 1377,
									"name": "PUSH",
									"source": 10,
									"value": "1"
								},
								{
									"begin": 313,
									"end": 1377,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 313,
									"end": 1377,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "18"
								},
								{
									"begin": 313,
									"end": 1377,
									"name": "JUMP",
									"source": 10
								},
								{
									"begin": 313,
									"end": 1377,
									"name": "tag",
									"source": 10,
									"value": "19"
								},
								{
									"begin": 313,
									"end": 1377,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 313,
									"end": 1377,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 313,
									"end": 1377,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 313,
									"end": 1377,
									"name": "JUMP",
									"source": 10,
									"value": "[out]"
								},
								{
									"begin": 313,
									"end": 1377,
									"name": "tag",
									"source": 10,
									"value": "10"
								},
								{
									"begin": 313,
									"end": 1377,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 313,
									"end": 1377,
									"name": "PUSH #[$]",
									"source": 10,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 313,
									"end": 1377,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 313,
									"end": 1377,
									"name": "PUSH [$]",
									"source": 10,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 313,
									"end": 1377,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 313,
									"end": 1377,
									"name": "CODECOPY",
									"source": 10
								},
								{
									"begin": 313,
									"end": 1377,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 313,
									"end": 1377,
									"name": "RETURN",
									"source": 10
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220f1220b28f3e8c125c5bab44f39a7f76649bec66a4c32b3875555d919eba2848264736f6c63430007060033",
									".code": [
										{
											"begin": 313,
											"end": 1377,
											"name": "PUSH",
											"source": 10,
											"value": "80"
										},
										{
											"begin": 313,
											"end": 1377,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 313,
											"end": 1377,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 313,
											"end": 1377,
											"name": "CALLVALUE",
											"source": 10
										},
										{
											"begin": 313,
											"end": 1377,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 313,
											"end": 1377,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 313,
											"end": 1377,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 313,
											"end": 1377,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 313,
											"end": 1377,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 313,
											"end": 1377,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 313,
											"end": 1377,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 313,
											"end": 1377,
											"name": "tag",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 313,
											"end": 1377,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 313,
											"end": 1377,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 313,
											"end": 1377,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 313,
											"end": 1377,
											"name": "CALLDATASIZE",
											"source": 10
										},
										{
											"begin": 313,
											"end": 1377,
											"name": "LT",
											"source": 10
										},
										{
											"begin": 313,
											"end": 1377,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "2"
										},
										{
											"begin": 313,
											"end": 1377,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 313,
											"end": 1377,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 313,
											"end": 1377,
											"name": "CALLDATALOAD",
											"source": 10
										},
										{
											"begin": 313,
											"end": 1377,
											"name": "PUSH",
											"source": 10,
											"value": "E0"
										},
										{
											"begin": 313,
											"end": 1377,
											"name": "SHR",
											"source": 10
										},
										{
											"begin": 313,
											"end": 1377,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 313,
											"end": 1377,
											"name": "PUSH",
											"source": 10,
											"value": "70A08231"
										},
										{
											"begin": 313,
											"end": 1377,
											"name": "GT",
											"source": 10
										},
										{
											"begin": 313,
											"end": 1377,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "15"
										},
										{
											"begin": 313,
											"end": 1377,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 313,
											"end": 1377,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 313,
											"end": 1377,
											"name": "PUSH",
											"source": 10,
											"value": "70A08231"
										},
										{
											"begin": 313,
											"end": 1377,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 313,
											"end": 1377,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "9"
										},
										{
											"begin": 313,
											"end": 1377,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 313,
											"end": 1377,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 313,
											"end": 1377,
											"name": "PUSH",
											"source": 10,
											"value": "95D89B41"
										},
										{
											"begin": 313,
											"end": 1377,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 313,
											"end": 1377,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "10"
										},
										{
											"begin": 313,
											"end": 1377,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 313,
											"end": 1377,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 313,
											"end": 1377,
											"name": "PUSH",
											"source": 10,
											"value": "A457C2D7"
										},
										{
											"begin": 313,
											"end": 1377,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 313,
											"end": 1377,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "11"
										},
										{
											"begin": 313,
											"end": 1377,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 313,
											"end": 1377,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 313,
											"end": 1377,
											"name": "PUSH",
											"source": 10,
											"value": "A9059CBB"
										},
										{
											"begin": 313,
											"end": 1377,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 313,
											"end": 1377,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "12"
										},
										{
											"begin": 313,
											"end": 1377,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 313,
											"end": 1377,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 313,
											"end": 1377,
											"name": "PUSH",
											"source": 10,
											"value": "DD62ED3E"
										},
										{
											"begin": 313,
											"end": 1377,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 313,
											"end": 1377,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "13"
										},
										{
											"begin": 313,
											"end": 1377,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 313,
											"end": 1377,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 313,
											"end": 1377,
											"name": "PUSH",
											"source": 10,
											"value": "E5DA2CB2"
										},
										{
											"begin": 313,
											"end": 1377,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 313,
											"end": 1377,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "14"
										},
										{
											"begin": 313,
											"end": 1377,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 313,
											"end": 1377,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "2"
										},
										{
											"begin": 313,
											"end": 1377,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 313,
											"end": 1377,
											"name": "tag",
											"source": 10,
											"value": "15"
										},
										{
											"begin": 313,
											"end": 1377,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 313,
											"end": 1377,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 313,
											"end": 1377,
											"name": "PUSH",
											"source": 10,
											"value": "6FDDE03"
										},
										{
											"begin": 313,
											"end": 1377,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 313,
											"end": 1377,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "3"
										},
										{
											"begin": 313,
											"end": 1377,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 313,
											"end": 1377,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 313,
											"end": 1377,
											"name": "PUSH",
											"source": 10,
											"value": "95EA7B3"
										},
										{
											"begin": 313,
											"end": 1377,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 313,
											"end": 1377,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 313,
											"end": 1377,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 313,
											"end": 1377,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 313,
											"end": 1377,
											"name": "PUSH",
											"source": 10,
											"value": "18160DDD"
										},
										{
											"begin": 313,
											"end": 1377,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 313,
											"end": 1377,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "5"
										},
										{
											"begin": 313,
											"end": 1377,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 313,
											"end": 1377,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 313,
											"end": 1377,
											"name": "PUSH",
											"source": 10,
											"value": "23B872DD"
										},
										{
											"begin": 313,
											"end": 1377,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 313,
											"end": 1377,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "6"
										},
										{
											"begin": 313,
											"end": 1377,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 313,
											"end": 1377,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 313,
											"end": 1377,
											"name": "PUSH",
											"source": 10,
											"value": "313CE567"
										},
										{
											"begin": 313,
											"end": 1377,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 313,
											"end": 1377,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "7"
										},
										{
											"begin": 313,
											"end": 1377,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 313,
											"end": 1377,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 313,
											"end": 1377,
											"name": "PUSH",
											"source": 10,
											"value": "39509351"
										},
										{
											"begin": 313,
											"end": 1377,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 313,
											"end": 1377,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "8"
										},
										{
											"begin": 313,
											"end": 1377,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 313,
											"end": 1377,
											"name": "tag",
											"source": 10,
											"value": "2"
										},
										{
											"begin": 313,
											"end": 1377,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 313,
											"end": 1377,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 313,
											"end": 1377,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 313,
											"end": 1377,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "tag",
											"source": 2,
											"value": "3"
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "16"
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "17"
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "tag",
											"source": 2,
											"value": "16"
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "tag",
											"source": 2,
											"value": "18"
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "18"
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "tag",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "21"
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "PUSH",
											"source": 2,
											"value": "100"
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "EXP",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "NOT",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "tag",
											"source": 2,
											"value": "21"
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "RETURN",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "tag",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "22"
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "23"
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "tag",
											"source": 2,
											"value": "23"
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "CALLDATALOAD",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "CALLDATALOAD",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "24"
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "tag",
											"source": 2,
											"value": "22"
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "RETURN",
											"source": 2
										},
										{
											"begin": 3220,
											"end": 3326,
											"name": "tag",
											"source": 2,
											"value": "5"
										},
										{
											"begin": 3220,
											"end": 3326,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3220,
											"end": 3326,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "25"
										},
										{
											"begin": 3220,
											"end": 3326,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "26"
										},
										{
											"begin": 3220,
											"end": 3326,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 3220,
											"end": 3326,
											"name": "tag",
											"source": 2,
											"value": "25"
										},
										{
											"begin": 3220,
											"end": 3326,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3220,
											"end": 3326,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3220,
											"end": 3326,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 3220,
											"end": 3326,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3220,
											"end": 3326,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 3220,
											"end": 3326,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3220,
											"end": 3326,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3220,
											"end": 3326,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 3220,
											"end": 3326,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3220,
											"end": 3326,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3220,
											"end": 3326,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3220,
											"end": 3326,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3220,
											"end": 3326,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3220,
											"end": 3326,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 3220,
											"end": 3326,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3220,
											"end": 3326,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3220,
											"end": 3326,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 3220,
											"end": 3326,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3220,
											"end": 3326,
											"name": "RETURN",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "tag",
											"source": 2,
											"value": "6"
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "27"
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "PUSH",
											"source": 2,
											"value": "60"
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "28"
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "tag",
											"source": 2,
											"value": "28"
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "CALLDATALOAD",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "CALLDATALOAD",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "CALLDATALOAD",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "29"
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "tag",
											"source": 2,
											"value": "27"
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "RETURN",
											"source": 2
										},
										{
											"begin": 3071,
											"end": 3160,
											"name": "tag",
											"source": 2,
											"value": "7"
										},
										{
											"begin": 3071,
											"end": 3160,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3071,
											"end": 3160,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "30"
										},
										{
											"begin": 3071,
											"end": 3160,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "31"
										},
										{
											"begin": 3071,
											"end": 3160,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 3071,
											"end": 3160,
											"name": "tag",
											"source": 2,
											"value": "30"
										},
										{
											"begin": 3071,
											"end": 3160,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3071,
											"end": 3160,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3071,
											"end": 3160,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 3071,
											"end": 3160,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3071,
											"end": 3160,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 3071,
											"end": 3160,
											"name": "PUSH",
											"source": 2,
											"value": "FF"
										},
										{
											"begin": 3071,
											"end": 3160,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 3071,
											"end": 3160,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3071,
											"end": 3160,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3071,
											"end": 3160,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 3071,
											"end": 3160,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3071,
											"end": 3160,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3071,
											"end": 3160,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3071,
											"end": 3160,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3071,
											"end": 3160,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3071,
											"end": 3160,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 3071,
											"end": 3160,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3071,
											"end": 3160,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3071,
											"end": 3160,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 3071,
											"end": 3160,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3071,
											"end": 3160,
											"name": "RETURN",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "tag",
											"source": 2,
											"value": "8"
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "32"
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "33"
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "tag",
											"source": 2,
											"value": "33"
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "CALLDATALOAD",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "CALLDATALOAD",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "34"
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "tag",
											"source": 2,
											"value": "32"
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "RETURN",
											"source": 2
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "tag",
											"source": 2,
											"value": "9"
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "35"
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "36"
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "tag",
											"source": 2,
											"value": "36"
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "CALLDATALOAD",
											"source": 2
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "37"
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "tag",
											"source": 2,
											"value": "35"
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "RETURN",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "tag",
											"source": 2,
											"value": "10"
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "38"
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "39"
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "tag",
											"source": 2,
											"value": "38"
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "tag",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "42"
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "tag",
											"source": 2,
											"value": "42"
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "43"
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "PUSH",
											"source": 2,
											"value": "100"
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "EXP",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "NOT",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "tag",
											"source": 2,
											"value": "43"
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "RETURN",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "tag",
											"source": 2,
											"value": "11"
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "44"
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "45"
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "tag",
											"source": 2,
											"value": "45"
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "CALLDATALOAD",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "CALLDATALOAD",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "46"
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "tag",
											"source": 2,
											"value": "44"
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "RETURN",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "tag",
											"source": 2,
											"value": "12"
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "47"
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "48"
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "tag",
											"source": 2,
											"value": "48"
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "CALLDATALOAD",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "CALLDATALOAD",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "49"
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "tag",
											"source": 2,
											"value": "47"
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "RETURN",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "tag",
											"source": 2,
											"value": "13"
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "50"
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "51"
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "tag",
											"source": 2,
											"value": "51"
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "CALLDATALOAD",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "CALLDATALOAD",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "52"
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "tag",
											"source": 2,
											"value": "50"
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "RETURN",
											"source": 2
										},
										{
											"begin": 617,
											"end": 1371,
											"name": "tag",
											"source": 10,
											"value": "14"
										},
										{
											"begin": 617,
											"end": 1371,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 617,
											"end": 1371,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "53"
										},
										{
											"begin": 617,
											"end": 1371,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 617,
											"end": 1371,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 617,
											"end": 1371,
											"name": "CALLDATASIZE",
											"source": 10
										},
										{
											"begin": 617,
											"end": 1371,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 617,
											"end": 1371,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 617,
											"end": 1371,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 617,
											"end": 1371,
											"name": "LT",
											"source": 10
										},
										{
											"begin": 617,
											"end": 1371,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 617,
											"end": 1371,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "54"
										},
										{
											"begin": 617,
											"end": 1371,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 617,
											"end": 1371,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 617,
											"end": 1371,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 617,
											"end": 1371,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 617,
											"end": 1371,
											"name": "tag",
											"source": 10,
											"value": "54"
										},
										{
											"begin": 617,
											"end": 1371,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 617,
											"end": 1371,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 617,
											"end": 1371,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 617,
											"end": 1371,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 617,
											"end": 1371,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 617,
											"end": 1371,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 617,
											"end": 1371,
											"name": "CALLDATALOAD",
											"source": 10
										},
										{
											"begin": 617,
											"end": 1371,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 617,
											"end": 1371,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 617,
											"end": 1371,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 617,
											"end": 1371,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 617,
											"end": 1371,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 617,
											"end": 1371,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 617,
											"end": 1371,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 617,
											"end": 1371,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 617,
											"end": 1371,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 617,
											"end": 1371,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 617,
											"end": 1371,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "55"
										},
										{
											"begin": 617,
											"end": 1371,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 617,
											"end": 1371,
											"name": "tag",
											"source": 10,
											"value": "53"
										},
										{
											"begin": 617,
											"end": 1371,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 617,
											"end": 1371,
											"name": "STOP",
											"source": 10
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "tag",
											"source": 2,
											"value": "17"
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2198,
											"end": 2211,
											"name": "PUSH",
											"source": 2,
											"value": "60"
										},
										{
											"begin": 2230,
											"end": 2235,
											"name": "PUSH",
											"source": 2,
											"value": "3"
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "PUSH",
											"source": 2,
											"value": "100"
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "MUL",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "PUSH",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "DIV",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "DIV",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "MUL",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "PUSH",
											"source": 2,
											"value": "100"
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "MUL",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "PUSH",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "DIV",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "57"
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "58"
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "PUSH",
											"source": 2,
											"value": "100"
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "DIV",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "MUL",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "57"
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "tag",
											"source": 2,
											"value": "58"
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "tag",
											"source": 2,
											"value": "59"
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "GT",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "59"
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "tag",
											"source": 2,
											"value": "57"
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2223,
											"end": 2235,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2153,
											"end": 2242,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "tag",
											"source": 2,
											"value": "24"
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4312,
											"end": 4316,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 4328,
											"end": 4367,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "61"
										},
										{
											"begin": 4337,
											"end": 4349,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "62"
										},
										{
											"begin": 4337,
											"end": 4347,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "63"
										},
										{
											"begin": 4337,
											"end": 4349,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 4337,
											"end": 4349,
											"name": "tag",
											"source": 2,
											"value": "62"
										},
										{
											"begin": 4337,
											"end": 4349,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4351,
											"end": 4358,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 4360,
											"end": 4366,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 4328,
											"end": 4336,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "64"
										},
										{
											"begin": 4328,
											"end": 4367,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 4328,
											"end": 4367,
											"name": "tag",
											"source": 2,
											"value": "61"
										},
										{
											"begin": 4328,
											"end": 4367,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4384,
											"end": 4388,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 4377,
											"end": 4388,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4377,
											"end": 4388,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 4229,
											"end": 4395,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 3220,
											"end": 3326,
											"name": "tag",
											"source": 2,
											"value": "26"
										},
										{
											"begin": 3220,
											"end": 3326,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3281,
											"end": 3288,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 3307,
											"end": 3319,
											"name": "PUSH",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 3307,
											"end": 3319,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 3300,
											"end": 3319,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3300,
											"end": 3319,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3220,
											"end": 3326,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3220,
											"end": 3326,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "tag",
											"source": 2,
											"value": "29"
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4968,
											"end": 4972,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 4984,
											"end": 5020,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "67"
										},
										{
											"begin": 4994,
											"end": 5000,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 5002,
											"end": 5011,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 5013,
											"end": 5019,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 4984,
											"end": 4993,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "68"
										},
										{
											"begin": 4984,
											"end": 5020,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 4984,
											"end": 5020,
											"name": "tag",
											"source": 2,
											"value": "67"
										},
										{
											"begin": 4984,
											"end": 5020,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5030,
											"end": 5151,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "69"
										},
										{
											"begin": 5039,
											"end": 5045,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 5047,
											"end": 5059,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "70"
										},
										{
											"begin": 5047,
											"end": 5057,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "63"
										},
										{
											"begin": 5047,
											"end": 5059,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 5047,
											"end": 5059,
											"name": "tag",
											"source": 2,
											"value": "70"
										},
										{
											"begin": 5047,
											"end": 5059,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5061,
											"end": 5150,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "71"
										},
										{
											"begin": 5099,
											"end": 5105,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 5061,
											"end": 5150,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 5061,
											"end": 5150,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 5061,
											"end": 5150,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 5061,
											"end": 5150,
											"name": "PUSH",
											"source": 2,
											"value": "60"
										},
										{
											"begin": 5061,
											"end": 5150,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5061,
											"end": 5150,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 5061,
											"end": 5150,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 5061,
											"end": 5150,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 5061,
											"end": 5150,
											"name": "PUSH",
											"source": 2,
											"value": "28"
										},
										{
											"begin": 5061,
											"end": 5150,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 5061,
											"end": 5150,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 5061,
											"end": 5150,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 5061,
											"end": 5150,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5061,
											"end": 5150,
											"name": "PUSH data",
											"source": 2,
											"value": "974D1B4421DA69CC60B481194F0DAD36A5BB4E23DA810DA7A7FB30CDBA178330"
										},
										{
											"begin": 5061,
											"end": 5150,
											"name": "PUSH",
											"source": 2,
											"value": "28"
										},
										{
											"begin": 5061,
											"end": 5150,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 5061,
											"end": 5150,
											"name": "CODECOPY",
											"source": 2
										},
										{
											"begin": 5061,
											"end": 5072,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 5061,
											"end": 5080,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 5073,
											"end": 5079,
											"name": "DUP12",
											"source": 2
										},
										{
											"begin": 5061,
											"end": 5080,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5061,
											"end": 5080,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 5061,
											"end": 5080,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5061,
											"end": 5080,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 5061,
											"end": 5080,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 5061,
											"end": 5080,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 5061,
											"end": 5080,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 5061,
											"end": 5080,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5061,
											"end": 5080,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5061,
											"end": 5080,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 5061,
											"end": 5080,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 5061,
											"end": 5080,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 5061,
											"end": 5080,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5061,
											"end": 5080,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 5061,
											"end": 5080,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 5061,
											"end": 5094,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 5081,
											"end": 5093,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "72"
										},
										{
											"begin": 5081,
											"end": 5091,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "63"
										},
										{
											"begin": 5081,
											"end": 5093,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 5081,
											"end": 5093,
											"name": "tag",
											"source": 2,
											"value": "72"
										},
										{
											"begin": 5081,
											"end": 5093,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5061,
											"end": 5094,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5061,
											"end": 5094,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 5061,
											"end": 5094,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5061,
											"end": 5094,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 5061,
											"end": 5094,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 5061,
											"end": 5094,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 5061,
											"end": 5094,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 5061,
											"end": 5094,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5061,
											"end": 5094,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5061,
											"end": 5094,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 5061,
											"end": 5094,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 5061,
											"end": 5094,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 5061,
											"end": 5094,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5061,
											"end": 5094,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 5061,
											"end": 5094,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 5061,
											"end": 5094,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 5061,
											"end": 5098,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "73"
										},
										{
											"begin": 5061,
											"end": 5098,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5061,
											"end": 5150,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 5061,
											"end": 5150,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 5061,
											"end": 5150,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5061,
											"end": 5150,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFF"
										},
										{
											"begin": 5061,
											"end": 5150,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 5061,
											"end": 5150,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 5061,
											"end": 5150,
											"name": "tag",
											"source": 2,
											"value": "71"
										},
										{
											"begin": 5061,
											"end": 5150,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5030,
											"end": 5038,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "64"
										},
										{
											"begin": 5030,
											"end": 5151,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 5030,
											"end": 5151,
											"name": "tag",
											"source": 2,
											"value": "69"
										},
										{
											"begin": 5030,
											"end": 5151,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5168,
											"end": 5172,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 5161,
											"end": 5172,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5161,
											"end": 5172,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 4862,
											"end": 5179,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 3071,
											"end": 3160,
											"name": "tag",
											"source": 2,
											"value": "31"
										},
										{
											"begin": 3071,
											"end": 3160,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3120,
											"end": 3125,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 3144,
											"end": 3153,
											"name": "PUSH",
											"source": 2,
											"value": "5"
										},
										{
											"begin": 3144,
											"end": 3153,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 3144,
											"end": 3153,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3144,
											"end": 3153,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 3144,
											"end": 3153,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3144,
											"end": 3153,
											"name": "PUSH",
											"source": 2,
											"value": "100"
										},
										{
											"begin": 3144,
											"end": 3153,
											"name": "EXP",
											"source": 2
										},
										{
											"begin": 3144,
											"end": 3153,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3144,
											"end": 3153,
											"name": "DIV",
											"source": 2
										},
										{
											"begin": 3144,
											"end": 3153,
											"name": "PUSH",
											"source": 2,
											"value": "FF"
										},
										{
											"begin": 3144,
											"end": 3153,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 3137,
											"end": 3153,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3137,
											"end": 3153,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3071,
											"end": 3160,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3071,
											"end": 3160,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "tag",
											"source": 2,
											"value": "34"
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5662,
											"end": 5666,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 5678,
											"end": 5761,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "76"
										},
										{
											"begin": 5687,
											"end": 5699,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "77"
										},
										{
											"begin": 5687,
											"end": 5697,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "63"
										},
										{
											"begin": 5687,
											"end": 5699,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 5687,
											"end": 5699,
											"name": "tag",
											"source": 2,
											"value": "77"
										},
										{
											"begin": 5687,
											"end": 5699,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5701,
											"end": 5708,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 5710,
											"end": 5760,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "78"
										},
										{
											"begin": 5749,
											"end": 5759,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 5710,
											"end": 5721,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 5710,
											"end": 5735,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 5722,
											"end": 5734,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "79"
										},
										{
											"begin": 5722,
											"end": 5732,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "63"
										},
										{
											"begin": 5722,
											"end": 5734,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 5722,
											"end": 5734,
											"name": "tag",
											"source": 2,
											"value": "79"
										},
										{
											"begin": 5722,
											"end": 5734,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5710,
											"end": 5735,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5710,
											"end": 5735,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 5710,
											"end": 5735,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5710,
											"end": 5735,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 5710,
											"end": 5735,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 5710,
											"end": 5735,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 5710,
											"end": 5735,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 5710,
											"end": 5735,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5710,
											"end": 5735,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5710,
											"end": 5735,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 5710,
											"end": 5735,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 5710,
											"end": 5735,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 5710,
											"end": 5735,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5710,
											"end": 5735,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 5710,
											"end": 5735,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 5710,
											"end": 5744,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 5736,
											"end": 5743,
											"name": "DUP10",
											"source": 2
										},
										{
											"begin": 5710,
											"end": 5744,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5710,
											"end": 5744,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 5710,
											"end": 5744,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5710,
											"end": 5744,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 5710,
											"end": 5744,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 5710,
											"end": 5744,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 5710,
											"end": 5744,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 5710,
											"end": 5744,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5710,
											"end": 5744,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5710,
											"end": 5744,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 5710,
											"end": 5744,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 5710,
											"end": 5744,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 5710,
											"end": 5744,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5710,
											"end": 5744,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 5710,
											"end": 5744,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 5710,
											"end": 5744,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 5710,
											"end": 5748,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "80"
										},
										{
											"begin": 5710,
											"end": 5748,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5710,
											"end": 5760,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 5710,
											"end": 5760,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5710,
											"end": 5760,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFF"
										},
										{
											"begin": 5710,
											"end": 5760,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 5710,
											"end": 5760,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 5710,
											"end": 5760,
											"name": "tag",
											"source": 2,
											"value": "78"
										},
										{
											"begin": 5710,
											"end": 5760,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5678,
											"end": 5686,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "64"
										},
										{
											"begin": 5678,
											"end": 5761,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 5678,
											"end": 5761,
											"name": "tag",
											"source": 2,
											"value": "76"
										},
										{
											"begin": 5678,
											"end": 5761,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5778,
											"end": 5782,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 5771,
											"end": 5782,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5771,
											"end": 5782,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 5574,
											"end": 5789,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "tag",
											"source": 2,
											"value": "37"
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3458,
											"end": 3465,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 3484,
											"end": 3493,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3484,
											"end": 3502,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 3494,
											"end": 3501,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 3484,
											"end": 3502,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3484,
											"end": 3502,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 3484,
											"end": 3502,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3484,
											"end": 3502,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 3484,
											"end": 3502,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3484,
											"end": 3502,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3484,
											"end": 3502,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 3484,
											"end": 3502,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3484,
											"end": 3502,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3484,
											"end": 3502,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3484,
											"end": 3502,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3484,
											"end": 3502,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 3484,
											"end": 3502,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3484,
											"end": 3502,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 3484,
											"end": 3502,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 3484,
											"end": 3502,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 3477,
											"end": 3502,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3477,
											"end": 3502,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3384,
											"end": 3509,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "tag",
											"source": 2,
											"value": "39"
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2402,
											"end": 2415,
											"name": "PUSH",
											"source": 2,
											"value": "60"
										},
										{
											"begin": 2434,
											"end": 2441,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "PUSH",
											"source": 2,
											"value": "100"
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "MUL",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "PUSH",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "DIV",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "DIV",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "MUL",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "PUSH",
											"source": 2,
											"value": "100"
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "MUL",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "PUSH",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "DIV",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "83"
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "84"
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "PUSH",
											"source": 2,
											"value": "100"
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "DIV",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "MUL",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "83"
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "tag",
											"source": 2,
											"value": "84"
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "tag",
											"source": 2,
											"value": "85"
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "GT",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "85"
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "tag",
											"source": 2,
											"value": "83"
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2427,
											"end": 2441,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2355,
											"end": 2448,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "tag",
											"source": 2,
											"value": "46"
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6369,
											"end": 6373,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 6385,
											"end": 6514,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "87"
										},
										{
											"begin": 6394,
											"end": 6406,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "88"
										},
										{
											"begin": 6394,
											"end": 6404,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "63"
										},
										{
											"begin": 6394,
											"end": 6406,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 6394,
											"end": 6406,
											"name": "tag",
											"source": 2,
											"value": "88"
										},
										{
											"begin": 6394,
											"end": 6406,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6408,
											"end": 6415,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 6417,
											"end": 6513,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "89"
										},
										{
											"begin": 6456,
											"end": 6471,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 6417,
											"end": 6513,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 6417,
											"end": 6513,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 6417,
											"end": 6513,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 6417,
											"end": 6513,
											"name": "PUSH",
											"source": 2,
											"value": "60"
										},
										{
											"begin": 6417,
											"end": 6513,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 6417,
											"end": 6513,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 6417,
											"end": 6513,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 6417,
											"end": 6513,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 6417,
											"end": 6513,
											"name": "PUSH",
											"source": 2,
											"value": "25"
										},
										{
											"begin": 6417,
											"end": 6513,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 6417,
											"end": 6513,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 6417,
											"end": 6513,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 6417,
											"end": 6513,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 6417,
											"end": 6513,
											"name": "PUSH data",
											"source": 2,
											"value": "F8B476F7D28209D77D4A4AC1FE36B9F8259AA1BB6BDDFA6E89DE7E51615CF8A8"
										},
										{
											"begin": 6417,
											"end": 6513,
											"name": "PUSH",
											"source": 2,
											"value": "25"
										},
										{
											"begin": 6417,
											"end": 6513,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 6417,
											"end": 6513,
											"name": "CODECOPY",
											"source": 2
										},
										{
											"begin": 6417,
											"end": 6428,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 6417,
											"end": 6442,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 6429,
											"end": 6441,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "90"
										},
										{
											"begin": 6429,
											"end": 6439,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "63"
										},
										{
											"begin": 6429,
											"end": 6441,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 6429,
											"end": 6441,
											"name": "tag",
											"source": 2,
											"value": "90"
										},
										{
											"begin": 6429,
											"end": 6441,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6417,
											"end": 6442,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6417,
											"end": 6442,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 6417,
											"end": 6442,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6417,
											"end": 6442,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 6417,
											"end": 6442,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 6417,
											"end": 6442,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 6417,
											"end": 6442,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 6417,
											"end": 6442,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 6417,
											"end": 6442,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 6417,
											"end": 6442,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 6417,
											"end": 6442,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 6417,
											"end": 6442,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 6417,
											"end": 6442,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 6417,
											"end": 6442,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 6417,
											"end": 6442,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 6417,
											"end": 6451,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 6443,
											"end": 6450,
											"name": "DUP11",
											"source": 2
										},
										{
											"begin": 6417,
											"end": 6451,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6417,
											"end": 6451,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 6417,
											"end": 6451,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6417,
											"end": 6451,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 6417,
											"end": 6451,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 6417,
											"end": 6451,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 6417,
											"end": 6451,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 6417,
											"end": 6451,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 6417,
											"end": 6451,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 6417,
											"end": 6451,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 6417,
											"end": 6451,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 6417,
											"end": 6451,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 6417,
											"end": 6451,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 6417,
											"end": 6451,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 6417,
											"end": 6451,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 6417,
											"end": 6451,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 6417,
											"end": 6455,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "73"
										},
										{
											"begin": 6417,
											"end": 6455,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 6417,
											"end": 6513,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 6417,
											"end": 6513,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 6417,
											"end": 6513,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 6417,
											"end": 6513,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFF"
										},
										{
											"begin": 6417,
											"end": 6513,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 6417,
											"end": 6513,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 6417,
											"end": 6513,
											"name": "tag",
											"source": 2,
											"value": "89"
										},
										{
											"begin": 6417,
											"end": 6513,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6385,
											"end": 6393,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "64"
										},
										{
											"begin": 6385,
											"end": 6514,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 6385,
											"end": 6514,
											"name": "tag",
											"source": 2,
											"value": "87"
										},
										{
											"begin": 6385,
											"end": 6514,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6531,
											"end": 6535,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 6524,
											"end": 6535,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 6524,
											"end": 6535,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 6276,
											"end": 6542,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "tag",
											"source": 2,
											"value": "49"
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3798,
											"end": 3802,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 3814,
											"end": 3856,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "92"
										},
										{
											"begin": 3824,
											"end": 3836,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "93"
										},
										{
											"begin": 3824,
											"end": 3834,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "63"
										},
										{
											"begin": 3824,
											"end": 3836,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 3824,
											"end": 3836,
											"name": "tag",
											"source": 2,
											"value": "93"
										},
										{
											"begin": 3824,
											"end": 3836,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3838,
											"end": 3847,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 3849,
											"end": 3855,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 3814,
											"end": 3823,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "68"
										},
										{
											"begin": 3814,
											"end": 3856,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 3814,
											"end": 3856,
											"name": "tag",
											"source": 2,
											"value": "92"
										},
										{
											"begin": 3814,
											"end": 3856,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3873,
											"end": 3877,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 3866,
											"end": 3877,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3866,
											"end": 3877,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3712,
											"end": 3884,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "tag",
											"source": 2,
											"value": "52"
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4031,
											"end": 4038,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 4057,
											"end": 4068,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 4057,
											"end": 4075,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 4069,
											"end": 4074,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 4057,
											"end": 4075,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4057,
											"end": 4075,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 4057,
											"end": 4075,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4057,
											"end": 4075,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 4057,
											"end": 4075,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 4057,
											"end": 4075,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 4057,
											"end": 4075,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 4057,
											"end": 4075,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 4057,
											"end": 4075,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4057,
											"end": 4075,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 4057,
											"end": 4075,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 4057,
											"end": 4075,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 4057,
											"end": 4075,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 4057,
											"end": 4075,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 4057,
											"end": 4075,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 4057,
											"end": 4084,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 4076,
											"end": 4083,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 4057,
											"end": 4084,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4057,
											"end": 4084,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 4057,
											"end": 4084,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4057,
											"end": 4084,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 4057,
											"end": 4084,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 4057,
											"end": 4084,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 4057,
											"end": 4084,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 4057,
											"end": 4084,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 4057,
											"end": 4084,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4057,
											"end": 4084,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 4057,
											"end": 4084,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 4057,
											"end": 4084,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 4057,
											"end": 4084,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 4057,
											"end": 4084,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 4057,
											"end": 4084,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 4057,
											"end": 4084,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 4050,
											"end": 4084,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4050,
											"end": 4084,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3942,
											"end": 4091,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 617,
											"end": 1371,
											"name": "tag",
											"source": 10,
											"value": "55"
										},
										{
											"begin": 617,
											"end": 1371,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 667,
											"end": 685,
											"name": "PUSH",
											"source": 10,
											"value": "6"
										},
										{
											"begin": 667,
											"end": 685,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 667,
											"end": 685,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 667,
											"end": 685,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 667,
											"end": 685,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 667,
											"end": 685,
											"name": "PUSH",
											"source": 10,
											"value": "100"
										},
										{
											"begin": 667,
											"end": 685,
											"name": "EXP",
											"source": 10
										},
										{
											"begin": 667,
											"end": 685,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 667,
											"end": 685,
											"name": "DIV",
											"source": 10
										},
										{
											"begin": 667,
											"end": 685,
											"name": "PUSH",
											"source": 10,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 667,
											"end": 685,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 667,
											"end": 698,
											"name": "PUSH",
											"source": 10,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 667,
											"end": 698,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 667,
											"end": 698,
											"name": "PUSH",
											"source": 10,
											"value": "23B872DD"
										},
										{
											"begin": 699,
											"end": 709,
											"name": "CALLER",
											"source": 10
										},
										{
											"begin": 719,
											"end": 723,
											"name": "ADDRESS",
											"source": 10
										},
										{
											"begin": 726,
											"end": 734,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 667,
											"end": 735,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 667,
											"end": 735,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 667,
											"end": 735,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 667,
											"end": 735,
											"name": "PUSH",
											"source": 10,
											"value": "FFFFFFFF"
										},
										{
											"begin": 667,
											"end": 735,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 667,
											"end": 735,
											"name": "PUSH",
											"source": 10,
											"value": "E0"
										},
										{
											"begin": 667,
											"end": 735,
											"name": "SHL",
											"source": 10
										},
										{
											"begin": 667,
											"end": 735,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 667,
											"end": 735,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 667,
											"end": 735,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 667,
											"end": 735,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 667,
											"end": 735,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 667,
											"end": 735,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 667,
											"end": 735,
											"name": "PUSH",
											"source": 10,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 667,
											"end": 735,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 667,
											"end": 735,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 667,
											"end": 735,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 667,
											"end": 735,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 667,
											"end": 735,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 667,
											"end": 735,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 667,
											"end": 735,
											"name": "PUSH",
											"source": 10,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 667,
											"end": 735,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 667,
											"end": 735,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 667,
											"end": 735,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 667,
											"end": 735,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 667,
											"end": 735,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 667,
											"end": 735,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 667,
											"end": 735,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 667,
											"end": 735,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 667,
											"end": 735,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 667,
											"end": 735,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 667,
											"end": 735,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": 667,
											"end": 735,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 667,
											"end": 735,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 667,
											"end": 735,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 667,
											"end": 735,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 667,
											"end": 735,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 667,
											"end": 735,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 667,
											"end": 735,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 667,
											"end": 735,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 667,
											"end": 735,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 667,
											"end": 735,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 667,
											"end": 735,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 667,
											"end": 735,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 667,
											"end": 735,
											"name": "DUP8",
											"source": 10
										},
										{
											"begin": 667,
											"end": 735,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 667,
											"end": 735,
											"name": "EXTCODESIZE",
											"source": 10
										},
										{
											"begin": 667,
											"end": 735,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 667,
											"end": 735,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 667,
											"end": 735,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 667,
											"end": 735,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "96"
										},
										{
											"begin": 667,
											"end": 735,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 667,
											"end": 735,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 667,
											"end": 735,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 667,
											"end": 735,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 667,
											"end": 735,
											"name": "tag",
											"source": 10,
											"value": "96"
										},
										{
											"begin": 667,
											"end": 735,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 667,
											"end": 735,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 667,
											"end": 735,
											"name": "GAS",
											"source": 10
										},
										{
											"begin": 667,
											"end": 735,
											"name": "CALL",
											"source": 10
										},
										{
											"begin": 667,
											"end": 735,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 667,
											"end": 735,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 667,
											"end": 735,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 667,
											"end": 735,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "98"
										},
										{
											"begin": 667,
											"end": 735,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 667,
											"end": 735,
											"name": "RETURNDATASIZE",
											"source": 10
										},
										{
											"begin": 667,
											"end": 735,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 667,
											"end": 735,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 667,
											"end": 735,
											"name": "RETURNDATACOPY",
											"source": 10
										},
										{
											"begin": 667,
											"end": 735,
											"name": "RETURNDATASIZE",
											"source": 10
										},
										{
											"begin": 667,
											"end": 735,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 667,
											"end": 735,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 667,
											"end": 735,
											"name": "tag",
											"source": 10,
											"value": "98"
										},
										{
											"begin": 667,
											"end": 735,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 667,
											"end": 735,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 667,
											"end": 735,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 667,
											"end": 735,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 667,
											"end": 735,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 747,
											"end": 759,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 761,
											"end": 777,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 779,
											"end": 793,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 795,
											"end": 809,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 811,
											"end": 821,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 823,
											"end": 838,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 840,
											"end": 855,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 857,
											"end": 874,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 875,
											"end": 907,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 921,
											"end": 953,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 967,
											"end": 986,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 1000,
											"end": 1019,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1021,
											"end": 1039,
											"name": "PUSH",
											"source": 10,
											"value": "6"
										},
										{
											"begin": 1021,
											"end": 1039,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 1021,
											"end": 1039,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1021,
											"end": 1039,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 1021,
											"end": 1039,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1021,
											"end": 1039,
											"name": "PUSH",
											"source": 10,
											"value": "100"
										},
										{
											"begin": 1021,
											"end": 1039,
											"name": "EXP",
											"source": 10
										},
										{
											"begin": 1021,
											"end": 1039,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1021,
											"end": 1039,
											"name": "DIV",
											"source": 10
										},
										{
											"begin": 1021,
											"end": 1039,
											"name": "PUSH",
											"source": 10,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1021,
											"end": 1039,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 1021,
											"end": 1049,
											"name": "PUSH",
											"source": 10,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1021,
											"end": 1049,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 1021,
											"end": 1049,
											"name": "PUSH",
											"source": 10,
											"value": "99FBAB88"
										},
										{
											"begin": 1050,
											"end": 1058,
											"name": "DUP15",
											"source": 10
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "PUSH",
											"source": 10,
											"value": "FFFFFFFF"
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "PUSH",
											"source": 10,
											"value": "E0"
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "SHL",
											"source": 10
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "PUSH",
											"source": 10,
											"value": "180"
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "EXTCODESIZE",
											"source": 10
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "99"
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "tag",
											"source": 10,
											"value": "99"
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "GAS",
											"source": 10
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "STATICCALL",
											"source": 10
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "101"
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "RETURNDATASIZE",
											"source": 10
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "RETURNDATACOPY",
											"source": 10
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "RETURNDATASIZE",
											"source": 10
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "tag",
											"source": 10,
											"value": "101"
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "RETURNDATASIZE",
											"source": 10
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "PUSH",
											"source": 10,
											"value": "180"
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "LT",
											"source": 10
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "102"
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "tag",
											"source": 10,
											"value": "102"
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1021,
											"end": 1059,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 746,
											"end": 1059,
											"name": "SWAP12",
											"source": 10
										},
										{
											"begin": 746,
											"end": 1059,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 746,
											"end": 1059,
											"name": "SWAP12",
											"source": 10
										},
										{
											"begin": 746,
											"end": 1059,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 746,
											"end": 1059,
											"name": "SWAP12",
											"source": 10
										},
										{
											"begin": 746,
											"end": 1059,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 746,
											"end": 1059,
											"name": "SWAP12",
											"source": 10
										},
										{
											"begin": 746,
											"end": 1059,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 746,
											"end": 1059,
											"name": "SWAP12",
											"source": 10
										},
										{
											"begin": 746,
											"end": 1059,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 746,
											"end": 1059,
											"name": "SWAP12",
											"source": 10
										},
										{
											"begin": 746,
											"end": 1059,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 746,
											"end": 1059,
											"name": "SWAP12",
											"source": 10
										},
										{
											"begin": 746,
											"end": 1059,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 746,
											"end": 1059,
											"name": "SWAP12",
											"source": 10
										},
										{
											"begin": 746,
											"end": 1059,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 746,
											"end": 1059,
											"name": "SWAP12",
											"source": 10
										},
										{
											"begin": 746,
											"end": 1059,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 746,
											"end": 1059,
											"name": "SWAP12",
											"source": 10
										},
										{
											"begin": 746,
											"end": 1059,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 746,
											"end": 1059,
											"name": "SWAP12",
											"source": 10
										},
										{
											"begin": 746,
											"end": 1059,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 746,
											"end": 1059,
											"name": "SWAP12",
											"source": 10
										},
										{
											"begin": 746,
											"end": 1059,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1073,
											"end": 1086,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 1089,
											"end": 1098,
											"name": "DUP8",
											"source": 10
										},
										{
											"begin": 1073,
											"end": 1098,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1073,
											"end": 1098,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1112,
											"end": 1133,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 1136,
											"end": 1174,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "103"
										},
										{
											"begin": 1164,
											"end": 1173,
											"name": "DUP10",
											"source": 10
										},
										{
											"begin": 1136,
											"end": 1163,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "104"
										},
										{
											"begin": 1136,
											"end": 1174,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 1136,
											"end": 1174,
											"name": "tag",
											"source": 10,
											"value": "103"
										},
										{
											"begin": 1136,
											"end": 1174,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1112,
											"end": 1174,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1112,
											"end": 1174,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1188,
											"end": 1209,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 1212,
											"end": 1250,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "105"
										},
										{
											"begin": 1240,
											"end": 1249,
											"name": "DUP10",
											"source": 10
										},
										{
											"begin": 1212,
											"end": 1239,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "104"
										},
										{
											"begin": 1212,
											"end": 1250,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 1212,
											"end": 1250,
											"name": "tag",
											"source": 10,
											"value": "105"
										},
										{
											"begin": 1212,
											"end": 1250,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1188,
											"end": 1250,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1188,
											"end": 1250,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1264,
											"end": 1279,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 1282,
											"end": 1362,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "106"
										},
										{
											"begin": 1322,
											"end": 1335,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 1337,
											"end": 1350,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 1352,
											"end": 1361,
											"name": "DUP12",
											"source": 10
										},
										{
											"begin": 1282,
											"end": 1321,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "107"
										},
										{
											"begin": 1282,
											"end": 1362,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 1282,
											"end": 1362,
											"name": "tag",
											"source": 10,
											"value": "106"
										},
										{
											"begin": 1282,
											"end": 1362,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1264,
											"end": 1362,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1264,
											"end": 1362,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 617,
											"end": 1371,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 617,
											"end": 1371,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 617,
											"end": 1371,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 617,
											"end": 1371,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 617,
											"end": 1371,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 617,
											"end": 1371,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 617,
											"end": 1371,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 617,
											"end": 1371,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 617,
											"end": 1371,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 617,
											"end": 1371,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 617,
											"end": 1371,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 617,
											"end": 1371,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 617,
											"end": 1371,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 617,
											"end": 1371,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 617,
											"end": 1371,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 617,
											"end": 1371,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 617,
											"end": 1371,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 617,
											"end": 1371,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 598,
											"end": 702,
											"name": "tag",
											"source": 7,
											"value": "63"
										},
										{
											"begin": 598,
											"end": 702,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 651,
											"end": 666,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 685,
											"end": 695,
											"name": "CALLER",
											"source": 7
										},
										{
											"begin": 678,
											"end": 695,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 678,
											"end": 695,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 598,
											"end": 702,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 598,
											"end": 702,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 9340,
											"end": 9680,
											"name": "tag",
											"source": 2,
											"value": "64"
										},
										{
											"begin": 9340,
											"end": 9680,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 9458,
											"end": 9459,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 9441,
											"end": 9460,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 9441,
											"end": 9460,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 9441,
											"end": 9446,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 9441,
											"end": 9460,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 9441,
											"end": 9460,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 9441,
											"end": 9460,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 9441,
											"end": 9460,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 9433,
											"end": 9501,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "110"
										},
										{
											"begin": 9433,
											"end": 9501,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 9433,
											"end": 9501,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 9433,
											"end": 9501,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 9433,
											"end": 9501,
											"name": "PUSH",
											"source": 2,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 9433,
											"end": 9501,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 9433,
											"end": 9501,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 9433,
											"end": 9501,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 9433,
											"end": 9501,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 9433,
											"end": 9501,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 9433,
											"end": 9501,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 9433,
											"end": 9501,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 9433,
											"end": 9501,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 9433,
											"end": 9501,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 9433,
											"end": 9501,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 9433,
											"end": 9501,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 9433,
											"end": 9501,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 9433,
											"end": 9501,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 9433,
											"end": 9501,
											"name": "PUSH",
											"source": 2,
											"value": "24"
										},
										{
											"begin": 9433,
											"end": 9501,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 9433,
											"end": 9501,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 9433,
											"end": 9501,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 9433,
											"end": 9501,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 9433,
											"end": 9501,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 9433,
											"end": 9501,
											"name": "PUSH data",
											"source": 2,
											"value": "C953F4879035ED60E766B34720F656AAB5C697B141D924C283124ECEDB91C208"
										},
										{
											"begin": 9433,
											"end": 9501,
											"name": "PUSH",
											"source": 2,
											"value": "24"
										},
										{
											"begin": 9433,
											"end": 9501,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 9433,
											"end": 9501,
											"name": "CODECOPY",
											"source": 2
										},
										{
											"begin": 9433,
											"end": 9501,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 9433,
											"end": 9501,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 9433,
											"end": 9501,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 9433,
											"end": 9501,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 9433,
											"end": 9501,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 9433,
											"end": 9501,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 9433,
											"end": 9501,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 9433,
											"end": 9501,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 9433,
											"end": 9501,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 9433,
											"end": 9501,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 9433,
											"end": 9501,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 9433,
											"end": 9501,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 9433,
											"end": 9501,
											"name": "tag",
											"source": 2,
											"value": "110"
										},
										{
											"begin": 9433,
											"end": 9501,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 9538,
											"end": 9539,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 9519,
											"end": 9540,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 9519,
											"end": 9540,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 9519,
											"end": 9526,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 9519,
											"end": 9540,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 9519,
											"end": 9540,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 9519,
											"end": 9540,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 9519,
											"end": 9540,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 9511,
											"end": 9579,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "111"
										},
										{
											"begin": 9511,
											"end": 9579,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 9511,
											"end": 9579,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 9511,
											"end": 9579,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 9511,
											"end": 9579,
											"name": "PUSH",
											"source": 2,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 9511,
											"end": 9579,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 9511,
											"end": 9579,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 9511,
											"end": 9579,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 9511,
											"end": 9579,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 9511,
											"end": 9579,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 9511,
											"end": 9579,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 9511,
											"end": 9579,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 9511,
											"end": 9579,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 9511,
											"end": 9579,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 9511,
											"end": 9579,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 9511,
											"end": 9579,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 9511,
											"end": 9579,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 9511,
											"end": 9579,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 9511,
											"end": 9579,
											"name": "PUSH",
											"source": 2,
											"value": "22"
										},
										{
											"begin": 9511,
											"end": 9579,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 9511,
											"end": 9579,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 9511,
											"end": 9579,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 9511,
											"end": 9579,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 9511,
											"end": 9579,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 9511,
											"end": 9579,
											"name": "PUSH data",
											"source": 2,
											"value": "24883CC5FE64ACE9D0DF1893501ECB93C77180F0FF69CCA79AFFB3C316DC8029"
										},
										{
											"begin": 9511,
											"end": 9579,
											"name": "PUSH",
											"source": 2,
											"value": "22"
										},
										{
											"begin": 9511,
											"end": 9579,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 9511,
											"end": 9579,
											"name": "CODECOPY",
											"source": 2
										},
										{
											"begin": 9511,
											"end": 9579,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 9511,
											"end": 9579,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 9511,
											"end": 9579,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 9511,
											"end": 9579,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 9511,
											"end": 9579,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 9511,
											"end": 9579,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 9511,
											"end": 9579,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 9511,
											"end": 9579,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 9511,
											"end": 9579,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 9511,
											"end": 9579,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 9511,
											"end": 9579,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 9511,
											"end": 9579,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 9511,
											"end": 9579,
											"name": "tag",
											"source": 2,
											"value": "111"
										},
										{
											"begin": 9511,
											"end": 9579,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 9620,
											"end": 9626,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 9590,
											"end": 9601,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 9590,
											"end": 9608,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 9602,
											"end": 9607,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 9590,
											"end": 9608,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 9590,
											"end": 9608,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 9590,
											"end": 9608,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 9590,
											"end": 9608,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 9590,
											"end": 9608,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 9590,
											"end": 9608,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 9590,
											"end": 9608,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 9590,
											"end": 9608,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 9590,
											"end": 9608,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 9590,
											"end": 9608,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 9590,
											"end": 9608,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 9590,
											"end": 9608,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 9590,
											"end": 9608,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 9590,
											"end": 9608,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 9590,
											"end": 9608,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 9590,
											"end": 9617,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 9609,
											"end": 9616,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 9590,
											"end": 9617,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 9590,
											"end": 9617,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 9590,
											"end": 9617,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 9590,
											"end": 9617,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 9590,
											"end": 9617,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 9590,
											"end": 9617,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 9590,
											"end": 9617,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 9590,
											"end": 9617,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 9590,
											"end": 9617,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 9590,
											"end": 9617,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 9590,
											"end": 9617,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 9590,
											"end": 9617,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 9590,
											"end": 9617,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 9590,
											"end": 9617,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 9590,
											"end": 9617,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 9590,
											"end": 9626,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 9590,
											"end": 9626,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 9590,
											"end": 9626,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 9590,
											"end": 9626,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 9657,
											"end": 9664,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 9641,
											"end": 9673,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 9641,
											"end": 9673,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 9650,
											"end": 9655,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 9641,
											"end": 9673,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 9641,
											"end": 9673,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 9641,
											"end": 9673,
											"name": "PUSH",
											"source": 2,
											"value": "8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925"
										},
										{
											"begin": 9666,
											"end": 9672,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 9641,
											"end": 9673,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 9641,
											"end": 9673,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 9641,
											"end": 9673,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 9641,
											"end": 9673,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 9641,
											"end": 9673,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 9641,
											"end": 9673,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 9641,
											"end": 9673,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 9641,
											"end": 9673,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 9641,
											"end": 9673,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 9641,
											"end": 9673,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 9641,
											"end": 9673,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 9641,
											"end": 9673,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 9641,
											"end": 9673,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 9641,
											"end": 9673,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 9641,
											"end": 9673,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 9641,
											"end": 9673,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 9641,
											"end": 9673,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 9641,
											"end": 9673,
											"name": "LOG3",
											"source": 2
										},
										{
											"begin": 9340,
											"end": 9680,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 9340,
											"end": 9680,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 9340,
											"end": 9680,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 9340,
											"end": 9680,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 7016,
											"end": 7546,
											"name": "tag",
											"source": 2,
											"value": "68"
										},
										{
											"begin": 7016,
											"end": 7546,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 7139,
											"end": 7140,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 7121,
											"end": 7141,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7121,
											"end": 7141,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 7121,
											"end": 7127,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 7121,
											"end": 7141,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7121,
											"end": 7141,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 7121,
											"end": 7141,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 7121,
											"end": 7141,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 7113,
											"end": 7183,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "113"
										},
										{
											"begin": 7113,
											"end": 7183,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 7113,
											"end": 7183,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 7113,
											"end": 7183,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 7113,
											"end": 7183,
											"name": "PUSH",
											"source": 2,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 7113,
											"end": 7183,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7113,
											"end": 7183,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 7113,
											"end": 7183,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 7113,
											"end": 7183,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 7113,
											"end": 7183,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 7113,
											"end": 7183,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 7113,
											"end": 7183,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 7113,
											"end": 7183,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 7113,
											"end": 7183,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 7113,
											"end": 7183,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7113,
											"end": 7183,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 7113,
											"end": 7183,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 7113,
											"end": 7183,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 7113,
											"end": 7183,
											"name": "PUSH",
											"source": 2,
											"value": "25"
										},
										{
											"begin": 7113,
											"end": 7183,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7113,
											"end": 7183,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 7113,
											"end": 7183,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 7113,
											"end": 7183,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 7113,
											"end": 7183,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 7113,
											"end": 7183,
											"name": "PUSH data",
											"source": 2,
											"value": "BAECC556B46F4ED0F2B4CB599D60785AC8563DD2DC0A5BF12EDEA1C39E5E1FEA"
										},
										{
											"begin": 7113,
											"end": 7183,
											"name": "PUSH",
											"source": 2,
											"value": "25"
										},
										{
											"begin": 7113,
											"end": 7183,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 7113,
											"end": 7183,
											"name": "CODECOPY",
											"source": 2
										},
										{
											"begin": 7113,
											"end": 7183,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 7113,
											"end": 7183,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 7113,
											"end": 7183,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 7113,
											"end": 7183,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 7113,
											"end": 7183,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 7113,
											"end": 7183,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 7113,
											"end": 7183,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 7113,
											"end": 7183,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 7113,
											"end": 7183,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 7113,
											"end": 7183,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 7113,
											"end": 7183,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7113,
											"end": 7183,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 7113,
											"end": 7183,
											"name": "tag",
											"source": 2,
											"value": "113"
										},
										{
											"begin": 7113,
											"end": 7183,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 7222,
											"end": 7223,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 7201,
											"end": 7224,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7201,
											"end": 7224,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 7201,
											"end": 7210,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 7201,
											"end": 7224,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7201,
											"end": 7224,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 7201,
											"end": 7224,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 7201,
											"end": 7224,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 7193,
											"end": 7264,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "114"
										},
										{
											"begin": 7193,
											"end": 7264,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 7193,
											"end": 7264,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 7193,
											"end": 7264,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 7193,
											"end": 7264,
											"name": "PUSH",
											"source": 2,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 7193,
											"end": 7264,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7193,
											"end": 7264,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 7193,
											"end": 7264,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 7193,
											"end": 7264,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 7193,
											"end": 7264,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 7193,
											"end": 7264,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 7193,
											"end": 7264,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 7193,
											"end": 7264,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 7193,
											"end": 7264,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 7193,
											"end": 7264,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7193,
											"end": 7264,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 7193,
											"end": 7264,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 7193,
											"end": 7264,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 7193,
											"end": 7264,
											"name": "PUSH",
											"source": 2,
											"value": "23"
										},
										{
											"begin": 7193,
											"end": 7264,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7193,
											"end": 7264,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 7193,
											"end": 7264,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 7193,
											"end": 7264,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 7193,
											"end": 7264,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 7193,
											"end": 7264,
											"name": "PUSH data",
											"source": 2,
											"value": "557E210F7A69A685100A7E4E3D0A7024C546085CEE28910FD17D0B081D9516F"
										},
										{
											"begin": 7193,
											"end": 7264,
											"name": "PUSH",
											"source": 2,
											"value": "23"
										},
										{
											"begin": 7193,
											"end": 7264,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 7193,
											"end": 7264,
											"name": "CODECOPY",
											"source": 2
										},
										{
											"begin": 7193,
											"end": 7264,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 7193,
											"end": 7264,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 7193,
											"end": 7264,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 7193,
											"end": 7264,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 7193,
											"end": 7264,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 7193,
											"end": 7264,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 7193,
											"end": 7264,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 7193,
											"end": 7264,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 7193,
											"end": 7264,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 7193,
											"end": 7264,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 7193,
											"end": 7264,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7193,
											"end": 7264,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 7193,
											"end": 7264,
											"name": "tag",
											"source": 2,
											"value": "114"
										},
										{
											"begin": 7193,
											"end": 7264,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 7275,
											"end": 7322,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "115"
										},
										{
											"begin": 7296,
											"end": 7302,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 7304,
											"end": 7313,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 7315,
											"end": 7321,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 7275,
											"end": 7295,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "116"
										},
										{
											"begin": 7275,
											"end": 7322,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 7275,
											"end": 7322,
											"name": "tag",
											"source": 2,
											"value": "115"
										},
										{
											"begin": 7275,
											"end": 7322,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 7353,
											"end": 7424,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "117"
										},
										{
											"begin": 7375,
											"end": 7381,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7353,
											"end": 7424,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 7353,
											"end": 7424,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 7353,
											"end": 7424,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 7353,
											"end": 7424,
											"name": "PUSH",
											"source": 2,
											"value": "60"
										},
										{
											"begin": 7353,
											"end": 7424,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 7353,
											"end": 7424,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 7353,
											"end": 7424,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 7353,
											"end": 7424,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 7353,
											"end": 7424,
											"name": "PUSH",
											"source": 2,
											"value": "26"
										},
										{
											"begin": 7353,
											"end": 7424,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7353,
											"end": 7424,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 7353,
											"end": 7424,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 7353,
											"end": 7424,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 7353,
											"end": 7424,
											"name": "PUSH data",
											"source": 2,
											"value": "4107E8A8B9E94BF8FF83080DDEC1C0BFFE897EBC2241B89D44F66B3D274088B6"
										},
										{
											"begin": 7353,
											"end": 7424,
											"name": "PUSH",
											"source": 2,
											"value": "26"
										},
										{
											"begin": 7353,
											"end": 7424,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 7353,
											"end": 7424,
											"name": "CODECOPY",
											"source": 2
										},
										{
											"begin": 7353,
											"end": 7362,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 7353,
											"end": 7370,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 7363,
											"end": 7369,
											"name": "DUP8",
											"source": 2
										},
										{
											"begin": 7353,
											"end": 7370,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7353,
											"end": 7370,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 7353,
											"end": 7370,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7353,
											"end": 7370,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 7353,
											"end": 7370,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7353,
											"end": 7370,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 7353,
											"end": 7370,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 7353,
											"end": 7370,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 7353,
											"end": 7370,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7353,
											"end": 7370,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7353,
											"end": 7370,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 7353,
											"end": 7370,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 7353,
											"end": 7370,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 7353,
											"end": 7370,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 7353,
											"end": 7370,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 7353,
											"end": 7370,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 7353,
											"end": 7374,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "73"
										},
										{
											"begin": 7353,
											"end": 7374,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7353,
											"end": 7424,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 7353,
											"end": 7424,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 7353,
											"end": 7424,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7353,
											"end": 7424,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFF"
										},
										{
											"begin": 7353,
											"end": 7424,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 7353,
											"end": 7424,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 7353,
											"end": 7424,
											"name": "tag",
											"source": 2,
											"value": "117"
										},
										{
											"begin": 7353,
											"end": 7424,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 7333,
											"end": 7342,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 7333,
											"end": 7350,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 7343,
											"end": 7349,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 7333,
											"end": 7350,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7333,
											"end": 7350,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 7333,
											"end": 7350,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7333,
											"end": 7350,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 7333,
											"end": 7350,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7333,
											"end": 7350,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 7333,
											"end": 7350,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 7333,
											"end": 7350,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 7333,
											"end": 7350,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7333,
											"end": 7350,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7333,
											"end": 7350,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 7333,
											"end": 7350,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 7333,
											"end": 7350,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 7333,
											"end": 7350,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 7333,
											"end": 7350,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 7333,
											"end": 7424,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7333,
											"end": 7424,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7333,
											"end": 7424,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 7333,
											"end": 7424,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 7457,
											"end": 7489,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "118"
										},
										{
											"begin": 7482,
											"end": 7488,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7457,
											"end": 7466,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 7457,
											"end": 7477,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 7467,
											"end": 7476,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 7457,
											"end": 7477,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7457,
											"end": 7477,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 7457,
											"end": 7477,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7457,
											"end": 7477,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 7457,
											"end": 7477,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7457,
											"end": 7477,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 7457,
											"end": 7477,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 7457,
											"end": 7477,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 7457,
											"end": 7477,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7457,
											"end": 7477,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7457,
											"end": 7477,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 7457,
											"end": 7477,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 7457,
											"end": 7477,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 7457,
											"end": 7477,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 7457,
											"end": 7477,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 7457,
											"end": 7477,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 7457,
											"end": 7481,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "80"
										},
										{
											"begin": 7457,
											"end": 7481,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7457,
											"end": 7489,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 7457,
											"end": 7489,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7457,
											"end": 7489,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFF"
										},
										{
											"begin": 7457,
											"end": 7489,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 7457,
											"end": 7489,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 7457,
											"end": 7489,
											"name": "tag",
											"source": 2,
											"value": "118"
										},
										{
											"begin": 7457,
											"end": 7489,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 7434,
											"end": 7443,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 7434,
											"end": 7454,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 7444,
											"end": 7453,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 7434,
											"end": 7454,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7434,
											"end": 7454,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 7434,
											"end": 7454,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7434,
											"end": 7454,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 7434,
											"end": 7454,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7434,
											"end": 7454,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 7434,
											"end": 7454,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 7434,
											"end": 7454,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 7434,
											"end": 7454,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7434,
											"end": 7454,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7434,
											"end": 7454,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 7434,
											"end": 7454,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 7434,
											"end": 7454,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 7434,
											"end": 7454,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 7434,
											"end": 7454,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 7434,
											"end": 7489,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7434,
											"end": 7489,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7434,
											"end": 7489,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 7434,
											"end": 7489,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 7521,
											"end": 7530,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7504,
											"end": 7539,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7504,
											"end": 7539,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 7513,
											"end": 7519,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 7504,
											"end": 7539,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7504,
											"end": 7539,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 7504,
											"end": 7539,
											"name": "PUSH",
											"source": 2,
											"value": "DDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF"
										},
										{
											"begin": 7532,
											"end": 7538,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 7504,
											"end": 7539,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 7504,
											"end": 7539,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 7504,
											"end": 7539,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 7504,
											"end": 7539,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 7504,
											"end": 7539,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7504,
											"end": 7539,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 7504,
											"end": 7539,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 7504,
											"end": 7539,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 7504,
											"end": 7539,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 7504,
											"end": 7539,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 7504,
											"end": 7539,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 7504,
											"end": 7539,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 7504,
											"end": 7539,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 7504,
											"end": 7539,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 7504,
											"end": 7539,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 7504,
											"end": 7539,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 7504,
											"end": 7539,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7504,
											"end": 7539,
											"name": "LOG3",
											"source": 2
										},
										{
											"begin": 7016,
											"end": 7546,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 7016,
											"end": 7546,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 7016,
											"end": 7546,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 7016,
											"end": 7546,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 5424,
											"end": 5587,
											"name": "tag",
											"source": 1,
											"value": "73"
										},
										{
											"begin": 5424,
											"end": 5587,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 5510,
											"end": 5517,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 5542,
											"end": 5543,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 5537,
											"end": 5538,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 5537,
											"end": 5543,
											"name": "GT",
											"source": 1
										},
										{
											"begin": 5537,
											"end": 5543,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 5545,
											"end": 5557,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "120"
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "PUSH",
											"source": 1,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "tag",
											"source": 1,
											"value": "121"
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "LT",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "123"
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "121"
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "tag",
											"source": 1,
											"value": "123"
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "PUSH",
											"source": 1,
											"value": "1F"
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "124"
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "EXP",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "NOT",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "tag",
											"source": 1,
											"value": "124"
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "tag",
											"source": 1,
											"value": "120"
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5558,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 5579,
											"end": 5580,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 5575,
											"end": 5576,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 5575,
											"end": 5580,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 5568,
											"end": 5580,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 5568,
											"end": 5580,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 5424,
											"end": 5587,
											"name": "SWAP4",
											"source": 1
										},
										{
											"begin": 5424,
											"end": 5587,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 5424,
											"end": 5587,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 5424,
											"end": 5587,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 5424,
											"end": 5587,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 5424,
											"end": 5587,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 2682,
											"end": 2857,
											"name": "tag",
											"source": 1,
											"value": "80"
										},
										{
											"begin": 2682,
											"end": 2857,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2740,
											"end": 2747,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 2759,
											"end": 2768,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 2775,
											"end": 2776,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 2771,
											"end": 2772,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 2771,
											"end": 2776,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 2759,
											"end": 2776,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2759,
											"end": 2776,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 2799,
											"end": 2800,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 2794,
											"end": 2795,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2794,
											"end": 2800,
											"name": "LT",
											"source": 1
										},
										{
											"begin": 2794,
											"end": 2800,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "126"
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "PUSH",
											"source": 1,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "PUSH",
											"source": 1,
											"value": "1B"
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "PUSH",
											"source": 1,
											"value": "536166654D6174683A206164646974696F6E206F766572666C6F770000000000"
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "tag",
											"source": 1,
											"value": "126"
										},
										{
											"begin": 2786,
											"end": 2832,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2849,
											"end": 2850,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 2842,
											"end": 2850,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 2842,
											"end": 2850,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 2842,
											"end": 2850,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 2682,
											"end": 2857,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 2682,
											"end": 2857,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 2682,
											"end": 2857,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 2682,
											"end": 2857,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 2682,
											"end": 2857,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 1362,
											"end": 3942,
											"name": "tag",
											"source": 18,
											"value": "104"
										},
										{
											"begin": 1362,
											"end": 3942,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 1425,
											"end": 1445,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 1457,
											"end": 1472,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 1482,
											"end": 1483,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 1475,
											"end": 1479,
											"name": "DUP4",
											"source": 18
										},
										{
											"begin": 1475,
											"end": 1483,
											"name": "PUSH",
											"source": 18,
											"value": "2"
										},
										{
											"begin": 1475,
											"end": 1483,
											"name": "SIGNEXTEND",
											"source": 18
										},
										{
											"begin": 1475,
											"end": 1483,
											"name": "SLT",
											"source": 18
										},
										{
											"begin": 1475,
											"end": 1532,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "128"
										},
										{
											"begin": 1475,
											"end": 1532,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 1526,
											"end": 1530,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 1519,
											"end": 1531,
											"name": "PUSH",
											"source": 18,
											"value": "2"
										},
										{
											"begin": 1519,
											"end": 1531,
											"name": "SIGNEXTEND",
											"source": 18
										},
										{
											"begin": 1475,
											"end": 1532,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "129"
										},
										{
											"begin": 1475,
											"end": 1532,
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 1475,
											"end": 1532,
											"name": "tag",
											"source": 18,
											"value": "128"
										},
										{
											"begin": 1475,
											"end": 1532,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 1502,
											"end": 1506,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 1495,
											"end": 1507,
											"name": "PUSH",
											"source": 18,
											"value": "2"
										},
										{
											"begin": 1495,
											"end": 1507,
											"name": "SIGNEXTEND",
											"source": 18
										},
										{
											"begin": 1494,
											"end": 1507,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 1494,
											"end": 1507,
											"name": "SUB",
											"source": 18
										},
										{
											"begin": 1475,
											"end": 1532,
											"name": "tag",
											"source": 18,
											"value": "129"
										},
										{
											"begin": 1475,
											"end": 1532,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 1457,
											"end": 1532,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 1457,
											"end": 1532,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 484,
											"end": 491,
											"name": "PUSH",
											"source": 18,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF27618"
										},
										{
											"begin": 644,
											"end": 653,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 644,
											"end": 653,
											"name": "SUB",
											"source": 18
										},
										{
											"begin": 1561,
											"end": 1578,
											"name": "PUSH",
											"source": 18,
											"value": "2"
										},
										{
											"begin": 1561,
											"end": 1578,
											"name": "SIGNEXTEND",
											"source": 18
										},
										{
											"begin": 1550,
											"end": 1557,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 1550,
											"end": 1578,
											"name": "GT",
											"source": 18
										},
										{
											"begin": 1550,
											"end": 1578,
											"name": "ISZERO",
											"source": 18
										},
										{
											"begin": 1542,
											"end": 1584,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "130"
										},
										{
											"begin": 1542,
											"end": 1584,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 1542,
											"end": 1584,
											"name": "PUSH",
											"source": 18,
											"value": "40"
										},
										{
											"begin": 1542,
											"end": 1584,
											"name": "MLOAD",
											"source": 18
										},
										{
											"begin": 1542,
											"end": 1584,
											"name": "PUSH",
											"source": 18,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 1542,
											"end": 1584,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 1542,
											"end": 1584,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 1542,
											"end": 1584,
											"name": "PUSH",
											"source": 18,
											"value": "4"
										},
										{
											"begin": 1542,
											"end": 1584,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 1542,
											"end": 1584,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 1542,
											"end": 1584,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 1542,
											"end": 1584,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 1542,
											"end": 1584,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 1542,
											"end": 1584,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 1542,
											"end": 1584,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 1542,
											"end": 1584,
											"name": "SUB",
											"source": 18
										},
										{
											"begin": 1542,
											"end": 1584,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 1542,
											"end": 1584,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 1542,
											"end": 1584,
											"name": "PUSH",
											"source": 18,
											"value": "1"
										},
										{
											"begin": 1542,
											"end": 1584,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 1542,
											"end": 1584,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 1542,
											"end": 1584,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 1542,
											"end": 1584,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 1542,
											"end": 1584,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 1542,
											"end": 1584,
											"name": "PUSH",
											"source": 18,
											"value": "5400000000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 1542,
											"end": 1584,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 1542,
											"end": 1584,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 1542,
											"end": 1584,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 1542,
											"end": 1584,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 1542,
											"end": 1584,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 1542,
											"end": 1584,
											"name": "SWAP2",
											"source": 18
										},
										{
											"begin": 1542,
											"end": 1584,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 1542,
											"end": 1584,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 1542,
											"end": 1584,
											"name": "PUSH",
											"source": 18,
											"value": "40"
										},
										{
											"begin": 1542,
											"end": 1584,
											"name": "MLOAD",
											"source": 18
										},
										{
											"begin": 1542,
											"end": 1584,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 1542,
											"end": 1584,
											"name": "SWAP2",
											"source": 18
										},
										{
											"begin": 1542,
											"end": 1584,
											"name": "SUB",
											"source": 18
										},
										{
											"begin": 1542,
											"end": 1584,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 1542,
											"end": 1584,
											"name": "REVERT",
											"source": 18
										},
										{
											"begin": 1542,
											"end": 1584,
											"name": "tag",
											"source": 18,
											"value": "130"
										},
										{
											"begin": 1542,
											"end": 1584,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 1595,
											"end": 1608,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 1628,
											"end": 1629,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 1621,
											"end": 1624,
											"name": "PUSH",
											"source": 18,
											"value": "1"
										},
										{
											"begin": 1611,
											"end": 1618,
											"name": "DUP4",
											"source": 18
										},
										{
											"begin": 1611,
											"end": 1624,
											"name": "AND",
											"source": 18
										},
										{
											"begin": 1611,
											"end": 1629,
											"name": "EQ",
											"source": 18
										},
										{
											"begin": 1611,
											"end": 1629,
											"name": "ISZERO",
											"source": 18
										},
										{
											"begin": 1611,
											"end": 1704,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "131"
										},
										{
											"begin": 1611,
											"end": 1704,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 1669,
											"end": 1704,
											"name": "PUSH",
											"source": 18,
											"value": "100000000000000000000000000000000"
										},
										{
											"begin": 1611,
											"end": 1704,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "132"
										},
										{
											"begin": 1611,
											"end": 1704,
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 1611,
											"end": 1704,
											"name": "tag",
											"source": 18,
											"value": "131"
										},
										{
											"begin": 1611,
											"end": 1704,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 1632,
											"end": 1666,
											"name": "PUSH",
											"source": 18,
											"value": "FFFCB933BD6FAD37AA2D162D1A594001"
										},
										{
											"begin": 1611,
											"end": 1704,
											"name": "tag",
											"source": 18,
											"value": "132"
										},
										{
											"begin": 1611,
											"end": 1704,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 1595,
											"end": 1704,
											"name": "PUSH",
											"source": 18,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1595,
											"end": 1704,
											"name": "AND",
											"source": 18
										},
										{
											"begin": 1595,
											"end": 1704,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 1595,
											"end": 1704,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 1735,
											"end": 1736,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 1728,
											"end": 1731,
											"name": "PUSH",
											"source": 18,
											"value": "2"
										},
										{
											"begin": 1718,
											"end": 1725,
											"name": "DUP4",
											"source": 18
										},
										{
											"begin": 1718,
											"end": 1731,
											"name": "AND",
											"source": 18
										},
										{
											"begin": 1718,
											"end": 1736,
											"name": "EQ",
											"source": 18
										},
										{
											"begin": 1714,
											"end": 1797,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "133"
										},
										{
											"begin": 1714,
											"end": 1797,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 1794,
											"end": 1797,
											"name": "PUSH",
											"source": 18,
											"value": "80"
										},
										{
											"begin": 1755,
											"end": 1789,
											"name": "PUSH",
											"source": 18,
											"value": "FFF97272373D413259A46990580E213A"
										},
										{
											"begin": 1747,
											"end": 1752,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 1747,
											"end": 1789,
											"name": "MUL",
											"source": 18
										},
										{
											"begin": 1746,
											"end": 1797,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 1746,
											"end": 1797,
											"name": "SHR",
											"source": 18
										},
										{
											"begin": 1738,
											"end": 1797,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 1738,
											"end": 1797,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 1714,
											"end": 1797,
											"name": "tag",
											"source": 18,
											"value": "133"
										},
										{
											"begin": 1714,
											"end": 1797,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 1828,
											"end": 1829,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 1821,
											"end": 1824,
											"name": "PUSH",
											"source": 18,
											"value": "4"
										},
										{
											"begin": 1811,
											"end": 1818,
											"name": "DUP4",
											"source": 18
										},
										{
											"begin": 1811,
											"end": 1824,
											"name": "AND",
											"source": 18
										},
										{
											"begin": 1811,
											"end": 1829,
											"name": "EQ",
											"source": 18
										},
										{
											"begin": 1807,
											"end": 1890,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "134"
										},
										{
											"begin": 1807,
											"end": 1890,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 1887,
											"end": 1890,
											"name": "PUSH",
											"source": 18,
											"value": "80"
										},
										{
											"begin": 1848,
											"end": 1882,
											"name": "PUSH",
											"source": 18,
											"value": "FFF2E50F5F656932EF12357CF3C7FDCC"
										},
										{
											"begin": 1840,
											"end": 1845,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 1840,
											"end": 1882,
											"name": "MUL",
											"source": 18
										},
										{
											"begin": 1839,
											"end": 1890,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 1839,
											"end": 1890,
											"name": "SHR",
											"source": 18
										},
										{
											"begin": 1831,
											"end": 1890,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 1831,
											"end": 1890,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 1807,
											"end": 1890,
											"name": "tag",
											"source": 18,
											"value": "134"
										},
										{
											"begin": 1807,
											"end": 1890,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 1921,
											"end": 1922,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 1914,
											"end": 1917,
											"name": "PUSH",
											"source": 18,
											"value": "8"
										},
										{
											"begin": 1904,
											"end": 1911,
											"name": "DUP4",
											"source": 18
										},
										{
											"begin": 1904,
											"end": 1917,
											"name": "AND",
											"source": 18
										},
										{
											"begin": 1904,
											"end": 1922,
											"name": "EQ",
											"source": 18
										},
										{
											"begin": 1900,
											"end": 1983,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "135"
										},
										{
											"begin": 1900,
											"end": 1983,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 1980,
											"end": 1983,
											"name": "PUSH",
											"source": 18,
											"value": "80"
										},
										{
											"begin": 1941,
											"end": 1975,
											"name": "PUSH",
											"source": 18,
											"value": "FFE5CACA7E10E4E61C3624EAA0941CD0"
										},
										{
											"begin": 1933,
											"end": 1938,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 1933,
											"end": 1975,
											"name": "MUL",
											"source": 18
										},
										{
											"begin": 1932,
											"end": 1983,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 1932,
											"end": 1983,
											"name": "SHR",
											"source": 18
										},
										{
											"begin": 1924,
											"end": 1983,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 1924,
											"end": 1983,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 1900,
											"end": 1983,
											"name": "tag",
											"source": 18,
											"value": "135"
										},
										{
											"begin": 1900,
											"end": 1983,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 2015,
											"end": 2016,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 2007,
											"end": 2011,
											"name": "PUSH",
											"source": 18,
											"value": "10"
										},
										{
											"begin": 1997,
											"end": 2004,
											"name": "DUP4",
											"source": 18
										},
										{
											"begin": 1997,
											"end": 2011,
											"name": "AND",
											"source": 18
										},
										{
											"begin": 1997,
											"end": 2016,
											"name": "EQ",
											"source": 18
										},
										{
											"begin": 1993,
											"end": 2077,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "136"
										},
										{
											"begin": 1993,
											"end": 2077,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 2074,
											"end": 2077,
											"name": "PUSH",
											"source": 18,
											"value": "80"
										},
										{
											"begin": 2035,
											"end": 2069,
											"name": "PUSH",
											"source": 18,
											"value": "FFCB9843D60F6159C9DB58835C926644"
										},
										{
											"begin": 2027,
											"end": 2032,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 2027,
											"end": 2069,
											"name": "MUL",
											"source": 18
										},
										{
											"begin": 2026,
											"end": 2077,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 2026,
											"end": 2077,
											"name": "SHR",
											"source": 18
										},
										{
											"begin": 2018,
											"end": 2077,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 2018,
											"end": 2077,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 1993,
											"end": 2077,
											"name": "tag",
											"source": 18,
											"value": "136"
										},
										{
											"begin": 1993,
											"end": 2077,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 2109,
											"end": 2110,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 2101,
											"end": 2105,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 2091,
											"end": 2098,
											"name": "DUP4",
											"source": 18
										},
										{
											"begin": 2091,
											"end": 2105,
											"name": "AND",
											"source": 18
										},
										{
											"begin": 2091,
											"end": 2110,
											"name": "EQ",
											"source": 18
										},
										{
											"begin": 2087,
											"end": 2171,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "137"
										},
										{
											"begin": 2087,
											"end": 2171,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 2168,
											"end": 2171,
											"name": "PUSH",
											"source": 18,
											"value": "80"
										},
										{
											"begin": 2129,
											"end": 2163,
											"name": "PUSH",
											"source": 18,
											"value": "FF973B41FA98C081472E6896DFB254C0"
										},
										{
											"begin": 2121,
											"end": 2126,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 2121,
											"end": 2163,
											"name": "MUL",
											"source": 18
										},
										{
											"begin": 2120,
											"end": 2171,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 2120,
											"end": 2171,
											"name": "SHR",
											"source": 18
										},
										{
											"begin": 2112,
											"end": 2171,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 2112,
											"end": 2171,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 2087,
											"end": 2171,
											"name": "tag",
											"source": 18,
											"value": "137"
										},
										{
											"begin": 2087,
											"end": 2171,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 2203,
											"end": 2204,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 2195,
											"end": 2199,
											"name": "PUSH",
											"source": 18,
											"value": "40"
										},
										{
											"begin": 2185,
											"end": 2192,
											"name": "DUP4",
											"source": 18
										},
										{
											"begin": 2185,
											"end": 2199,
											"name": "AND",
											"source": 18
										},
										{
											"begin": 2185,
											"end": 2204,
											"name": "EQ",
											"source": 18
										},
										{
											"begin": 2181,
											"end": 2265,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "138"
										},
										{
											"begin": 2181,
											"end": 2265,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 2262,
											"end": 2265,
											"name": "PUSH",
											"source": 18,
											"value": "80"
										},
										{
											"begin": 2223,
											"end": 2257,
											"name": "PUSH",
											"source": 18,
											"value": "FF2EA16466C96A3843EC78B326B52861"
										},
										{
											"begin": 2215,
											"end": 2220,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 2215,
											"end": 2257,
											"name": "MUL",
											"source": 18
										},
										{
											"begin": 2214,
											"end": 2265,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 2214,
											"end": 2265,
											"name": "SHR",
											"source": 18
										},
										{
											"begin": 2206,
											"end": 2265,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 2206,
											"end": 2265,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 2181,
											"end": 2265,
											"name": "tag",
											"source": 18,
											"value": "138"
										},
										{
											"begin": 2181,
											"end": 2265,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 2297,
											"end": 2298,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 2289,
											"end": 2293,
											"name": "PUSH",
											"source": 18,
											"value": "80"
										},
										{
											"begin": 2279,
											"end": 2286,
											"name": "DUP4",
											"source": 18
										},
										{
											"begin": 2279,
											"end": 2293,
											"name": "AND",
											"source": 18
										},
										{
											"begin": 2279,
											"end": 2298,
											"name": "EQ",
											"source": 18
										},
										{
											"begin": 2275,
											"end": 2359,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "139"
										},
										{
											"begin": 2275,
											"end": 2359,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 2356,
											"end": 2359,
											"name": "PUSH",
											"source": 18,
											"value": "80"
										},
										{
											"begin": 2317,
											"end": 2351,
											"name": "PUSH",
											"source": 18,
											"value": "FE5DEE046A99A2A811C461F1969C3053"
										},
										{
											"begin": 2309,
											"end": 2314,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 2309,
											"end": 2351,
											"name": "MUL",
											"source": 18
										},
										{
											"begin": 2308,
											"end": 2359,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 2308,
											"end": 2359,
											"name": "SHR",
											"source": 18
										},
										{
											"begin": 2300,
											"end": 2359,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 2300,
											"end": 2359,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 2275,
											"end": 2359,
											"name": "tag",
											"source": 18,
											"value": "139"
										},
										{
											"begin": 2275,
											"end": 2359,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 2392,
											"end": 2393,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 2383,
											"end": 2388,
											"name": "PUSH",
											"source": 18,
											"value": "100"
										},
										{
											"begin": 2373,
											"end": 2380,
											"name": "DUP4",
											"source": 18
										},
										{
											"begin": 2373,
											"end": 2388,
											"name": "AND",
											"source": 18
										},
										{
											"begin": 2373,
											"end": 2393,
											"name": "EQ",
											"source": 18
										},
										{
											"begin": 2369,
											"end": 2454,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "140"
										},
										{
											"begin": 2369,
											"end": 2454,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 2451,
											"end": 2454,
											"name": "PUSH",
											"source": 18,
											"value": "80"
										},
										{
											"begin": 2412,
											"end": 2446,
											"name": "PUSH",
											"source": 18,
											"value": "FCBE86C7900A88AEDCFFC83B479AA3A4"
										},
										{
											"begin": 2404,
											"end": 2409,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 2404,
											"end": 2446,
											"name": "MUL",
											"source": 18
										},
										{
											"begin": 2403,
											"end": 2454,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 2403,
											"end": 2454,
											"name": "SHR",
											"source": 18
										},
										{
											"begin": 2395,
											"end": 2454,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 2395,
											"end": 2454,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 2369,
											"end": 2454,
											"name": "tag",
											"source": 18,
											"value": "140"
										},
										{
											"begin": 2369,
											"end": 2454,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 2487,
											"end": 2488,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 2478,
											"end": 2483,
											"name": "PUSH",
											"source": 18,
											"value": "200"
										},
										{
											"begin": 2468,
											"end": 2475,
											"name": "DUP4",
											"source": 18
										},
										{
											"begin": 2468,
											"end": 2483,
											"name": "AND",
											"source": 18
										},
										{
											"begin": 2468,
											"end": 2488,
											"name": "EQ",
											"source": 18
										},
										{
											"begin": 2464,
											"end": 2549,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "141"
										},
										{
											"begin": 2464,
											"end": 2549,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 2546,
											"end": 2549,
											"name": "PUSH",
											"source": 18,
											"value": "80"
										},
										{
											"begin": 2507,
											"end": 2541,
											"name": "PUSH",
											"source": 18,
											"value": "F987A7253AC413176F2B074CF7815E54"
										},
										{
											"begin": 2499,
											"end": 2504,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 2499,
											"end": 2541,
											"name": "MUL",
											"source": 18
										},
										{
											"begin": 2498,
											"end": 2549,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 2498,
											"end": 2549,
											"name": "SHR",
											"source": 18
										},
										{
											"begin": 2490,
											"end": 2549,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 2490,
											"end": 2549,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 2464,
											"end": 2549,
											"name": "tag",
											"source": 18,
											"value": "141"
										},
										{
											"begin": 2464,
											"end": 2549,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 2582,
											"end": 2583,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 2573,
											"end": 2578,
											"name": "PUSH",
											"source": 18,
											"value": "400"
										},
										{
											"begin": 2563,
											"end": 2570,
											"name": "DUP4",
											"source": 18
										},
										{
											"begin": 2563,
											"end": 2578,
											"name": "AND",
											"source": 18
										},
										{
											"begin": 2563,
											"end": 2583,
											"name": "EQ",
											"source": 18
										},
										{
											"begin": 2559,
											"end": 2644,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "142"
										},
										{
											"begin": 2559,
											"end": 2644,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 2641,
											"end": 2644,
											"name": "PUSH",
											"source": 18,
											"value": "80"
										},
										{
											"begin": 2602,
											"end": 2636,
											"name": "PUSH",
											"source": 18,
											"value": "F3392B0822B70005940C7A398E4B70F3"
										},
										{
											"begin": 2594,
											"end": 2599,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 2594,
											"end": 2636,
											"name": "MUL",
											"source": 18
										},
										{
											"begin": 2593,
											"end": 2644,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 2593,
											"end": 2644,
											"name": "SHR",
											"source": 18
										},
										{
											"begin": 2585,
											"end": 2644,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 2585,
											"end": 2644,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 2559,
											"end": 2644,
											"name": "tag",
											"source": 18,
											"value": "142"
										},
										{
											"begin": 2559,
											"end": 2644,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 2677,
											"end": 2678,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 2668,
											"end": 2673,
											"name": "PUSH",
											"source": 18,
											"value": "800"
										},
										{
											"begin": 2658,
											"end": 2665,
											"name": "DUP4",
											"source": 18
										},
										{
											"begin": 2658,
											"end": 2673,
											"name": "AND",
											"source": 18
										},
										{
											"begin": 2658,
											"end": 2678,
											"name": "EQ",
											"source": 18
										},
										{
											"begin": 2654,
											"end": 2739,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "143"
										},
										{
											"begin": 2654,
											"end": 2739,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 2736,
											"end": 2739,
											"name": "PUSH",
											"source": 18,
											"value": "80"
										},
										{
											"begin": 2697,
											"end": 2731,
											"name": "PUSH",
											"source": 18,
											"value": "E7159475A2C29B7443B29C7FA6E889D9"
										},
										{
											"begin": 2689,
											"end": 2694,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 2689,
											"end": 2731,
											"name": "MUL",
											"source": 18
										},
										{
											"begin": 2688,
											"end": 2739,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 2688,
											"end": 2739,
											"name": "SHR",
											"source": 18
										},
										{
											"begin": 2680,
											"end": 2739,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 2680,
											"end": 2739,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 2654,
											"end": 2739,
											"name": "tag",
											"source": 18,
											"value": "143"
										},
										{
											"begin": 2654,
											"end": 2739,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 2773,
											"end": 2774,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 2763,
											"end": 2769,
											"name": "PUSH",
											"source": 18,
											"value": "1000"
										},
										{
											"begin": 2753,
											"end": 2760,
											"name": "DUP4",
											"source": 18
										},
										{
											"begin": 2753,
											"end": 2769,
											"name": "AND",
											"source": 18
										},
										{
											"begin": 2753,
											"end": 2774,
											"name": "EQ",
											"source": 18
										},
										{
											"begin": 2749,
											"end": 2835,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "144"
										},
										{
											"begin": 2749,
											"end": 2835,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 2832,
											"end": 2835,
											"name": "PUSH",
											"source": 18,
											"value": "80"
										},
										{
											"begin": 2793,
											"end": 2827,
											"name": "PUSH",
											"source": 18,
											"value": "D097F3BDFD2022B8845AD8F792AA5825"
										},
										{
											"begin": 2785,
											"end": 2790,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 2785,
											"end": 2827,
											"name": "MUL",
											"source": 18
										},
										{
											"begin": 2784,
											"end": 2835,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 2784,
											"end": 2835,
											"name": "SHR",
											"source": 18
										},
										{
											"begin": 2776,
											"end": 2835,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 2776,
											"end": 2835,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 2749,
											"end": 2835,
											"name": "tag",
											"source": 18,
											"value": "144"
										},
										{
											"begin": 2749,
											"end": 2835,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 2869,
											"end": 2870,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 2859,
											"end": 2865,
											"name": "PUSH",
											"source": 18,
											"value": "2000"
										},
										{
											"begin": 2849,
											"end": 2856,
											"name": "DUP4",
											"source": 18
										},
										{
											"begin": 2849,
											"end": 2865,
											"name": "AND",
											"source": 18
										},
										{
											"begin": 2849,
											"end": 2870,
											"name": "EQ",
											"source": 18
										},
										{
											"begin": 2845,
											"end": 2931,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "145"
										},
										{
											"begin": 2845,
											"end": 2931,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 2928,
											"end": 2931,
											"name": "PUSH",
											"source": 18,
											"value": "80"
										},
										{
											"begin": 2889,
											"end": 2923,
											"name": "PUSH",
											"source": 18,
											"value": "A9F746462D870FDF8A65DC1F90E061E5"
										},
										{
											"begin": 2881,
											"end": 2886,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 2881,
											"end": 2923,
											"name": "MUL",
											"source": 18
										},
										{
											"begin": 2880,
											"end": 2931,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 2880,
											"end": 2931,
											"name": "SHR",
											"source": 18
										},
										{
											"begin": 2872,
											"end": 2931,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 2872,
											"end": 2931,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 2845,
											"end": 2931,
											"name": "tag",
											"source": 18,
											"value": "145"
										},
										{
											"begin": 2845,
											"end": 2931,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 2965,
											"end": 2966,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 2955,
											"end": 2961,
											"name": "PUSH",
											"source": 18,
											"value": "4000"
										},
										{
											"begin": 2945,
											"end": 2952,
											"name": "DUP4",
											"source": 18
										},
										{
											"begin": 2945,
											"end": 2961,
											"name": "AND",
											"source": 18
										},
										{
											"begin": 2945,
											"end": 2966,
											"name": "EQ",
											"source": 18
										},
										{
											"begin": 2941,
											"end": 3027,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "146"
										},
										{
											"begin": 2941,
											"end": 3027,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 3024,
											"end": 3027,
											"name": "PUSH",
											"source": 18,
											"value": "80"
										},
										{
											"begin": 2985,
											"end": 3019,
											"name": "PUSH",
											"source": 18,
											"value": "70D869A156D2A1B890BB3DF62BAF32F7"
										},
										{
											"begin": 2977,
											"end": 2982,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 2977,
											"end": 3019,
											"name": "MUL",
											"source": 18
										},
										{
											"begin": 2976,
											"end": 3027,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 2976,
											"end": 3027,
											"name": "SHR",
											"source": 18
										},
										{
											"begin": 2968,
											"end": 3027,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 2968,
											"end": 3027,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 2941,
											"end": 3027,
											"name": "tag",
											"source": 18,
											"value": "146"
										},
										{
											"begin": 2941,
											"end": 3027,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 3061,
											"end": 3062,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 3051,
											"end": 3057,
											"name": "PUSH",
											"source": 18,
											"value": "8000"
										},
										{
											"begin": 3041,
											"end": 3048,
											"name": "DUP4",
											"source": 18
										},
										{
											"begin": 3041,
											"end": 3057,
											"name": "AND",
											"source": 18
										},
										{
											"begin": 3041,
											"end": 3062,
											"name": "EQ",
											"source": 18
										},
										{
											"begin": 3037,
											"end": 3123,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "147"
										},
										{
											"begin": 3037,
											"end": 3123,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 3120,
											"end": 3123,
											"name": "PUSH",
											"source": 18,
											"value": "80"
										},
										{
											"begin": 3081,
											"end": 3115,
											"name": "PUSH",
											"source": 18,
											"value": "31BE135F97D08FD981231505542FCFA6"
										},
										{
											"begin": 3073,
											"end": 3078,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 3073,
											"end": 3115,
											"name": "MUL",
											"source": 18
										},
										{
											"begin": 3072,
											"end": 3123,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 3072,
											"end": 3123,
											"name": "SHR",
											"source": 18
										},
										{
											"begin": 3064,
											"end": 3123,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 3064,
											"end": 3123,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 3037,
											"end": 3123,
											"name": "tag",
											"source": 18,
											"value": "147"
										},
										{
											"begin": 3037,
											"end": 3123,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 3158,
											"end": 3159,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 3147,
											"end": 3154,
											"name": "PUSH",
											"source": 18,
											"value": "10000"
										},
										{
											"begin": 3137,
											"end": 3144,
											"name": "DUP4",
											"source": 18
										},
										{
											"begin": 3137,
											"end": 3154,
											"name": "AND",
											"source": 18
										},
										{
											"begin": 3137,
											"end": 3159,
											"name": "EQ",
											"source": 18
										},
										{
											"begin": 3133,
											"end": 3219,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "148"
										},
										{
											"begin": 3133,
											"end": 3219,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 3216,
											"end": 3219,
											"name": "PUSH",
											"source": 18,
											"value": "80"
										},
										{
											"begin": 3178,
											"end": 3211,
											"name": "PUSH",
											"source": 18,
											"value": "9AA508B5B7A84E1C677DE54F3E99BC9"
										},
										{
											"begin": 3170,
											"end": 3175,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 3170,
											"end": 3211,
											"name": "MUL",
											"source": 18
										},
										{
											"begin": 3169,
											"end": 3219,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 3169,
											"end": 3219,
											"name": "SHR",
											"source": 18
										},
										{
											"begin": 3161,
											"end": 3219,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 3161,
											"end": 3219,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 3133,
											"end": 3219,
											"name": "tag",
											"source": 18,
											"value": "148"
										},
										{
											"begin": 3133,
											"end": 3219,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 3254,
											"end": 3255,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 3243,
											"end": 3250,
											"name": "PUSH",
											"source": 18,
											"value": "20000"
										},
										{
											"begin": 3233,
											"end": 3240,
											"name": "DUP4",
											"source": 18
										},
										{
											"begin": 3233,
											"end": 3250,
											"name": "AND",
											"source": 18
										},
										{
											"begin": 3233,
											"end": 3255,
											"name": "EQ",
											"source": 18
										},
										{
											"begin": 3229,
											"end": 3314,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "149"
										},
										{
											"begin": 3229,
											"end": 3314,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 3311,
											"end": 3314,
											"name": "PUSH",
											"source": 18,
											"value": "80"
										},
										{
											"begin": 3274,
											"end": 3306,
											"name": "PUSH",
											"source": 18,
											"value": "5D6AF8DEDB81196699C329225EE604"
										},
										{
											"begin": 3266,
											"end": 3271,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 3266,
											"end": 3306,
											"name": "MUL",
											"source": 18
										},
										{
											"begin": 3265,
											"end": 3314,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 3265,
											"end": 3314,
											"name": "SHR",
											"source": 18
										},
										{
											"begin": 3257,
											"end": 3314,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 3257,
											"end": 3314,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 3229,
											"end": 3314,
											"name": "tag",
											"source": 18,
											"value": "149"
										},
										{
											"begin": 3229,
											"end": 3314,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 3349,
											"end": 3350,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 3338,
											"end": 3345,
											"name": "PUSH",
											"source": 18,
											"value": "40000"
										},
										{
											"begin": 3328,
											"end": 3335,
											"name": "DUP4",
											"source": 18
										},
										{
											"begin": 3328,
											"end": 3345,
											"name": "AND",
											"source": 18
										},
										{
											"begin": 3328,
											"end": 3350,
											"name": "EQ",
											"source": 18
										},
										{
											"begin": 3324,
											"end": 3407,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "150"
										},
										{
											"begin": 3324,
											"end": 3407,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 3404,
											"end": 3407,
											"name": "PUSH",
											"source": 18,
											"value": "80"
										},
										{
											"begin": 3369,
											"end": 3399,
											"name": "PUSH",
											"source": 18,
											"value": "2216E584F5FA1EA926041BEDFE98"
										},
										{
											"begin": 3361,
											"end": 3366,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 3361,
											"end": 3399,
											"name": "MUL",
											"source": 18
										},
										{
											"begin": 3360,
											"end": 3407,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 3360,
											"end": 3407,
											"name": "SHR",
											"source": 18
										},
										{
											"begin": 3352,
											"end": 3407,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 3352,
											"end": 3407,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 3324,
											"end": 3407,
											"name": "tag",
											"source": 18,
											"value": "150"
										},
										{
											"begin": 3324,
											"end": 3407,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 3442,
											"end": 3443,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 3431,
											"end": 3438,
											"name": "PUSH",
											"source": 18,
											"value": "80000"
										},
										{
											"begin": 3421,
											"end": 3428,
											"name": "DUP4",
											"source": 18
										},
										{
											"begin": 3421,
											"end": 3438,
											"name": "AND",
											"source": 18
										},
										{
											"begin": 3421,
											"end": 3443,
											"name": "EQ",
											"source": 18
										},
										{
											"begin": 3417,
											"end": 3495,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "151"
										},
										{
											"begin": 3417,
											"end": 3495,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 3492,
											"end": 3495,
											"name": "PUSH",
											"source": 18,
											"value": "80"
										},
										{
											"begin": 3462,
											"end": 3487,
											"name": "PUSH",
											"source": 18,
											"value": "48A170391F7DC42444E8FA2"
										},
										{
											"begin": 3454,
											"end": 3459,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 3454,
											"end": 3487,
											"name": "MUL",
											"source": 18
										},
										{
											"begin": 3453,
											"end": 3495,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 3453,
											"end": 3495,
											"name": "SHR",
											"source": 18
										},
										{
											"begin": 3445,
											"end": 3495,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 3445,
											"end": 3495,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 3417,
											"end": 3495,
											"name": "tag",
											"source": 18,
											"value": "151"
										},
										{
											"begin": 3417,
											"end": 3495,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 3517,
											"end": 3518,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 3510,
											"end": 3514,
											"name": "DUP5",
											"source": 18
										},
										{
											"begin": 3510,
											"end": 3518,
											"name": "PUSH",
											"source": 18,
											"value": "2"
										},
										{
											"begin": 3510,
											"end": 3518,
											"name": "SIGNEXTEND",
											"source": 18
										},
										{
											"begin": 3510,
											"end": 3518,
											"name": "SGT",
											"source": 18
										},
										{
											"begin": 3506,
											"end": 3553,
											"name": "ISZERO",
											"source": 18
										},
										{
											"begin": 3506,
											"end": 3553,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "152"
										},
										{
											"begin": 3506,
											"end": 3553,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 3548,
											"end": 3553,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 3528,
											"end": 3545,
											"name": "PUSH",
											"source": 18,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3528,
											"end": 3553,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 3528,
											"end": 3553,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "153"
										},
										{
											"begin": 3528,
											"end": 3553,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 3528,
											"end": 3553,
											"name": "INVALID",
											"source": 18
										},
										{
											"begin": 3528,
											"end": 3553,
											"name": "tag",
											"source": 18,
											"value": "153"
										},
										{
											"begin": 3528,
											"end": 3553,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 3528,
											"end": 3553,
											"name": "DIV",
											"source": 18
										},
										{
											"begin": 3520,
											"end": 3553,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 3520,
											"end": 3553,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 3506,
											"end": 3553,
											"name": "tag",
											"source": 18,
											"value": "152"
										},
										{
											"begin": 3506,
											"end": 3553,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 3924,
											"end": 3925,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 3912,
											"end": 3919,
											"name": "PUSH",
											"source": 18,
											"value": "100000000"
										},
										{
											"begin": 3903,
											"end": 3908,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 3903,
											"end": 3920,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 3903,
											"end": 3920,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "154"
										},
										{
											"begin": 3903,
											"end": 3920,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 3903,
											"end": 3920,
											"name": "INVALID",
											"source": 18
										},
										{
											"begin": 3903,
											"end": 3920,
											"name": "tag",
											"source": 18,
											"value": "154"
										},
										{
											"begin": 3903,
											"end": 3920,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 3903,
											"end": 3920,
											"name": "MOD",
											"source": 18
										},
										{
											"begin": 3903,
											"end": 3925,
											"name": "EQ",
											"source": 18
										},
										{
											"begin": 3903,
											"end": 3933,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "155"
										},
										{
											"begin": 3903,
											"end": 3933,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 3932,
											"end": 3933,
											"name": "PUSH",
											"source": 18,
											"value": "1"
										},
										{
											"begin": 3903,
											"end": 3933,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "156"
										},
										{
											"begin": 3903,
											"end": 3933,
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 3903,
											"end": 3933,
											"name": "tag",
											"source": 18,
											"value": "155"
										},
										{
											"begin": 3903,
											"end": 3933,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 3928,
											"end": 3929,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 3903,
											"end": 3933,
											"name": "tag",
											"source": 18,
											"value": "156"
										},
										{
											"begin": 3903,
											"end": 3933,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 3886,
											"end": 3934,
											"name": "PUSH",
											"source": 18,
											"value": "FF"
										},
										{
											"begin": 3886,
											"end": 3934,
											"name": "AND",
											"source": 18
										},
										{
											"begin": 3896,
											"end": 3898,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 3887,
											"end": 3892,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 3887,
											"end": 3898,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 3887,
											"end": 3898,
											"name": "SHR",
											"source": 18
										},
										{
											"begin": 3886,
											"end": 3934,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 3863,
											"end": 3935,
											"name": "SWAP3",
											"source": 18
										},
										{
											"begin": 3863,
											"end": 3935,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 1362,
											"end": 3942,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 1362,
											"end": 3942,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 1362,
											"end": 3942,
											"name": "SWAP2",
											"source": 18
										},
										{
											"begin": 1362,
											"end": 3942,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 1362,
											"end": 3942,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 1362,
											"end": 3942,
											"name": "JUMP",
											"source": 18,
											"value": "[out]"
										},
										{
											"begin": 4241,
											"end": 4739,
											"name": "tag",
											"source": 16,
											"value": "107"
										},
										{
											"begin": 4241,
											"end": 4739,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 4391,
											"end": 4406,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 4438,
											"end": 4451,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 4422,
											"end": 4451,
											"name": "PUSH",
											"source": 16,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4422,
											"end": 4451,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 4422,
											"end": 4435,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 4422,
											"end": 4451,
											"name": "PUSH",
											"source": 16,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4422,
											"end": 4451,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 4422,
											"end": 4451,
											"name": "GT",
											"source": 16
										},
										{
											"begin": 4418,
											"end": 4516,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 4418,
											"end": 4516,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "158"
										},
										{
											"begin": 4418,
											"end": 4516,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 4487,
											"end": 4500,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 4502,
											"end": 4515,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 4453,
											"end": 4516,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 4453,
											"end": 4516,
											"name": "SWAP5",
											"source": 16
										},
										{
											"begin": 4453,
											"end": 4516,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 4453,
											"end": 4516,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 4453,
											"end": 4516,
											"name": "SWAP6",
											"source": 16
										},
										{
											"begin": 4453,
											"end": 4516,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 4453,
											"end": 4516,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 4453,
											"end": 4516,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 4418,
											"end": 4516,
											"name": "tag",
											"source": 16,
											"value": "158"
										},
										{
											"begin": 4418,
											"end": 4516,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 4719,
											"end": 4732,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 4546,
											"end": 4732,
											"name": "PUSH",
											"source": 16,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4546,
											"end": 4732,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 4546,
											"end": 4716,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "159"
										},
										{
											"begin": 309,
											"end": 311,
											"name": "PUSH",
											"source": 8,
											"value": "60"
										},
										{
											"begin": 4579,
											"end": 4624,
											"name": "PUSH",
											"source": 16,
											"value": "FF"
										},
										{
											"begin": 4579,
											"end": 4624,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 4587,
											"end": 4596,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 4579,
											"end": 4597,
											"name": "PUSH",
											"source": 16,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4579,
											"end": 4597,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 4579,
											"end": 4624,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 4579,
											"end": 4624,
											"name": "SHL",
											"source": 16
										},
										{
											"begin": 4658,
											"end": 4671,
											"name": "DUP7",
											"source": 16
										},
										{
											"begin": 4642,
											"end": 4655,
											"name": "DUP7",
											"source": 16
										},
										{
											"begin": 4642,
											"end": 4671,
											"name": "SUB",
											"source": 16
										},
										{
											"begin": 4546,
											"end": 4716,
											"name": "PUSH",
											"source": 16,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4546,
											"end": 4716,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 4689,
											"end": 4702,
											"name": "DUP7",
											"source": 16
										},
										{
											"begin": 4546,
											"end": 4716,
											"name": "PUSH",
											"source": 16,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4546,
											"end": 4716,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 4546,
											"end": 4561,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "160"
										},
										{
											"begin": 4546,
											"end": 4716,
											"name": "JUMP",
											"source": 16,
											"value": "[in]"
										},
										{
											"begin": 4546,
											"end": 4716,
											"name": "tag",
											"source": 16,
											"value": "159"
										},
										{
											"begin": 4546,
											"end": 4716,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 4546,
											"end": 4732,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 4546,
											"end": 4732,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "161"
										},
										{
											"begin": 4546,
											"end": 4732,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 4546,
											"end": 4732,
											"name": "INVALID",
											"source": 16
										},
										{
											"begin": 4546,
											"end": 4732,
											"name": "tag",
											"source": 16,
											"value": "161"
										},
										{
											"begin": 4546,
											"end": 4732,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 4546,
											"end": 4732,
											"name": "DIV",
											"source": 16
										},
										{
											"begin": 4527,
											"end": 4732,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 4527,
											"end": 4732,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 4241,
											"end": 4739,
											"name": "SWAP4",
											"source": 16
										},
										{
											"begin": 4241,
											"end": 4739,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 4241,
											"end": 4739,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 4241,
											"end": 4739,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 4241,
											"end": 4739,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 4241,
											"end": 4739,
											"name": "JUMP",
											"source": 16,
											"value": "[out]"
										},
										{
											"begin": 10686,
											"end": 10778,
											"name": "tag",
											"source": 2,
											"value": "116"
										},
										{
											"begin": 10686,
											"end": 10778,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 10686,
											"end": 10778,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 10686,
											"end": 10778,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 10686,
											"end": 10778,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 10686,
											"end": 10778,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 742,
											"end": 4518,
											"name": "tag",
											"source": 9,
											"value": "160"
										},
										{
											"begin": 742,
											"end": 4518,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 854,
											"end": 868,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 1183,
											"end": 1196,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 1251,
											"end": 1264,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 1368,
											"end": 1369,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 1364,
											"end": 1370,
											"name": "NOT",
											"source": 9
										},
										{
											"begin": 1361,
											"end": 1362,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 1358,
											"end": 1359,
											"name": "DUP8",
											"source": 9
										},
										{
											"begin": 1351,
											"end": 1371,
											"name": "MULMOD",
											"source": 9
										},
										{
											"begin": 1400,
											"end": 1401,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 1397,
											"end": 1398,
											"name": "DUP8",
											"source": 9
										},
										{
											"begin": 1393,
											"end": 1402,
											"name": "MUL",
											"source": 9
										},
										{
											"begin": 1384,
											"end": 1402,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 1384,
											"end": 1402,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1451,
											"end": 1456,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 1447,
											"end": 1449,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 1444,
											"end": 1457,
											"name": "LT",
											"source": 9
										},
										{
											"begin": 1436,
											"end": 1441,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 1432,
											"end": 1434,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 1428,
											"end": 1442,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 1424,
											"end": 1458,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 1415,
											"end": 1458,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 1415,
											"end": 1458,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1327,
											"end": 1468,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1549,
											"end": 1550,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 1540,
											"end": 1545,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 1540,
											"end": 1550,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 1536,
											"end": 1715,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 1536,
											"end": 1715,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "164"
										},
										{
											"begin": 1536,
											"end": 1715,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 1588,
											"end": 1589,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 1574,
											"end": 1585,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 1574,
											"end": 1589,
											"name": "GT",
											"source": 9
										},
										{
											"begin": 1566,
											"end": 1590,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "165"
										},
										{
											"begin": 1566,
											"end": 1590,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 1566,
											"end": 1590,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 1566,
											"end": 1590,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 1566,
											"end": 1590,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 1566,
											"end": 1590,
											"name": "tag",
											"source": 9,
											"value": "165"
										},
										{
											"begin": 1566,
											"end": 1590,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1652,
											"end": 1663,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 1645,
											"end": 1650,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 1641,
											"end": 1664,
											"name": "DIV",
											"source": 9
										},
										{
											"begin": 1631,
											"end": 1664,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 1631,
											"end": 1664,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1691,
											"end": 1704,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1691,
											"end": 1704,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1691,
											"end": 1704,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "163"
										},
										{
											"begin": 1691,
											"end": 1704,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 1536,
											"end": 1715,
											"name": "tag",
											"source": 9,
											"value": "164"
										},
										{
											"begin": 1536,
											"end": 1715,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1842,
											"end": 1847,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 1828,
											"end": 1839,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 1828,
											"end": 1847,
											"name": "GT",
											"source": 9
										},
										{
											"begin": 1820,
											"end": 1848,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "166"
										},
										{
											"begin": 1820,
											"end": 1848,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 1820,
											"end": 1848,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 1820,
											"end": 1848,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 1820,
											"end": 1848,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 1820,
											"end": 1848,
											"name": "tag",
											"source": 9,
											"value": "166"
										},
										{
											"begin": 1820,
											"end": 1848,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2125,
											"end": 2142,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2201,
											"end": 2212,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 2198,
											"end": 2199,
											"name": "DUP7",
											"source": 9
										},
										{
											"begin": 2195,
											"end": 2196,
											"name": "DUP9",
											"source": 9
										},
										{
											"begin": 2188,
											"end": 2213,
											"name": "MULMOD",
											"source": 9
										},
										{
											"begin": 2175,
											"end": 2213,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2175,
											"end": 2213,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2344,
											"end": 2349,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 2333,
											"end": 2342,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 2330,
											"end": 2350,
											"name": "GT",
											"source": 9
										},
										{
											"begin": 2323,
											"end": 2328,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 2319,
											"end": 2351,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 2310,
											"end": 2351,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 2310,
											"end": 2351,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2384,
											"end": 2393,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 2377,
											"end": 2382,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 2373,
											"end": 2394,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 2364,
											"end": 2394,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 2364,
											"end": 2394,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2553,
											"end": 2565,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2583,
											"end": 2594,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 2569,
											"end": 2580,
											"name": "DUP7",
											"source": 9
										},
										{
											"begin": 2568,
											"end": 2580,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2568,
											"end": 2580,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 2568,
											"end": 2594,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 2553,
											"end": 2594,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2553,
											"end": 2594,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2705,
											"end": 2709,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 2692,
											"end": 2703,
											"name": "DUP7",
											"source": 9
										},
										{
											"begin": 2688,
											"end": 2710,
											"name": "DIV",
											"source": 9
										},
										{
											"begin": 2673,
											"end": 2710,
											"name": "SWAP6",
											"source": 9
										},
										{
											"begin": 2673,
											"end": 2710,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2827,
											"end": 2831,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 2820,
											"end": 2825,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 2816,
											"end": 2832,
											"name": "DIV",
											"source": 9
										},
										{
											"begin": 2807,
											"end": 2832,
											"name": "SWAP4",
											"source": 9
										},
										{
											"begin": 2807,
											"end": 2832,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3081,
											"end": 3082,
											"name": "PUSH",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 3074,
											"end": 3078,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3067,
											"end": 3071,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 3064,
											"end": 3065,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 3060,
											"end": 3072,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 3056,
											"end": 3079,
											"name": "DIV",
											"source": 9
										},
										{
											"begin": 3052,
											"end": 3083,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3044,
											"end": 3083,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3044,
											"end": 3083,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3119,
											"end": 3123,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 3111,
											"end": 3116,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 3111,
											"end": 3123,
											"name": "MUL",
											"source": 9
										},
										{
											"begin": 3102,
											"end": 3123,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 3102,
											"end": 3123,
											"name": "OR",
											"source": 9
										},
										{
											"begin": 3102,
											"end": 3123,
											"name": "SWAP4",
											"source": 9
										},
										{
											"begin": 3102,
											"end": 3123,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3457,
											"end": 3468,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 3491,
											"end": 3492,
											"name": "PUSH",
											"source": 9,
											"value": "2"
										},
										{
											"begin": 3476,
											"end": 3487,
											"name": "DUP8",
											"source": 9
										},
										{
											"begin": 3472,
											"end": 3473,
											"name": "PUSH",
											"source": 9,
											"value": "3"
										},
										{
											"begin": 3472,
											"end": 3487,
											"name": "MUL",
											"source": 9
										},
										{
											"begin": 3471,
											"end": 3492,
											"name": "XOR",
											"source": 9
										},
										{
											"begin": 3457,
											"end": 3492,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3457,
											"end": 3492,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3732,
											"end": 3735,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 3718,
											"end": 3729,
											"name": "DUP8",
											"source": 9
										},
										{
											"begin": 3718,
											"end": 3735,
											"name": "MUL",
											"source": 9
										},
										{
											"begin": 3714,
											"end": 3715,
											"name": "PUSH",
											"source": 9,
											"value": "2"
										},
										{
											"begin": 3714,
											"end": 3735,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 3707,
											"end": 3735,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3707,
											"end": 3735,
											"name": "MUL",
											"source": 9
										},
										{
											"begin": 3707,
											"end": 3735,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3707,
											"end": 3735,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3790,
											"end": 3793,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 3776,
											"end": 3787,
											"name": "DUP8",
											"source": 9
										},
										{
											"begin": 3776,
											"end": 3793,
											"name": "MUL",
											"source": 9
										},
										{
											"begin": 3772,
											"end": 3773,
											"name": "PUSH",
											"source": 9,
											"value": "2"
										},
										{
											"begin": 3772,
											"end": 3793,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 3765,
											"end": 3793,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3765,
											"end": 3793,
											"name": "MUL",
											"source": 9
										},
										{
											"begin": 3765,
											"end": 3793,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3765,
											"end": 3793,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3849,
											"end": 3852,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 3835,
											"end": 3846,
											"name": "DUP8",
											"source": 9
										},
										{
											"begin": 3835,
											"end": 3852,
											"name": "MUL",
											"source": 9
										},
										{
											"begin": 3831,
											"end": 3832,
											"name": "PUSH",
											"source": 9,
											"value": "2"
										},
										{
											"begin": 3831,
											"end": 3852,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 3824,
											"end": 3852,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3824,
											"end": 3852,
											"name": "MUL",
											"source": 9
										},
										{
											"begin": 3824,
											"end": 3852,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3824,
											"end": 3852,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3908,
											"end": 3911,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 3894,
											"end": 3905,
											"name": "DUP8",
											"source": 9
										},
										{
											"begin": 3894,
											"end": 3911,
											"name": "MUL",
											"source": 9
										},
										{
											"begin": 3890,
											"end": 3891,
											"name": "PUSH",
											"source": 9,
											"value": "2"
										},
										{
											"begin": 3890,
											"end": 3911,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 3883,
											"end": 3911,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3883,
											"end": 3911,
											"name": "MUL",
											"source": 9
										},
										{
											"begin": 3883,
											"end": 3911,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3883,
											"end": 3911,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3967,
											"end": 3970,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 3953,
											"end": 3964,
											"name": "DUP8",
											"source": 9
										},
										{
											"begin": 3953,
											"end": 3970,
											"name": "MUL",
											"source": 9
										},
										{
											"begin": 3949,
											"end": 3950,
											"name": "PUSH",
											"source": 9,
											"value": "2"
										},
										{
											"begin": 3949,
											"end": 3970,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 3942,
											"end": 3970,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3942,
											"end": 3970,
											"name": "MUL",
											"source": 9
										},
										{
											"begin": 3942,
											"end": 3970,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3942,
											"end": 3970,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 4027,
											"end": 4030,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 4013,
											"end": 4024,
											"name": "DUP8",
											"source": 9
										},
										{
											"begin": 4013,
											"end": 4030,
											"name": "MUL",
											"source": 9
										},
										{
											"begin": 4009,
											"end": 4010,
											"name": "PUSH",
											"source": 9,
											"value": "2"
										},
										{
											"begin": 4009,
											"end": 4030,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 4002,
											"end": 4030,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 4002,
											"end": 4030,
											"name": "MUL",
											"source": 9
										},
										{
											"begin": 4002,
											"end": 4030,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 4002,
											"end": 4030,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 4485,
											"end": 4488,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 4477,
											"end": 4482,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 4477,
											"end": 4488,
											"name": "MUL",
											"source": 9
										},
										{
											"begin": 4468,
											"end": 4488,
											"name": "SWAP6",
											"source": 9
										},
										{
											"begin": 4468,
											"end": 4488,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 4498,
											"end": 4511,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 4498,
											"end": 4511,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 4498,
											"end": 4511,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 4498,
											"end": 4511,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 4498,
											"end": 4511,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 742,
											"end": 4518,
											"name": "tag",
											"source": 9,
											"value": "163"
										},
										{
											"begin": 742,
											"end": 4518,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 742,
											"end": 4518,
											"name": "SWAP4",
											"source": 9
										},
										{
											"begin": 742,
											"end": 4518,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 742,
											"end": 4518,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 742,
											"end": 4518,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 742,
											"end": 4518,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 742,
											"end": 4518,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										}
									],
									".data": {
										"24883CC5FE64ACE9D0DF1893501ECB93C77180F0FF69CCA79AFFB3C316DC8029": "45524332303a20617070726f766520746f20746865207a65726f2061646472657373",
										"4107E8A8B9E94BF8FF83080DDEC1C0BFFE897EBC2241B89D44F66B3D274088B6": "45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e6365",
										"557E210F7A69A685100A7E4E3D0A7024C546085CEE28910FD17D0B081D9516F": "45524332303a207472616e7366657220746f20746865207a65726f2061646472657373",
										"974D1B4421DA69CC60B481194F0DAD36A5BB4E23DA810DA7A7FB30CDBA178330": "45524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e6365",
										"BAECC556B46F4ED0F2B4CB599D60785AC8563DD2DC0A5BF12EDEA1C39E5E1FEA": "45524332303a207472616e736665722066726f6d20746865207a65726f2061646472657373",
										"C953F4879035ED60E766B34720F656AAB5C697B141D924C283124ECEDB91C208": "45524332303a20617070726f76652066726f6d20746865207a65726f2061646472657373",
										"F8B476F7D28209D77D4A4AC1FE36B9F8259AA1BB6BDDFA6E89DE7E51615CF8A8": "45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726f"
									}
								}
							}
						},
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"decimals()": "313ce567",
							"decreaseAllowance(address,uint256)": "a457c2d7",
							"increaseAllowance(address,uint256)": "39509351",
							"name()": "06fdde03",
							"stakeLP(uint256)": "e5da2cb2",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"contract INonfungiblePositionManager\",\"name\":\"_nftPositionManager\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"stakeLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is called. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CoinSwitch.sol\":\"StakeLPNFT\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/introspection/IERC165.sol\":{\"keccak256\":\"0xd2f30fad5b24c4120f96dbac83aacdb7993ee610a9092bc23c44463da292bf8d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e3d4e72409e392c7694b6405a0136cf073d8da016df33ef8f9ad195f724ebfea\",\"dweb:/ipfs/QmPGcddKq6CgsiKnxUUif2q76wRqP3dmdQ6bKuHCLmb8Wa\"]},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"keccak256\":\"0xe22a1fc7400ae196eba2ad1562d0386462b00a6363b742d55a2fd2021a58586f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4a635cec58fb4141a16cfd408f1a21ac944c335a3beaba541c35d2e95c04536f\",\"dweb:/ipfs/QmXWcz73UenN1ji8jiWMbzxHjjfLbNQwLVKTEB5zNFE34K\"]},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"keccak256\":\"0x36b5ca4eabe888b39b10973621ca0dcc9b1508f8d06db9ddf045d7aa7c867d4a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ccbd79e8d556aa7011babb0e5d1e55a966add74853e7ba0274ff184bd96ef002\",\"dweb:/ipfs/QmV28ozNRUFDiDUMvCwcFmLTQPG6nfvgeKr4cmbHWoegtH\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xbd74f587ab9b9711801baf667db1426e4a03fd2d7f15af33e0e0d0394e7cef76\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2d0913dfbfce90d170df0d496ad7596c0778518e5fa7aba6c32562522546f66b\",\"dweb:/ipfs/QmR6B8nLj2PJf5e1JWD9Nk7ErkAwkqUwadCnvE82FJr1RU\"]},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0xb11597841d47f7a773bca63ca323c76f804cb5d944788de0327db5526319dc82\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://930d2da1934886a1098753be4173dd89c45ca0b306a1930accd37e00b1af4aaf\",\"dweb:/ipfs/QmVSXnvEV41d43k8cfpANHoTYMKgBDBL8iCbxkLfEtQZBe\"]},\"@openzeppelin/contracts/token/ERC721/IERC721Enumerable.sol\":{\"keccak256\":\"0x2789dfea2d73182683d637db5729201f6730dae6113030a94c828f8688f38f2f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://36374eaa68c0737bf7e1ae13d55327b4868fb0825e971ee729f4b8d355ededb4\",\"dweb:/ipfs/QmYN9yuzz4P5SumiT6rgYgTEY8MhnPQapMwx2LHxRKju7r\"]},\"@openzeppelin/contracts/token/ERC721/IERC721Metadata.sol\":{\"keccak256\":\"0xc82c7d1d732081d9bd23f1555ebdf8f3bc1738bc42c2bfc4b9aa7564d9fa3573\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5cb07e4ff3352161510a0d1536fe93f3c62526358e073a8bab2a8abbb27d0da1\",\"dweb:/ipfs/QmX7K1JjnWKT1JzZT92Qx5zNJQYbssE533TLFHP88hj2fb\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ded47ec7c96750f9bd04bbbc84f659992d4ba901cb7b532a52cd468272cf378f\",\"dweb:/ipfs/QmfBrGtQP7rZEqEg6Wz6jh2N2Kukpj1z5v3CGWmAqrzm96\"]},\"@uniswap/v3-core/contracts/libraries/FixedPoint96.sol\":{\"keccak256\":\"0x0ba8a9b95a956a4050749c0158e928398c447c91469682ca8a7cc7e77a7fe032\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://186d3b528866065a5856f96d2aeec698efa99f8da913e9adf34f8cc296cc993d\",\"dweb:/ipfs/QmUAiMvtAQp8c9dy57bqJYzG7hkb1uChiPaQmt264skoqP\"]},\"@uniswap/v3-core/contracts/libraries/FullMath.sol\":{\"keccak256\":\"0xe511530871deaef86692cea9adb6076d26d7b47fd4815ce51af52af981026057\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bc5a6ae776be3e7dcbd23d49ffbc9d792fed0ddf4b111ebb64b9bb2133ec263e\",\"dweb:/ipfs/QmbAUtWqvipzEARQpFpkzYKBELy3qeW5WXnZxHFU84sxG7\"]},\"contracts/CoinSwitch.sol\":{\"keccak256\":\"0x84ec74eb54824ff37b0be3ad75689c52620117afdd0fbc6cc81a93a9e733c528\",\"license\":\"UNLICENSED\",\"urls\":[\"bzz-raw://d0900c7f51c3c8a28dcc639012b6a1da500aae995c3899fedc447aca78aff937\",\"dweb:/ipfs/QmcP4QJm3RxqrJJmVFcCC1BMwJAGqgtoiLcfRGmbWXSfKE\"]},\"contracts/interfaces/IERC721Permit.sol\":{\"keccak256\":\"0x9e3c2a4ee65ddf95b2dfcb0815784eea3a295707e6f8b83e4c4f0f8fe2e3a1d4\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://bfd939085b3618101b955f87c7fabf38338ba1aad480295acb8102ebc5d72471\",\"dweb:/ipfs/QmauQD8bGDHTztmTDfaKXjzM7Wacrq2XU7VcTbwn1WrDBL\"]},\"contracts/interfaces/INonfungiblePositionManager.sol\":{\"keccak256\":\"0xe1dadc73e60bf05d0b4e0f05bd2847c5783e833cc10352c14763360b13495ee1\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://6e3b10f75c101de044c1253672207399c1513fd1f0f17be31069c18c0b9a1460\",\"dweb:/ipfs/QmXrkXNY6njQfepE7KbRtJMruGXfrZwsMMsW7m5e3XS9Hf\"]},\"contracts/interfaces/IPeripheryImmutableState.sol\":{\"keccak256\":\"0x7affcfeb5127c0925a71d6a65345e117c33537523aeca7bc98085ead8452519d\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://e16b291294210e71cb0f20cd0afe62ae2dc6878d627f5ccc19c4dc9cd80aec3f\",\"dweb:/ipfs/QmQGitSyBr26nour81BZmpmDMyJpvZRqHQZvnCD1Acb127\"]},\"contracts/interfaces/IPeripheryPayments.sol\":{\"keccak256\":\"0xb547e10f1e69bed03621a62b73a503e260643066c6b4054867a4d1fef47eb274\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://f9a90f58f5fd5fb42f7811f4094113b532f307b14a73764c91f977590747f407\",\"dweb:/ipfs/QmSeNH2mfiDMKf3Q6V2sqtNxx1s72JNuA1VVxRM9HoMqYp\"]},\"contracts/interfaces/IPoolInitializer.sol\":{\"keccak256\":\"0x9d7695e8d94c22cc5fcced602017aabb988de89981ea7bee29ea629d5328a862\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://61b50933026ee1017db2a6273af8cedc3238c95dca58880db0918dbdbb2f064f\",\"dweb:/ipfs/QmUebR26pqG25d18aBELKz8aFFKkmHa8PxntzXTA7o9Ldu\"]},\"contracts/libraries/LiquidityAmounts.sol\":{\"keccak256\":\"0xf149581d28e1c81736dfe72be73ee1301d4945340cc6282fcdd63fe3c85abf24\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://0b67f375180bb62fe6753601cd09740496dcdcec4c0a4f9eaa6e94c5e1bb6844\",\"dweb:/ipfs/QmWYwkmqynRq7g81Nijg4eEkPgSRGnegDrbbEKkkTC1k2w\"]},\"contracts/libraries/PoolAddress.sol\":{\"keccak256\":\"0xae892829db91974e6883747cb50c88fb55ed2c4a4e67f5da6155d99232ffc10c\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://e75be667776276ba265d7cbc60ea1ddd233019e583c7f0c44fd0ba5200c6cf31\",\"dweb:/ipfs/QmWMvG8jNZhqXzLqDMgcdpTRBwf6TrF5X323ePQh1Y45PX\"]},\"contracts/libraries/TickMath.sol\":{\"keccak256\":\"0xda8c2c0b12d2976acfd364453ba5f5bf0117ba3c91175ee9e1067d3fb26944d9\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://3f3d2d7c2723c91830c74d96292f28fc1cfe28d388cdb9c1a5ebadb4c2b96f81\",\"dweb:/ipfs/QmYU4wk8MEm33wVWR38LoncvR7b8PP1mLuGBKX3dUpYJVE\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 383,
								"contract": "contracts/CoinSwitch.sol:StakeLPNFT",
								"label": "_balances",
								"offset": 0,
								"slot": "0",
								"type": "t_mapping(t_address,t_uint256)"
							},
							{
								"astId": 389,
								"contract": "contracts/CoinSwitch.sol:StakeLPNFT",
								"label": "_allowances",
								"offset": 0,
								"slot": "1",
								"type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
							},
							{
								"astId": 391,
								"contract": "contracts/CoinSwitch.sol:StakeLPNFT",
								"label": "_totalSupply",
								"offset": 0,
								"slot": "2",
								"type": "t_uint256"
							},
							{
								"astId": 393,
								"contract": "contracts/CoinSwitch.sol:StakeLPNFT",
								"label": "_name",
								"offset": 0,
								"slot": "3",
								"type": "t_string_storage"
							},
							{
								"astId": 395,
								"contract": "contracts/CoinSwitch.sol:StakeLPNFT",
								"label": "_symbol",
								"offset": 0,
								"slot": "4",
								"type": "t_string_storage"
							},
							{
								"astId": 397,
								"contract": "contracts/CoinSwitch.sol:StakeLPNFT",
								"label": "_decimals",
								"offset": 0,
								"slot": "5",
								"type": "t_uint8"
							},
							{
								"astId": 1338,
								"contract": "contracts/CoinSwitch.sol:StakeLPNFT",
								"label": "admin",
								"offset": 1,
								"slot": "5",
								"type": "t_address"
							},
							{
								"astId": 1340,
								"contract": "contracts/CoinSwitch.sol:StakeLPNFT",
								"label": "nftPositionManager",
								"offset": 0,
								"slot": "6",
								"type": "t_contract(INonfungiblePositionManager)1665"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_contract(INonfungiblePositionManager)1665": {
								"encoding": "inplace",
								"label": "contract INonfungiblePositionManager",
								"numberOfBytes": "20"
							},
							"t_mapping(t_address,t_mapping(t_address,t_uint256))": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => mapping(address => uint256))",
								"numberOfBytes": "32",
								"value": "t_mapping(t_address,t_uint256)"
							},
							"t_mapping(t_address,t_uint256)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_string_storage": {
								"encoding": "bytes",
								"label": "string",
								"numberOfBytes": "32"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							},
							"t_uint8": {
								"encoding": "inplace",
								"label": "uint8",
								"numberOfBytes": "1"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/interfaces/IERC721Permit.sol": {
				"IERC721Permit": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "approved",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "ApprovalForAll",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "DOMAIN_SEPARATOR",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "PERMIT_TYPEHASH",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "pure",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "getApproved",
							"outputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "isApprovedForAll",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ownerOf",
							"outputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "deadline",
									"type": "uint256"
								},
								{
									"internalType": "uint8",
									"name": "v",
									"type": "uint8"
								},
								{
									"internalType": "bytes32",
									"name": "r",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "s",
									"type": "bytes32"
								}
							],
							"name": "permit",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "_approved",
									"type": "bool"
								}
							],
							"name": "setApprovalForAll",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"DOMAIN_SEPARATOR()": {
								"returns": {
									"_0": "The domain seperator used in encoding of permit signature"
								}
							},
							"PERMIT_TYPEHASH()": {
								"returns": {
									"_0": "The typehash for the permit"
								}
							},
							"approve(address,uint256)": {
								"details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the number of tokens in ``owner``'s account."
							},
							"getApproved(uint256)": {
								"details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"isApprovedForAll(address,address)": {
								"details": "Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"
							},
							"ownerOf(uint256)": {
								"details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"permit(address,uint256,uint256,uint8,bytes32,bytes32)": {
								"params": {
									"deadline": "The deadline timestamp by which the call must be mined for the approve to work",
									"r": "Must produce valid secp256k1 signature from the holder along with `v` and `s`",
									"s": "Must produce valid secp256k1 signature from the holder along with `r` and `v`",
									"spender": "The account that is being approved",
									"tokenId": "The ID of the token that is being approved for spending",
									"v": "Must produce valid secp256k1 signature from the holder along with `r` and `s`"
								}
							},
							"safeTransferFrom(address,address,uint256)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
							},
							"safeTransferFrom(address,address,uint256,bytes)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
							},
							"setApprovalForAll(address,bool)": {
								"details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."
							},
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Transfers `tokenId` token from `from` to `to`. WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."
							}
						},
						"title": "ERC721 with permit",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"DOMAIN_SEPARATOR()": "3644e515",
							"PERMIT_TYPEHASH()": "30adf81f",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"getApproved(uint256)": "081812fc",
							"isApprovedForAll(address,address)": "e985e9c5",
							"ownerOf(uint256)": "6352211e",
							"permit(address,uint256,uint256,uint8,bytes32,bytes32)": "7ac2ff7b",
							"safeTransferFrom(address,address,uint256)": "42842e0e",
							"safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
							"setApprovalForAll(address,bool)": "a22cb465",
							"supportsInterface(bytes4)": "01ffc9a7",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"returns\":{\"_0\":\"The domain seperator used in encoding of permit signature\"}},\"PERMIT_TYPEHASH()\":{\"returns\":{\"_0\":\"The typehash for the permit\"}},\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"permit(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"params\":{\"deadline\":\"The deadline timestamp by which the call must be mined for the approve to work\",\"r\":\"Must produce valid secp256k1 signature from the holder along with `v` and `s`\",\"s\":\"Must produce valid secp256k1 signature from the holder along with `r` and `v`\",\"spender\":\"The account that is being approved\",\"tokenId\":\"The ID of the token that is being approved for spending\",\"v\":\"Must produce valid secp256k1 signature from the holder along with `r` and `s`\"}},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"title\":\"ERC721 with permit\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"notice\":\"The domain separator used in the permit signature\"},\"PERMIT_TYPEHASH()\":{\"notice\":\"The permit typehash used in the permit signature\"},\"permit(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Approve of a specific token ID for spending by spender via signature\"}},\"notice\":\"Extension to ERC721 that includes a permit function for signature based approvals\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/IERC721Permit.sol\":\"IERC721Permit\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/introspection/IERC165.sol\":{\"keccak256\":\"0xd2f30fad5b24c4120f96dbac83aacdb7993ee610a9092bc23c44463da292bf8d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e3d4e72409e392c7694b6405a0136cf073d8da016df33ef8f9ad195f724ebfea\",\"dweb:/ipfs/QmPGcddKq6CgsiKnxUUif2q76wRqP3dmdQ6bKuHCLmb8Wa\"]},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0xb11597841d47f7a773bca63ca323c76f804cb5d944788de0327db5526319dc82\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://930d2da1934886a1098753be4173dd89c45ca0b306a1930accd37e00b1af4aaf\",\"dweb:/ipfs/QmVSXnvEV41d43k8cfpANHoTYMKgBDBL8iCbxkLfEtQZBe\"]},\"contracts/interfaces/IERC721Permit.sol\":{\"keccak256\":\"0x9e3c2a4ee65ddf95b2dfcb0815784eea3a295707e6f8b83e4c4f0f8fe2e3a1d4\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://bfd939085b3618101b955f87c7fabf38338ba1aad480295acb8102ebc5d72471\",\"dweb:/ipfs/QmauQD8bGDHTztmTDfaKXjzM7Wacrq2XU7VcTbwn1WrDBL\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"DOMAIN_SEPARATOR()": {
								"notice": "The domain separator used in the permit signature"
							},
							"PERMIT_TYPEHASH()": {
								"notice": "The permit typehash used in the permit signature"
							},
							"permit(address,uint256,uint256,uint8,bytes32,bytes32)": {
								"notice": "Approve of a specific token ID for spending by spender via signature"
							}
						},
						"notice": "Extension to ERC721 that includes a permit function for signature based approvals",
						"version": 1
					}
				}
			},
			"contracts/interfaces/INonfungiblePositionManager.sol": {
				"INonfungiblePositionManager": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "approved",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "ApprovalForAll",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"name": "Collect",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "liquidity",
									"type": "uint128"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"name": "DecreaseLiquidity",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "liquidity",
									"type": "uint128"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"name": "IncreaseLiquidity",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "DOMAIN_SEPARATOR",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "PERMIT_TYPEHASH",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "pure",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "WETH9",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "burn",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "uint256",
											"name": "tokenId",
											"type": "uint256"
										},
										{
											"internalType": "address",
											"name": "recipient",
											"type": "address"
										},
										{
											"internalType": "uint128",
											"name": "amount0Max",
											"type": "uint128"
										},
										{
											"internalType": "uint128",
											"name": "amount1Max",
											"type": "uint128"
										}
									],
									"internalType": "struct INonfungiblePositionManager.CollectParams",
									"name": "params",
									"type": "tuple"
								}
							],
							"name": "collect",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token0",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "token1",
									"type": "address"
								},
								{
									"internalType": "uint24",
									"name": "fee",
									"type": "uint24"
								},
								{
									"internalType": "uint160",
									"name": "sqrtPriceX96",
									"type": "uint160"
								}
							],
							"name": "createAndInitializePoolIfNecessary",
							"outputs": [
								{
									"internalType": "address",
									"name": "pool",
									"type": "address"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "uint256",
											"name": "tokenId",
											"type": "uint256"
										},
										{
											"internalType": "uint128",
											"name": "liquidity",
											"type": "uint128"
										},
										{
											"internalType": "uint256",
											"name": "amount0Min",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "amount1Min",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "deadline",
											"type": "uint256"
										}
									],
									"internalType": "struct INonfungiblePositionManager.DecreaseLiquidityParams",
									"name": "params",
									"type": "tuple"
								}
							],
							"name": "decreaseLiquidity",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "factory",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "getApproved",
							"outputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "uint256",
											"name": "tokenId",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "amount0Desired",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "amount1Desired",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "amount0Min",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "amount1Min",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "deadline",
											"type": "uint256"
										}
									],
									"internalType": "struct INonfungiblePositionManager.IncreaseLiquidityParams",
									"name": "params",
									"type": "tuple"
								}
							],
							"name": "increaseLiquidity",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "liquidity",
									"type": "uint128"
								},
								{
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "isApprovedForAll",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "address",
											"name": "token0",
											"type": "address"
										},
										{
											"internalType": "address",
											"name": "token1",
											"type": "address"
										},
										{
											"internalType": "uint24",
											"name": "fee",
											"type": "uint24"
										},
										{
											"internalType": "int24",
											"name": "tickLower",
											"type": "int24"
										},
										{
											"internalType": "int24",
											"name": "tickUpper",
											"type": "int24"
										},
										{
											"internalType": "uint256",
											"name": "amount0Desired",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "amount1Desired",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "amount0Min",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "amount1Min",
											"type": "uint256"
										},
										{
											"internalType": "address",
											"name": "recipient",
											"type": "address"
										},
										{
											"internalType": "uint256",
											"name": "deadline",
											"type": "uint256"
										}
									],
									"internalType": "struct INonfungiblePositionManager.MintParams",
									"name": "params",
									"type": "tuple"
								}
							],
							"name": "mint",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "uint128",
									"name": "liquidity",
									"type": "uint128"
								},
								{
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ownerOf",
							"outputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "deadline",
									"type": "uint256"
								},
								{
									"internalType": "uint8",
									"name": "v",
									"type": "uint8"
								},
								{
									"internalType": "bytes32",
									"name": "r",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "s",
									"type": "bytes32"
								}
							],
							"name": "permit",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "positions",
							"outputs": [
								{
									"internalType": "uint96",
									"name": "nonce",
									"type": "uint96"
								},
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "token0",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "token1",
									"type": "address"
								},
								{
									"internalType": "uint24",
									"name": "fee",
									"type": "uint24"
								},
								{
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"internalType": "uint128",
									"name": "liquidity",
									"type": "uint128"
								},
								{
									"internalType": "uint256",
									"name": "feeGrowthInside0LastX128",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "feeGrowthInside1LastX128",
									"type": "uint256"
								},
								{
									"internalType": "uint128",
									"name": "tokensOwed0",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "tokensOwed1",
									"type": "uint128"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "refundETH",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "_approved",
									"type": "bool"
								}
							],
							"name": "setApprovalForAll",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amountMinimum",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								}
							],
							"name": "sweepToken",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "index",
									"type": "uint256"
								}
							],
							"name": "tokenByIndex",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "index",
									"type": "uint256"
								}
							],
							"name": "tokenOfOwnerByIndex",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "tokenURI",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "amountMinimum",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								}
							],
							"name": "unwrapWETH9",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						}
					],
					"devdoc": {
						"events": {
							"Collect(uint256,address,uint256,uint256)": {
								"details": "The amounts reported may not be exactly equivalent to the amounts transferred, due to rounding behavior",
								"params": {
									"amount0": "The amount of token0 owed to the position that was collected",
									"amount1": "The amount of token1 owed to the position that was collected",
									"recipient": "The address of the account that received the collected tokens",
									"tokenId": "The ID of the token for which underlying tokens were collected"
								}
							},
							"DecreaseLiquidity(uint256,uint128,uint256,uint256)": {
								"params": {
									"amount0": "The amount of token0 that was accounted for the decrease in liquidity",
									"amount1": "The amount of token1 that was accounted for the decrease in liquidity",
									"liquidity": "The amount by which liquidity for the NFT position was decreased",
									"tokenId": "The ID of the token for which liquidity was decreased"
								}
							},
							"IncreaseLiquidity(uint256,uint128,uint256,uint256)": {
								"details": "Also emitted when a token is minted",
								"params": {
									"amount0": "The amount of token0 that was paid for the increase in liquidity",
									"amount1": "The amount of token1 that was paid for the increase in liquidity",
									"liquidity": "The amount by which liquidity for the NFT position was increased",
									"tokenId": "The ID of the token for which liquidity was increased"
								}
							}
						},
						"kind": "dev",
						"methods": {
							"DOMAIN_SEPARATOR()": {
								"returns": {
									"_0": "The domain seperator used in encoding of permit signature"
								}
							},
							"PERMIT_TYPEHASH()": {
								"returns": {
									"_0": "The typehash for the permit"
								}
							},
							"WETH9()": {
								"returns": {
									"_0": "Returns the address of WETH9"
								}
							},
							"approve(address,uint256)": {
								"details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the number of tokens in ``owner``'s account."
							},
							"burn(uint256)": {
								"params": {
									"tokenId": "The ID of the token that is being burned"
								}
							},
							"collect((uint256,address,uint128,uint128))": {
								"params": {
									"params": "tokenId The ID of the NFT for which tokens are being collected, recipient The account that should receive the tokens, amount0Max The maximum amount of token0 to collect, amount1Max The maximum amount of token1 to collect"
								},
								"returns": {
									"amount0": "The amount of fees collected in token0",
									"amount1": "The amount of fees collected in token1"
								}
							},
							"createAndInitializePoolIfNecessary(address,address,uint24,uint160)": {
								"details": "This method can be bundled with others via IMulticall for the first action (e.g. mint) performed against a pool",
								"params": {
									"fee": "The fee amount of the v3 pool for the specified token pair",
									"sqrtPriceX96": "The initial square root price of the pool as a Q64.96 value",
									"token0": "The contract address of token0 of the pool",
									"token1": "The contract address of token1 of the pool"
								},
								"returns": {
									"pool": "Returns the pool address based on the pair of tokens and fee, will return the newly created pool address if necessary"
								}
							},
							"decreaseLiquidity((uint256,uint128,uint256,uint256,uint256))": {
								"params": {
									"params": "tokenId The ID of the token for which liquidity is being decreased, amount The amount by which liquidity will be decreased, amount0Min The minimum amount of token0 that should be accounted for the burned liquidity, amount1Min The minimum amount of token1 that should be accounted for the burned liquidity, deadline The time by which the transaction must be included to effect the change"
								},
								"returns": {
									"amount0": "The amount of token0 accounted to the position's tokens owed",
									"amount1": "The amount of token1 accounted to the position's tokens owed"
								}
							},
							"factory()": {
								"returns": {
									"_0": "Returns the address of the Uniswap V3 factory"
								}
							},
							"getApproved(uint256)": {
								"details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"increaseLiquidity((uint256,uint256,uint256,uint256,uint256,uint256))": {
								"params": {
									"params": "tokenId The ID of the token for which liquidity is being increased, amount0Desired The desired amount of token0 to be spent, amount1Desired The desired amount of token1 to be spent, amount0Min The minimum amount of token0 to spend, which serves as a slippage check, amount1Min The minimum amount of token1 to spend, which serves as a slippage check, deadline The time by which the transaction must be included to effect the change"
								},
								"returns": {
									"amount0": "The amount of token0 to acheive resulting liquidity",
									"amount1": "The amount of token1 to acheive resulting liquidity",
									"liquidity": "The new liquidity amount as a result of the increase"
								}
							},
							"isApprovedForAll(address,address)": {
								"details": "Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"
							},
							"mint((address,address,uint24,int24,int24,uint256,uint256,uint256,uint256,address,uint256))": {
								"details": "Call this when the pool does exist and is initialized. Note that if the pool is created but not initialized a method does not exist, i.e. the pool is assumed to be initialized.",
								"params": {
									"params": "The params necessary to mint a position, encoded as `MintParams` in calldata"
								},
								"returns": {
									"amount0": "The amount of token0",
									"amount1": "The amount of token1",
									"liquidity": "The amount of liquidity for this position",
									"tokenId": "The ID of the token that represents the minted position"
								}
							},
							"name()": {
								"details": "Returns the token collection name."
							},
							"ownerOf(uint256)": {
								"details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"permit(address,uint256,uint256,uint8,bytes32,bytes32)": {
								"params": {
									"deadline": "The deadline timestamp by which the call must be mined for the approve to work",
									"r": "Must produce valid secp256k1 signature from the holder along with `v` and `s`",
									"s": "Must produce valid secp256k1 signature from the holder along with `r` and `v`",
									"spender": "The account that is being approved",
									"tokenId": "The ID of the token that is being approved for spending",
									"v": "Must produce valid secp256k1 signature from the holder along with `r` and `s`"
								}
							},
							"positions(uint256)": {
								"details": "Throws if the token ID is not valid.",
								"params": {
									"tokenId": "The ID of the token that represents the position"
								},
								"returns": {
									"fee": "The fee associated with the pool",
									"feeGrowthInside0LastX128": "The fee growth of token0 as of the last action on the individual position",
									"feeGrowthInside1LastX128": "The fee growth of token1 as of the last action on the individual position",
									"liquidity": "The liquidity of the position",
									"nonce": "The nonce for permits",
									"operator": "The address that is approved for spending",
									"tickLower": "The lower end of the tick range for the position",
									"tickUpper": "The higher end of the tick range for the position",
									"token0": "The address of the token0 for a specific pool",
									"token1": "The address of the token1 for a specific pool",
									"tokensOwed0": "The uncollected amount of token0 owed to the position as of the last computation",
									"tokensOwed1": "The uncollected amount of token1 owed to the position as of the last computation"
								}
							},
							"refundETH()": {
								"details": "Useful for bundling with mint or increase liquidity that uses ether, or exact output swaps that use ether for the input amount"
							},
							"safeTransferFrom(address,address,uint256)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
							},
							"safeTransferFrom(address,address,uint256,bytes)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
							},
							"setApprovalForAll(address,bool)": {
								"details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."
							},
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							},
							"sweepToken(address,uint256,address)": {
								"details": "The amountMinimum parameter prevents malicious contracts from stealing the token from users",
								"params": {
									"amountMinimum": "The minimum amount of token required for a transfer",
									"recipient": "The destination address of the token",
									"token": "The contract address of the token which will be transferred to `recipient`"
								}
							},
							"symbol()": {
								"details": "Returns the token collection symbol."
							},
							"tokenByIndex(uint256)": {
								"details": "Returns a token ID at a given `index` of all the tokens stored by the contract. Use along with {totalSupply} to enumerate all tokens."
							},
							"tokenOfOwnerByIndex(address,uint256)": {
								"details": "Returns a token ID owned by `owner` at a given `index` of its token list. Use along with {balanceOf} to enumerate all of ``owner``'s tokens."
							},
							"tokenURI(uint256)": {
								"details": "Returns the Uniform Resource Identifier (URI) for `tokenId` token."
							},
							"totalSupply()": {
								"details": "Returns the total amount of tokens stored by the contract."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Transfers `tokenId` token from `from` to `to`. WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."
							},
							"unwrapWETH9(uint256,address)": {
								"details": "The amountMinimum parameter prevents malicious contracts from stealing WETH9 from users.",
								"params": {
									"amountMinimum": "The minimum amount of WETH9 to unwrap",
									"recipient": "The address receiving ETH"
								}
							}
						},
						"title": "Non-fungible token for positions",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"DOMAIN_SEPARATOR()": "3644e515",
							"PERMIT_TYPEHASH()": "30adf81f",
							"WETH9()": "4aa4a4fc",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"burn(uint256)": "42966c68",
							"collect((uint256,address,uint128,uint128))": "fc6f7865",
							"createAndInitializePoolIfNecessary(address,address,uint24,uint160)": "13ead562",
							"decreaseLiquidity((uint256,uint128,uint256,uint256,uint256))": "0c49ccbe",
							"factory()": "c45a0155",
							"getApproved(uint256)": "081812fc",
							"increaseLiquidity((uint256,uint256,uint256,uint256,uint256,uint256))": "219f5d17",
							"isApprovedForAll(address,address)": "e985e9c5",
							"mint((address,address,uint24,int24,int24,uint256,uint256,uint256,uint256,address,uint256))": "88316456",
							"name()": "06fdde03",
							"ownerOf(uint256)": "6352211e",
							"permit(address,uint256,uint256,uint8,bytes32,bytes32)": "7ac2ff7b",
							"positions(uint256)": "99fbab88",
							"refundETH()": "12210e8a",
							"safeTransferFrom(address,address,uint256)": "42842e0e",
							"safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
							"setApprovalForAll(address,bool)": "a22cb465",
							"supportsInterface(bytes4)": "01ffc9a7",
							"sweepToken(address,uint256,address)": "df2ab5bb",
							"symbol()": "95d89b41",
							"tokenByIndex(uint256)": "4f6ccce7",
							"tokenOfOwnerByIndex(address,uint256)": "2f745c59",
							"tokenURI(uint256)": "c87b56dd",
							"totalSupply()": "18160ddd",
							"transferFrom(address,address,uint256)": "23b872dd",
							"unwrapWETH9(uint256,address)": "49404b7c"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"Collect\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"DecreaseLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"IncreaseLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH9\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"amount0Max\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1Max\",\"type\":\"uint128\"}],\"internalType\":\"struct INonfungiblePositionManager.CollectParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"collect\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"}],\"name\":\"createAndInitializePoolIfNecessary\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"amount0Min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1Min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct INonfungiblePositionManager.DecreaseLiquidityParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"decreaseLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount0Desired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1Desired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount0Min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1Min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct INonfungiblePositionManager.IncreaseLiquidityParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"increaseLiquidity\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint256\",\"name\":\"amount0Desired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1Desired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount0Min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1Min\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct INonfungiblePositionManager.MintParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"positions\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"nonce\",\"type\":\"uint96\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthInside0LastX128\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthInside1LastX128\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"tokensOwed0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"tokensOwed1\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refundETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountMinimum\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"sweepToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountMinimum\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"unwrapWETH9\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Collect(uint256,address,uint256,uint256)\":{\"details\":\"The amounts reported may not be exactly equivalent to the amounts transferred, due to rounding behavior\",\"params\":{\"amount0\":\"The amount of token0 owed to the position that was collected\",\"amount1\":\"The amount of token1 owed to the position that was collected\",\"recipient\":\"The address of the account that received the collected tokens\",\"tokenId\":\"The ID of the token for which underlying tokens were collected\"}},\"DecreaseLiquidity(uint256,uint128,uint256,uint256)\":{\"params\":{\"amount0\":\"The amount of token0 that was accounted for the decrease in liquidity\",\"amount1\":\"The amount of token1 that was accounted for the decrease in liquidity\",\"liquidity\":\"The amount by which liquidity for the NFT position was decreased\",\"tokenId\":\"The ID of the token for which liquidity was decreased\"}},\"IncreaseLiquidity(uint256,uint128,uint256,uint256)\":{\"details\":\"Also emitted when a token is minted\",\"params\":{\"amount0\":\"The amount of token0 that was paid for the increase in liquidity\",\"amount1\":\"The amount of token1 that was paid for the increase in liquidity\",\"liquidity\":\"The amount by which liquidity for the NFT position was increased\",\"tokenId\":\"The ID of the token for which liquidity was increased\"}}},\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"returns\":{\"_0\":\"The domain seperator used in encoding of permit signature\"}},\"PERMIT_TYPEHASH()\":{\"returns\":{\"_0\":\"The typehash for the permit\"}},\"WETH9()\":{\"returns\":{\"_0\":\"Returns the address of WETH9\"}},\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"burn(uint256)\":{\"params\":{\"tokenId\":\"The ID of the token that is being burned\"}},\"collect((uint256,address,uint128,uint128))\":{\"params\":{\"params\":\"tokenId The ID of the NFT for which tokens are being collected, recipient The account that should receive the tokens, amount0Max The maximum amount of token0 to collect, amount1Max The maximum amount of token1 to collect\"},\"returns\":{\"amount0\":\"The amount of fees collected in token0\",\"amount1\":\"The amount of fees collected in token1\"}},\"createAndInitializePoolIfNecessary(address,address,uint24,uint160)\":{\"details\":\"This method can be bundled with others via IMulticall for the first action (e.g. mint) performed against a pool\",\"params\":{\"fee\":\"The fee amount of the v3 pool for the specified token pair\",\"sqrtPriceX96\":\"The initial square root price of the pool as a Q64.96 value\",\"token0\":\"The contract address of token0 of the pool\",\"token1\":\"The contract address of token1 of the pool\"},\"returns\":{\"pool\":\"Returns the pool address based on the pair of tokens and fee, will return the newly created pool address if necessary\"}},\"decreaseLiquidity((uint256,uint128,uint256,uint256,uint256))\":{\"params\":{\"params\":\"tokenId The ID of the token for which liquidity is being decreased, amount The amount by which liquidity will be decreased, amount0Min The minimum amount of token0 that should be accounted for the burned liquidity, amount1Min The minimum amount of token1 that should be accounted for the burned liquidity, deadline The time by which the transaction must be included to effect the change\"},\"returns\":{\"amount0\":\"The amount of token0 accounted to the position's tokens owed\",\"amount1\":\"The amount of token1 accounted to the position's tokens owed\"}},\"factory()\":{\"returns\":{\"_0\":\"Returns the address of the Uniswap V3 factory\"}},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"increaseLiquidity((uint256,uint256,uint256,uint256,uint256,uint256))\":{\"params\":{\"params\":\"tokenId The ID of the token for which liquidity is being increased, amount0Desired The desired amount of token0 to be spent, amount1Desired The desired amount of token1 to be spent, amount0Min The minimum amount of token0 to spend, which serves as a slippage check, amount1Min The minimum amount of token1 to spend, which serves as a slippage check, deadline The time by which the transaction must be included to effect the change\"},\"returns\":{\"amount0\":\"The amount of token0 to acheive resulting liquidity\",\"amount1\":\"The amount of token1 to acheive resulting liquidity\",\"liquidity\":\"The new liquidity amount as a result of the increase\"}},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"mint((address,address,uint24,int24,int24,uint256,uint256,uint256,uint256,address,uint256))\":{\"details\":\"Call this when the pool does exist and is initialized. Note that if the pool is created but not initialized a method does not exist, i.e. the pool is assumed to be initialized.\",\"params\":{\"params\":\"The params necessary to mint a position, encoded as `MintParams` in calldata\"},\"returns\":{\"amount0\":\"The amount of token0\",\"amount1\":\"The amount of token1\",\"liquidity\":\"The amount of liquidity for this position\",\"tokenId\":\"The ID of the token that represents the minted position\"}},\"name()\":{\"details\":\"Returns the token collection name.\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"permit(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"params\":{\"deadline\":\"The deadline timestamp by which the call must be mined for the approve to work\",\"r\":\"Must produce valid secp256k1 signature from the holder along with `v` and `s`\",\"s\":\"Must produce valid secp256k1 signature from the holder along with `r` and `v`\",\"spender\":\"The account that is being approved\",\"tokenId\":\"The ID of the token that is being approved for spending\",\"v\":\"Must produce valid secp256k1 signature from the holder along with `r` and `s`\"}},\"positions(uint256)\":{\"details\":\"Throws if the token ID is not valid.\",\"params\":{\"tokenId\":\"The ID of the token that represents the position\"},\"returns\":{\"fee\":\"The fee associated with the pool\",\"feeGrowthInside0LastX128\":\"The fee growth of token0 as of the last action on the individual position\",\"feeGrowthInside1LastX128\":\"The fee growth of token1 as of the last action on the individual position\",\"liquidity\":\"The liquidity of the position\",\"nonce\":\"The nonce for permits\",\"operator\":\"The address that is approved for spending\",\"tickLower\":\"The lower end of the tick range for the position\",\"tickUpper\":\"The higher end of the tick range for the position\",\"token0\":\"The address of the token0 for a specific pool\",\"token1\":\"The address of the token1 for a specific pool\",\"tokensOwed0\":\"The uncollected amount of token0 owed to the position as of the last computation\",\"tokensOwed1\":\"The uncollected amount of token1 owed to the position as of the last computation\"}},\"refundETH()\":{\"details\":\"Useful for bundling with mint or increase liquidity that uses ether, or exact output swaps that use ether for the input amount\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"sweepToken(address,uint256,address)\":{\"details\":\"The amountMinimum parameter prevents malicious contracts from stealing the token from users\",\"params\":{\"amountMinimum\":\"The minimum amount of token required for a transfer\",\"recipient\":\"The destination address of the token\",\"token\":\"The contract address of the token which will be transferred to `recipient`\"}},\"symbol()\":{\"details\":\"Returns the token collection symbol.\"},\"tokenByIndex(uint256)\":{\"details\":\"Returns a token ID at a given `index` of all the tokens stored by the contract. Use along with {totalSupply} to enumerate all tokens.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"Returns a token ID owned by `owner` at a given `index` of its token list. Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\"},\"tokenURI(uint256)\":{\"details\":\"Returns the Uniform Resource Identifier (URI) for `tokenId` token.\"},\"totalSupply()\":{\"details\":\"Returns the total amount of tokens stored by the contract.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"},\"unwrapWETH9(uint256,address)\":{\"details\":\"The amountMinimum parameter prevents malicious contracts from stealing WETH9 from users.\",\"params\":{\"amountMinimum\":\"The minimum amount of WETH9 to unwrap\",\"recipient\":\"The address receiving ETH\"}}},\"title\":\"Non-fungible token for positions\",\"version\":1},\"userdoc\":{\"events\":{\"Collect(uint256,address,uint256,uint256)\":{\"notice\":\"Emitted when tokens are collected for a position NFT\"},\"DecreaseLiquidity(uint256,uint128,uint256,uint256)\":{\"notice\":\"Emitted when liquidity is decreased for a position NFT\"},\"IncreaseLiquidity(uint256,uint128,uint256,uint256)\":{\"notice\":\"Emitted when liquidity is increased for a position NFT\"}},\"kind\":\"user\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"notice\":\"The domain separator used in the permit signature\"},\"PERMIT_TYPEHASH()\":{\"notice\":\"The permit typehash used in the permit signature\"},\"burn(uint256)\":{\"notice\":\"Burns a token ID, which deletes it from the NFT contract. The token must have 0 liquidity and all tokens must be collected first.\"},\"collect((uint256,address,uint128,uint128))\":{\"notice\":\"Collects up to a maximum amount of fees owed to a specific position to the recipient\"},\"createAndInitializePoolIfNecessary(address,address,uint24,uint160)\":{\"notice\":\"Creates a new pool if it does not exist, then initializes if not initialized\"},\"decreaseLiquidity((uint256,uint128,uint256,uint256,uint256))\":{\"notice\":\"Decreases the amount of liquidity in a position and accounts it to the position\"},\"increaseLiquidity((uint256,uint256,uint256,uint256,uint256,uint256))\":{\"notice\":\"Increases the amount of liquidity in a position, with tokens paid by the `msg.sender`\"},\"mint((address,address,uint24,int24,int24,uint256,uint256,uint256,uint256,address,uint256))\":{\"notice\":\"Creates a new position wrapped in a NFT\"},\"permit(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Approve of a specific token ID for spending by spender via signature\"},\"positions(uint256)\":{\"notice\":\"Returns the position information associated with a given token ID.\"},\"refundETH()\":{\"notice\":\"Refunds any ETH balance held by this contract to the `msg.sender`\"},\"sweepToken(address,uint256,address)\":{\"notice\":\"Transfers the full amount of a token held by this contract to recipient\"},\"unwrapWETH9(uint256,address)\":{\"notice\":\"Unwraps the contract's WETH9 balance and sends it to recipient as ETH.\"}},\"notice\":\"Wraps Uniswap V3 positions in a non-fungible token interface which allows for them to be transferred and authorized.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/INonfungiblePositionManager.sol\":\"INonfungiblePositionManager\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/introspection/IERC165.sol\":{\"keccak256\":\"0xd2f30fad5b24c4120f96dbac83aacdb7993ee610a9092bc23c44463da292bf8d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e3d4e72409e392c7694b6405a0136cf073d8da016df33ef8f9ad195f724ebfea\",\"dweb:/ipfs/QmPGcddKq6CgsiKnxUUif2q76wRqP3dmdQ6bKuHCLmb8Wa\"]},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0xb11597841d47f7a773bca63ca323c76f804cb5d944788de0327db5526319dc82\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://930d2da1934886a1098753be4173dd89c45ca0b306a1930accd37e00b1af4aaf\",\"dweb:/ipfs/QmVSXnvEV41d43k8cfpANHoTYMKgBDBL8iCbxkLfEtQZBe\"]},\"@openzeppelin/contracts/token/ERC721/IERC721Enumerable.sol\":{\"keccak256\":\"0x2789dfea2d73182683d637db5729201f6730dae6113030a94c828f8688f38f2f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://36374eaa68c0737bf7e1ae13d55327b4868fb0825e971ee729f4b8d355ededb4\",\"dweb:/ipfs/QmYN9yuzz4P5SumiT6rgYgTEY8MhnPQapMwx2LHxRKju7r\"]},\"@openzeppelin/contracts/token/ERC721/IERC721Metadata.sol\":{\"keccak256\":\"0xc82c7d1d732081d9bd23f1555ebdf8f3bc1738bc42c2bfc4b9aa7564d9fa3573\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5cb07e4ff3352161510a0d1536fe93f3c62526358e073a8bab2a8abbb27d0da1\",\"dweb:/ipfs/QmX7K1JjnWKT1JzZT92Qx5zNJQYbssE533TLFHP88hj2fb\"]},\"contracts/interfaces/IERC721Permit.sol\":{\"keccak256\":\"0x9e3c2a4ee65ddf95b2dfcb0815784eea3a295707e6f8b83e4c4f0f8fe2e3a1d4\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://bfd939085b3618101b955f87c7fabf38338ba1aad480295acb8102ebc5d72471\",\"dweb:/ipfs/QmauQD8bGDHTztmTDfaKXjzM7Wacrq2XU7VcTbwn1WrDBL\"]},\"contracts/interfaces/INonfungiblePositionManager.sol\":{\"keccak256\":\"0xe1dadc73e60bf05d0b4e0f05bd2847c5783e833cc10352c14763360b13495ee1\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://6e3b10f75c101de044c1253672207399c1513fd1f0f17be31069c18c0b9a1460\",\"dweb:/ipfs/QmXrkXNY6njQfepE7KbRtJMruGXfrZwsMMsW7m5e3XS9Hf\"]},\"contracts/interfaces/IPeripheryImmutableState.sol\":{\"keccak256\":\"0x7affcfeb5127c0925a71d6a65345e117c33537523aeca7bc98085ead8452519d\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://e16b291294210e71cb0f20cd0afe62ae2dc6878d627f5ccc19c4dc9cd80aec3f\",\"dweb:/ipfs/QmQGitSyBr26nour81BZmpmDMyJpvZRqHQZvnCD1Acb127\"]},\"contracts/interfaces/IPeripheryPayments.sol\":{\"keccak256\":\"0xb547e10f1e69bed03621a62b73a503e260643066c6b4054867a4d1fef47eb274\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://f9a90f58f5fd5fb42f7811f4094113b532f307b14a73764c91f977590747f407\",\"dweb:/ipfs/QmSeNH2mfiDMKf3Q6V2sqtNxx1s72JNuA1VVxRM9HoMqYp\"]},\"contracts/interfaces/IPoolInitializer.sol\":{\"keccak256\":\"0x9d7695e8d94c22cc5fcced602017aabb988de89981ea7bee29ea629d5328a862\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://61b50933026ee1017db2a6273af8cedc3238c95dca58880db0918dbdbb2f064f\",\"dweb:/ipfs/QmUebR26pqG25d18aBELKz8aFFKkmHa8PxntzXTA7o9Ldu\"]},\"contracts/libraries/PoolAddress.sol\":{\"keccak256\":\"0xae892829db91974e6883747cb50c88fb55ed2c4a4e67f5da6155d99232ffc10c\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://e75be667776276ba265d7cbc60ea1ddd233019e583c7f0c44fd0ba5200c6cf31\",\"dweb:/ipfs/QmWMvG8jNZhqXzLqDMgcdpTRBwf6TrF5X323ePQh1Y45PX\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"events": {
							"Collect(uint256,address,uint256,uint256)": {
								"notice": "Emitted when tokens are collected for a position NFT"
							},
							"DecreaseLiquidity(uint256,uint128,uint256,uint256)": {
								"notice": "Emitted when liquidity is decreased for a position NFT"
							},
							"IncreaseLiquidity(uint256,uint128,uint256,uint256)": {
								"notice": "Emitted when liquidity is increased for a position NFT"
							}
						},
						"kind": "user",
						"methods": {
							"DOMAIN_SEPARATOR()": {
								"notice": "The domain separator used in the permit signature"
							},
							"PERMIT_TYPEHASH()": {
								"notice": "The permit typehash used in the permit signature"
							},
							"burn(uint256)": {
								"notice": "Burns a token ID, which deletes it from the NFT contract. The token must have 0 liquidity and all tokens must be collected first."
							},
							"collect((uint256,address,uint128,uint128))": {
								"notice": "Collects up to a maximum amount of fees owed to a specific position to the recipient"
							},
							"createAndInitializePoolIfNecessary(address,address,uint24,uint160)": {
								"notice": "Creates a new pool if it does not exist, then initializes if not initialized"
							},
							"decreaseLiquidity((uint256,uint128,uint256,uint256,uint256))": {
								"notice": "Decreases the amount of liquidity in a position and accounts it to the position"
							},
							"increaseLiquidity((uint256,uint256,uint256,uint256,uint256,uint256))": {
								"notice": "Increases the amount of liquidity in a position, with tokens paid by the `msg.sender`"
							},
							"mint((address,address,uint24,int24,int24,uint256,uint256,uint256,uint256,address,uint256))": {
								"notice": "Creates a new position wrapped in a NFT"
							},
							"permit(address,uint256,uint256,uint8,bytes32,bytes32)": {
								"notice": "Approve of a specific token ID for spending by spender via signature"
							},
							"positions(uint256)": {
								"notice": "Returns the position information associated with a given token ID."
							},
							"refundETH()": {
								"notice": "Refunds any ETH balance held by this contract to the `msg.sender`"
							},
							"sweepToken(address,uint256,address)": {
								"notice": "Transfers the full amount of a token held by this contract to recipient"
							},
							"unwrapWETH9(uint256,address)": {
								"notice": "Unwraps the contract's WETH9 balance and sends it to recipient as ETH."
							}
						},
						"notice": "Wraps Uniswap V3 positions in a non-fungible token interface which allows for them to be transferred and authorized.",
						"version": 1
					}
				}
			},
			"contracts/interfaces/IPeripheryImmutableState.sol": {
				"IPeripheryImmutableState": {
					"abi": [
						{
							"inputs": [],
							"name": "WETH9",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "factory",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"WETH9()": {
								"returns": {
									"_0": "Returns the address of WETH9"
								}
							},
							"factory()": {
								"returns": {
									"_0": "Returns the address of the Uniswap V3 factory"
								}
							}
						},
						"title": "Immutable state",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"WETH9()": "4aa4a4fc",
							"factory()": "c45a0155"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"WETH9\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"WETH9()\":{\"returns\":{\"_0\":\"Returns the address of WETH9\"}},\"factory()\":{\"returns\":{\"_0\":\"Returns the address of the Uniswap V3 factory\"}}},\"title\":\"Immutable state\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Functions that return immutable state of the router\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/IPeripheryImmutableState.sol\":\"IPeripheryImmutableState\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/interfaces/IPeripheryImmutableState.sol\":{\"keccak256\":\"0x7affcfeb5127c0925a71d6a65345e117c33537523aeca7bc98085ead8452519d\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://e16b291294210e71cb0f20cd0afe62ae2dc6878d627f5ccc19c4dc9cd80aec3f\",\"dweb:/ipfs/QmQGitSyBr26nour81BZmpmDMyJpvZRqHQZvnCD1Acb127\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"notice": "Functions that return immutable state of the router",
						"version": 1
					}
				}
			},
			"contracts/interfaces/IPeripheryPayments.sol": {
				"IPeripheryPayments": {
					"abi": [
						{
							"inputs": [],
							"name": "refundETH",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amountMinimum",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								}
							],
							"name": "sweepToken",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "amountMinimum",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								}
							],
							"name": "unwrapWETH9",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"refundETH()": {
								"details": "Useful for bundling with mint or increase liquidity that uses ether, or exact output swaps that use ether for the input amount"
							},
							"sweepToken(address,uint256,address)": {
								"details": "The amountMinimum parameter prevents malicious contracts from stealing the token from users",
								"params": {
									"amountMinimum": "The minimum amount of token required for a transfer",
									"recipient": "The destination address of the token",
									"token": "The contract address of the token which will be transferred to `recipient`"
								}
							},
							"unwrapWETH9(uint256,address)": {
								"details": "The amountMinimum parameter prevents malicious contracts from stealing WETH9 from users.",
								"params": {
									"amountMinimum": "The minimum amount of WETH9 to unwrap",
									"recipient": "The address receiving ETH"
								}
							}
						},
						"title": "Periphery Payments",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"refundETH()": "12210e8a",
							"sweepToken(address,uint256,address)": "df2ab5bb",
							"unwrapWETH9(uint256,address)": "49404b7c"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"refundETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountMinimum\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"sweepToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountMinimum\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"unwrapWETH9\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"refundETH()\":{\"details\":\"Useful for bundling with mint or increase liquidity that uses ether, or exact output swaps that use ether for the input amount\"},\"sweepToken(address,uint256,address)\":{\"details\":\"The amountMinimum parameter prevents malicious contracts from stealing the token from users\",\"params\":{\"amountMinimum\":\"The minimum amount of token required for a transfer\",\"recipient\":\"The destination address of the token\",\"token\":\"The contract address of the token which will be transferred to `recipient`\"}},\"unwrapWETH9(uint256,address)\":{\"details\":\"The amountMinimum parameter prevents malicious contracts from stealing WETH9 from users.\",\"params\":{\"amountMinimum\":\"The minimum amount of WETH9 to unwrap\",\"recipient\":\"The address receiving ETH\"}}},\"title\":\"Periphery Payments\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"refundETH()\":{\"notice\":\"Refunds any ETH balance held by this contract to the `msg.sender`\"},\"sweepToken(address,uint256,address)\":{\"notice\":\"Transfers the full amount of a token held by this contract to recipient\"},\"unwrapWETH9(uint256,address)\":{\"notice\":\"Unwraps the contract's WETH9 balance and sends it to recipient as ETH.\"}},\"notice\":\"Functions to ease deposits and withdrawals of ETH\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/IPeripheryPayments.sol\":\"IPeripheryPayments\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/interfaces/IPeripheryPayments.sol\":{\"keccak256\":\"0xb547e10f1e69bed03621a62b73a503e260643066c6b4054867a4d1fef47eb274\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://f9a90f58f5fd5fb42f7811f4094113b532f307b14a73764c91f977590747f407\",\"dweb:/ipfs/QmSeNH2mfiDMKf3Q6V2sqtNxx1s72JNuA1VVxRM9HoMqYp\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"refundETH()": {
								"notice": "Refunds any ETH balance held by this contract to the `msg.sender`"
							},
							"sweepToken(address,uint256,address)": {
								"notice": "Transfers the full amount of a token held by this contract to recipient"
							},
							"unwrapWETH9(uint256,address)": {
								"notice": "Unwraps the contract's WETH9 balance and sends it to recipient as ETH."
							}
						},
						"notice": "Functions to ease deposits and withdrawals of ETH",
						"version": 1
					}
				}
			},
			"contracts/interfaces/IPoolInitializer.sol": {
				"IPoolInitializer": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token0",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "token1",
									"type": "address"
								},
								{
									"internalType": "uint24",
									"name": "fee",
									"type": "uint24"
								},
								{
									"internalType": "uint160",
									"name": "sqrtPriceX96",
									"type": "uint160"
								}
							],
							"name": "createAndInitializePoolIfNecessary",
							"outputs": [
								{
									"internalType": "address",
									"name": "pool",
									"type": "address"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"createAndInitializePoolIfNecessary(address,address,uint24,uint160)": {
								"details": "This method can be bundled with others via IMulticall for the first action (e.g. mint) performed against a pool",
								"params": {
									"fee": "The fee amount of the v3 pool for the specified token pair",
									"sqrtPriceX96": "The initial square root price of the pool as a Q64.96 value",
									"token0": "The contract address of token0 of the pool",
									"token1": "The contract address of token1 of the pool"
								},
								"returns": {
									"pool": "Returns the pool address based on the pair of tokens and fee, will return the newly created pool address if necessary"
								}
							}
						},
						"title": "Creates and initializes V3 Pools",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"createAndInitializePoolIfNecessary(address,address,uint24,uint160)": "13ead562"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"}],\"name\":\"createAndInitializePoolIfNecessary\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"createAndInitializePoolIfNecessary(address,address,uint24,uint160)\":{\"details\":\"This method can be bundled with others via IMulticall for the first action (e.g. mint) performed against a pool\",\"params\":{\"fee\":\"The fee amount of the v3 pool for the specified token pair\",\"sqrtPriceX96\":\"The initial square root price of the pool as a Q64.96 value\",\"token0\":\"The contract address of token0 of the pool\",\"token1\":\"The contract address of token1 of the pool\"},\"returns\":{\"pool\":\"Returns the pool address based on the pair of tokens and fee, will return the newly created pool address if necessary\"}}},\"title\":\"Creates and initializes V3 Pools\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"createAndInitializePoolIfNecessary(address,address,uint24,uint160)\":{\"notice\":\"Creates a new pool if it does not exist, then initializes if not initialized\"}},\"notice\":\"Provides a method for creating and initializing a pool, if necessary, for bundling with other methods that require the pool to exist.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/IPoolInitializer.sol\":\"IPoolInitializer\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/interfaces/IPoolInitializer.sol\":{\"keccak256\":\"0x9d7695e8d94c22cc5fcced602017aabb988de89981ea7bee29ea629d5328a862\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://61b50933026ee1017db2a6273af8cedc3238c95dca58880db0918dbdbb2f064f\",\"dweb:/ipfs/QmUebR26pqG25d18aBELKz8aFFKkmHa8PxntzXTA7o9Ldu\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"createAndInitializePoolIfNecessary(address,address,uint24,uint160)": {
								"notice": "Creates a new pool if it does not exist, then initializes if not initialized"
							}
						},
						"notice": "Provides a method for creating and initializing a pool, if necessary, for bundling with other methods that require the pool to exist.",
						"version": 1
					}
				}
			},
			"contracts/libraries/LiquidityAmounts.sol": {
				"LiquidityAmounts": {
					"abi": [],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"title": "Liquidity amount functions",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/libraries/LiquidityAmounts.sol\":327:6814  library LiquidityAmounts {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  invalid\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/libraries/LiquidityAmounts.sol\":327:6814  library LiquidityAmounts {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa26469706673582212200147d206ec9fe3dfe330fbe3b906baa075635edd894b95d3cecb929ba3001e8e64736f6c63430007060033\n}\n",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212200147d206ec9fe3dfe330fbe3b906baa075635edd894b95d3cecb929ba3001e8e64736f6c63430007060033",
							"opcodes": "PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 ADD SELFBALANCE 0xD2 MOD 0xEC SWAP16 0xE3 0xDF 0xE3 ADDRESS 0xFB 0xE3 0xB9 MOD 0xBA LOG0 PUSH22 0x635EDD894B95D3CECB929BA3001E8E64736F6C634300 SMOD MOD STOP CALLER ",
							"sourceMap": "327:6487:16:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212200147d206ec9fe3dfe330fbe3b906baa075635edd894b95d3cecb929ba3001e8e64736f6c63430007060033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 ADD SELFBALANCE 0xD2 MOD 0xEC SWAP16 0xE3 0xDF 0xE3 ADDRESS 0xFB 0xE3 0xB9 MOD 0xBA LOG0 PUSH22 0x635EDD894B95D3CECB929BA3001E8E64736F6C634300 SMOD MOD STOP CALLER ",
							"sourceMap": "327:6487:16:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							},
							"internal": {
								"getAmount0ForLiquidity(uint160,uint160,uint128)": "infinite",
								"getAmount1ForLiquidity(uint160,uint160,uint128)": "infinite",
								"getAmountsForLiquidity(uint160,uint160,uint160,uint128)": "infinite",
								"getLiquidityForAmount0(uint160,uint160,uint256)": "infinite",
								"getLiquidityForAmount1(uint160,uint160,uint256)": "infinite",
								"getLiquidityForAmounts(uint160,uint160,uint160,uint256,uint256)": "infinite",
								"toUint128(uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 327,
									"end": 6814,
									"name": "PUSH #[$]",
									"source": 16,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 327,
									"end": 6814,
									"name": "PUSH [$]",
									"source": 16,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 327,
									"end": 6814,
									"name": "PUSH",
									"source": 16,
									"value": "B"
								},
								{
									"begin": 327,
									"end": 6814,
									"name": "DUP3",
									"source": 16
								},
								{
									"begin": 327,
									"end": 6814,
									"name": "DUP3",
									"source": 16
								},
								{
									"begin": 327,
									"end": 6814,
									"name": "DUP3",
									"source": 16
								},
								{
									"begin": 327,
									"end": 6814,
									"name": "CODECOPY",
									"source": 16
								},
								{
									"begin": 327,
									"end": 6814,
									"name": "DUP1",
									"source": 16
								},
								{
									"begin": 327,
									"end": 6814,
									"name": "MLOAD",
									"source": 16
								},
								{
									"begin": 327,
									"end": 6814,
									"name": "PUSH",
									"source": 16,
									"value": "0"
								},
								{
									"begin": 327,
									"end": 6814,
									"name": "BYTE",
									"source": 16
								},
								{
									"begin": 327,
									"end": 6814,
									"name": "PUSH",
									"source": 16,
									"value": "73"
								},
								{
									"begin": 327,
									"end": 6814,
									"name": "EQ",
									"source": 16
								},
								{
									"begin": 327,
									"end": 6814,
									"name": "PUSH [tag]",
									"source": 16,
									"value": "1"
								},
								{
									"begin": 327,
									"end": 6814,
									"name": "JUMPI",
									"source": 16
								},
								{
									"begin": 327,
									"end": 6814,
									"name": "INVALID",
									"source": 16
								},
								{
									"begin": 327,
									"end": 6814,
									"name": "tag",
									"source": 16,
									"value": "1"
								},
								{
									"begin": 327,
									"end": 6814,
									"name": "JUMPDEST",
									"source": 16
								},
								{
									"begin": 327,
									"end": 6814,
									"name": "ADDRESS",
									"source": 16
								},
								{
									"begin": 327,
									"end": 6814,
									"name": "PUSH",
									"source": 16,
									"value": "0"
								},
								{
									"begin": 327,
									"end": 6814,
									"name": "MSTORE",
									"source": 16
								},
								{
									"begin": 327,
									"end": 6814,
									"name": "PUSH",
									"source": 16,
									"value": "73"
								},
								{
									"begin": 327,
									"end": 6814,
									"name": "DUP2",
									"source": 16
								},
								{
									"begin": 327,
									"end": 6814,
									"name": "MSTORE8",
									"source": 16
								},
								{
									"begin": 327,
									"end": 6814,
									"name": "DUP3",
									"source": 16
								},
								{
									"begin": 327,
									"end": 6814,
									"name": "DUP2",
									"source": 16
								},
								{
									"begin": 327,
									"end": 6814,
									"name": "RETURN",
									"source": 16
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212200147d206ec9fe3dfe330fbe3b906baa075635edd894b95d3cecb929ba3001e8e64736f6c63430007060033",
									".code": [
										{
											"begin": 327,
											"end": 6814,
											"name": "PUSHDEPLOYADDRESS",
											"source": 16
										},
										{
											"begin": 327,
											"end": 6814,
											"name": "ADDRESS",
											"source": 16
										},
										{
											"begin": 327,
											"end": 6814,
											"name": "EQ",
											"source": 16
										},
										{
											"begin": 327,
											"end": 6814,
											"name": "PUSH",
											"source": 16,
											"value": "80"
										},
										{
											"begin": 327,
											"end": 6814,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 327,
											"end": 6814,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 327,
											"end": 6814,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 327,
											"end": 6814,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 327,
											"end": 6814,
											"name": "REVERT",
											"source": 16
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"title\":\"Liquidity amount functions\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Provides functions for computing liquidity amounts from token amounts and prices\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/libraries/LiquidityAmounts.sol\":\"LiquidityAmounts\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@uniswap/v3-core/contracts/libraries/FixedPoint96.sol\":{\"keccak256\":\"0x0ba8a9b95a956a4050749c0158e928398c447c91469682ca8a7cc7e77a7fe032\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://186d3b528866065a5856f96d2aeec698efa99f8da913e9adf34f8cc296cc993d\",\"dweb:/ipfs/QmUAiMvtAQp8c9dy57bqJYzG7hkb1uChiPaQmt264skoqP\"]},\"@uniswap/v3-core/contracts/libraries/FullMath.sol\":{\"keccak256\":\"0xe511530871deaef86692cea9adb6076d26d7b47fd4815ce51af52af981026057\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bc5a6ae776be3e7dcbd23d49ffbc9d792fed0ddf4b111ebb64b9bb2133ec263e\",\"dweb:/ipfs/QmbAUtWqvipzEARQpFpkzYKBELy3qeW5WXnZxHFU84sxG7\"]},\"contracts/libraries/LiquidityAmounts.sol\":{\"keccak256\":\"0xf149581d28e1c81736dfe72be73ee1301d4945340cc6282fcdd63fe3c85abf24\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://0b67f375180bb62fe6753601cd09740496dcdcec4c0a4f9eaa6e94c5e1bb6844\",\"dweb:/ipfs/QmWYwkmqynRq7g81Nijg4eEkPgSRGnegDrbbEKkkTC1k2w\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"notice": "Provides functions for computing liquidity amounts from token amounts and prices",
						"version": 1
					}
				}
			},
			"contracts/libraries/PoolAddress.sol": {
				"PoolAddress": {
					"abi": [],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"title": "Provides functions for deriving a pool address from the factory, tokens, and the fee",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/libraries/PoolAddress.sol\":167:1906  library PoolAddress {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  invalid\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/libraries/PoolAddress.sol\":167:1906  library PoolAddress {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa264697066735822122019ec6d38cedefc289c4794719c17d84d5ba669b9bcd57be5897042d17d3267b664736f6c63430007060033\n}\n",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122019ec6d38cedefc289c4794719c17d84d5ba669b9bcd57be5897042d17d3267b664736f6c63430007060033",
							"opcodes": "PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 NOT 0xEC PUSH14 0x38CEDEFC289C4794719C17D84D5B 0xA6 PUSH10 0xB9BCD57BE5897042D17D ORIGIN PUSH8 0xB664736F6C634300 SMOD MOD STOP CALLER ",
							"sourceMap": "167:1739:17:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122019ec6d38cedefc289c4794719c17d84d5ba669b9bcd57be5897042d17d3267b664736f6c63430007060033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 NOT 0xEC PUSH14 0x38CEDEFC289C4794719C17D84D5B 0xA6 PUSH10 0xB9BCD57BE5897042D17D ORIGIN PUSH8 0xB664736F6C634300 SMOD MOD STOP CALLER ",
							"sourceMap": "167:1739:17:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							},
							"internal": {
								"computeAddress(address,struct PoolAddress.PoolKey memory)": "infinite",
								"getPoolKey(address,address,uint24)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 167,
									"end": 1906,
									"name": "PUSH #[$]",
									"source": 17,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 167,
									"end": 1906,
									"name": "PUSH [$]",
									"source": 17,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 167,
									"end": 1906,
									"name": "PUSH",
									"source": 17,
									"value": "B"
								},
								{
									"begin": 167,
									"end": 1906,
									"name": "DUP3",
									"source": 17
								},
								{
									"begin": 167,
									"end": 1906,
									"name": "DUP3",
									"source": 17
								},
								{
									"begin": 167,
									"end": 1906,
									"name": "DUP3",
									"source": 17
								},
								{
									"begin": 167,
									"end": 1906,
									"name": "CODECOPY",
									"source": 17
								},
								{
									"begin": 167,
									"end": 1906,
									"name": "DUP1",
									"source": 17
								},
								{
									"begin": 167,
									"end": 1906,
									"name": "MLOAD",
									"source": 17
								},
								{
									"begin": 167,
									"end": 1906,
									"name": "PUSH",
									"source": 17,
									"value": "0"
								},
								{
									"begin": 167,
									"end": 1906,
									"name": "BYTE",
									"source": 17
								},
								{
									"begin": 167,
									"end": 1906,
									"name": "PUSH",
									"source": 17,
									"value": "73"
								},
								{
									"begin": 167,
									"end": 1906,
									"name": "EQ",
									"source": 17
								},
								{
									"begin": 167,
									"end": 1906,
									"name": "PUSH [tag]",
									"source": 17,
									"value": "1"
								},
								{
									"begin": 167,
									"end": 1906,
									"name": "JUMPI",
									"source": 17
								},
								{
									"begin": 167,
									"end": 1906,
									"name": "INVALID",
									"source": 17
								},
								{
									"begin": 167,
									"end": 1906,
									"name": "tag",
									"source": 17,
									"value": "1"
								},
								{
									"begin": 167,
									"end": 1906,
									"name": "JUMPDEST",
									"source": 17
								},
								{
									"begin": 167,
									"end": 1906,
									"name": "ADDRESS",
									"source": 17
								},
								{
									"begin": 167,
									"end": 1906,
									"name": "PUSH",
									"source": 17,
									"value": "0"
								},
								{
									"begin": 167,
									"end": 1906,
									"name": "MSTORE",
									"source": 17
								},
								{
									"begin": 167,
									"end": 1906,
									"name": "PUSH",
									"source": 17,
									"value": "73"
								},
								{
									"begin": 167,
									"end": 1906,
									"name": "DUP2",
									"source": 17
								},
								{
									"begin": 167,
									"end": 1906,
									"name": "MSTORE8",
									"source": 17
								},
								{
									"begin": 167,
									"end": 1906,
									"name": "DUP3",
									"source": 17
								},
								{
									"begin": 167,
									"end": 1906,
									"name": "DUP2",
									"source": 17
								},
								{
									"begin": 167,
									"end": 1906,
									"name": "RETURN",
									"source": 17
								}
							],
							".data": {
								"0": {
									".auxdata": "a264697066735822122019ec6d38cedefc289c4794719c17d84d5ba669b9bcd57be5897042d17d3267b664736f6c63430007060033",
									".code": [
										{
											"begin": 167,
											"end": 1906,
											"name": "PUSHDEPLOYADDRESS",
											"source": 17
										},
										{
											"begin": 167,
											"end": 1906,
											"name": "ADDRESS",
											"source": 17
										},
										{
											"begin": 167,
											"end": 1906,
											"name": "EQ",
											"source": 17
										},
										{
											"begin": 167,
											"end": 1906,
											"name": "PUSH",
											"source": 17,
											"value": "80"
										},
										{
											"begin": 167,
											"end": 1906,
											"name": "PUSH",
											"source": 17,
											"value": "40"
										},
										{
											"begin": 167,
											"end": 1906,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 167,
											"end": 1906,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 167,
											"end": 1906,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 167,
											"end": 1906,
											"name": "REVERT",
											"source": 17
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"title\":\"Provides functions for deriving a pool address from the factory, tokens, and the fee\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/libraries/PoolAddress.sol\":\"PoolAddress\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/libraries/PoolAddress.sol\":{\"keccak256\":\"0xae892829db91974e6883747cb50c88fb55ed2c4a4e67f5da6155d99232ffc10c\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://e75be667776276ba265d7cbc60ea1ddd233019e583c7f0c44fd0ba5200c6cf31\",\"dweb:/ipfs/QmWMvG8jNZhqXzLqDMgcdpTRBwf6TrF5X323ePQh1Y45PX\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/libraries/TickMath.sol": {
				"TickMath": {
					"abi": [],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"stateVariables": {
							"MAX_SQRT_RATIO": {
								"details": "The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)"
							},
							"MAX_TICK": {
								"details": "The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128"
							},
							"MIN_SQRT_RATIO": {
								"details": "The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)"
							},
							"MIN_TICK": {
								"details": "The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128"
							}
						},
						"title": "Math library for computing sqrt prices from ticks and vice versa",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/libraries/TickMath.sol\":313:8644  library TickMath {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  invalid\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/libraries/TickMath.sol\":313:8644  library TickMath {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa26469706673582212204189f74a06c119acba3710b5d1dc4e0b51db1766dd43bcb5de41bec98af2d0ed64736f6c63430007060033\n}\n",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212204189f74a06c119acba3710b5d1dc4e0b51db1766dd43bcb5de41bec98af2d0ed64736f6c63430007060033",
							"opcodes": "PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 COINBASE DUP10 0xF7 0x4A MOD 0xC1 NOT 0xAC 0xBA CALLDATACOPY LT 0xB5 0xD1 0xDC 0x4E SIGNEXTEND MLOAD 0xDB OR PUSH7 0xDD43BCB5DE41BE 0xC9 DUP11 CALLCODE 0xD0 0xED PUSH5 0x736F6C6343 STOP SMOD MOD STOP CALLER ",
							"sourceMap": "313:8331:18:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212204189f74a06c119acba3710b5d1dc4e0b51db1766dd43bcb5de41bec98af2d0ed64736f6c63430007060033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 COINBASE DUP10 0xF7 0x4A MOD 0xC1 NOT 0xAC 0xBA CALLDATACOPY LT 0xB5 0xD1 0xDC 0x4E SIGNEXTEND MLOAD 0xDB OR PUSH7 0xDD43BCB5DE41BE 0xC9 DUP11 CALLCODE 0xD0 0xED PUSH5 0x736F6C6343 STOP SMOD MOD STOP CALLER ",
							"sourceMap": "313:8331:18:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							},
							"internal": {
								"getSqrtRatioAtTick(int24)": "infinite",
								"getTickAtSqrtRatio(uint160)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 313,
									"end": 8644,
									"name": "PUSH #[$]",
									"source": 18,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "PUSH [$]",
									"source": 18,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "PUSH",
									"source": 18,
									"value": "B"
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "DUP3",
									"source": 18
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "DUP3",
									"source": 18
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "DUP3",
									"source": 18
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "CODECOPY",
									"source": 18
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "DUP1",
									"source": 18
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "MLOAD",
									"source": 18
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "PUSH",
									"source": 18,
									"value": "0"
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "BYTE",
									"source": 18
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "PUSH",
									"source": 18,
									"value": "73"
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "EQ",
									"source": 18
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "1"
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "JUMPI",
									"source": 18
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "INVALID",
									"source": 18
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "tag",
									"source": 18,
									"value": "1"
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "JUMPDEST",
									"source": 18
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "ADDRESS",
									"source": 18
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "PUSH",
									"source": 18,
									"value": "0"
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "MSTORE",
									"source": 18
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "PUSH",
									"source": 18,
									"value": "73"
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "DUP2",
									"source": 18
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "MSTORE8",
									"source": 18
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "DUP3",
									"source": 18
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "DUP2",
									"source": 18
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "RETURN",
									"source": 18
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212204189f74a06c119acba3710b5d1dc4e0b51db1766dd43bcb5de41bec98af2d0ed64736f6c63430007060033",
									".code": [
										{
											"begin": 313,
											"end": 8644,
											"name": "PUSHDEPLOYADDRESS",
											"source": 18
										},
										{
											"begin": 313,
											"end": 8644,
											"name": "ADDRESS",
											"source": 18
										},
										{
											"begin": 313,
											"end": 8644,
											"name": "EQ",
											"source": 18
										},
										{
											"begin": 313,
											"end": 8644,
											"name": "PUSH",
											"source": 18,
											"value": "80"
										},
										{
											"begin": 313,
											"end": 8644,
											"name": "PUSH",
											"source": 18,
											"value": "40"
										},
										{
											"begin": 313,
											"end": 8644,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 313,
											"end": 8644,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 313,
											"end": 8644,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 313,
											"end": 8644,
											"name": "REVERT",
											"source": 18
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"MAX_SQRT_RATIO\":{\"details\":\"The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\"},\"MAX_TICK\":{\"details\":\"The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\"},\"MIN_SQRT_RATIO\":{\"details\":\"The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\"},\"MIN_TICK\":{\"details\":\"The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128\"}},\"title\":\"Math library for computing sqrt prices from ticks and vice versa\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports prices between 2**-128 and 2**128\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/libraries/TickMath.sol\":\"TickMath\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/libraries/TickMath.sol\":{\"keccak256\":\"0xda8c2c0b12d2976acfd364453ba5f5bf0117ba3c91175ee9e1067d3fb26944d9\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://3f3d2d7c2723c91830c74d96292f28fc1cfe28d388cdb9c1a5ebadb4c2b96f81\",\"dweb:/ipfs/QmYU4wk8MEm33wVWR38LoncvR7b8PP1mLuGBKX3dUpYJVE\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"notice": "Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports prices between 2**-128 and 2**128",
						"version": 1
					}
				}
			}
		},
		"errors": [
			{
				"component": "general",
				"errorCode": "2072",
				"formattedMessage": "contracts/CoinSwitch.sol:24:11: Warning: Unused local variable.\n         (uint96 nonce, address operator, address token0, ...\n          ^----------^\n",
				"message": "Unused local variable.",
				"severity": "warning",
				"sourceLocation": {
					"end": 759,
					"file": "contracts/CoinSwitch.sol",
					"start": 747
				},
				"type": "Warning"
			},
			{
				"component": "general",
				"errorCode": "2072",
				"formattedMessage": "contracts/CoinSwitch.sol:24:25: Warning: Unused local variable.\n         (uint96 nonce, address operator, address token0, address token1, u ...\n                        ^--------------^\n",
				"message": "Unused local variable.",
				"severity": "warning",
				"sourceLocation": {
					"end": 777,
					"file": "contracts/CoinSwitch.sol",
					"start": 761
				},
				"type": "Warning"
			},
			{
				"component": "general",
				"errorCode": "2072",
				"formattedMessage": "contracts/CoinSwitch.sol:24:43: Warning: Unused local variable.\n ...   (uint96 nonce, address operator, address token0, address token1, uint24 fee, int24 ...\n                                        ^------------^\n",
				"message": "Unused local variable.",
				"severity": "warning",
				"sourceLocation": {
					"end": 793,
					"file": "contracts/CoinSwitch.sol",
					"start": 779
				},
				"type": "Warning"
			},
			{
				"component": "general",
				"errorCode": "2072",
				"formattedMessage": "contracts/CoinSwitch.sol:24:59: Warning: Unused local variable.\n ...  address operator, address token0, address token1, uint24 fee, int24 tickLower, int2 ...\n                                        ^------------^\n",
				"message": "Unused local variable.",
				"severity": "warning",
				"sourceLocation": {
					"end": 809,
					"file": "contracts/CoinSwitch.sol",
					"start": 795
				},
				"type": "Warning"
			},
			{
				"component": "general",
				"errorCode": "2072",
				"formattedMessage": "contracts/CoinSwitch.sol:24:75: Warning: Unused local variable.\n ... r, address token0, address token1, uint24 fee, int24 tickLower, int24 tickUpper, ...\n                                        ^--------^\n",
				"message": "Unused local variable.",
				"severity": "warning",
				"sourceLocation": {
					"end": 821,
					"file": "contracts/CoinSwitch.sol",
					"start": 811
				},
				"type": "Warning"
			},
			{
				"component": "general",
				"errorCode": "2072",
				"formattedMessage": "contracts/CoinSwitch.sol:24:139: Warning: Unused local variable.\n ... int24 tickUpper, uint128 liquidity,uint256 feeGrowthInside0LastX128,\n                                        ^------------------------------^\n",
				"message": "Unused local variable.",
				"severity": "warning",
				"sourceLocation": {
					"end": 907,
					"file": "contracts/CoinSwitch.sol",
					"start": 875
				},
				"type": "Warning"
			},
			{
				"component": "general",
				"errorCode": "2072",
				"formattedMessage": "contracts/CoinSwitch.sol:25:13: Warning: Unused local variable.\n            uint256 feeGrowthInside1LastX128,\n            ^------------------------------^\n",
				"message": "Unused local variable.",
				"severity": "warning",
				"sourceLocation": {
					"end": 953,
					"file": "contracts/CoinSwitch.sol",
					"start": 921
				},
				"type": "Warning"
			},
			{
				"component": "general",
				"errorCode": "2072",
				"formattedMessage": "contracts/CoinSwitch.sol:26:13: Warning: Unused local variable.\n            uint128 tokensOwed0,\n            ^-----------------^\n",
				"message": "Unused local variable.",
				"severity": "warning",
				"sourceLocation": {
					"end": 986,
					"file": "contracts/CoinSwitch.sol",
					"start": 967
				},
				"type": "Warning"
			},
			{
				"component": "general",
				"errorCode": "2072",
				"formattedMessage": "contracts/CoinSwitch.sol:27:13: Warning: Unused local variable.\n            uint128 tokensOwed1)=nftPositionManager.positions(_tokenId);\n            ^-----------------^\n",
				"message": "Unused local variable.",
				"severity": "warning",
				"sourceLocation": {
					"end": 1019,
					"file": "contracts/CoinSwitch.sol",
					"start": 1000
				},
				"type": "Warning"
			},
			{
				"component": "general",
				"errorCode": "2072",
				"formattedMessage": "contracts/CoinSwitch.sol:28:13: Warning: Unused local variable.\n            int24 tickler = tickLower;\n            ^-----------^\n",
				"message": "Unused local variable.",
				"severity": "warning",
				"sourceLocation": {
					"end": 1086,
					"file": "contracts/CoinSwitch.sol",
					"start": 1073
				},
				"type": "Warning"
			},
			{
				"component": "general",
				"errorCode": "2072",
				"formattedMessage": "contracts/CoinSwitch.sol:31:13: Warning: Unused local variable.\n            uint256 amount0 = LiquidityAmounts.getAmount0ForLiquidity(sqrtRatioAX96, sqrtRatioBX96, liquidity);\n            ^-------------^\n",
				"message": "Unused local variable.",
				"severity": "warning",
				"sourceLocation": {
					"end": 1279,
					"file": "contracts/CoinSwitch.sol",
					"start": 1264
				},
				"type": "Warning"
			}
		],
		"sources": {
			"@openzeppelin/contracts/introspection/IERC165.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/introspection/IERC165.sol",
					"exportedSymbols": {
						"IERC165": [
							11
						]
					},
					"id": 12,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.7",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "33:23:0"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 2,
								"nodeType": "StructuredDocumentation",
								"src": "58:279:0",
								"text": " @dev Interface of the ERC165 standard, as defined in the\n https://eips.ethereum.org/EIPS/eip-165[EIP].\n Implementers can declare support of contract interfaces, which can then be\n queried by others ({ERC165Checker}).\n For an implementation, see {ERC165}."
							},
							"fullyImplemented": false,
							"id": 11,
							"linearizedBaseContracts": [
								11
							],
							"name": "IERC165",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 3,
										"nodeType": "StructuredDocumentation",
										"src": "362:340:0",
										"text": " @dev Returns true if this contract implements the interface defined by\n `interfaceId`. See the corresponding\n https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n to learn more about how these ids are created.\n This function call must use less than 30 000 gas."
									},
									"functionSelector": "01ffc9a7",
									"id": 10,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "supportsInterface",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 6,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 5,
												"mutability": "mutable",
												"name": "interfaceId",
												"nodeType": "VariableDeclaration",
												"scope": 10,
												"src": "734:18:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes4",
													"typeString": "bytes4"
												},
												"typeName": {
													"id": 4,
													"name": "bytes4",
													"nodeType": "ElementaryTypeName",
													"src": "734:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes4",
														"typeString": "bytes4"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "733:20:0"
									},
									"returnParameters": {
										"id": 9,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 8,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 10,
												"src": "777:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 7,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "777:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "776:6:0"
									},
									"scope": 11,
									"src": "707:76:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 12,
							"src": "338:447:0"
						}
					],
					"src": "33:753:0"
				},
				"id": 0
			},
			"@openzeppelin/contracts/math/SafeMath.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/math/SafeMath.sol",
					"exportedSymbols": {
						"SafeMath": [
							366
						]
					},
					"id": 367,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 13,
							"literals": [
								"solidity",
								"^",
								"0.7",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "33:23:1"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 14,
								"nodeType": "StructuredDocumentation",
								"src": "58:563:1",
								"text": " @dev Wrappers over Solidity's arithmetic operations with added overflow\n checks.\n Arithmetic operations in Solidity wrap on overflow. This can easily result\n in bugs, because programmers usually assume that an overflow raises an\n error, which is the standard behavior in high level programming languages.\n `SafeMath` restores this intuition by reverting the transaction when an\n operation overflows.\n Using this library instead of the unchecked operations eliminates an entire\n class of bugs, so it's recommended to use it always."
							},
							"fullyImplemented": true,
							"id": 366,
							"linearizedBaseContracts": [
								366
							],
							"name": "SafeMath",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 44,
										"nodeType": "Block",
										"src": "857:98:1",
										"statements": [
											{
												"assignments": [
													27
												],
												"declarations": [
													{
														"constant": false,
														"id": 27,
														"mutability": "mutable",
														"name": "c",
														"nodeType": "VariableDeclaration",
														"scope": 44,
														"src": "867:9:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 26,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "867:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 31,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 30,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 28,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 17,
														"src": "879:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"id": 29,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 19,
														"src": "883:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "879:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "867:17:1"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 34,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 32,
														"name": "c",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 27,
														"src": "898:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"id": 33,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 17,
														"src": "902:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "898:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 39,
												"nodeType": "IfStatement",
												"src": "894:28:1",
												"trueBody": {
													"expression": {
														"components": [
															{
																"hexValue": "66616c7365",
																"id": 35,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "913:5:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "false"
															},
															{
																"hexValue": "30",
																"id": 36,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "920:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"id": 37,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "912:10:1",
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
															"typeString": "tuple(bool,int_const 0)"
														}
													},
													"functionReturnParameters": 25,
													"id": 38,
													"nodeType": "Return",
													"src": "905:17:1"
												}
											},
											{
												"expression": {
													"components": [
														{
															"hexValue": "74727565",
															"id": 40,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "bool",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "940:4:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"value": "true"
														},
														{
															"id": 41,
															"name": "c",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 27,
															"src": "946:1:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"id": 42,
													"isConstant": false,
													"isInlineArray": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "939:9:1",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
														"typeString": "tuple(bool,uint256)"
													}
												},
												"functionReturnParameters": 25,
												"id": 43,
												"nodeType": "Return",
												"src": "932:16:1"
											}
										]
									},
									"documentation": {
										"id": 15,
										"nodeType": "StructuredDocumentation",
										"src": "645:131:1",
										"text": " @dev Returns the addition of two unsigned integers, with an overflow flag.\n _Available since v3.4._"
									},
									"id": 45,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryAdd",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 20,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 17,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 45,
												"src": "797:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 16,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "797:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 19,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 45,
												"src": "808:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 18,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "808:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "796:22:1"
									},
									"returnParameters": {
										"id": 25,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 22,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 45,
												"src": "842:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 21,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "842:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 24,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 45,
												"src": "848:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 23,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "848:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "841:15:1"
									},
									"scope": 366,
									"src": "781:174:1",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 71,
										"nodeType": "Block",
										"src": "1177:75:1",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 59,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 57,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 50,
														"src": "1191:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"id": 58,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 48,
														"src": "1195:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1191:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 64,
												"nodeType": "IfStatement",
												"src": "1187:28:1",
												"trueBody": {
													"expression": {
														"components": [
															{
																"hexValue": "66616c7365",
																"id": 60,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1206:5:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "false"
															},
															{
																"hexValue": "30",
																"id": 61,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1213:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"id": 62,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "1205:10:1",
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
															"typeString": "tuple(bool,int_const 0)"
														}
													},
													"functionReturnParameters": 56,
													"id": 63,
													"nodeType": "Return",
													"src": "1198:17:1"
												}
											},
											{
												"expression": {
													"components": [
														{
															"hexValue": "74727565",
															"id": 65,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "bool",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1233:4:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"value": "true"
														},
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 68,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 66,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 48,
																"src": "1239:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "-",
															"rightExpression": {
																"id": 67,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 50,
																"src": "1243:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1239:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"id": 69,
													"isConstant": false,
													"isInlineArray": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "1232:13:1",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
														"typeString": "tuple(bool,uint256)"
													}
												},
												"functionReturnParameters": 56,
												"id": 70,
												"nodeType": "Return",
												"src": "1225:20:1"
											}
										]
									},
									"documentation": {
										"id": 46,
										"nodeType": "StructuredDocumentation",
										"src": "961:135:1",
										"text": " @dev Returns the substraction of two unsigned integers, with an overflow flag.\n _Available since v3.4._"
									},
									"id": 72,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "trySub",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 51,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 48,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 72,
												"src": "1117:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 47,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1117:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 50,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 72,
												"src": "1128:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 49,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1128:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1116:22:1"
									},
									"returnParameters": {
										"id": 56,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 53,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 72,
												"src": "1162:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 52,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1162:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 55,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 72,
												"src": "1168:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 54,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1168:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1161:15:1"
									},
									"scope": 366,
									"src": "1101:151:1",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 112,
										"nodeType": "Block",
										"src": "1476:359:1",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 86,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 84,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 75,
														"src": "1708:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 85,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1713:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "1708:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 91,
												"nodeType": "IfStatement",
												"src": "1704:28:1",
												"trueBody": {
													"expression": {
														"components": [
															{
																"hexValue": "74727565",
																"id": 87,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1724:4:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "true"
															},
															{
																"hexValue": "30",
																"id": 88,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1730:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"id": 89,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "1723:9:1",
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
															"typeString": "tuple(bool,int_const 0)"
														}
													},
													"functionReturnParameters": 83,
													"id": 90,
													"nodeType": "Return",
													"src": "1716:16:1"
												}
											},
											{
												"assignments": [
													93
												],
												"declarations": [
													{
														"constant": false,
														"id": 93,
														"mutability": "mutable",
														"name": "c",
														"nodeType": "VariableDeclaration",
														"scope": 112,
														"src": "1742:9:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 92,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "1742:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 97,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 96,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 94,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 75,
														"src": "1754:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "*",
													"rightExpression": {
														"id": 95,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 77,
														"src": "1758:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1754:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1742:17:1"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 102,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 100,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 98,
															"name": "c",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 93,
															"src": "1773:1:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "/",
														"rightExpression": {
															"id": 99,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 75,
															"src": "1777:1:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "1773:5:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"id": 101,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 77,
														"src": "1782:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1773:10:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 107,
												"nodeType": "IfStatement",
												"src": "1769:33:1",
												"trueBody": {
													"expression": {
														"components": [
															{
																"hexValue": "66616c7365",
																"id": 103,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1793:5:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "false"
															},
															{
																"hexValue": "30",
																"id": 104,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1800:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"id": 105,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "1792:10:1",
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
															"typeString": "tuple(bool,int_const 0)"
														}
													},
													"functionReturnParameters": 83,
													"id": 106,
													"nodeType": "Return",
													"src": "1785:17:1"
												}
											},
											{
												"expression": {
													"components": [
														{
															"hexValue": "74727565",
															"id": 108,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "bool",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1820:4:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"value": "true"
														},
														{
															"id": 109,
															"name": "c",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 93,
															"src": "1826:1:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"id": 110,
													"isConstant": false,
													"isInlineArray": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "1819:9:1",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
														"typeString": "tuple(bool,uint256)"
													}
												},
												"functionReturnParameters": 83,
												"id": 111,
												"nodeType": "Return",
												"src": "1812:16:1"
											}
										]
									},
									"documentation": {
										"id": 73,
										"nodeType": "StructuredDocumentation",
										"src": "1258:137:1",
										"text": " @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n _Available since v3.4._"
									},
									"id": 113,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryMul",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 78,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 75,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 113,
												"src": "1416:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 74,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1416:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 77,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 113,
												"src": "1427:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 76,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1427:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1415:22:1"
									},
									"returnParameters": {
										"id": 83,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 80,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 113,
												"src": "1461:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 79,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1461:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 82,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 113,
												"src": "1467:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 81,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1467:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1460:15:1"
									},
									"scope": 366,
									"src": "1400:435:1",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 139,
										"nodeType": "Block",
										"src": "2060:76:1",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 127,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 125,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 118,
														"src": "2074:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 126,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2079:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2074:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 132,
												"nodeType": "IfStatement",
												"src": "2070:29:1",
												"trueBody": {
													"expression": {
														"components": [
															{
																"hexValue": "66616c7365",
																"id": 128,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2090:5:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "false"
															},
															{
																"hexValue": "30",
																"id": 129,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2097:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"id": 130,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "2089:10:1",
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
															"typeString": "tuple(bool,int_const 0)"
														}
													},
													"functionReturnParameters": 124,
													"id": 131,
													"nodeType": "Return",
													"src": "2082:17:1"
												}
											},
											{
												"expression": {
													"components": [
														{
															"hexValue": "74727565",
															"id": 133,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "bool",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2117:4:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"value": "true"
														},
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 136,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 134,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 116,
																"src": "2123:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "/",
															"rightExpression": {
																"id": 135,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 118,
																"src": "2127:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2123:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"id": 137,
													"isConstant": false,
													"isInlineArray": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "2116:13:1",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
														"typeString": "tuple(bool,uint256)"
													}
												},
												"functionReturnParameters": 124,
												"id": 138,
												"nodeType": "Return",
												"src": "2109:20:1"
											}
										]
									},
									"documentation": {
										"id": 114,
										"nodeType": "StructuredDocumentation",
										"src": "1841:138:1",
										"text": " @dev Returns the division of two unsigned integers, with a division by zero flag.\n _Available since v3.4._"
									},
									"id": 140,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryDiv",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 119,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 116,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 140,
												"src": "2000:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 115,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2000:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 118,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 140,
												"src": "2011:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 117,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2011:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1999:22:1"
									},
									"returnParameters": {
										"id": 124,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 121,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 140,
												"src": "2045:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 120,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2045:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 123,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 140,
												"src": "2051:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 122,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2051:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2044:15:1"
									},
									"scope": 366,
									"src": "1984:152:1",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 166,
										"nodeType": "Block",
										"src": "2371:76:1",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 154,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 152,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 145,
														"src": "2385:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 153,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2390:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2385:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 159,
												"nodeType": "IfStatement",
												"src": "2381:29:1",
												"trueBody": {
													"expression": {
														"components": [
															{
																"hexValue": "66616c7365",
																"id": 155,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2401:5:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "false"
															},
															{
																"hexValue": "30",
																"id": 156,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2408:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"id": 157,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "2400:10:1",
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
															"typeString": "tuple(bool,int_const 0)"
														}
													},
													"functionReturnParameters": 151,
													"id": 158,
													"nodeType": "Return",
													"src": "2393:17:1"
												}
											},
											{
												"expression": {
													"components": [
														{
															"hexValue": "74727565",
															"id": 160,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "bool",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2428:4:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"value": "true"
														},
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 163,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 161,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 143,
																"src": "2434:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "%",
															"rightExpression": {
																"id": 162,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 145,
																"src": "2438:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2434:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"id": 164,
													"isConstant": false,
													"isInlineArray": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "2427:13:1",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
														"typeString": "tuple(bool,uint256)"
													}
												},
												"functionReturnParameters": 151,
												"id": 165,
												"nodeType": "Return",
												"src": "2420:20:1"
											}
										]
									},
									"documentation": {
										"id": 141,
										"nodeType": "StructuredDocumentation",
										"src": "2142:148:1",
										"text": " @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n _Available since v3.4._"
									},
									"id": 167,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryMod",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 146,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 143,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 167,
												"src": "2311:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 142,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2311:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 145,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 167,
												"src": "2322:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 144,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2322:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2310:22:1"
									},
									"returnParameters": {
										"id": 151,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 148,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 167,
												"src": "2356:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 147,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2356:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 150,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 167,
												"src": "2362:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 149,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2362:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2355:15:1"
									},
									"scope": 366,
									"src": "2295:152:1",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 192,
										"nodeType": "Block",
										"src": "2749:108:1",
										"statements": [
											{
												"assignments": [
													178
												],
												"declarations": [
													{
														"constant": false,
														"id": 178,
														"mutability": "mutable",
														"name": "c",
														"nodeType": "VariableDeclaration",
														"scope": 192,
														"src": "2759:9:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 177,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2759:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 182,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 181,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 179,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 170,
														"src": "2771:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"id": 180,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 172,
														"src": "2775:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2771:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2759:17:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 186,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 184,
																"name": "c",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 178,
																"src": "2794:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 185,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 170,
																"src": "2799:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2794:6:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "536166654d6174683a206164646974696f6e206f766572666c6f77",
															"id": 187,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2802:29:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_30cc447bcc13b3e22b45cef0dd9b0b514842d836dd9b6eb384e20dedfb47723a",
																"typeString": "literal_string \"SafeMath: addition overflow\""
															},
															"value": "SafeMath: addition overflow"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_30cc447bcc13b3e22b45cef0dd9b0b514842d836dd9b6eb384e20dedfb47723a",
																"typeString": "literal_string \"SafeMath: addition overflow\""
															}
														],
														"id": 183,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2786:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 188,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2786:46:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 189,
												"nodeType": "ExpressionStatement",
												"src": "2786:46:1"
											},
											{
												"expression": {
													"id": 190,
													"name": "c",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 178,
													"src": "2849:1:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 176,
												"id": 191,
												"nodeType": "Return",
												"src": "2842:8:1"
											}
										]
									},
									"documentation": {
										"id": 168,
										"nodeType": "StructuredDocumentation",
										"src": "2453:224:1",
										"text": " @dev Returns the addition of two unsigned integers, reverting on\n overflow.\n Counterpart to Solidity's `+` operator.\n Requirements:\n - Addition cannot overflow."
									},
									"id": 193,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "add",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 173,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 170,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 193,
												"src": "2695:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 169,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2695:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 172,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 193,
												"src": "2706:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 171,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2706:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2694:22:1"
									},
									"returnParameters": {
										"id": 176,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 175,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 193,
												"src": "2740:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 174,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2740:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2739:9:1"
									},
									"scope": 366,
									"src": "2682:175:1",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 214,
										"nodeType": "Block",
										"src": "3195:88:1",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 206,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 204,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 198,
																"src": "3213:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<=",
															"rightExpression": {
																"id": 205,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 196,
																"src": "3218:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "3213:6:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "536166654d6174683a207375627472616374696f6e206f766572666c6f77",
															"id": 207,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3221:32:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_50b058e9b5320e58880d88223c9801cd9eecdcf90323d5c2318bc1b6b916e862",
																"typeString": "literal_string \"SafeMath: subtraction overflow\""
															},
															"value": "SafeMath: subtraction overflow"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_50b058e9b5320e58880d88223c9801cd9eecdcf90323d5c2318bc1b6b916e862",
																"typeString": "literal_string \"SafeMath: subtraction overflow\""
															}
														],
														"id": 203,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "3205:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 208,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3205:49:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 209,
												"nodeType": "ExpressionStatement",
												"src": "3205:49:1"
											},
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 212,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 210,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 196,
														"src": "3271:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "-",
													"rightExpression": {
														"id": 211,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 198,
														"src": "3275:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3271:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 202,
												"id": 213,
												"nodeType": "Return",
												"src": "3264:12:1"
											}
										]
									},
									"documentation": {
										"id": 194,
										"nodeType": "StructuredDocumentation",
										"src": "2863:260:1",
										"text": " @dev Returns the subtraction of two unsigned integers, reverting on\n overflow (when the result is negative).\n Counterpart to Solidity's `-` operator.\n Requirements:\n - Subtraction cannot overflow."
									},
									"id": 215,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sub",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 199,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 196,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 215,
												"src": "3141:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 195,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3141:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 198,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 215,
												"src": "3152:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 197,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3152:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3140:22:1"
									},
									"returnParameters": {
										"id": 202,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 201,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 215,
												"src": "3186:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 200,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3186:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3185:9:1"
									},
									"scope": 366,
									"src": "3128:155:1",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 248,
										"nodeType": "Block",
										"src": "3597:148:1",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 227,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 225,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 218,
														"src": "3611:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 226,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3616:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "3611:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 230,
												"nodeType": "IfStatement",
												"src": "3607:20:1",
												"trueBody": {
													"expression": {
														"hexValue": "30",
														"id": 228,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3626:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"functionReturnParameters": 224,
													"id": 229,
													"nodeType": "Return",
													"src": "3619:8:1"
												}
											},
											{
												"assignments": [
													232
												],
												"declarations": [
													{
														"constant": false,
														"id": 232,
														"mutability": "mutable",
														"name": "c",
														"nodeType": "VariableDeclaration",
														"scope": 248,
														"src": "3637:9:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 231,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "3637:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 236,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 235,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 233,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 218,
														"src": "3649:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "*",
													"rightExpression": {
														"id": 234,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 220,
														"src": "3653:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3649:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3637:17:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 242,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 240,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 238,
																	"name": "c",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 232,
																	"src": "3672:1:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "/",
																"rightExpression": {
																	"id": 239,
																	"name": "a",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 218,
																	"src": "3676:1:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "3672:5:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"id": 241,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 220,
																"src": "3681:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "3672:10:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77",
															"id": 243,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3684:35:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_9113bb53c2876a3805b2c9242029423fc540a728243ce887ab24c82cf119fba3",
																"typeString": "literal_string \"SafeMath: multiplication overflow\""
															},
															"value": "SafeMath: multiplication overflow"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_9113bb53c2876a3805b2c9242029423fc540a728243ce887ab24c82cf119fba3",
																"typeString": "literal_string \"SafeMath: multiplication overflow\""
															}
														],
														"id": 237,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "3664:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 244,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3664:56:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 245,
												"nodeType": "ExpressionStatement",
												"src": "3664:56:1"
											},
											{
												"expression": {
													"id": 246,
													"name": "c",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 232,
													"src": "3737:1:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 224,
												"id": 247,
												"nodeType": "Return",
												"src": "3730:8:1"
											}
										]
									},
									"documentation": {
										"id": 216,
										"nodeType": "StructuredDocumentation",
										"src": "3289:236:1",
										"text": " @dev Returns the multiplication of two unsigned integers, reverting on\n overflow.\n Counterpart to Solidity's `*` operator.\n Requirements:\n - Multiplication cannot overflow."
									},
									"id": 249,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mul",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 221,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 218,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 249,
												"src": "3543:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 217,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3543:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 220,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 249,
												"src": "3554:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 219,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3554:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3542:22:1"
									},
									"returnParameters": {
										"id": 224,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 223,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 249,
												"src": "3588:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 222,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3588:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3587:9:1"
									},
									"scope": 366,
									"src": "3530:215:1",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 270,
										"nodeType": "Block",
										"src": "4276:83:1",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 262,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 260,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 254,
																"src": "4294:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 261,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "4298:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "4294:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "536166654d6174683a206469766973696f6e206279207a65726f",
															"id": 263,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4301:28:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_5b7cc70dda4dc2143e5adb63bd5d1f349504f461dbdfd9bc76fac1f8ca6d019f",
																"typeString": "literal_string \"SafeMath: division by zero\""
															},
															"value": "SafeMath: division by zero"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_5b7cc70dda4dc2143e5adb63bd5d1f349504f461dbdfd9bc76fac1f8ca6d019f",
																"typeString": "literal_string \"SafeMath: division by zero\""
															}
														],
														"id": 259,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "4286:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 264,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4286:44:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 265,
												"nodeType": "ExpressionStatement",
												"src": "4286:44:1"
											},
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 268,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 266,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 252,
														"src": "4347:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "/",
													"rightExpression": {
														"id": 267,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 254,
														"src": "4351:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "4347:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 258,
												"id": 269,
												"nodeType": "Return",
												"src": "4340:12:1"
											}
										]
									},
									"documentation": {
										"id": 250,
										"nodeType": "StructuredDocumentation",
										"src": "3751:453:1",
										"text": " @dev Returns the integer division of two unsigned integers, reverting on\n division by zero. The result is rounded towards zero.\n Counterpart to Solidity's `/` operator. Note: this function uses a\n `revert` opcode (which leaves remaining gas untouched) while Solidity\n uses an invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."
									},
									"id": 271,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "div",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 255,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 252,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 271,
												"src": "4222:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 251,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4222:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 254,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 271,
												"src": "4233:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 253,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4233:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4221:22:1"
									},
									"returnParameters": {
										"id": 258,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 257,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 271,
												"src": "4267:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 256,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4267:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4266:9:1"
									},
									"scope": 366,
									"src": "4209:150:1",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 292,
										"nodeType": "Block",
										"src": "4879:81:1",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 284,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 282,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 276,
																"src": "4897:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 283,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "4901:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "4897:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "536166654d6174683a206d6f64756c6f206279207a65726f",
															"id": 285,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4904:26:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_726e51f7b81fce0a68f5f214f445e275313b20b1633f08ce954ee39abf8d7832",
																"typeString": "literal_string \"SafeMath: modulo by zero\""
															},
															"value": "SafeMath: modulo by zero"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_726e51f7b81fce0a68f5f214f445e275313b20b1633f08ce954ee39abf8d7832",
																"typeString": "literal_string \"SafeMath: modulo by zero\""
															}
														],
														"id": 281,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "4889:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 286,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4889:42:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 287,
												"nodeType": "ExpressionStatement",
												"src": "4889:42:1"
											},
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 290,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 288,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 274,
														"src": "4948:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "%",
													"rightExpression": {
														"id": 289,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 276,
														"src": "4952:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "4948:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 280,
												"id": 291,
												"nodeType": "Return",
												"src": "4941:12:1"
											}
										]
									},
									"documentation": {
										"id": 272,
										"nodeType": "StructuredDocumentation",
										"src": "4365:442:1",
										"text": " @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n reverting when dividing by zero.\n Counterpart to Solidity's `%` operator. This function uses a `revert`\n opcode (which leaves remaining gas untouched) while Solidity uses an\n invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."
									},
									"id": 293,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mod",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 277,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 274,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 293,
												"src": "4825:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 273,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4825:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 276,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 293,
												"src": "4836:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 275,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4836:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4824:22:1"
									},
									"returnParameters": {
										"id": 280,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 279,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 293,
												"src": "4870:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 278,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4870:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4869:9:1"
									},
									"scope": 366,
									"src": "4812:148:1",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 316,
										"nodeType": "Block",
										"src": "5519:68:1",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 308,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 306,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 298,
																"src": "5537:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<=",
															"rightExpression": {
																"id": 307,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 296,
																"src": "5542:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5537:6:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 309,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 300,
															"src": "5545:12:1",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 305,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "5529:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 310,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5529:29:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 311,
												"nodeType": "ExpressionStatement",
												"src": "5529:29:1"
											},
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 314,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 312,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 296,
														"src": "5575:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "-",
													"rightExpression": {
														"id": 313,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 298,
														"src": "5579:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "5575:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 304,
												"id": 315,
												"nodeType": "Return",
												"src": "5568:12:1"
											}
										]
									},
									"documentation": {
										"id": 294,
										"nodeType": "StructuredDocumentation",
										"src": "4966:453:1",
										"text": " @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n overflow (when the result is negative).\n CAUTION: This function is deprecated because it requires allocating memory for the error\n message unnecessarily. For custom revert reasons use {trySub}.\n Counterpart to Solidity's `-` operator.\n Requirements:\n - Subtraction cannot overflow."
									},
									"id": 317,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sub",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 301,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 296,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 317,
												"src": "5437:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 295,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5437:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 298,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 317,
												"src": "5448:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 297,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5448:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 300,
												"mutability": "mutable",
												"name": "errorMessage",
												"nodeType": "VariableDeclaration",
												"scope": 317,
												"src": "5459:26:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 299,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "5459:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5436:50:1"
									},
									"returnParameters": {
										"id": 304,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 303,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 317,
												"src": "5510:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 302,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5510:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5509:9:1"
									},
									"scope": 366,
									"src": "5424:163:1",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 340,
										"nodeType": "Block",
										"src": "6339:67:1",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 332,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 330,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 322,
																"src": "6357:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 331,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "6361:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "6357:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 333,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 324,
															"src": "6364:12:1",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 329,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "6349:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 334,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6349:28:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 335,
												"nodeType": "ExpressionStatement",
												"src": "6349:28:1"
											},
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 338,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 336,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 320,
														"src": "6394:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "/",
													"rightExpression": {
														"id": 337,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 322,
														"src": "6398:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "6394:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 328,
												"id": 339,
												"nodeType": "Return",
												"src": "6387:12:1"
											}
										]
									},
									"documentation": {
										"id": 318,
										"nodeType": "StructuredDocumentation",
										"src": "5593:646:1",
										"text": " @dev Returns the integer division of two unsigned integers, reverting with custom message on\n division by zero. The result is rounded towards zero.\n CAUTION: This function is deprecated because it requires allocating memory for the error\n message unnecessarily. For custom revert reasons use {tryDiv}.\n Counterpart to Solidity's `/` operator. Note: this function uses a\n `revert` opcode (which leaves remaining gas untouched) while Solidity\n uses an invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."
									},
									"id": 341,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "div",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 325,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 320,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 341,
												"src": "6257:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 319,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6257:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 322,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 341,
												"src": "6268:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 321,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6268:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 324,
												"mutability": "mutable",
												"name": "errorMessage",
												"nodeType": "VariableDeclaration",
												"scope": 341,
												"src": "6279:26:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 323,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "6279:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6256:50:1"
									},
									"returnParameters": {
										"id": 328,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 327,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 341,
												"src": "6330:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 326,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6330:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6329:9:1"
									},
									"scope": 366,
									"src": "6244:162:1",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 364,
										"nodeType": "Block",
										"src": "7147:67:1",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 356,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 354,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 346,
																"src": "7165:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 355,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "7169:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "7165:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 357,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 348,
															"src": "7172:12:1",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 353,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "7157:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 358,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7157:28:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 359,
												"nodeType": "ExpressionStatement",
												"src": "7157:28:1"
											},
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 362,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 360,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 344,
														"src": "7202:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "%",
													"rightExpression": {
														"id": 361,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 346,
														"src": "7206:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "7202:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 352,
												"id": 363,
												"nodeType": "Return",
												"src": "7195:12:1"
											}
										]
									},
									"documentation": {
										"id": 342,
										"nodeType": "StructuredDocumentation",
										"src": "6412:635:1",
										"text": " @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n reverting with custom message when dividing by zero.\n CAUTION: This function is deprecated because it requires allocating memory for the error\n message unnecessarily. For custom revert reasons use {tryMod}.\n Counterpart to Solidity's `%` operator. This function uses a `revert`\n opcode (which leaves remaining gas untouched) while Solidity uses an\n invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."
									},
									"id": 365,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mod",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 349,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 344,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 365,
												"src": "7065:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 343,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7065:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 346,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 365,
												"src": "7076:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 345,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7076:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 348,
												"mutability": "mutable",
												"name": "errorMessage",
												"nodeType": "VariableDeclaration",
												"scope": 365,
												"src": "7087:26:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 347,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "7087:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7064:50:1"
									},
									"returnParameters": {
										"id": 352,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 351,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 365,
												"src": "7138:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 350,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7138:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7137:9:1"
									},
									"scope": 366,
									"src": "7052:162:1",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 367,
							"src": "622:6594:1"
						}
					],
					"src": "33:7184:1"
				},
				"id": 1
			},
			"@openzeppelin/contracts/token/ERC20/ERC20.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/ERC20.sol",
					"exportedSymbols": {
						"Context": [
							1144
						],
						"ERC20": [
							869
						],
						"IERC20": [
							947
						],
						"SafeMath": [
							366
						]
					},
					"id": 870,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 368,
							"literals": [
								"solidity",
								"^",
								"0.7",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "33:23:2"
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/Context.sol",
							"file": "../../utils/Context.sol",
							"id": 369,
							"nodeType": "ImportDirective",
							"scope": 870,
							"sourceUnit": 1145,
							"src": "58:33:2",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"file": "./IERC20.sol",
							"id": 370,
							"nodeType": "ImportDirective",
							"scope": 870,
							"sourceUnit": 948,
							"src": "92:22:2",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/math/SafeMath.sol",
							"file": "../../math/SafeMath.sol",
							"id": 371,
							"nodeType": "ImportDirective",
							"scope": 870,
							"sourceUnit": 367,
							"src": "115:33:2",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 373,
										"name": "Context",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 1144,
										"src": "1331:7:2",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_Context_$1144",
											"typeString": "contract Context"
										}
									},
									"id": 374,
									"nodeType": "InheritanceSpecifier",
									"src": "1331:7:2"
								},
								{
									"baseName": {
										"id": 375,
										"name": "IERC20",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 947,
										"src": "1340:6:2",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IERC20_$947",
											"typeString": "contract IERC20"
										}
									},
									"id": 376,
									"nodeType": "InheritanceSpecifier",
									"src": "1340:6:2"
								}
							],
							"contractDependencies": [
								947,
								1144
							],
							"contractKind": "contract",
							"documentation": {
								"id": 372,
								"nodeType": "StructuredDocumentation",
								"src": "150:1162:2",
								"text": " @dev Implementation of the {IERC20} interface.\n This implementation is agnostic to the way tokens are created. This means\n that a supply mechanism has to be added in a derived contract using {_mint}.\n For a generic mechanism see {ERC20PresetMinterPauser}.\n TIP: For a detailed writeup see our guide\n https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n to implement supply mechanisms].\n We have followed general OpenZeppelin guidelines: functions revert instead\n of returning `false` on failure. This behavior is nonetheless conventional\n and does not conflict with the expectations of ERC20 applications.\n Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n This allows applications to reconstruct the allowance for all accounts just\n by listening to said events. Other implementations of the EIP may not emit\n these events, as it isn't required by the specification.\n Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n functions have been added to mitigate the well-known issues around setting\n allowances. See {IERC20-approve}."
							},
							"fullyImplemented": true,
							"id": 869,
							"linearizedBaseContracts": [
								869,
								947,
								1144
							],
							"name": "ERC20",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"id": 379,
									"libraryName": {
										"id": 377,
										"name": "SafeMath",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 366,
										"src": "1359:8:2",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_SafeMath_$366",
											"typeString": "library SafeMath"
										}
									},
									"nodeType": "UsingForDirective",
									"src": "1353:27:2",
									"typeName": {
										"id": 378,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1372:7:2",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									}
								},
								{
									"constant": false,
									"id": 383,
									"mutability": "mutable",
									"name": "_balances",
									"nodeType": "VariableDeclaration",
									"scope": 869,
									"src": "1386:46:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
										"typeString": "mapping(address => uint256)"
									},
									"typeName": {
										"id": 382,
										"keyType": {
											"id": 380,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1395:7:2",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "1386:28:2",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
											"typeString": "mapping(address => uint256)"
										},
										"valueType": {
											"id": 381,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "1406:7:2",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 389,
									"mutability": "mutable",
									"name": "_allowances",
									"nodeType": "VariableDeclaration",
									"scope": 869,
									"src": "1439:69:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
										"typeString": "mapping(address => mapping(address => uint256))"
									},
									"typeName": {
										"id": 388,
										"keyType": {
											"id": 384,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1448:7:2",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "1439:49:2",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
											"typeString": "mapping(address => mapping(address => uint256))"
										},
										"valueType": {
											"id": 387,
											"keyType": {
												"id": 385,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "1468:7:2",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"nodeType": "Mapping",
											"src": "1459:28:2",
											"typeDescriptions": {
												"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
												"typeString": "mapping(address => uint256)"
											},
											"valueType": {
												"id": 386,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1479:7:2",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											}
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 391,
									"mutability": "mutable",
									"name": "_totalSupply",
									"nodeType": "VariableDeclaration",
									"scope": 869,
									"src": "1515:28:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 390,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1515:7:2",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 393,
									"mutability": "mutable",
									"name": "_name",
									"nodeType": "VariableDeclaration",
									"scope": 869,
									"src": "1550:20:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_string_storage",
										"typeString": "string"
									},
									"typeName": {
										"id": 392,
										"name": "string",
										"nodeType": "ElementaryTypeName",
										"src": "1550:6:2",
										"typeDescriptions": {
											"typeIdentifier": "t_string_storage_ptr",
											"typeString": "string"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 395,
									"mutability": "mutable",
									"name": "_symbol",
									"nodeType": "VariableDeclaration",
									"scope": 869,
									"src": "1576:22:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_string_storage",
										"typeString": "string"
									},
									"typeName": {
										"id": 394,
										"name": "string",
										"nodeType": "ElementaryTypeName",
										"src": "1576:6:2",
										"typeDescriptions": {
											"typeIdentifier": "t_string_storage_ptr",
											"typeString": "string"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 397,
									"mutability": "mutable",
									"name": "_decimals",
									"nodeType": "VariableDeclaration",
									"scope": 869,
									"src": "1604:23:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint8",
										"typeString": "uint8"
									},
									"typeName": {
										"id": 396,
										"name": "uint8",
										"nodeType": "ElementaryTypeName",
										"src": "1604:5:2",
										"typeDescriptions": {
											"typeIdentifier": "t_uint8",
											"typeString": "uint8"
										}
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 417,
										"nodeType": "Block",
										"src": "2007:81:2",
										"statements": [
											{
												"expression": {
													"id": 407,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 405,
														"name": "_name",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 393,
														"src": "2017:5:2",
														"typeDescriptions": {
															"typeIdentifier": "t_string_storage",
															"typeString": "string storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 406,
														"name": "name_",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 400,
														"src": "2025:5:2",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string memory"
														}
													},
													"src": "2017:13:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"id": 408,
												"nodeType": "ExpressionStatement",
												"src": "2017:13:2"
											},
											{
												"expression": {
													"id": 411,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 409,
														"name": "_symbol",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 395,
														"src": "2040:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_string_storage",
															"typeString": "string storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 410,
														"name": "symbol_",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 402,
														"src": "2050:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string memory"
														}
													},
													"src": "2040:17:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"id": 412,
												"nodeType": "ExpressionStatement",
												"src": "2040:17:2"
											},
											{
												"expression": {
													"id": 415,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 413,
														"name": "_decimals",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 397,
														"src": "2067:9:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "3138",
														"id": 414,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2079:2:2",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_18_by_1",
															"typeString": "int_const 18"
														},
														"value": "18"
													},
													"src": "2067:14:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"id": 416,
												"nodeType": "ExpressionStatement",
												"src": "2067:14:2"
											}
										]
									},
									"documentation": {
										"id": 398,
										"nodeType": "StructuredDocumentation",
										"src": "1634:311:2",
										"text": " @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n a default value of 18.\n To select a different value for {decimals}, use {_setupDecimals}.\n All three of these values are immutable: they can only be set once during\n construction."
									},
									"id": 418,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 403,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 400,
												"mutability": "mutable",
												"name": "name_",
												"nodeType": "VariableDeclaration",
												"scope": 418,
												"src": "1963:19:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 399,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1963:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 402,
												"mutability": "mutable",
												"name": "symbol_",
												"nodeType": "VariableDeclaration",
												"scope": 418,
												"src": "1984:21:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 401,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1984:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1962:44:2"
									},
									"returnParameters": {
										"id": 404,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2007:0:2"
									},
									"scope": 869,
									"src": "1950:138:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 426,
										"nodeType": "Block",
										"src": "2213:29:2",
										"statements": [
											{
												"expression": {
													"id": 424,
													"name": "_name",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 393,
													"src": "2230:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"functionReturnParameters": 423,
												"id": 425,
												"nodeType": "Return",
												"src": "2223:12:2"
											}
										]
									},
									"documentation": {
										"id": 419,
										"nodeType": "StructuredDocumentation",
										"src": "2094:54:2",
										"text": " @dev Returns the name of the token."
									},
									"functionSelector": "06fdde03",
									"id": 427,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "name",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 420,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2166:2:2"
									},
									"returnParameters": {
										"id": 423,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 422,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 427,
												"src": "2198:13:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 421,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2198:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2197:15:2"
									},
									"scope": 869,
									"src": "2153:89:2",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 435,
										"nodeType": "Block",
										"src": "2417:31:2",
										"statements": [
											{
												"expression": {
													"id": 433,
													"name": "_symbol",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 395,
													"src": "2434:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"functionReturnParameters": 432,
												"id": 434,
												"nodeType": "Return",
												"src": "2427:14:2"
											}
										]
									},
									"documentation": {
										"id": 428,
										"nodeType": "StructuredDocumentation",
										"src": "2248:102:2",
										"text": " @dev Returns the symbol of the token, usually a shorter version of the\n name."
									},
									"functionSelector": "95d89b41",
									"id": 436,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "symbol",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 429,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2370:2:2"
									},
									"returnParameters": {
										"id": 432,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 431,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 436,
												"src": "2402:13:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 430,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2402:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2401:15:2"
									},
									"scope": 869,
									"src": "2355:93:2",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 444,
										"nodeType": "Block",
										"src": "3127:33:2",
										"statements": [
											{
												"expression": {
													"id": 442,
													"name": "_decimals",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 397,
													"src": "3144:9:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"functionReturnParameters": 441,
												"id": 443,
												"nodeType": "Return",
												"src": "3137:16:2"
											}
										]
									},
									"documentation": {
										"id": 437,
										"nodeType": "StructuredDocumentation",
										"src": "2454:612:2",
										"text": " @dev Returns the number of decimals used to get its user representation.\n For example, if `decimals` equals `2`, a balance of `505` tokens should\n be displayed to a user as `5,05` (`505 / 10 ** 2`).\n Tokens usually opt for a value of 18, imitating the relationship between\n Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n called.\n NOTE: This information is only used for _display_ purposes: it in\n no way affects any of the arithmetic of the contract, including\n {IERC20-balanceOf} and {IERC20-transfer}."
									},
									"functionSelector": "313ce567",
									"id": 445,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "decimals",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 438,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3088:2:2"
									},
									"returnParameters": {
										"id": 441,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 440,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 445,
												"src": "3120:5:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 439,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "3120:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3119:7:2"
									},
									"scope": 869,
									"src": "3071:89:2",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										878
									],
									"body": {
										"id": 454,
										"nodeType": "Block",
										"src": "3290:36:2",
										"statements": [
											{
												"expression": {
													"id": 452,
													"name": "_totalSupply",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 391,
													"src": "3307:12:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 451,
												"id": 453,
												"nodeType": "Return",
												"src": "3300:19:2"
											}
										]
									},
									"documentation": {
										"id": 446,
										"nodeType": "StructuredDocumentation",
										"src": "3166:49:2",
										"text": " @dev See {IERC20-totalSupply}."
									},
									"functionSelector": "18160ddd",
									"id": 455,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 448,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "3263:8:2"
									},
									"parameters": {
										"id": 447,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3240:2:2"
									},
									"returnParameters": {
										"id": 451,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 450,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 455,
												"src": "3281:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 449,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3281:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3280:9:2"
									},
									"scope": 869,
									"src": "3220:106:2",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										886
									],
									"body": {
										"id": 468,
										"nodeType": "Block",
										"src": "3467:42:2",
										"statements": [
											{
												"expression": {
													"baseExpression": {
														"id": 464,
														"name": "_balances",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 383,
														"src": "3484:9:2",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 466,
													"indexExpression": {
														"id": 465,
														"name": "account",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 458,
														"src": "3494:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "3484:18:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 463,
												"id": 467,
												"nodeType": "Return",
												"src": "3477:25:2"
											}
										]
									},
									"documentation": {
										"id": 456,
										"nodeType": "StructuredDocumentation",
										"src": "3332:47:2",
										"text": " @dev See {IERC20-balanceOf}."
									},
									"functionSelector": "70a08231",
									"id": 469,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 460,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "3440:8:2"
									},
									"parameters": {
										"id": 459,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 458,
												"mutability": "mutable",
												"name": "account",
												"nodeType": "VariableDeclaration",
												"scope": 469,
												"src": "3403:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 457,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3403:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3402:17:2"
									},
									"returnParameters": {
										"id": 463,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 462,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 469,
												"src": "3458:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 461,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3458:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3457:9:2"
									},
									"scope": 869,
									"src": "3384:125:2",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										896
									],
									"body": {
										"id": 489,
										"nodeType": "Block",
										"src": "3804:80:2",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 481,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1132,
																"src": "3824:10:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_payable_$",
																	"typeString": "function () view returns (address payable)"
																}
															},
															"id": 482,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3824:12:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														{
															"id": 483,
															"name": "recipient",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 472,
															"src": "3838:9:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 484,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 474,
															"src": "3849:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 480,
														"name": "_transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 690,
														"src": "3814:9:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 485,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3814:42:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 486,
												"nodeType": "ExpressionStatement",
												"src": "3814:42:2"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 487,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "3873:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 479,
												"id": 488,
												"nodeType": "Return",
												"src": "3866:11:2"
											}
										]
									},
									"documentation": {
										"id": 470,
										"nodeType": "StructuredDocumentation",
										"src": "3515:192:2",
										"text": " @dev See {IERC20-transfer}.\n Requirements:\n - `recipient` cannot be the zero address.\n - the caller must have a balance of at least `amount`."
									},
									"functionSelector": "a9059cbb",
									"id": 490,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 476,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "3780:8:2"
									},
									"parameters": {
										"id": 475,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 472,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 490,
												"src": "3730:17:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 471,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3730:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 474,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 490,
												"src": "3749:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 473,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3749:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3729:35:2"
									},
									"returnParameters": {
										"id": 479,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 478,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 490,
												"src": "3798:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 477,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "3798:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3797:6:2"
									},
									"scope": 869,
									"src": "3712:172:2",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										906
									],
									"body": {
										"id": 507,
										"nodeType": "Block",
										"src": "4040:51:2",
										"statements": [
											{
												"expression": {
													"baseExpression": {
														"baseExpression": {
															"id": 501,
															"name": "_allowances",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 389,
															"src": "4057:11:2",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
																"typeString": "mapping(address => mapping(address => uint256))"
															}
														},
														"id": 503,
														"indexExpression": {
															"id": 502,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 493,
															"src": "4069:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "4057:18:2",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 505,
													"indexExpression": {
														"id": 504,
														"name": "spender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 495,
														"src": "4076:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "4057:27:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 500,
												"id": 506,
												"nodeType": "Return",
												"src": "4050:34:2"
											}
										]
									},
									"documentation": {
										"id": 491,
										"nodeType": "StructuredDocumentation",
										"src": "3890:47:2",
										"text": " @dev See {IERC20-allowance}."
									},
									"functionSelector": "dd62ed3e",
									"id": 508,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 497,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "4013:8:2"
									},
									"parameters": {
										"id": 496,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 493,
												"mutability": "mutable",
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"scope": 508,
												"src": "3961:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 492,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3961:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 495,
												"mutability": "mutable",
												"name": "spender",
												"nodeType": "VariableDeclaration",
												"scope": 508,
												"src": "3976:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 494,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3976:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3960:32:2"
									},
									"returnParameters": {
										"id": 500,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 499,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 508,
												"src": "4031:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 498,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4031:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4030:9:2"
									},
									"scope": 869,
									"src": "3942:149:2",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										916
									],
									"body": {
										"id": 528,
										"nodeType": "Block",
										"src": "4318:77:2",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 520,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1132,
																"src": "4337:10:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_payable_$",
																	"typeString": "function () view returns (address payable)"
																}
															},
															"id": 521,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4337:12:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														{
															"id": 522,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 511,
															"src": "4351:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 523,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 513,
															"src": "4360:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 519,
														"name": "_approve",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 846,
														"src": "4328:8:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 524,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4328:39:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 525,
												"nodeType": "ExpressionStatement",
												"src": "4328:39:2"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 526,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "4384:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 518,
												"id": 527,
												"nodeType": "Return",
												"src": "4377:11:2"
											}
										]
									},
									"documentation": {
										"id": 509,
										"nodeType": "StructuredDocumentation",
										"src": "4097:127:2",
										"text": " @dev See {IERC20-approve}.\n Requirements:\n - `spender` cannot be the zero address."
									},
									"functionSelector": "095ea7b3",
									"id": 529,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 515,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "4294:8:2"
									},
									"parameters": {
										"id": 514,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 511,
												"mutability": "mutable",
												"name": "spender",
												"nodeType": "VariableDeclaration",
												"scope": 529,
												"src": "4246:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 510,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4246:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 513,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 529,
												"src": "4263:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 512,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4263:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4245:33:2"
									},
									"returnParameters": {
										"id": 518,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 517,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 529,
												"src": "4312:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 516,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4312:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4311:6:2"
									},
									"scope": 869,
									"src": "4229:166:2",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										928
									],
									"body": {
										"id": 566,
										"nodeType": "Block",
										"src": "4974:205:2",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 543,
															"name": "sender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 532,
															"src": "4994:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 544,
															"name": "recipient",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 534,
															"src": "5002:9:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 545,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 536,
															"src": "5013:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 542,
														"name": "_transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 690,
														"src": "4984:9:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 546,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4984:36:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 547,
												"nodeType": "ExpressionStatement",
												"src": "4984:36:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 549,
															"name": "sender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 532,
															"src": "5039:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 550,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1132,
																"src": "5047:10:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_payable_$",
																	"typeString": "function () view returns (address payable)"
																}
															},
															"id": 551,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5047:12:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														{
															"arguments": [
																{
																	"id": 559,
																	"name": "amount",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 536,
																	"src": "5099:6:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"hexValue": "45524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e6365",
																	"id": 560,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "string",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "5107:42:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_stringliteral_974d1b4421da69cc60b481194f0dad36a5bb4e23da810da7a7fb30cdba178330",
																		"typeString": "literal_string \"ERC20: transfer amount exceeds allowance\""
																	},
																	"value": "ERC20: transfer amount exceeds allowance"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_stringliteral_974d1b4421da69cc60b481194f0dad36a5bb4e23da810da7a7fb30cdba178330",
																		"typeString": "literal_string \"ERC20: transfer amount exceeds allowance\""
																	}
																],
																"expression": {
																	"baseExpression": {
																		"baseExpression": {
																			"id": 552,
																			"name": "_allowances",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 389,
																			"src": "5061:11:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
																				"typeString": "mapping(address => mapping(address => uint256))"
																			}
																		},
																		"id": 554,
																		"indexExpression": {
																			"id": 553,
																			"name": "sender",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 532,
																			"src": "5073:6:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "5061:19:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																			"typeString": "mapping(address => uint256)"
																		}
																	},
																	"id": 557,
																	"indexExpression": {
																		"arguments": [],
																		"expression": {
																			"argumentTypes": [],
																			"id": 555,
																			"name": "_msgSender",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1132,
																			"src": "5081:10:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_view$__$returns$_t_address_payable_$",
																				"typeString": "function () view returns (address payable)"
																			}
																		},
																		"id": 556,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "5081:12:2",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address_payable",
																			"typeString": "address payable"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "5061:33:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"id": 558,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "sub",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 317,
																"src": "5061:37:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_string_memory_ptr_$returns$_t_uint256_$bound_to$_t_uint256_$",
																	"typeString": "function (uint256,uint256,string memory) pure returns (uint256)"
																}
															},
															"id": 561,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5061:89:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 548,
														"name": "_approve",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 846,
														"src": "5030:8:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 562,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5030:121:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 563,
												"nodeType": "ExpressionStatement",
												"src": "5030:121:2"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 564,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "5168:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 541,
												"id": 565,
												"nodeType": "Return",
												"src": "5161:11:2"
											}
										]
									},
									"documentation": {
										"id": 530,
										"nodeType": "StructuredDocumentation",
										"src": "4401:456:2",
										"text": " @dev See {IERC20-transferFrom}.\n Emits an {Approval} event indicating the updated allowance. This is not\n required by the EIP. See the note at the beginning of {ERC20}.\n Requirements:\n - `sender` and `recipient` cannot be the zero address.\n - `sender` must have a balance of at least `amount`.\n - the caller must have allowance for ``sender``'s tokens of at least\n `amount`."
									},
									"functionSelector": "23b872dd",
									"id": 567,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 538,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "4950:8:2"
									},
									"parameters": {
										"id": 537,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 532,
												"mutability": "mutable",
												"name": "sender",
												"nodeType": "VariableDeclaration",
												"scope": 567,
												"src": "4884:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 531,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4884:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 534,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 567,
												"src": "4900:17:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 533,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4900:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 536,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 567,
												"src": "4919:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 535,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4919:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4883:51:2"
									},
									"returnParameters": {
										"id": 541,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 540,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 567,
												"src": "4968:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 539,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4968:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4967:6:2"
									},
									"scope": 869,
									"src": "4862:317:2",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 594,
										"nodeType": "Block",
										"src": "5668:121:2",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 578,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1132,
																"src": "5687:10:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_payable_$",
																	"typeString": "function () view returns (address payable)"
																}
															},
															"id": 579,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5687:12:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														{
															"id": 580,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 570,
															"src": "5701:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"id": 588,
																	"name": "addedValue",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 572,
																	"src": "5749:10:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"baseExpression": {
																		"baseExpression": {
																			"id": 581,
																			"name": "_allowances",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 389,
																			"src": "5710:11:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
																				"typeString": "mapping(address => mapping(address => uint256))"
																			}
																		},
																		"id": 584,
																		"indexExpression": {
																			"arguments": [],
																			"expression": {
																				"argumentTypes": [],
																				"id": 582,
																				"name": "_msgSender",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1132,
																				"src": "5722:10:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_internal_view$__$returns$_t_address_payable_$",
																					"typeString": "function () view returns (address payable)"
																				}
																			},
																			"id": 583,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "5722:12:2",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_address_payable",
																				"typeString": "address payable"
																			}
																		},
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "5710:25:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																			"typeString": "mapping(address => uint256)"
																		}
																	},
																	"id": 586,
																	"indexExpression": {
																		"id": 585,
																		"name": "spender",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 570,
																		"src": "5736:7:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "5710:34:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"id": 587,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "add",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 193,
																"src": "5710:38:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																	"typeString": "function (uint256,uint256) pure returns (uint256)"
																}
															},
															"id": 589,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5710:50:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 577,
														"name": "_approve",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 846,
														"src": "5678:8:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 590,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5678:83:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 591,
												"nodeType": "ExpressionStatement",
												"src": "5678:83:2"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 592,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "5778:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 576,
												"id": 593,
												"nodeType": "Return",
												"src": "5771:11:2"
											}
										]
									},
									"documentation": {
										"id": 568,
										"nodeType": "StructuredDocumentation",
										"src": "5185:384:2",
										"text": " @dev Atomically increases the allowance granted to `spender` by the caller.\n This is an alternative to {approve} that can be used as a mitigation for\n problems described in {IERC20-approve}.\n Emits an {Approval} event indicating the updated allowance.\n Requirements:\n - `spender` cannot be the zero address."
									},
									"functionSelector": "39509351",
									"id": 595,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "increaseAllowance",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 573,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 570,
												"mutability": "mutable",
												"name": "spender",
												"nodeType": "VariableDeclaration",
												"scope": 595,
												"src": "5601:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 569,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5601:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 572,
												"mutability": "mutable",
												"name": "addedValue",
												"nodeType": "VariableDeclaration",
												"scope": 595,
												"src": "5618:18:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 571,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5618:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5600:37:2"
									},
									"returnParameters": {
										"id": 576,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 575,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 595,
												"src": "5662:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 574,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "5662:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5661:6:2"
									},
									"scope": 869,
									"src": "5574:215:2",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 623,
										"nodeType": "Block",
										"src": "6375:167:2",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 606,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1132,
																"src": "6394:10:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_payable_$",
																	"typeString": "function () view returns (address payable)"
																}
															},
															"id": 607,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "6394:12:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														{
															"id": 608,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 598,
															"src": "6408:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"id": 616,
																	"name": "subtractedValue",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 600,
																	"src": "6456:15:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"hexValue": "45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726f",
																	"id": 617,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "string",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "6473:39:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8",
																		"typeString": "literal_string \"ERC20: decreased allowance below zero\""
																	},
																	"value": "ERC20: decreased allowance below zero"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8",
																		"typeString": "literal_string \"ERC20: decreased allowance below zero\""
																	}
																],
																"expression": {
																	"baseExpression": {
																		"baseExpression": {
																			"id": 609,
																			"name": "_allowances",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 389,
																			"src": "6417:11:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
																				"typeString": "mapping(address => mapping(address => uint256))"
																			}
																		},
																		"id": 612,
																		"indexExpression": {
																			"arguments": [],
																			"expression": {
																				"argumentTypes": [],
																				"id": 610,
																				"name": "_msgSender",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1132,
																				"src": "6429:10:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_internal_view$__$returns$_t_address_payable_$",
																					"typeString": "function () view returns (address payable)"
																				}
																			},
																			"id": 611,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "6429:12:2",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_address_payable",
																				"typeString": "address payable"
																			}
																		},
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "6417:25:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																			"typeString": "mapping(address => uint256)"
																		}
																	},
																	"id": 614,
																	"indexExpression": {
																		"id": 613,
																		"name": "spender",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 598,
																		"src": "6443:7:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "6417:34:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"id": 615,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "sub",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 317,
																"src": "6417:38:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_string_memory_ptr_$returns$_t_uint256_$bound_to$_t_uint256_$",
																	"typeString": "function (uint256,uint256,string memory) pure returns (uint256)"
																}
															},
															"id": 618,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "6417:96:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 605,
														"name": "_approve",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 846,
														"src": "6385:8:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 619,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6385:129:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 620,
												"nodeType": "ExpressionStatement",
												"src": "6385:129:2"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 621,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "6531:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 604,
												"id": 622,
												"nodeType": "Return",
												"src": "6524:11:2"
											}
										]
									},
									"documentation": {
										"id": 596,
										"nodeType": "StructuredDocumentation",
										"src": "5795:476:2",
										"text": " @dev Atomically decreases the allowance granted to `spender` by the caller.\n This is an alternative to {approve} that can be used as a mitigation for\n problems described in {IERC20-approve}.\n Emits an {Approval} event indicating the updated allowance.\n Requirements:\n - `spender` cannot be the zero address.\n - `spender` must have allowance for the caller of at least\n `subtractedValue`."
									},
									"functionSelector": "a457c2d7",
									"id": 624,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "decreaseAllowance",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 601,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 598,
												"mutability": "mutable",
												"name": "spender",
												"nodeType": "VariableDeclaration",
												"scope": 624,
												"src": "6303:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 597,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6303:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 600,
												"mutability": "mutable",
												"name": "subtractedValue",
												"nodeType": "VariableDeclaration",
												"scope": 624,
												"src": "6320:23:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 599,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6320:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6302:42:2"
									},
									"returnParameters": {
										"id": 604,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 603,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 624,
												"src": "6369:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 602,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "6369:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6368:6:2"
									},
									"scope": 869,
									"src": "6276:266:2",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 689,
										"nodeType": "Block",
										"src": "7103:443:2",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 640,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 635,
																"name": "sender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 627,
																"src": "7121:6:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 638,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "7139:1:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 637,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "7131:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 636,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "7131:7:2",
																		"typeDescriptions": {}
																	}
																},
																"id": 639,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7131:10:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"src": "7121:20:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a207472616e736665722066726f6d20746865207a65726f2061646472657373",
															"id": 641,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "7143:39:2",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea",
																"typeString": "literal_string \"ERC20: transfer from the zero address\""
															},
															"value": "ERC20: transfer from the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea",
																"typeString": "literal_string \"ERC20: transfer from the zero address\""
															}
														],
														"id": 634,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "7113:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 642,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7113:70:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 643,
												"nodeType": "ExpressionStatement",
												"src": "7113:70:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 650,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 645,
																"name": "recipient",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 629,
																"src": "7201:9:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 648,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "7222:1:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 647,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "7214:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 646,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "7214:7:2",
																		"typeDescriptions": {}
																	}
																},
																"id": 649,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7214:10:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"src": "7201:23:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a207472616e7366657220746f20746865207a65726f2061646472657373",
															"id": 651,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "7226:37:2",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f",
																"typeString": "literal_string \"ERC20: transfer to the zero address\""
															},
															"value": "ERC20: transfer to the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f",
																"typeString": "literal_string \"ERC20: transfer to the zero address\""
															}
														],
														"id": 644,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "7193:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 652,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7193:71:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 653,
												"nodeType": "ExpressionStatement",
												"src": "7193:71:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 655,
															"name": "sender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 627,
															"src": "7296:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 656,
															"name": "recipient",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 629,
															"src": "7304:9:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 657,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 631,
															"src": "7315:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 654,
														"name": "_beforeTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 868,
														"src": "7275:20:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 658,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7275:47:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 659,
												"nodeType": "ExpressionStatement",
												"src": "7275:47:2"
											},
											{
												"expression": {
													"id": 670,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 660,
															"name": "_balances",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 383,
															"src": "7333:9:2",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 662,
														"indexExpression": {
															"id": 661,
															"name": "sender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 627,
															"src": "7343:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "7333:17:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 667,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 631,
																"src": "7375:6:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"hexValue": "45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e6365",
																"id": 668,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "string",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "7383:40:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6",
																	"typeString": "literal_string \"ERC20: transfer amount exceeds balance\""
																},
																"value": "ERC20: transfer amount exceeds balance"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																{
																	"typeIdentifier": "t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6",
																	"typeString": "literal_string \"ERC20: transfer amount exceeds balance\""
																}
															],
															"expression": {
																"baseExpression": {
																	"id": 663,
																	"name": "_balances",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 383,
																	"src": "7353:9:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 665,
																"indexExpression": {
																	"id": 664,
																	"name": "sender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 627,
																	"src": "7363:6:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "7353:17:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 666,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sub",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 317,
															"src": "7353:21:2",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_string_memory_ptr_$returns$_t_uint256_$bound_to$_t_uint256_$",
																"typeString": "function (uint256,uint256,string memory) pure returns (uint256)"
															}
														},
														"id": 669,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "7353:71:2",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "7333:91:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 671,
												"nodeType": "ExpressionStatement",
												"src": "7333:91:2"
											},
											{
												"expression": {
													"id": 681,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 672,
															"name": "_balances",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 383,
															"src": "7434:9:2",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 674,
														"indexExpression": {
															"id": 673,
															"name": "recipient",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 629,
															"src": "7444:9:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "7434:20:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 679,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 631,
																"src": "7482:6:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"expression": {
																"baseExpression": {
																	"id": 675,
																	"name": "_balances",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 383,
																	"src": "7457:9:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 677,
																"indexExpression": {
																	"id": 676,
																	"name": "recipient",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 629,
																	"src": "7467:9:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "7457:20:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 678,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "add",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 193,
															"src": "7457:24:2",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																"typeString": "function (uint256,uint256) pure returns (uint256)"
															}
														},
														"id": 680,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "7457:32:2",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "7434:55:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 682,
												"nodeType": "ExpressionStatement",
												"src": "7434:55:2"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 684,
															"name": "sender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 627,
															"src": "7513:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 685,
															"name": "recipient",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 629,
															"src": "7521:9:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 686,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 631,
															"src": "7532:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 683,
														"name": "Transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 937,
														"src": "7504:8:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 687,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7504:35:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 688,
												"nodeType": "EmitStatement",
												"src": "7499:40:2"
											}
										]
									},
									"documentation": {
										"id": 625,
										"nodeType": "StructuredDocumentation",
										"src": "6548:463:2",
										"text": " @dev Moves tokens `amount` from `sender` to `recipient`.\n This is internal function is equivalent to {transfer}, and can be used to\n e.g. implement automatic token fees, slashing mechanisms, etc.\n Emits a {Transfer} event.\n Requirements:\n - `sender` cannot be the zero address.\n - `recipient` cannot be the zero address.\n - `sender` must have a balance of at least `amount`."
									},
									"id": 690,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_transfer",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 632,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 627,
												"mutability": "mutable",
												"name": "sender",
												"nodeType": "VariableDeclaration",
												"scope": 690,
												"src": "7035:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 626,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7035:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 629,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 690,
												"src": "7051:17:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 628,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7051:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 631,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 690,
												"src": "7070:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 630,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7070:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7034:51:2"
									},
									"returnParameters": {
										"id": 633,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7103:0:2"
									},
									"scope": 869,
									"src": "7016:530:2",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 744,
										"nodeType": "Block",
										"src": "7882:305:2",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 704,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 699,
																"name": "account",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 693,
																"src": "7900:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 702,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "7919:1:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 701,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "7911:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 700,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "7911:7:2",
																		"typeDescriptions": {}
																	}
																},
																"id": 703,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7911:10:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"src": "7900:21:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a206d696e7420746f20746865207a65726f2061646472657373",
															"id": 705,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "7923:33:2",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e",
																"typeString": "literal_string \"ERC20: mint to the zero address\""
															},
															"value": "ERC20: mint to the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e",
																"typeString": "literal_string \"ERC20: mint to the zero address\""
															}
														],
														"id": 698,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "7892:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 706,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7892:65:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 707,
												"nodeType": "ExpressionStatement",
												"src": "7892:65:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 711,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7997:1:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 710,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "7989:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 709,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "7989:7:2",
																	"typeDescriptions": {}
																}
															},
															"id": 712,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "7989:10:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														{
															"id": 713,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 693,
															"src": "8001:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 714,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 695,
															"src": "8010:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 708,
														"name": "_beforeTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 868,
														"src": "7968:20:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 715,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7968:49:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 716,
												"nodeType": "ExpressionStatement",
												"src": "7968:49:2"
											},
											{
												"expression": {
													"id": 722,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 717,
														"name": "_totalSupply",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 391,
														"src": "8028:12:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 720,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 695,
																"src": "8060:6:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"expression": {
																"id": 718,
																"name": "_totalSupply",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 391,
																"src": "8043:12:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 719,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "add",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 193,
															"src": "8043:16:2",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																"typeString": "function (uint256,uint256) pure returns (uint256)"
															}
														},
														"id": 721,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "8043:24:2",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "8028:39:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 723,
												"nodeType": "ExpressionStatement",
												"src": "8028:39:2"
											},
											{
												"expression": {
													"id": 733,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 724,
															"name": "_balances",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 383,
															"src": "8077:9:2",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 726,
														"indexExpression": {
															"id": 725,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 693,
															"src": "8087:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "8077:18:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 731,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 695,
																"src": "8121:6:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"expression": {
																"baseExpression": {
																	"id": 727,
																	"name": "_balances",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 383,
																	"src": "8098:9:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 729,
																"indexExpression": {
																	"id": 728,
																	"name": "account",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 693,
																	"src": "8108:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "8098:18:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 730,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "add",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 193,
															"src": "8098:22:2",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																"typeString": "function (uint256,uint256) pure returns (uint256)"
															}
														},
														"id": 732,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "8098:30:2",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "8077:51:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 734,
												"nodeType": "ExpressionStatement",
												"src": "8077:51:2"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 738,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8160:1:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 737,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "8152:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 736,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "8152:7:2",
																	"typeDescriptions": {}
																}
															},
															"id": 739,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8152:10:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														{
															"id": 740,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 693,
															"src": "8164:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 741,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 695,
															"src": "8173:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 735,
														"name": "Transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 937,
														"src": "8143:8:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 742,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8143:37:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 743,
												"nodeType": "EmitStatement",
												"src": "8138:42:2"
											}
										]
									},
									"documentation": {
										"id": 691,
										"nodeType": "StructuredDocumentation",
										"src": "7552:260:2",
										"text": "@dev Creates `amount` tokens and assigns them to `account`, increasing\n the total supply.\n Emits a {Transfer} event with `from` set to the zero address.\n Requirements:\n - `to` cannot be the zero address."
									},
									"id": 745,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_mint",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 696,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 693,
												"mutability": "mutable",
												"name": "account",
												"nodeType": "VariableDeclaration",
												"scope": 745,
												"src": "7832:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 692,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7832:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 695,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 745,
												"src": "7849:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 694,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7849:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7831:33:2"
									},
									"returnParameters": {
										"id": 697,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7882:0:2"
									},
									"scope": 869,
									"src": "7817:370:2",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 800,
										"nodeType": "Block",
										"src": "8572:345:2",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 759,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 754,
																"name": "account",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 748,
																"src": "8590:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 757,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "8609:1:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 756,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "8601:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 755,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "8601:7:2",
																		"typeDescriptions": {}
																	}
																},
																"id": 758,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8601:10:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"src": "8590:21:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a206275726e2066726f6d20746865207a65726f2061646472657373",
															"id": 760,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "8613:35:2",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f",
																"typeString": "literal_string \"ERC20: burn from the zero address\""
															},
															"value": "ERC20: burn from the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f",
																"typeString": "literal_string \"ERC20: burn from the zero address\""
															}
														],
														"id": 753,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "8582:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 761,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8582:67:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 762,
												"nodeType": "ExpressionStatement",
												"src": "8582:67:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 764,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 748,
															"src": "8681:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 767,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8698:1:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 766,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "8690:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 765,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "8690:7:2",
																	"typeDescriptions": {}
																}
															},
															"id": 768,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8690:10:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														{
															"id": 769,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 750,
															"src": "8702:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 763,
														"name": "_beforeTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 868,
														"src": "8660:20:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 770,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8660:49:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 771,
												"nodeType": "ExpressionStatement",
												"src": "8660:49:2"
											},
											{
												"expression": {
													"id": 782,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 772,
															"name": "_balances",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 383,
															"src": "8720:9:2",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 774,
														"indexExpression": {
															"id": 773,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 748,
															"src": "8730:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "8720:18:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 779,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 750,
																"src": "8764:6:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"hexValue": "45524332303a206275726e20616d6f756e7420657863656564732062616c616e6365",
																"id": 780,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "string",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "8772:36:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd",
																	"typeString": "literal_string \"ERC20: burn amount exceeds balance\""
																},
																"value": "ERC20: burn amount exceeds balance"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																{
																	"typeIdentifier": "t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd",
																	"typeString": "literal_string \"ERC20: burn amount exceeds balance\""
																}
															],
															"expression": {
																"baseExpression": {
																	"id": 775,
																	"name": "_balances",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 383,
																	"src": "8741:9:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 777,
																"indexExpression": {
																	"id": 776,
																	"name": "account",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 748,
																	"src": "8751:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "8741:18:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 778,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sub",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 317,
															"src": "8741:22:2",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_string_memory_ptr_$returns$_t_uint256_$bound_to$_t_uint256_$",
																"typeString": "function (uint256,uint256,string memory) pure returns (uint256)"
															}
														},
														"id": 781,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "8741:68:2",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "8720:89:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 783,
												"nodeType": "ExpressionStatement",
												"src": "8720:89:2"
											},
											{
												"expression": {
													"id": 789,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 784,
														"name": "_totalSupply",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 391,
														"src": "8819:12:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 787,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 750,
																"src": "8851:6:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"expression": {
																"id": 785,
																"name": "_totalSupply",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 391,
																"src": "8834:12:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 786,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sub",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 215,
															"src": "8834:16:2",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																"typeString": "function (uint256,uint256) pure returns (uint256)"
															}
														},
														"id": 788,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "8834:24:2",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "8819:39:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 790,
												"nodeType": "ExpressionStatement",
												"src": "8819:39:2"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 792,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 748,
															"src": "8882:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 795,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8899:1:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 794,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "8891:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 793,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "8891:7:2",
																	"typeDescriptions": {}
																}
															},
															"id": 796,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8891:10:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														{
															"id": 797,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 750,
															"src": "8903:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 791,
														"name": "Transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 937,
														"src": "8873:8:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 798,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8873:37:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 799,
												"nodeType": "EmitStatement",
												"src": "8868:42:2"
											}
										]
									},
									"documentation": {
										"id": 746,
										"nodeType": "StructuredDocumentation",
										"src": "8193:309:2",
										"text": " @dev Destroys `amount` tokens from `account`, reducing the\n total supply.\n Emits a {Transfer} event with `to` set to the zero address.\n Requirements:\n - `account` cannot be the zero address.\n - `account` must have at least `amount` tokens."
									},
									"id": 801,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_burn",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 751,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 748,
												"mutability": "mutable",
												"name": "account",
												"nodeType": "VariableDeclaration",
												"scope": 801,
												"src": "8522:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 747,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8522:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 750,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 801,
												"src": "8539:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 749,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8539:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8521:33:2"
									},
									"returnParameters": {
										"id": 752,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8572:0:2"
									},
									"scope": 869,
									"src": "8507:410:2",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 845,
										"nodeType": "Block",
										"src": "9423:257:2",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 817,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 812,
																"name": "owner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 804,
																"src": "9441:5:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 815,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "9458:1:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 814,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "9450:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 813,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "9450:7:2",
																		"typeDescriptions": {}
																	}
																},
																"id": 816,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "9450:10:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"src": "9441:19:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a20617070726f76652066726f6d20746865207a65726f2061646472657373",
															"id": 818,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "9462:38:2",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208",
																"typeString": "literal_string \"ERC20: approve from the zero address\""
															},
															"value": "ERC20: approve from the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208",
																"typeString": "literal_string \"ERC20: approve from the zero address\""
															}
														],
														"id": 811,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "9433:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 819,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9433:68:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 820,
												"nodeType": "ExpressionStatement",
												"src": "9433:68:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 827,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 822,
																"name": "spender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 806,
																"src": "9519:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 825,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "9538:1:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 824,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "9530:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 823,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "9530:7:2",
																		"typeDescriptions": {}
																	}
																},
																"id": 826,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "9530:10:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"src": "9519:21:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a20617070726f766520746f20746865207a65726f2061646472657373",
															"id": 828,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "9542:36:2",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029",
																"typeString": "literal_string \"ERC20: approve to the zero address\""
															},
															"value": "ERC20: approve to the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029",
																"typeString": "literal_string \"ERC20: approve to the zero address\""
															}
														],
														"id": 821,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "9511:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 829,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9511:68:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 830,
												"nodeType": "ExpressionStatement",
												"src": "9511:68:2"
											},
											{
												"expression": {
													"id": 837,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"baseExpression": {
																"id": 831,
																"name": "_allowances",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 389,
																"src": "9590:11:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
																	"typeString": "mapping(address => mapping(address => uint256))"
																}
															},
															"id": 834,
															"indexExpression": {
																"id": 832,
																"name": "owner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 804,
																"src": "9602:5:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "9590:18:2",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 835,
														"indexExpression": {
															"id": 833,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 806,
															"src": "9609:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "9590:27:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 836,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 808,
														"src": "9620:6:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "9590:36:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 838,
												"nodeType": "ExpressionStatement",
												"src": "9590:36:2"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 840,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 804,
															"src": "9650:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 841,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 806,
															"src": "9657:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 842,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 808,
															"src": "9666:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 839,
														"name": "Approval",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 946,
														"src": "9641:8:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 843,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9641:32:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 844,
												"nodeType": "EmitStatement",
												"src": "9636:37:2"
											}
										]
									},
									"documentation": {
										"id": 802,
										"nodeType": "StructuredDocumentation",
										"src": "8923:412:2",
										"text": " @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n This internal function is equivalent to `approve`, and can be used to\n e.g. set automatic allowances for certain subsystems, etc.\n Emits an {Approval} event.\n Requirements:\n - `owner` cannot be the zero address.\n - `spender` cannot be the zero address."
									},
									"id": 846,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_approve",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 809,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 804,
												"mutability": "mutable",
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"scope": 846,
												"src": "9358:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 803,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9358:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 806,
												"mutability": "mutable",
												"name": "spender",
												"nodeType": "VariableDeclaration",
												"scope": 846,
												"src": "9373:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 805,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9373:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 808,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 846,
												"src": "9390:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 807,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9390:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9357:48:2"
									},
									"returnParameters": {
										"id": 810,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9423:0:2"
									},
									"scope": 869,
									"src": "9340:340:2",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 856,
										"nodeType": "Block",
										"src": "10061:38:2",
										"statements": [
											{
												"expression": {
													"id": 854,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 852,
														"name": "_decimals",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 397,
														"src": "10071:9:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 853,
														"name": "decimals_",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 849,
														"src": "10083:9:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"src": "10071:21:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"id": 855,
												"nodeType": "ExpressionStatement",
												"src": "10071:21:2"
											}
										]
									},
									"documentation": {
										"id": 847,
										"nodeType": "StructuredDocumentation",
										"src": "9686:312:2",
										"text": " @dev Sets {decimals} to a value other than the default one of 18.\n WARNING: This function should only be called from the constructor. Most\n applications that interact with token contracts will not expect\n {decimals} to ever change, and may work incorrectly if it does."
									},
									"id": 857,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_setupDecimals",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 850,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 849,
												"mutability": "mutable",
												"name": "decimals_",
												"nodeType": "VariableDeclaration",
												"scope": 857,
												"src": "10027:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 848,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "10027:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10026:17:2"
									},
									"returnParameters": {
										"id": 851,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10061:0:2"
									},
									"scope": 869,
									"src": "10003:96:2",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 867,
										"nodeType": "Block",
										"src": "10775:3:2",
										"statements": []
									},
									"documentation": {
										"id": 858,
										"nodeType": "StructuredDocumentation",
										"src": "10105:576:2",
										"text": " @dev Hook that is called before any transfer of tokens. This includes\n minting and burning.\n Calling conditions:\n - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n will be to transferred to `to`.\n - when `from` is zero, `amount` tokens will be minted for `to`.\n - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n - `from` and `to` are never both zero.\n To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks]."
									},
									"id": 868,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_beforeTokenTransfer",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 865,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 860,
												"mutability": "mutable",
												"name": "from",
												"nodeType": "VariableDeclaration",
												"scope": 868,
												"src": "10716:12:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 859,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10716:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 862,
												"mutability": "mutable",
												"name": "to",
												"nodeType": "VariableDeclaration",
												"scope": 868,
												"src": "10730:10:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 861,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10730:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 864,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 868,
												"src": "10742:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 863,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10742:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10715:42:2"
									},
									"returnParameters": {
										"id": 866,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10775:0:2"
									},
									"scope": 869,
									"src": "10686:92:2",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 870,
							"src": "1313:9467:2"
						}
					],
					"src": "33:10748:2"
				},
				"id": 2
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
					"exportedSymbols": {
						"IERC20": [
							947
						]
					},
					"id": 948,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 871,
							"literals": [
								"solidity",
								"^",
								"0.7",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "33:23:3"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 872,
								"nodeType": "StructuredDocumentation",
								"src": "58:70:3",
								"text": " @dev Interface of the ERC20 standard as defined in the EIP."
							},
							"fullyImplemented": false,
							"id": 947,
							"linearizedBaseContracts": [
								947
							],
							"name": "IERC20",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 873,
										"nodeType": "StructuredDocumentation",
										"src": "152:66:3",
										"text": " @dev Returns the amount of tokens in existence."
									},
									"functionSelector": "18160ddd",
									"id": 878,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 874,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "243:2:3"
									},
									"returnParameters": {
										"id": 877,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 876,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 878,
												"src": "269:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 875,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "269:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "268:9:3"
									},
									"scope": 947,
									"src": "223:55:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 879,
										"nodeType": "StructuredDocumentation",
										"src": "284:72:3",
										"text": " @dev Returns the amount of tokens owned by `account`."
									},
									"functionSelector": "70a08231",
									"id": 886,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 882,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 881,
												"mutability": "mutable",
												"name": "account",
												"nodeType": "VariableDeclaration",
												"scope": 886,
												"src": "380:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 880,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "380:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "379:17:3"
									},
									"returnParameters": {
										"id": 885,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 884,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 886,
												"src": "420:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 883,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "420:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "419:9:3"
									},
									"scope": 947,
									"src": "361:68:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 887,
										"nodeType": "StructuredDocumentation",
										"src": "435:209:3",
										"text": " @dev Moves `amount` tokens from the caller's account to `recipient`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "a9059cbb",
									"id": 896,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 892,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 889,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 896,
												"src": "667:17:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 888,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "667:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 891,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 896,
												"src": "686:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 890,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "686:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "666:35:3"
									},
									"returnParameters": {
										"id": 895,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 894,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 896,
												"src": "720:4:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 893,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "720:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "719:6:3"
									},
									"scope": 947,
									"src": "649:77:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 897,
										"nodeType": "StructuredDocumentation",
										"src": "732:264:3",
										"text": " @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."
									},
									"functionSelector": "dd62ed3e",
									"id": 906,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 902,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 899,
												"mutability": "mutable",
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"scope": 906,
												"src": "1020:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 898,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1020:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 901,
												"mutability": "mutable",
												"name": "spender",
												"nodeType": "VariableDeclaration",
												"scope": 906,
												"src": "1035:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 900,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1035:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1019:32:3"
									},
									"returnParameters": {
										"id": 905,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 904,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 906,
												"src": "1075:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 903,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1075:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1074:9:3"
									},
									"scope": 947,
									"src": "1001:83:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 907,
										"nodeType": "StructuredDocumentation",
										"src": "1090:642:3",
										"text": " @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."
									},
									"functionSelector": "095ea7b3",
									"id": 916,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 912,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 909,
												"mutability": "mutable",
												"name": "spender",
												"nodeType": "VariableDeclaration",
												"scope": 916,
												"src": "1754:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 908,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1754:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 911,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 916,
												"src": "1771:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 910,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1771:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1753:33:3"
									},
									"returnParameters": {
										"id": 915,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 914,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 916,
												"src": "1805:4:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 913,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1805:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1804:6:3"
									},
									"scope": 947,
									"src": "1737:74:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 917,
										"nodeType": "StructuredDocumentation",
										"src": "1817:296:3",
										"text": " @dev Moves `amount` tokens from `sender` to `recipient` using the\n allowance mechanism. `amount` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "23b872dd",
									"id": 928,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 924,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 919,
												"mutability": "mutable",
												"name": "sender",
												"nodeType": "VariableDeclaration",
												"scope": 928,
												"src": "2140:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 918,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2140:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 921,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 928,
												"src": "2156:17:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 920,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2156:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 923,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 928,
												"src": "2175:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 922,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2175:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2139:51:3"
									},
									"returnParameters": {
										"id": 927,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 926,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 928,
												"src": "2209:4:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 925,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2209:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2208:6:3"
									},
									"scope": 947,
									"src": "2118:97:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 929,
										"nodeType": "StructuredDocumentation",
										"src": "2221:158:3",
										"text": " @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."
									},
									"id": 937,
									"name": "Transfer",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 936,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 931,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nodeType": "VariableDeclaration",
												"scope": 937,
												"src": "2399:20:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 930,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2399:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 933,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nodeType": "VariableDeclaration",
												"scope": 937,
												"src": "2421:18:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 932,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2421:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 935,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 937,
												"src": "2441:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 934,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2441:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2398:57:3"
									},
									"src": "2384:72:3"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 938,
										"nodeType": "StructuredDocumentation",
										"src": "2462:148:3",
										"text": " @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."
									},
									"id": 946,
									"name": "Approval",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 945,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 940,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"scope": 946,
												"src": "2630:21:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 939,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2630:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 942,
												"indexed": true,
												"mutability": "mutable",
												"name": "spender",
												"nodeType": "VariableDeclaration",
												"scope": 946,
												"src": "2653:23:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 941,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2653:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 944,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 946,
												"src": "2678:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 943,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2678:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2629:63:3"
									},
									"src": "2615:78:3"
								}
							],
							"scope": 948,
							"src": "129:2566:3"
						}
					],
					"src": "33:2663:3"
				},
				"id": 3
			},
			"@openzeppelin/contracts/token/ERC721/IERC721.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC721/IERC721.sol",
					"exportedSymbols": {
						"IERC165": [
							11
						],
						"IERC721": [
							1063
						]
					},
					"id": 1064,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 949,
							"literals": [
								"solidity",
								"^",
								"0.7",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "33:23:4"
						},
						{
							"absolutePath": "@openzeppelin/contracts/introspection/IERC165.sol",
							"file": "../../introspection/IERC165.sol",
							"id": 950,
							"nodeType": "ImportDirective",
							"scope": 1064,
							"sourceUnit": 12,
							"src": "58:41:4",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 952,
										"name": "IERC165",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 11,
										"src": "190:7:4",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IERC165_$11",
											"typeString": "contract IERC165"
										}
									},
									"id": 953,
									"nodeType": "InheritanceSpecifier",
									"src": "190:7:4"
								}
							],
							"contractDependencies": [
								11
							],
							"contractKind": "interface",
							"documentation": {
								"id": 951,
								"nodeType": "StructuredDocumentation",
								"src": "101:67:4",
								"text": " @dev Required interface of an ERC721 compliant contract."
							},
							"fullyImplemented": false,
							"id": 1063,
							"linearizedBaseContracts": [
								1063,
								11
							],
							"name": "IERC721",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 954,
										"nodeType": "StructuredDocumentation",
										"src": "204:88:4",
										"text": " @dev Emitted when `tokenId` token is transferred from `from` to `to`."
									},
									"id": 962,
									"name": "Transfer",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 961,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 956,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nodeType": "VariableDeclaration",
												"scope": 962,
												"src": "312:20:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 955,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "312:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 958,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nodeType": "VariableDeclaration",
												"scope": 962,
												"src": "334:18:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 957,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "334:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 960,
												"indexed": true,
												"mutability": "mutable",
												"name": "tokenId",
												"nodeType": "VariableDeclaration",
												"scope": 962,
												"src": "354:23:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 959,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "354:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "311:67:4"
									},
									"src": "297:82:4"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 963,
										"nodeType": "StructuredDocumentation",
										"src": "385:94:4",
										"text": " @dev Emitted when `owner` enables `approved` to manage the `tokenId` token."
									},
									"id": 971,
									"name": "Approval",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 970,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 965,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"scope": 971,
												"src": "499:21:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 964,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "499:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 967,
												"indexed": true,
												"mutability": "mutable",
												"name": "approved",
												"nodeType": "VariableDeclaration",
												"scope": 971,
												"src": "522:24:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 966,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "522:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 969,
												"indexed": true,
												"mutability": "mutable",
												"name": "tokenId",
												"nodeType": "VariableDeclaration",
												"scope": 971,
												"src": "548:23:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 968,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "548:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "498:74:4"
									},
									"src": "484:89:4"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 972,
										"nodeType": "StructuredDocumentation",
										"src": "579:117:4",
										"text": " @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
									},
									"id": 980,
									"name": "ApprovalForAll",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 979,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 974,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"scope": 980,
												"src": "722:21:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 973,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "722:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 976,
												"indexed": true,
												"mutability": "mutable",
												"name": "operator",
												"nodeType": "VariableDeclaration",
												"scope": 980,
												"src": "745:24:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 975,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "745:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 978,
												"indexed": false,
												"mutability": "mutable",
												"name": "approved",
												"nodeType": "VariableDeclaration",
												"scope": 980,
												"src": "771:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 977,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "771:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "721:64:4"
									},
									"src": "701:85:4"
								},
								{
									"documentation": {
										"id": 981,
										"nodeType": "StructuredDocumentation",
										"src": "792:76:4",
										"text": " @dev Returns the number of tokens in ``owner``'s account."
									},
									"functionSelector": "70a08231",
									"id": 988,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 984,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 983,
												"mutability": "mutable",
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"scope": 988,
												"src": "892:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 982,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "892:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "891:15:4"
									},
									"returnParameters": {
										"id": 987,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 986,
												"mutability": "mutable",
												"name": "balance",
												"nodeType": "VariableDeclaration",
												"scope": 988,
												"src": "930:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 985,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "930:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "929:17:4"
									},
									"scope": 1063,
									"src": "873:74:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 989,
										"nodeType": "StructuredDocumentation",
										"src": "953:131:4",
										"text": " @dev Returns the owner of the `tokenId` token.\n Requirements:\n - `tokenId` must exist."
									},
									"functionSelector": "6352211e",
									"id": 996,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "ownerOf",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 992,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 991,
												"mutability": "mutable",
												"name": "tokenId",
												"nodeType": "VariableDeclaration",
												"scope": 996,
												"src": "1106:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 990,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1106:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1105:17:4"
									},
									"returnParameters": {
										"id": 995,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 994,
												"mutability": "mutable",
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"scope": 996,
												"src": "1146:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 993,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1146:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1145:15:4"
									},
									"scope": 1063,
									"src": "1089:72:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 997,
										"nodeType": "StructuredDocumentation",
										"src": "1167:690:4",
										"text": " @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n are aware of the ERC721 protocol to prevent tokens from being forever locked.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."
									},
									"functionSelector": "42842e0e",
									"id": 1006,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferFrom",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1004,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 999,
												"mutability": "mutable",
												"name": "from",
												"nodeType": "VariableDeclaration",
												"scope": 1006,
												"src": "1888:12:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 998,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1888:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1001,
												"mutability": "mutable",
												"name": "to",
												"nodeType": "VariableDeclaration",
												"scope": 1006,
												"src": "1902:10:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1000,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1902:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1003,
												"mutability": "mutable",
												"name": "tokenId",
												"nodeType": "VariableDeclaration",
												"scope": 1006,
												"src": "1914:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1002,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1914:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1887:43:4"
									},
									"returnParameters": {
										"id": 1005,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1939:0:4"
									},
									"scope": 1063,
									"src": "1862:78:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1007,
										"nodeType": "StructuredDocumentation",
										"src": "1946:504:4",
										"text": " @dev Transfers `tokenId` token from `from` to `to`.\n WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must be owned by `from`.\n - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n Emits a {Transfer} event."
									},
									"functionSelector": "23b872dd",
									"id": 1016,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1014,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1009,
												"mutability": "mutable",
												"name": "from",
												"nodeType": "VariableDeclaration",
												"scope": 1016,
												"src": "2477:12:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1008,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2477:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1011,
												"mutability": "mutable",
												"name": "to",
												"nodeType": "VariableDeclaration",
												"scope": 1016,
												"src": "2491:10:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1010,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2491:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1013,
												"mutability": "mutable",
												"name": "tokenId",
												"nodeType": "VariableDeclaration",
												"scope": 1016,
												"src": "2503:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1012,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2503:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2476:43:4"
									},
									"returnParameters": {
										"id": 1015,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2528:0:4"
									},
									"scope": 1063,
									"src": "2455:74:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1017,
										"nodeType": "StructuredDocumentation",
										"src": "2535:452:4",
										"text": " @dev Gives permission to `to` to transfer `tokenId` token to another account.\n The approval is cleared when the token is transferred.\n Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n Requirements:\n - The caller must own the token or be an approved operator.\n - `tokenId` must exist.\n Emits an {Approval} event."
									},
									"functionSelector": "095ea7b3",
									"id": 1024,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1022,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1019,
												"mutability": "mutable",
												"name": "to",
												"nodeType": "VariableDeclaration",
												"scope": 1024,
												"src": "3009:10:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1018,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3009:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1021,
												"mutability": "mutable",
												"name": "tokenId",
												"nodeType": "VariableDeclaration",
												"scope": 1024,
												"src": "3021:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1020,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3021:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3008:29:4"
									},
									"returnParameters": {
										"id": 1023,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3046:0:4"
									},
									"scope": 1063,
									"src": "2992:55:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1025,
										"nodeType": "StructuredDocumentation",
										"src": "3053:139:4",
										"text": " @dev Returns the account approved for `tokenId` token.\n Requirements:\n - `tokenId` must exist."
									},
									"functionSelector": "081812fc",
									"id": 1032,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getApproved",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1028,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1027,
												"mutability": "mutable",
												"name": "tokenId",
												"nodeType": "VariableDeclaration",
												"scope": 1032,
												"src": "3218:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1026,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3218:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3217:17:4"
									},
									"returnParameters": {
										"id": 1031,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1030,
												"mutability": "mutable",
												"name": "operator",
												"nodeType": "VariableDeclaration",
												"scope": 1032,
												"src": "3258:16:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1029,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3258:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3257:18:4"
									},
									"scope": 1063,
									"src": "3197:79:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1033,
										"nodeType": "StructuredDocumentation",
										"src": "3282:309:4",
										"text": " @dev Approve or remove `operator` as an operator for the caller.\n Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n Requirements:\n - The `operator` cannot be the caller.\n Emits an {ApprovalForAll} event."
									},
									"functionSelector": "a22cb465",
									"id": 1040,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setApprovalForAll",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1038,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1035,
												"mutability": "mutable",
												"name": "operator",
												"nodeType": "VariableDeclaration",
												"scope": 1040,
												"src": "3623:16:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1034,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3623:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1037,
												"mutability": "mutable",
												"name": "_approved",
												"nodeType": "VariableDeclaration",
												"scope": 1040,
												"src": "3641:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1036,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "3641:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3622:34:4"
									},
									"returnParameters": {
										"id": 1039,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3665:0:4"
									},
									"scope": 1063,
									"src": "3596:70:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1041,
										"nodeType": "StructuredDocumentation",
										"src": "3672:138:4",
										"text": " @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n See {setApprovalForAll}"
									},
									"functionSelector": "e985e9c5",
									"id": 1050,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "isApprovedForAll",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1046,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1043,
												"mutability": "mutable",
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"scope": 1050,
												"src": "3841:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1042,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3841:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1045,
												"mutability": "mutable",
												"name": "operator",
												"nodeType": "VariableDeclaration",
												"scope": 1050,
												"src": "3856:16:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1044,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3856:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3840:33:4"
									},
									"returnParameters": {
										"id": 1049,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1048,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1050,
												"src": "3897:4:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1047,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "3897:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3896:6:4"
									},
									"scope": 1063,
									"src": "3815:88:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1051,
										"nodeType": "StructuredDocumentation",
										"src": "3909:568:4",
										"text": " @dev Safely transfers `tokenId` token from `from` to `to`.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."
									},
									"functionSelector": "b88d4fde",
									"id": 1062,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferFrom",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1060,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1053,
												"mutability": "mutable",
												"name": "from",
												"nodeType": "VariableDeclaration",
												"scope": 1062,
												"src": "4508:12:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1052,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4508:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1055,
												"mutability": "mutable",
												"name": "to",
												"nodeType": "VariableDeclaration",
												"scope": 1062,
												"src": "4522:10:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1054,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4522:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1057,
												"mutability": "mutable",
												"name": "tokenId",
												"nodeType": "VariableDeclaration",
												"scope": 1062,
												"src": "4534:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1056,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4534:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1059,
												"mutability": "mutable",
												"name": "data",
												"nodeType": "VariableDeclaration",
												"scope": 1062,
												"src": "4551:19:4",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1058,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4551:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4507:64:4"
									},
									"returnParameters": {
										"id": 1061,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4580:0:4"
									},
									"scope": 1063,
									"src": "4482:99:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1064,
							"src": "169:4414:4"
						}
					],
					"src": "33:4551:4"
				},
				"id": 4
			},
			"@openzeppelin/contracts/token/ERC721/IERC721Enumerable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC721/IERC721Enumerable.sol",
					"exportedSymbols": {
						"IERC165": [
							11
						],
						"IERC721": [
							1063
						],
						"IERC721Enumerable": [
							1094
						]
					},
					"id": 1095,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1065,
							"literals": [
								"solidity",
								"^",
								"0.7",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "33:23:5"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC721/IERC721.sol",
							"file": "./IERC721.sol",
							"id": 1066,
							"nodeType": "ImportDirective",
							"scope": 1095,
							"sourceUnit": 1064,
							"src": "58:23:5",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 1068,
										"name": "IERC721",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 1063,
										"src": "251:7:5",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IERC721_$1063",
											"typeString": "contract IERC721"
										}
									},
									"id": 1069,
									"nodeType": "InheritanceSpecifier",
									"src": "251:7:5"
								}
							],
							"contractDependencies": [
								11,
								1063
							],
							"contractKind": "interface",
							"documentation": {
								"id": 1067,
								"nodeType": "StructuredDocumentation",
								"src": "83:136:5",
								"text": " @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n @dev See https://eips.ethereum.org/EIPS/eip-721"
							},
							"fullyImplemented": false,
							"id": 1094,
							"linearizedBaseContracts": [
								1094,
								1063,
								11
							],
							"name": "IERC721Enumerable",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 1070,
										"nodeType": "StructuredDocumentation",
										"src": "266:82:5",
										"text": " @dev Returns the total amount of tokens stored by the contract."
									},
									"functionSelector": "18160ddd",
									"id": 1075,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1071,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "373:2:5"
									},
									"returnParameters": {
										"id": 1074,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1073,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1075,
												"src": "399:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1072,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "399:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "398:9:5"
									},
									"scope": 1094,
									"src": "353:55:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1076,
										"nodeType": "StructuredDocumentation",
										"src": "414:171:5",
										"text": " @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n Use along with {balanceOf} to enumerate all of ``owner``'s tokens."
									},
									"functionSelector": "2f745c59",
									"id": 1085,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "tokenOfOwnerByIndex",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1081,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1078,
												"mutability": "mutable",
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"scope": 1085,
												"src": "619:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1077,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "619:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1080,
												"mutability": "mutable",
												"name": "index",
												"nodeType": "VariableDeclaration",
												"scope": 1085,
												"src": "634:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1079,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "634:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "618:30:5"
									},
									"returnParameters": {
										"id": 1084,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1083,
												"mutability": "mutable",
												"name": "tokenId",
												"nodeType": "VariableDeclaration",
												"scope": 1085,
												"src": "672:15:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1082,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "672:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "671:17:5"
									},
									"scope": 1094,
									"src": "590:99:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1086,
										"nodeType": "StructuredDocumentation",
										"src": "695:164:5",
										"text": " @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n Use along with {totalSupply} to enumerate all tokens."
									},
									"functionSelector": "4f6ccce7",
									"id": 1093,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "tokenByIndex",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1089,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1088,
												"mutability": "mutable",
												"name": "index",
												"nodeType": "VariableDeclaration",
												"scope": 1093,
												"src": "886:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1087,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "886:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "885:15:5"
									},
									"returnParameters": {
										"id": 1092,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1091,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1093,
												"src": "924:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1090,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "924:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "923:9:5"
									},
									"scope": 1094,
									"src": "864:69:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1095,
							"src": "220:715:5"
						}
					],
					"src": "33:903:5"
				},
				"id": 5
			},
			"@openzeppelin/contracts/token/ERC721/IERC721Metadata.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC721/IERC721Metadata.sol",
					"exportedSymbols": {
						"IERC165": [
							11
						],
						"IERC721": [
							1063
						],
						"IERC721Metadata": [
							1121
						]
					},
					"id": 1122,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1096,
							"literals": [
								"solidity",
								"^",
								"0.7",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "33:23:6"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC721/IERC721.sol",
							"file": "./IERC721.sol",
							"id": 1097,
							"nodeType": "ImportDirective",
							"scope": 1122,
							"sourceUnit": 1064,
							"src": "58:23:6",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 1099,
										"name": "IERC721",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 1063,
										"src": "246:7:6",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IERC721_$1063",
											"typeString": "contract IERC721"
										}
									},
									"id": 1100,
									"nodeType": "InheritanceSpecifier",
									"src": "246:7:6"
								}
							],
							"contractDependencies": [
								11,
								1063
							],
							"contractKind": "interface",
							"documentation": {
								"id": 1098,
								"nodeType": "StructuredDocumentation",
								"src": "83:133:6",
								"text": " @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n @dev See https://eips.ethereum.org/EIPS/eip-721"
							},
							"fullyImplemented": false,
							"id": 1121,
							"linearizedBaseContracts": [
								1121,
								1063,
								11
							],
							"name": "IERC721Metadata",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 1101,
										"nodeType": "StructuredDocumentation",
										"src": "261:58:6",
										"text": " @dev Returns the token collection name."
									},
									"functionSelector": "06fdde03",
									"id": 1106,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "name",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1102,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "337:2:6"
									},
									"returnParameters": {
										"id": 1105,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1104,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1106,
												"src": "363:13:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1103,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "363:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "362:15:6"
									},
									"scope": 1121,
									"src": "324:54:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1107,
										"nodeType": "StructuredDocumentation",
										"src": "384:60:6",
										"text": " @dev Returns the token collection symbol."
									},
									"functionSelector": "95d89b41",
									"id": 1112,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "symbol",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1108,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "464:2:6"
									},
									"returnParameters": {
										"id": 1111,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1110,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1112,
												"src": "490:13:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1109,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "490:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "489:15:6"
									},
									"scope": 1121,
									"src": "449:56:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1113,
										"nodeType": "StructuredDocumentation",
										"src": "511:90:6",
										"text": " @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token."
									},
									"functionSelector": "c87b56dd",
									"id": 1120,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "tokenURI",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1116,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1115,
												"mutability": "mutable",
												"name": "tokenId",
												"nodeType": "VariableDeclaration",
												"scope": 1120,
												"src": "624:15:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1114,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "624:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "623:17:6"
									},
									"returnParameters": {
										"id": 1119,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1118,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1120,
												"src": "664:13:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1117,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "664:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "663:15:6"
									},
									"scope": 1121,
									"src": "606:73:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1122,
							"src": "217:464:6"
						}
					],
					"src": "33:649:6"
				},
				"id": 6
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/Context.sol",
					"exportedSymbols": {
						"Context": [
							1144
						]
					},
					"id": 1145,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1123,
							"literals": [
								"solidity",
								">=",
								"0.6",
								".0",
								"<",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "33:31:7"
						},
						{
							"abstract": true,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 1144,
							"linearizedBaseContracts": [
								1144
							],
							"name": "Context",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 1131,
										"nodeType": "Block",
										"src": "668:34:7",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 1128,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "685:3:7",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 1129,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "sender",
													"nodeType": "MemberAccess",
													"src": "685:10:7",
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												},
												"functionReturnParameters": 1127,
												"id": 1130,
												"nodeType": "Return",
												"src": "678:17:7"
											}
										]
									},
									"id": 1132,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgSender",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1124,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "617:2:7"
									},
									"returnParameters": {
										"id": 1127,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1126,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1132,
												"src": "651:15:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address_payable",
													"typeString": "address payable"
												},
												"typeName": {
													"id": 1125,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "651:15:7",
													"stateMutability": "payable",
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "650:17:7"
									},
									"scope": 1144,
									"src": "598:104:7",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1142,
										"nodeType": "Block",
										"src": "773:165:7",
										"statements": [
											{
												"expression": {
													"id": 1137,
													"name": "this",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 4294967268,
													"src": "783:4:7",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_Context_$1144",
														"typeString": "contract Context"
													}
												},
												"id": 1138,
												"nodeType": "ExpressionStatement",
												"src": "783:4:7"
											},
											{
												"expression": {
													"expression": {
														"id": 1139,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "923:3:7",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 1140,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "data",
													"nodeType": "MemberAccess",
													"src": "923:8:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_calldata_ptr",
														"typeString": "bytes calldata"
													}
												},
												"functionReturnParameters": 1136,
												"id": 1141,
												"nodeType": "Return",
												"src": "916:15:7"
											}
										]
									},
									"id": 1143,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgData",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1133,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "725:2:7"
									},
									"returnParameters": {
										"id": 1136,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1135,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1143,
												"src": "759:12:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1134,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "759:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "758:14:7"
									},
									"scope": 1144,
									"src": "708:230:7",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 1145,
							"src": "566:374:7"
						}
					],
					"src": "33:908:7"
				},
				"id": 7
			},
			"@uniswap/v3-core/contracts/libraries/FixedPoint96.sol": {
				"ast": {
					"absolutePath": "@uniswap/v3-core/contracts/libraries/FixedPoint96.sol",
					"exportedSymbols": {
						"FixedPoint96": [
							1154
						]
					},
					"id": 1155,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1146,
							"literals": [
								"solidity",
								">=",
								"0.4",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:8"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 1147,
								"nodeType": "StructuredDocumentation",
								"src": "71:174:8",
								"text": "@title FixedPoint96\n @notice A library for handling binary fixed point numbers, see https://en.wikipedia.org/wiki/Q_(number_format)\n @dev Used in SqrtPriceMath.sol"
							},
							"fullyImplemented": true,
							"id": 1154,
							"linearizedBaseContracts": [
								1154
							],
							"name": "FixedPoint96",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": true,
									"id": 1150,
									"mutability": "constant",
									"name": "RESOLUTION",
									"nodeType": "VariableDeclaration",
									"scope": 1154,
									"src": "272:39:8",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint8",
										"typeString": "uint8"
									},
									"typeName": {
										"id": 1148,
										"name": "uint8",
										"nodeType": "ElementaryTypeName",
										"src": "272:5:8",
										"typeDescriptions": {
											"typeIdentifier": "t_uint8",
											"typeString": "uint8"
										}
									},
									"value": {
										"hexValue": "3936",
										"id": 1149,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "309:2:8",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_96_by_1",
											"typeString": "int_const 96"
										},
										"value": "96"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 1153,
									"mutability": "constant",
									"name": "Q96",
									"nodeType": "VariableDeclaration",
									"scope": 1154,
									"src": "317:59:8",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 1151,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "317:7:8",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "307831303030303030303030303030303030303030303030303030",
										"id": 1152,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "349:27:8",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_79228162514264337593543950336_by_1",
											"typeString": "int_const 79228162514264337593543950336"
										},
										"value": "0x1000000000000000000000000"
									},
									"visibility": "internal"
								}
							],
							"scope": 1155,
							"src": "245:134:8"
						}
					],
					"src": "45:335:8"
				},
				"id": 8
			},
			"@uniswap/v3-core/contracts/libraries/FullMath.sol": {
				"ast": {
					"absolutePath": "@uniswap/v3-core/contracts/libraries/FullMath.sol",
					"exportedSymbols": {
						"FullMath": [
							1327
						]
					},
					"id": 1328,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1156,
							"literals": [
								"solidity",
								">=",
								"0.4",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "32:24:9"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 1157,
								"nodeType": "StructuredDocumentation",
								"src": "58:297:9",
								"text": "@title Contains 512-bit math functions\n @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\n @dev Handles \"phantom overflow\" i.e., allows multiplication and division where an intermediate value overflows 256 bits"
							},
							"fullyImplemented": true,
							"id": 1327,
							"linearizedBaseContracts": [
								1327
							],
							"name": "FullMath",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 1282,
										"nodeType": "Block",
										"src": "870:3648:9",
										"statements": [
											{
												"assignments": [
													1170
												],
												"declarations": [
													{
														"constant": false,
														"id": 1170,
														"mutability": "mutable",
														"name": "prod0",
														"nodeType": "VariableDeclaration",
														"scope": 1282,
														"src": "1183:13:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1169,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "1183:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1171,
												"nodeType": "VariableDeclarationStatement",
												"src": "1183:13:9"
											},
											{
												"assignments": [
													1173
												],
												"declarations": [
													{
														"constant": false,
														"id": 1173,
														"mutability": "mutable",
														"name": "prod1",
														"nodeType": "VariableDeclaration",
														"scope": 1282,
														"src": "1251:13:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1172,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "1251:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1174,
												"nodeType": "VariableDeclarationStatement",
												"src": "1251:13:9"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "1327:141:9",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1341:30:9",
															"value": {
																"arguments": [
																	{
																		"name": "a",
																		"nodeType": "YulIdentifier",
																		"src": "1358:1:9"
																	},
																	{
																		"name": "b",
																		"nodeType": "YulIdentifier",
																		"src": "1361:1:9"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1368:1:9",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "not",
																			"nodeType": "YulIdentifier",
																			"src": "1364:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1364:6:9"
																	}
																],
																"functionName": {
																	"name": "mulmod",
																	"nodeType": "YulIdentifier",
																	"src": "1351:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "1351:20:9"
															},
															"variables": [
																{
																	"name": "mm",
																	"nodeType": "YulTypedName",
																	"src": "1345:2:9",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "1384:18:9",
															"value": {
																"arguments": [
																	{
																		"name": "a",
																		"nodeType": "YulIdentifier",
																		"src": "1397:1:9"
																	},
																	{
																		"name": "b",
																		"nodeType": "YulIdentifier",
																		"src": "1400:1:9"
																	}
																],
																"functionName": {
																	"name": "mul",
																	"nodeType": "YulIdentifier",
																	"src": "1393:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "1393:9:9"
															},
															"variableNames": [
																{
																	"name": "prod0",
																	"nodeType": "YulIdentifier",
																	"src": "1384:5:9"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "1415:43:9",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "mm",
																				"nodeType": "YulIdentifier",
																				"src": "1432:2:9"
																			},
																			{
																				"name": "prod0",
																				"nodeType": "YulIdentifier",
																				"src": "1436:5:9"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1428:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1428:14:9"
																	},
																	{
																		"arguments": [
																			{
																				"name": "mm",
																				"nodeType": "YulIdentifier",
																				"src": "1447:2:9"
																			},
																			{
																				"name": "prod0",
																				"nodeType": "YulIdentifier",
																				"src": "1451:5:9"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nodeType": "YulIdentifier",
																			"src": "1444:2:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1444:13:9"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "1424:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "1424:34:9"
															},
															"variableNames": [
																{
																	"name": "prod1",
																	"nodeType": "YulIdentifier",
																	"src": "1415:5:9"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 1160,
														"isOffset": false,
														"isSlot": false,
														"src": "1358:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1160,
														"isOffset": false,
														"isSlot": false,
														"src": "1397:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1162,
														"isOffset": false,
														"isSlot": false,
														"src": "1361:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1162,
														"isOffset": false,
														"isSlot": false,
														"src": "1400:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1170,
														"isOffset": false,
														"isSlot": false,
														"src": "1384:5:9",
														"valueSize": 1
													},
													{
														"declaration": 1170,
														"isOffset": false,
														"isSlot": false,
														"src": "1436:5:9",
														"valueSize": 1
													},
													{
														"declaration": 1170,
														"isOffset": false,
														"isSlot": false,
														"src": "1451:5:9",
														"valueSize": 1
													},
													{
														"declaration": 1173,
														"isOffset": false,
														"isSlot": false,
														"src": "1415:5:9",
														"valueSize": 1
													}
												],
												"id": 1175,
												"nodeType": "InlineAssembly",
												"src": "1318:150:9"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1178,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1176,
														"name": "prod1",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1173,
														"src": "1540:5:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 1177,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1549:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "1540:10:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1189,
												"nodeType": "IfStatement",
												"src": "1536:179:9",
												"trueBody": {
													"id": 1188,
													"nodeType": "Block",
													"src": "1552:163:9",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1182,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1180,
																			"name": "denominator",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1164,
																			"src": "1574:11:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": ">",
																		"rightExpression": {
																			"hexValue": "30",
																			"id": 1181,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1588:1:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"src": "1574:15:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	],
																	"id": 1179,
																	"name": "require",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967278,
																		4294967278
																	],
																	"referencedDeclaration": 4294967278,
																	"src": "1566:7:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
																		"typeString": "function (bool) pure"
																	}
																},
																"id": 1183,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1566:24:9",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1184,
															"nodeType": "ExpressionStatement",
															"src": "1566:24:9"
														},
														{
															"AST": {
																"nodeType": "YulBlock",
																"src": "1613:65:9",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "1631:33:9",
																		"value": {
																			"arguments": [
																				{
																					"name": "prod0",
																					"nodeType": "YulIdentifier",
																					"src": "1645:5:9"
																				},
																				{
																					"name": "denominator",
																					"nodeType": "YulIdentifier",
																					"src": "1652:11:9"
																				}
																			],
																			"functionName": {
																				"name": "div",
																				"nodeType": "YulIdentifier",
																				"src": "1641:3:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1641:23:9"
																		},
																		"variableNames": [
																			{
																				"name": "result",
																				"nodeType": "YulIdentifier",
																				"src": "1631:6:9"
																			}
																		]
																	}
																]
															},
															"evmVersion": "istanbul",
															"externalReferences": [
																{
																	"declaration": 1164,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "1652:11:9",
																	"valueSize": 1
																},
																{
																	"declaration": 1170,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "1645:5:9",
																	"valueSize": 1
																},
																{
																	"declaration": 1167,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "1631:6:9",
																	"valueSize": 1
																}
															],
															"id": 1185,
															"nodeType": "InlineAssembly",
															"src": "1604:74:9"
														},
														{
															"expression": {
																"id": 1186,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1167,
																"src": "1698:6:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"functionReturnParameters": 1168,
															"id": 1187,
															"nodeType": "Return",
															"src": "1691:13:9"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1193,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1191,
																"name": "denominator",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1164,
																"src": "1828:11:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"id": 1192,
																"name": "prod1",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1173,
																"src": "1842:5:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1828:19:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 1190,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1820:7:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 1194,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1820:28:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1195,
												"nodeType": "ExpressionStatement",
												"src": "1820:28:9"
											},
											{
												"assignments": [
													1197
												],
												"declarations": [
													{
														"constant": false,
														"id": 1197,
														"mutability": "mutable",
														"name": "remainder",
														"nodeType": "VariableDeclaration",
														"scope": 1282,
														"src": "2125:17:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1196,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2125:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1198,
												"nodeType": "VariableDeclarationStatement",
												"src": "2125:17:9"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "2161:62:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2175:38:9",
															"value": {
																"arguments": [
																	{
																		"name": "a",
																		"nodeType": "YulIdentifier",
																		"src": "2195:1:9"
																	},
																	{
																		"name": "b",
																		"nodeType": "YulIdentifier",
																		"src": "2198:1:9"
																	},
																	{
																		"name": "denominator",
																		"nodeType": "YulIdentifier",
																		"src": "2201:11:9"
																	}
																],
																"functionName": {
																	"name": "mulmod",
																	"nodeType": "YulIdentifier",
																	"src": "2188:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "2188:25:9"
															},
															"variableNames": [
																{
																	"name": "remainder",
																	"nodeType": "YulIdentifier",
																	"src": "2175:9:9"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 1160,
														"isOffset": false,
														"isSlot": false,
														"src": "2195:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1162,
														"isOffset": false,
														"isSlot": false,
														"src": "2198:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1164,
														"isOffset": false,
														"isSlot": false,
														"src": "2201:11:9",
														"valueSize": 1
													},
													{
														"declaration": 1197,
														"isOffset": false,
														"isSlot": false,
														"src": "2175:9:9",
														"valueSize": 1
													}
												],
												"id": 1199,
												"nodeType": "InlineAssembly",
												"src": "2152:71:9"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "2296:108:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2310:41:9",
															"value": {
																"arguments": [
																	{
																		"name": "prod1",
																		"nodeType": "YulIdentifier",
																		"src": "2323:5:9"
																	},
																	{
																		"arguments": [
																			{
																				"name": "remainder",
																				"nodeType": "YulIdentifier",
																				"src": "2333:9:9"
																			},
																			{
																				"name": "prod0",
																				"nodeType": "YulIdentifier",
																				"src": "2344:5:9"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "2330:2:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2330:20:9"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "2319:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "2319:32:9"
															},
															"variableNames": [
																{
																	"name": "prod1",
																	"nodeType": "YulIdentifier",
																	"src": "2310:5:9"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "2364:30:9",
															"value": {
																"arguments": [
																	{
																		"name": "prod0",
																		"nodeType": "YulIdentifier",
																		"src": "2377:5:9"
																	},
																	{
																		"name": "remainder",
																		"nodeType": "YulIdentifier",
																		"src": "2384:9:9"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "2373:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "2373:21:9"
															},
															"variableNames": [
																{
																	"name": "prod0",
																	"nodeType": "YulIdentifier",
																	"src": "2364:5:9"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 1170,
														"isOffset": false,
														"isSlot": false,
														"src": "2344:5:9",
														"valueSize": 1
													},
													{
														"declaration": 1170,
														"isOffset": false,
														"isSlot": false,
														"src": "2364:5:9",
														"valueSize": 1
													},
													{
														"declaration": 1170,
														"isOffset": false,
														"isSlot": false,
														"src": "2377:5:9",
														"valueSize": 1
													},
													{
														"declaration": 1173,
														"isOffset": false,
														"isSlot": false,
														"src": "2310:5:9",
														"valueSize": 1
													},
													{
														"declaration": 1173,
														"isOffset": false,
														"isSlot": false,
														"src": "2323:5:9",
														"valueSize": 1
													},
													{
														"declaration": 1197,
														"isOffset": false,
														"isSlot": false,
														"src": "2333:9:9",
														"valueSize": 1
													},
													{
														"declaration": 1197,
														"isOffset": false,
														"isSlot": false,
														"src": "2384:9:9",
														"valueSize": 1
													}
												],
												"id": 1200,
												"nodeType": "InlineAssembly",
												"src": "2287:117:9"
											},
											{
												"assignments": [
													1202
												],
												"declarations": [
													{
														"constant": false,
														"id": 1202,
														"mutability": "mutable",
														"name": "twos",
														"nodeType": "VariableDeclaration",
														"scope": 1282,
														"src": "2553:12:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1201,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2553:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1207,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1206,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1204,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "-",
														"prefix": true,
														"src": "2568:12:9",
														"subExpression": {
															"id": 1203,
															"name": "denominator",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1164,
															"src": "2569:11:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&",
													"rightExpression": {
														"id": 1205,
														"name": "denominator",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1164,
														"src": "2583:11:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2568:26:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2553:41:9"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "2659:61:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2673:37:9",
															"value": {
																"arguments": [
																	{
																		"name": "denominator",
																		"nodeType": "YulIdentifier",
																		"src": "2692:11:9"
																	},
																	{
																		"name": "twos",
																		"nodeType": "YulIdentifier",
																		"src": "2705:4:9"
																	}
																],
																"functionName": {
																	"name": "div",
																	"nodeType": "YulIdentifier",
																	"src": "2688:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "2688:22:9"
															},
															"variableNames": [
																{
																	"name": "denominator",
																	"nodeType": "YulIdentifier",
																	"src": "2673:11:9"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 1164,
														"isOffset": false,
														"isSlot": false,
														"src": "2673:11:9",
														"valueSize": 1
													},
													{
														"declaration": 1164,
														"isOffset": false,
														"isSlot": false,
														"src": "2692:11:9",
														"valueSize": 1
													},
													{
														"declaration": 1202,
														"isOffset": false,
														"isSlot": false,
														"src": "2705:4:9",
														"valueSize": 1
													}
												],
												"id": 1208,
												"nodeType": "InlineAssembly",
												"src": "2650:70:9"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "2793:49:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2807:25:9",
															"value": {
																"arguments": [
																	{
																		"name": "prod0",
																		"nodeType": "YulIdentifier",
																		"src": "2820:5:9"
																	},
																	{
																		"name": "twos",
																		"nodeType": "YulIdentifier",
																		"src": "2827:4:9"
																	}
																],
																"functionName": {
																	"name": "div",
																	"nodeType": "YulIdentifier",
																	"src": "2816:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "2816:16:9"
															},
															"variableNames": [
																{
																	"name": "prod0",
																	"nodeType": "YulIdentifier",
																	"src": "2807:5:9"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 1170,
														"isOffset": false,
														"isSlot": false,
														"src": "2807:5:9",
														"valueSize": 1
													},
													{
														"declaration": 1170,
														"isOffset": false,
														"isSlot": false,
														"src": "2820:5:9",
														"valueSize": 1
													},
													{
														"declaration": 1202,
														"isOffset": false,
														"isSlot": false,
														"src": "2827:4:9",
														"valueSize": 1
													}
												],
												"id": 1209,
												"nodeType": "InlineAssembly",
												"src": "2784:58:9"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "3030:63:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "3044:39:9",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "3064:1:9",
																						"type": "",
																						"value": "0"
																					},
																					{
																						"name": "twos",
																						"nodeType": "YulIdentifier",
																						"src": "3067:4:9"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nodeType": "YulIdentifier",
																					"src": "3060:3:9"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3060:12:9"
																			},
																			{
																				"name": "twos",
																				"nodeType": "YulIdentifier",
																				"src": "3074:4:9"
																			}
																		],
																		"functionName": {
																			"name": "div",
																			"nodeType": "YulIdentifier",
																			"src": "3056:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3056:23:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3081:1:9",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3052:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "3052:31:9"
															},
															"variableNames": [
																{
																	"name": "twos",
																	"nodeType": "YulIdentifier",
																	"src": "3044:4:9"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 1202,
														"isOffset": false,
														"isSlot": false,
														"src": "3044:4:9",
														"valueSize": 1
													},
													{
														"declaration": 1202,
														"isOffset": false,
														"isSlot": false,
														"src": "3067:4:9",
														"valueSize": 1
													},
													{
														"declaration": 1202,
														"isOffset": false,
														"isSlot": false,
														"src": "3074:4:9",
														"valueSize": 1
													}
												],
												"id": 1210,
												"nodeType": "InlineAssembly",
												"src": "3021:72:9"
											},
											{
												"expression": {
													"id": 1215,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1211,
														"name": "prod0",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1170,
														"src": "3102:5:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "|=",
													"rightHandSide": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1214,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1212,
															"name": "prod1",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1173,
															"src": "3111:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "*",
														"rightExpression": {
															"id": 1213,
															"name": "twos",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1202,
															"src": "3119:4:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "3111:12:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3102:21:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1216,
												"nodeType": "ExpressionStatement",
												"src": "3102:21:9"
											},
											{
												"assignments": [
													1218
												],
												"declarations": [
													{
														"constant": false,
														"id": 1218,
														"mutability": "mutable",
														"name": "inv",
														"nodeType": "VariableDeclaration",
														"scope": 1282,
														"src": "3457:11:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1217,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "3457:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1225,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1224,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1221,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "33",
																	"id": 1219,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "3472:1:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_3_by_1",
																		"typeString": "int_const 3"
																	},
																	"value": "3"
																},
																"nodeType": "BinaryOperation",
																"operator": "*",
																"rightExpression": {
																	"id": 1220,
																	"name": "denominator",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1164,
																	"src": "3476:11:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "3472:15:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"id": 1222,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "3471:17:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "^",
													"rightExpression": {
														"hexValue": "32",
														"id": 1223,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3491:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_2_by_1",
															"typeString": "int_const 2"
														},
														"value": "2"
													},
													"src": "3471:21:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3457:35:9"
											},
											{
												"expression": {
													"id": 1232,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1226,
														"name": "inv",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1218,
														"src": "3707:3:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "*=",
													"rightHandSide": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1231,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"hexValue": "32",
															"id": 1227,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3714:1:9",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_2_by_1",
																"typeString": "int_const 2"
															},
															"value": "2"
														},
														"nodeType": "BinaryOperation",
														"operator": "-",
														"rightExpression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1230,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1228,
																"name": "denominator",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1164,
																"src": "3718:11:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "*",
															"rightExpression": {
																"id": 1229,
																"name": "inv",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1218,
																"src": "3732:3:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "3718:17:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "3714:21:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3707:28:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1233,
												"nodeType": "ExpressionStatement",
												"src": "3707:28:9"
											},
											{
												"expression": {
													"id": 1240,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1234,
														"name": "inv",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1218,
														"src": "3765:3:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "*=",
													"rightHandSide": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1239,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"hexValue": "32",
															"id": 1235,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3772:1:9",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_2_by_1",
																"typeString": "int_const 2"
															},
															"value": "2"
														},
														"nodeType": "BinaryOperation",
														"operator": "-",
														"rightExpression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1238,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1236,
																"name": "denominator",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1164,
																"src": "3776:11:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "*",
															"rightExpression": {
																"id": 1237,
																"name": "inv",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1218,
																"src": "3790:3:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "3776:17:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "3772:21:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3765:28:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1241,
												"nodeType": "ExpressionStatement",
												"src": "3765:28:9"
											},
											{
												"expression": {
													"id": 1248,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1242,
														"name": "inv",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1218,
														"src": "3824:3:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "*=",
													"rightHandSide": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1247,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"hexValue": "32",
															"id": 1243,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3831:1:9",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_2_by_1",
																"typeString": "int_const 2"
															},
															"value": "2"
														},
														"nodeType": "BinaryOperation",
														"operator": "-",
														"rightExpression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1246,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1244,
																"name": "denominator",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1164,
																"src": "3835:11:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "*",
															"rightExpression": {
																"id": 1245,
																"name": "inv",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1218,
																"src": "3849:3:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "3835:17:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "3831:21:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3824:28:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1249,
												"nodeType": "ExpressionStatement",
												"src": "3824:28:9"
											},
											{
												"expression": {
													"id": 1256,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1250,
														"name": "inv",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1218,
														"src": "3883:3:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "*=",
													"rightHandSide": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1255,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"hexValue": "32",
															"id": 1251,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3890:1:9",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_2_by_1",
																"typeString": "int_const 2"
															},
															"value": "2"
														},
														"nodeType": "BinaryOperation",
														"operator": "-",
														"rightExpression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1254,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1252,
																"name": "denominator",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1164,
																"src": "3894:11:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "*",
															"rightExpression": {
																"id": 1253,
																"name": "inv",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1218,
																"src": "3908:3:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "3894:17:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "3890:21:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3883:28:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1257,
												"nodeType": "ExpressionStatement",
												"src": "3883:28:9"
											},
											{
												"expression": {
													"id": 1264,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1258,
														"name": "inv",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1218,
														"src": "3942:3:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "*=",
													"rightHandSide": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1263,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"hexValue": "32",
															"id": 1259,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3949:1:9",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_2_by_1",
																"typeString": "int_const 2"
															},
															"value": "2"
														},
														"nodeType": "BinaryOperation",
														"operator": "-",
														"rightExpression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1262,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1260,
																"name": "denominator",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1164,
																"src": "3953:11:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "*",
															"rightExpression": {
																"id": 1261,
																"name": "inv",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1218,
																"src": "3967:3:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "3953:17:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "3949:21:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3942:28:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1265,
												"nodeType": "ExpressionStatement",
												"src": "3942:28:9"
											},
											{
												"expression": {
													"id": 1272,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1266,
														"name": "inv",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1218,
														"src": "4002:3:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "*=",
													"rightHandSide": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1271,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"hexValue": "32",
															"id": 1267,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4009:1:9",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_2_by_1",
																"typeString": "int_const 2"
															},
															"value": "2"
														},
														"nodeType": "BinaryOperation",
														"operator": "-",
														"rightExpression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1270,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1268,
																"name": "denominator",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1164,
																"src": "4013:11:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "*",
															"rightExpression": {
																"id": 1269,
																"name": "inv",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1218,
																"src": "4027:3:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "4013:17:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "4009:21:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "4002:28:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1273,
												"nodeType": "ExpressionStatement",
												"src": "4002:28:9"
											},
											{
												"expression": {
													"id": 1278,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1274,
														"name": "result",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1167,
														"src": "4468:6:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1277,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1275,
															"name": "prod0",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1170,
															"src": "4477:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "*",
														"rightExpression": {
															"id": 1276,
															"name": "inv",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1218,
															"src": "4485:3:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "4477:11:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "4468:20:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1279,
												"nodeType": "ExpressionStatement",
												"src": "4468:20:9"
											},
											{
												"expression": {
													"id": 1280,
													"name": "result",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1167,
													"src": "4505:6:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1168,
												"id": 1281,
												"nodeType": "Return",
												"src": "4498:13:9"
											}
										]
									},
									"documentation": {
										"id": 1158,
										"nodeType": "StructuredDocumentation",
										"src": "378:359:9",
										"text": "@notice Calculates floor(a×b÷denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n @param a The multiplicand\n @param b The multiplier\n @param denominator The divisor\n @return result The 256-bit result\n @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv"
									},
									"id": 1283,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mulDiv",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1165,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1160,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 1283,
												"src": "767:9:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1159,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "767:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1162,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 1283,
												"src": "786:9:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1161,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "786:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1164,
												"mutability": "mutable",
												"name": "denominator",
												"nodeType": "VariableDeclaration",
												"scope": 1283,
												"src": "805:19:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1163,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "805:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "757:73:9"
									},
									"returnParameters": {
										"id": 1168,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1167,
												"mutability": "mutable",
												"name": "result",
												"nodeType": "VariableDeclaration",
												"scope": 1283,
												"src": "854:14:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1166,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "854:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "853:16:9"
									},
									"scope": 1327,
									"src": "742:3776:9",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1325,
										"nodeType": "Block",
										"src": "4938:177:9",
										"statements": [
											{
												"expression": {
													"id": 1301,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1295,
														"name": "result",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1293,
														"src": "4948:6:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 1297,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1286,
																"src": "4964:1:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"id": 1298,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1288,
																"src": "4967:1:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"id": 1299,
																"name": "denominator",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1290,
																"src": "4970:11:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"id": 1296,
															"name": "mulDiv",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1283,
															"src": "4957:6:9",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																"typeString": "function (uint256,uint256,uint256) pure returns (uint256)"
															}
														},
														"id": 1300,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "4957:25:9",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "4948:34:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1302,
												"nodeType": "ExpressionStatement",
												"src": "4948:34:9"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1309,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"id": 1304,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1286,
																"src": "5003:1:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"id": 1305,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1288,
																"src": "5006:1:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"id": 1306,
																"name": "denominator",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1290,
																"src": "5009:11:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"id": 1303,
															"name": "mulmod",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967280,
															"src": "4996:6:9",
															"typeDescriptions": {
																"typeIdentifier": "t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																"typeString": "function (uint256,uint256,uint256) pure returns (uint256)"
															}
														},
														"id": 1307,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "4996:25:9",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 1308,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "5024:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "4996:29:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1324,
												"nodeType": "IfStatement",
												"src": "4992:117:9",
												"trueBody": {
													"id": 1323,
													"nodeType": "Block",
													"src": "5027:82:9",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1317,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1311,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1293,
																			"src": "5049:6:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "<",
																		"rightExpression": {
																			"expression": {
																				"arguments": [
																					{
																						"id": 1314,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"lValueRequested": false,
																						"nodeType": "ElementaryTypeNameExpression",
																						"src": "5063:7:9",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_uint256_$",
																							"typeString": "type(uint256)"
																						},
																						"typeName": {
																							"id": 1313,
																							"name": "uint256",
																							"nodeType": "ElementaryTypeName",
																							"src": "5063:7:9",
																							"typeDescriptions": {}
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_type$_t_uint256_$",
																							"typeString": "type(uint256)"
																						}
																					],
																					"id": 1312,
																					"name": "type",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 4294967269,
																					"src": "5058:4:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																						"typeString": "function () pure"
																					}
																				},
																				"id": 1315,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "functionCall",
																				"lValueRequested": false,
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "5058:13:9",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_magic_meta_type_t_uint256",
																					"typeString": "type(uint256)"
																				}
																			},
																			"id": 1316,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"memberName": "max",
																			"nodeType": "MemberAccess",
																			"src": "5058:17:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "5049:26:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	],
																	"id": 1310,
																	"name": "require",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967278,
																		4294967278
																	],
																	"referencedDeclaration": 4294967278,
																	"src": "5041:7:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
																		"typeString": "function (bool) pure"
																	}
																},
																"id": 1318,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "5041:35:9",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1319,
															"nodeType": "ExpressionStatement",
															"src": "5041:35:9"
														},
														{
															"expression": {
																"id": 1321,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "UnaryOperation",
																"operator": "++",
																"prefix": false,
																"src": "5090:8:9",
																"subExpression": {
																	"id": 1320,
																	"name": "result",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1293,
																	"src": "5090:6:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1322,
															"nodeType": "ExpressionStatement",
															"src": "5090:8:9"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1284,
										"nodeType": "StructuredDocumentation",
										"src": "4524:271:9",
										"text": "@notice Calculates ceil(a×b÷denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n @param a The multiplicand\n @param b The multiplier\n @param denominator The divisor\n @return result The 256-bit result"
									},
									"id": 1326,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mulDivRoundingUp",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1291,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1286,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 1326,
												"src": "4835:9:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1285,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4835:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1288,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 1326,
												"src": "4854:9:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1287,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4854:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1290,
												"mutability": "mutable",
												"name": "denominator",
												"nodeType": "VariableDeclaration",
												"scope": 1326,
												"src": "4873:19:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1289,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4873:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4825:73:9"
									},
									"returnParameters": {
										"id": 1294,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1293,
												"mutability": "mutable",
												"name": "result",
												"nodeType": "VariableDeclaration",
												"scope": 1326,
												"src": "4922:14:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1292,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4922:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4921:16:9"
									},
									"scope": 1327,
									"src": "4800:315:9",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 1328,
							"src": "355:4762:9"
						}
					],
					"src": "32:5086:9"
				},
				"id": 9
			},
			"contracts/CoinSwitch.sol": {
				"ast": {
					"absolutePath": "contracts/CoinSwitch.sol",
					"exportedSymbols": {
						"Context": [
							1144
						],
						"ERC20": [
							869
						],
						"FixedPoint96": [
							1154
						],
						"FullMath": [
							1327
						],
						"IERC165": [
							11
						],
						"IERC20": [
							947
						],
						"IERC721": [
							1063
						],
						"IERC721Enumerable": [
							1094
						],
						"IERC721Metadata": [
							1121
						],
						"IERC721Permit": [
							1470
						],
						"INonfungiblePositionManager": [
							1665
						],
						"IPeripheryImmutableState": [
							1681
						],
						"IPeripheryPayments": [
							1707
						],
						"IPoolInitializer": [
							1726
						],
						"LiquidityAmounts": [
							2066
						],
						"PoolAddress": [
							2158
						],
						"SafeMath": [
							366
						],
						"StakeLPNFT": [
							1435
						],
						"TickMath": [
							2693
						]
					},
					"id": 1436,
					"license": "UNLICENSED",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1329,
							"literals": [
								"solidity",
								"^",
								"0.7",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "39:23:10"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC721/IERC721.sol",
							"file": "@openzeppelin/contracts/token/ERC721/IERC721.sol",
							"id": 1330,
							"nodeType": "ImportDirective",
							"scope": 1436,
							"sourceUnit": 1064,
							"src": "64:58:10",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/ERC20.sol",
							"file": "@openzeppelin/contracts/token/ERC20/ERC20.sol",
							"id": 1331,
							"nodeType": "ImportDirective",
							"scope": 1436,
							"sourceUnit": 870,
							"src": "123:55:10",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/libraries/TickMath.sol",
							"file": "./libraries/TickMath.sol",
							"id": 1332,
							"nodeType": "ImportDirective",
							"scope": 1436,
							"sourceUnit": 2694,
							"src": "179:34:10",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/libraries/LiquidityAmounts.sol",
							"file": "./libraries/LiquidityAmounts.sol",
							"id": 1333,
							"nodeType": "ImportDirective",
							"scope": 1436,
							"sourceUnit": 2067,
							"src": "214:42:10",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/interfaces/INonfungiblePositionManager.sol",
							"file": "./interfaces/INonfungiblePositionManager.sol",
							"id": 1334,
							"nodeType": "ImportDirective",
							"scope": 1436,
							"sourceUnit": 1666,
							"src": "257:54:10",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 1335,
										"name": "ERC20",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 869,
										"src": "336:5:10",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_ERC20_$869",
											"typeString": "contract ERC20"
										}
									},
									"id": 1336,
									"nodeType": "InheritanceSpecifier",
									"src": "336:5:10"
								}
							],
							"contractDependencies": [
								869,
								947,
								1144
							],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 1435,
							"linearizedBaseContracts": [
								1435,
								869,
								947,
								1144
							],
							"name": "StakeLPNFT",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 1338,
									"mutability": "mutable",
									"name": "admin",
									"nodeType": "VariableDeclaration",
									"scope": 1435,
									"src": "349:13:10",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 1337,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "349:7:10",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": false,
									"id": 1340,
									"mutability": "mutable",
									"name": "nftPositionManager",
									"nodeType": "VariableDeclaration",
									"scope": 1435,
									"src": "368:46:10",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_contract$_INonfungiblePositionManager_$1665",
										"typeString": "contract INonfungiblePositionManager"
									},
									"typeName": {
										"id": 1339,
										"name": "INonfungiblePositionManager",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 1665,
										"src": "368:27:10",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_INonfungiblePositionManager_$1665",
											"typeString": "contract INonfungiblePositionManager"
										}
									},
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1359,
										"nodeType": "Block",
										"src": "524:87:10",
										"statements": [
											{
												"expression": {
													"id": 1353,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1351,
														"name": "admin",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1338,
														"src": "537:5:10",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1352,
														"name": "_admin",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1342,
														"src": "545:6:10",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "537:14:10",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 1354,
												"nodeType": "ExpressionStatement",
												"src": "537:14:10"
											},
											{
												"expression": {
													"id": 1357,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1355,
														"name": "nftPositionManager",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1340,
														"src": "564:18:10",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_INonfungiblePositionManager_$1665",
															"typeString": "contract INonfungiblePositionManager"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1356,
														"name": "_nftPositionManager",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1344,
														"src": "585:19:10",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_INonfungiblePositionManager_$1665",
															"typeString": "contract INonfungiblePositionManager"
														}
													},
													"src": "564:40:10",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_INonfungiblePositionManager_$1665",
														"typeString": "contract INonfungiblePositionManager"
													}
												},
												"id": 1358,
												"nodeType": "ExpressionStatement",
												"src": "564:40:10"
											}
										]
									},
									"id": 1360,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [
										{
											"arguments": [
												{
													"hexValue": "526577617264",
													"id": 1347,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "string",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "509:8:10",
													"typeDescriptions": {
														"typeIdentifier": "t_stringliteral_02d12311fe1ba073b437096116ddd40fe41238aea6da9290a417a616bb3fbf3f",
														"typeString": "literal_string \"Reward\""
													},
													"value": "Reward"
												},
												{
													"hexValue": "525744",
													"id": 1348,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "string",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "518:5:10",
													"typeDescriptions": {
														"typeIdentifier": "t_stringliteral_472b34ad5599e04104fb23c4104edd03ea87fd21961b319f7bb0fbee818f9d06",
														"typeString": "literal_string \"RWD\""
													},
													"value": "RWD"
												}
											],
											"id": 1349,
											"modifierName": {
												"id": 1346,
												"name": "ERC20",
												"nodeType": "Identifier",
												"overloadedDeclarations": [],
												"referencedDeclaration": 869,
												"src": "503:5:10",
												"typeDescriptions": {
													"typeIdentifier": "t_type$_t_contract$_ERC20_$869_$",
													"typeString": "type(contract ERC20)"
												}
											},
											"nodeType": "ModifierInvocation",
											"src": "503:21:10"
										}
									],
									"name": "",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1345,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1342,
												"mutability": "mutable",
												"name": "_admin",
												"nodeType": "VariableDeclaration",
												"scope": 1360,
												"src": "438:14:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1341,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "438:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1344,
												"mutability": "mutable",
												"name": "_nftPositionManager",
												"nodeType": "VariableDeclaration",
												"scope": 1360,
												"src": "454:47:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_INonfungiblePositionManager_$1665",
													"typeString": "contract INonfungiblePositionManager"
												},
												"typeName": {
													"id": 1343,
													"name": "INonfungiblePositionManager",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 1665,
													"src": "454:27:10",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_INonfungiblePositionManager_$1665",
														"typeString": "contract INonfungiblePositionManager"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "437:65:10"
									},
									"returnParameters": {
										"id": 1350,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "524:0:10"
									},
									"scope": 1435,
									"src": "426:185:10",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1433,
										"nodeType": "Block",
										"src": "656:715:10",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 1368,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "699:3:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1369,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "699:10:10",
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														{
															"arguments": [
																{
																	"id": 1372,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "719:4:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_StakeLPNFT_$1435",
																		"typeString": "contract StakeLPNFT"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_StakeLPNFT_$1435",
																		"typeString": "contract StakeLPNFT"
																	}
																],
																"id": 1371,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "711:7:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1370,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "711:7:10",
																	"typeDescriptions": {}
																}
															},
															"id": 1373,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "711:13:10",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1374,
															"name": "_tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1362,
															"src": "726:8:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 1365,
															"name": "nftPositionManager",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1340,
															"src": "667:18:10",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_INonfungiblePositionManager_$1665",
																"typeString": "contract INonfungiblePositionManager"
															}
														},
														"id": 1367,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "transferFrom",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1016,
														"src": "667:31:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256) external"
														}
													},
													"id": 1375,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "667:68:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1376,
												"nodeType": "ExpressionStatement",
												"src": "667:68:10"
											},
											{
												"assignments": [
													1378,
													1380,
													1382,
													1384,
													1386,
													1388,
													1390,
													1392,
													1394,
													1396,
													1398,
													1400
												],
												"declarations": [
													{
														"constant": false,
														"id": 1378,
														"mutability": "mutable",
														"name": "nonce",
														"nodeType": "VariableDeclaration",
														"scope": 1433,
														"src": "747:12:10",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint96",
															"typeString": "uint96"
														},
														"typeName": {
															"id": 1377,
															"name": "uint96",
															"nodeType": "ElementaryTypeName",
															"src": "747:6:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint96",
																"typeString": "uint96"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 1380,
														"mutability": "mutable",
														"name": "operator",
														"nodeType": "VariableDeclaration",
														"scope": 1433,
														"src": "761:16:10",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 1379,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "761:7:10",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 1382,
														"mutability": "mutable",
														"name": "token0",
														"nodeType": "VariableDeclaration",
														"scope": 1433,
														"src": "779:14:10",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 1381,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "779:7:10",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 1384,
														"mutability": "mutable",
														"name": "token1",
														"nodeType": "VariableDeclaration",
														"scope": 1433,
														"src": "795:14:10",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 1383,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "795:7:10",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 1386,
														"mutability": "mutable",
														"name": "fee",
														"nodeType": "VariableDeclaration",
														"scope": 1433,
														"src": "811:10:10",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint24",
															"typeString": "uint24"
														},
														"typeName": {
															"id": 1385,
															"name": "uint24",
															"nodeType": "ElementaryTypeName",
															"src": "811:6:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint24",
																"typeString": "uint24"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 1388,
														"mutability": "mutable",
														"name": "tickLower",
														"nodeType": "VariableDeclaration",
														"scope": 1433,
														"src": "823:15:10",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_int24",
															"typeString": "int24"
														},
														"typeName": {
															"id": 1387,
															"name": "int24",
															"nodeType": "ElementaryTypeName",
															"src": "823:5:10",
															"typeDescriptions": {
																"typeIdentifier": "t_int24",
																"typeString": "int24"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 1390,
														"mutability": "mutable",
														"name": "tickUpper",
														"nodeType": "VariableDeclaration",
														"scope": 1433,
														"src": "840:15:10",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_int24",
															"typeString": "int24"
														},
														"typeName": {
															"id": 1389,
															"name": "int24",
															"nodeType": "ElementaryTypeName",
															"src": "840:5:10",
															"typeDescriptions": {
																"typeIdentifier": "t_int24",
																"typeString": "int24"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 1392,
														"mutability": "mutable",
														"name": "liquidity",
														"nodeType": "VariableDeclaration",
														"scope": 1433,
														"src": "857:17:10",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint128",
															"typeString": "uint128"
														},
														"typeName": {
															"id": 1391,
															"name": "uint128",
															"nodeType": "ElementaryTypeName",
															"src": "857:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint128",
																"typeString": "uint128"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 1394,
														"mutability": "mutable",
														"name": "feeGrowthInside0LastX128",
														"nodeType": "VariableDeclaration",
														"scope": 1433,
														"src": "875:32:10",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1393,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "875:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 1396,
														"mutability": "mutable",
														"name": "feeGrowthInside1LastX128",
														"nodeType": "VariableDeclaration",
														"scope": 1433,
														"src": "921:32:10",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1395,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "921:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 1398,
														"mutability": "mutable",
														"name": "tokensOwed0",
														"nodeType": "VariableDeclaration",
														"scope": 1433,
														"src": "967:19:10",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint128",
															"typeString": "uint128"
														},
														"typeName": {
															"id": 1397,
															"name": "uint128",
															"nodeType": "ElementaryTypeName",
															"src": "967:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint128",
																"typeString": "uint128"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 1400,
														"mutability": "mutable",
														"name": "tokensOwed1",
														"nodeType": "VariableDeclaration",
														"scope": 1433,
														"src": "1000:19:10",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint128",
															"typeString": "uint128"
														},
														"typeName": {
															"id": 1399,
															"name": "uint128",
															"nodeType": "ElementaryTypeName",
															"src": "1000:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint128",
																"typeString": "uint128"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1405,
												"initialValue": {
													"arguments": [
														{
															"id": 1403,
															"name": "_tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1362,
															"src": "1050:8:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 1401,
															"name": "nftPositionManager",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1340,
															"src": "1021:18:10",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_INonfungiblePositionManager_$1665",
																"typeString": "contract INonfungiblePositionManager"
															}
														},
														"id": 1402,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "positions",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1556,
														"src": "1021:28:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_view$_t_uint256_$returns$_t_uint96_$_t_address_$_t_address_$_t_address_$_t_uint24_$_t_int24_$_t_int24_$_t_uint128_$_t_uint256_$_t_uint256_$_t_uint128_$_t_uint128_$",
															"typeString": "function (uint256) view external returns (uint96,address,address,address,uint24,int24,int24,uint128,uint256,uint256,uint128,uint128)"
														}
													},
													"id": 1404,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1021:38:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_uint96_$_t_address_$_t_address_$_t_address_$_t_uint24_$_t_int24_$_t_int24_$_t_uint128_$_t_uint256_$_t_uint256_$_t_uint128_$_t_uint128_$",
														"typeString": "tuple(uint96,address,address,address,uint24,int24,int24,uint128,uint256,uint256,uint128,uint128)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "746:313:10"
											},
											{
												"assignments": [
													1407
												],
												"declarations": [
													{
														"constant": false,
														"id": 1407,
														"mutability": "mutable",
														"name": "tickler",
														"nodeType": "VariableDeclaration",
														"scope": 1433,
														"src": "1073:13:10",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_int24",
															"typeString": "int24"
														},
														"typeName": {
															"id": 1406,
															"name": "int24",
															"nodeType": "ElementaryTypeName",
															"src": "1073:5:10",
															"typeDescriptions": {
																"typeIdentifier": "t_int24",
																"typeString": "int24"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1409,
												"initialValue": {
													"id": 1408,
													"name": "tickLower",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1388,
													"src": "1089:9:10",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1073:25:10"
											},
											{
												"assignments": [
													1411
												],
												"declarations": [
													{
														"constant": false,
														"id": 1411,
														"mutability": "mutable",
														"name": "sqrtRatioAX96",
														"nodeType": "VariableDeclaration",
														"scope": 1433,
														"src": "1112:21:10",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint160",
															"typeString": "uint160"
														},
														"typeName": {
															"id": 1410,
															"name": "uint160",
															"nodeType": "ElementaryTypeName",
															"src": "1112:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint160",
																"typeString": "uint160"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1416,
												"initialValue": {
													"arguments": [
														{
															"id": 1414,
															"name": "tickLower",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1388,
															"src": "1164:9:10",
															"typeDescriptions": {
																"typeIdentifier": "t_int24",
																"typeString": "int24"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_int24",
																"typeString": "int24"
															}
														],
														"expression": {
															"id": 1412,
															"name": "TickMath",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2693,
															"src": "1136:8:10",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_TickMath_$2693_$",
																"typeString": "type(library TickMath)"
															}
														},
														"id": 1413,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "getSqrtRatioAtTick",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 2553,
														"src": "1136:27:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_int24_$returns$_t_uint160_$",
															"typeString": "function (int24) pure returns (uint160)"
														}
													},
													"id": 1415,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1136:38:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1112:62:10"
											},
											{
												"assignments": [
													1418
												],
												"declarations": [
													{
														"constant": false,
														"id": 1418,
														"mutability": "mutable",
														"name": "sqrtRatioBX96",
														"nodeType": "VariableDeclaration",
														"scope": 1433,
														"src": "1188:21:10",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint160",
															"typeString": "uint160"
														},
														"typeName": {
															"id": 1417,
															"name": "uint160",
															"nodeType": "ElementaryTypeName",
															"src": "1188:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint160",
																"typeString": "uint160"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1423,
												"initialValue": {
													"arguments": [
														{
															"id": 1421,
															"name": "tickUpper",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1390,
															"src": "1240:9:10",
															"typeDescriptions": {
																"typeIdentifier": "t_int24",
																"typeString": "int24"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_int24",
																"typeString": "int24"
															}
														],
														"expression": {
															"id": 1419,
															"name": "TickMath",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2693,
															"src": "1212:8:10",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_TickMath_$2693_$",
																"typeString": "type(library TickMath)"
															}
														},
														"id": 1420,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "getSqrtRatioAtTick",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 2553,
														"src": "1212:27:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_int24_$returns$_t_uint160_$",
															"typeString": "function (int24) pure returns (uint160)"
														}
													},
													"id": 1422,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1212:38:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1188:62:10"
											},
											{
												"assignments": [
													1425
												],
												"declarations": [
													{
														"constant": false,
														"id": 1425,
														"mutability": "mutable",
														"name": "amount0",
														"nodeType": "VariableDeclaration",
														"scope": 1433,
														"src": "1264:15:10",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1424,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "1264:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1432,
												"initialValue": {
													"arguments": [
														{
															"id": 1428,
															"name": "sqrtRatioAX96",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1411,
															"src": "1322:13:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint160",
																"typeString": "uint160"
															}
														},
														{
															"id": 1429,
															"name": "sqrtRatioBX96",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1418,
															"src": "1337:13:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint160",
																"typeString": "uint160"
															}
														},
														{
															"id": 1430,
															"name": "liquidity",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1392,
															"src": "1352:9:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint128",
																"typeString": "uint128"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint160",
																"typeString": "uint160"
															},
															{
																"typeIdentifier": "t_uint160",
																"typeString": "uint160"
															},
															{
																"typeIdentifier": "t_uint128",
																"typeString": "uint128"
															}
														],
														"expression": {
															"id": 1426,
															"name": "LiquidityAmounts",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2066,
															"src": "1282:16:10",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_LiquidityAmounts_$2066_$",
																"typeString": "type(library LiquidityAmounts)"
															}
														},
														"id": 1427,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "getAmount0ForLiquidity",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1958,
														"src": "1282:39:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint160_$_t_uint160_$_t_uint128_$returns$_t_uint256_$",
															"typeString": "function (uint160,uint160,uint128) pure returns (uint256)"
														}
													},
													"id": 1431,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1282:80:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1264:98:10"
											}
										]
									},
									"functionSelector": "e5da2cb2",
									"id": 1434,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "stakeLP",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1363,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1362,
												"mutability": "mutable",
												"name": "_tokenId",
												"nodeType": "VariableDeclaration",
												"scope": 1434,
												"src": "634:13:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1361,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "634:4:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "633:15:10"
									},
									"returnParameters": {
										"id": 1364,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "656:0:10"
									},
									"scope": 1435,
									"src": "617:754:10",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								}
							],
							"scope": 1436,
							"src": "313:1064:10"
						}
					],
					"src": "39:1338:10"
				},
				"id": 10
			},
			"contracts/interfaces/IERC721Permit.sol": {
				"ast": {
					"absolutePath": "contracts/interfaces/IERC721Permit.sol",
					"exportedSymbols": {
						"IERC165": [
							11
						],
						"IERC721": [
							1063
						],
						"IERC721Permit": [
							1470
						]
					},
					"id": 1471,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1437,
							"literals": [
								"solidity",
								">=",
								"0.7",
								".5"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:11"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC721/IERC721.sol",
							"file": "@openzeppelin/contracts/token/ERC721/IERC721.sol",
							"id": 1438,
							"nodeType": "ImportDirective",
							"scope": 1471,
							"sourceUnit": 1064,
							"src": "71:58:11",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 1440,
										"name": "IERC721",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 1063,
										"src": "282:7:11",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IERC721_$1063",
											"typeString": "contract IERC721"
										}
									},
									"id": 1441,
									"nodeType": "InheritanceSpecifier",
									"src": "282:7:11"
								}
							],
							"contractDependencies": [
								11,
								1063
							],
							"contractKind": "interface",
							"documentation": {
								"id": 1439,
								"nodeType": "StructuredDocumentation",
								"src": "131:124:11",
								"text": "@title ERC721 with permit\n @notice Extension to ERC721 that includes a permit function for signature based approvals"
							},
							"fullyImplemented": false,
							"id": 1470,
							"linearizedBaseContracts": [
								1470,
								1063,
								11
							],
							"name": "IERC721Permit",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 1442,
										"nodeType": "StructuredDocumentation",
										"src": "296:104:11",
										"text": "@notice The permit typehash used in the permit signature\n @return The typehash for the permit"
									},
									"functionSelector": "30adf81f",
									"id": 1447,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "PERMIT_TYPEHASH",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1443,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "429:2:11"
									},
									"returnParameters": {
										"id": 1446,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1445,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1447,
												"src": "455:7:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1444,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "455:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "454:9:11"
									},
									"scope": 1470,
									"src": "405:59:11",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1448,
										"nodeType": "StructuredDocumentation",
										"src": "470:135:11",
										"text": "@notice The domain separator used in the permit signature\n @return The domain seperator used in encoding of permit signature"
									},
									"functionSelector": "3644e515",
									"id": 1453,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "DOMAIN_SEPARATOR",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1449,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "635:2:11"
									},
									"returnParameters": {
										"id": 1452,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1451,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1453,
												"src": "661:7:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1450,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "661:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "660:9:11"
									},
									"scope": 1470,
									"src": "610:60:11",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1454,
										"nodeType": "StructuredDocumentation",
										"src": "676:605:11",
										"text": "@notice Approve of a specific token ID for spending by spender via signature\n @param spender The account that is being approved\n @param tokenId The ID of the token that is being approved for spending\n @param deadline The deadline timestamp by which the call must be mined for the approve to work\n @param v Must produce valid secp256k1 signature from the holder along with `r` and `s`\n @param r Must produce valid secp256k1 signature from the holder along with `v` and `s`\n @param s Must produce valid secp256k1 signature from the holder along with `r` and `v`"
									},
									"functionSelector": "7ac2ff7b",
									"id": 1469,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "permit",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1467,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1456,
												"mutability": "mutable",
												"name": "spender",
												"nodeType": "VariableDeclaration",
												"scope": 1469,
												"src": "1311:15:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1455,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1311:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1458,
												"mutability": "mutable",
												"name": "tokenId",
												"nodeType": "VariableDeclaration",
												"scope": 1469,
												"src": "1336:15:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1457,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1336:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1460,
												"mutability": "mutable",
												"name": "deadline",
												"nodeType": "VariableDeclaration",
												"scope": 1469,
												"src": "1361:16:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1459,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1361:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1462,
												"mutability": "mutable",
												"name": "v",
												"nodeType": "VariableDeclaration",
												"scope": 1469,
												"src": "1387:7:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 1461,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "1387:5:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1464,
												"mutability": "mutable",
												"name": "r",
												"nodeType": "VariableDeclaration",
												"scope": 1469,
												"src": "1404:9:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1463,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1404:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1466,
												"mutability": "mutable",
												"name": "s",
												"nodeType": "VariableDeclaration",
												"scope": 1469,
												"src": "1423:9:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1465,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1423:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1301:137:11"
									},
									"returnParameters": {
										"id": 1468,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1455:0:11"
									},
									"scope": 1470,
									"src": "1286:170:11",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1471,
							"src": "255:1203:11"
						}
					],
					"src": "45:1414:11"
				},
				"id": 11
			},
			"contracts/interfaces/INonfungiblePositionManager.sol": {
				"ast": {
					"absolutePath": "contracts/interfaces/INonfungiblePositionManager.sol",
					"exportedSymbols": {
						"IERC165": [
							11
						],
						"IERC721": [
							1063
						],
						"IERC721Enumerable": [
							1094
						],
						"IERC721Metadata": [
							1121
						],
						"IERC721Permit": [
							1470
						],
						"INonfungiblePositionManager": [
							1665
						],
						"IPeripheryImmutableState": [
							1681
						],
						"IPeripheryPayments": [
							1707
						],
						"IPoolInitializer": [
							1726
						],
						"PoolAddress": [
							2158
						]
					},
					"id": 1666,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1472,
							"literals": [
								"solidity",
								">=",
								"0.7",
								".5"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:12"
						},
						{
							"id": 1473,
							"literals": [
								"abicoder",
								"v2"
							],
							"nodeType": "PragmaDirective",
							"src": "70:19:12"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC721/IERC721Metadata.sol",
							"file": "@openzeppelin/contracts/token/ERC721/IERC721Metadata.sol",
							"id": 1474,
							"nodeType": "ImportDirective",
							"scope": 1666,
							"sourceUnit": 1122,
							"src": "91:66:12",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC721/IERC721Enumerable.sol",
							"file": "@openzeppelin/contracts/token/ERC721/IERC721Enumerable.sol",
							"id": 1475,
							"nodeType": "ImportDirective",
							"scope": 1666,
							"sourceUnit": 1095,
							"src": "158:68:12",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/interfaces/IPoolInitializer.sol",
							"file": "./IPoolInitializer.sol",
							"id": 1476,
							"nodeType": "ImportDirective",
							"scope": 1666,
							"sourceUnit": 1727,
							"src": "228:32:12",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/interfaces/IERC721Permit.sol",
							"file": "./IERC721Permit.sol",
							"id": 1477,
							"nodeType": "ImportDirective",
							"scope": 1666,
							"sourceUnit": 1471,
							"src": "261:29:12",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/interfaces/IPeripheryPayments.sol",
							"file": "./IPeripheryPayments.sol",
							"id": 1478,
							"nodeType": "ImportDirective",
							"scope": 1666,
							"sourceUnit": 1708,
							"src": "291:34:12",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/interfaces/IPeripheryImmutableState.sol",
							"file": "./IPeripheryImmutableState.sol",
							"id": 1479,
							"nodeType": "ImportDirective",
							"scope": 1666,
							"sourceUnit": 1682,
							"src": "326:40:12",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/libraries/PoolAddress.sol",
							"file": "../libraries/PoolAddress.sol",
							"id": 1480,
							"nodeType": "ImportDirective",
							"scope": 1666,
							"sourceUnit": 2159,
							"src": "367:38:12",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 1482,
										"name": "IPoolInitializer",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 1726,
										"src": "629:16:12",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IPoolInitializer_$1726",
											"typeString": "contract IPoolInitializer"
										}
									},
									"id": 1483,
									"nodeType": "InheritanceSpecifier",
									"src": "629:16:12"
								},
								{
									"baseName": {
										"id": 1484,
										"name": "IPeripheryPayments",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 1707,
										"src": "651:18:12",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IPeripheryPayments_$1707",
											"typeString": "contract IPeripheryPayments"
										}
									},
									"id": 1485,
									"nodeType": "InheritanceSpecifier",
									"src": "651:18:12"
								},
								{
									"baseName": {
										"id": 1486,
										"name": "IPeripheryImmutableState",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 1681,
										"src": "675:24:12",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IPeripheryImmutableState_$1681",
											"typeString": "contract IPeripheryImmutableState"
										}
									},
									"id": 1487,
									"nodeType": "InheritanceSpecifier",
									"src": "675:24:12"
								},
								{
									"baseName": {
										"id": 1488,
										"name": "IERC721Metadata",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 1121,
										"src": "705:15:12",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IERC721Metadata_$1121",
											"typeString": "contract IERC721Metadata"
										}
									},
									"id": 1489,
									"nodeType": "InheritanceSpecifier",
									"src": "705:15:12"
								},
								{
									"baseName": {
										"id": 1490,
										"name": "IERC721Enumerable",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 1094,
										"src": "726:17:12",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IERC721Enumerable_$1094",
											"typeString": "contract IERC721Enumerable"
										}
									},
									"id": 1491,
									"nodeType": "InheritanceSpecifier",
									"src": "726:17:12"
								},
								{
									"baseName": {
										"id": 1492,
										"name": "IERC721Permit",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 1470,
										"src": "749:13:12",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IERC721Permit_$1470",
											"typeString": "contract IERC721Permit"
										}
									},
									"id": 1493,
									"nodeType": "InheritanceSpecifier",
									"src": "749:13:12"
								}
							],
							"contractDependencies": [
								11,
								1063,
								1094,
								1121,
								1470,
								1681,
								1707,
								1726
							],
							"contractKind": "interface",
							"documentation": {
								"id": 1481,
								"nodeType": "StructuredDocumentation",
								"src": "407:177:12",
								"text": "@title Non-fungible token for positions\n @notice Wraps Uniswap V3 positions in a non-fungible token interface which allows for them to be transferred\n and authorized."
							},
							"fullyImplemented": false,
							"id": 1665,
							"linearizedBaseContracts": [
								1665,
								1470,
								1094,
								1121,
								1063,
								11,
								1681,
								1707,
								1726
							],
							"name": "INonfungiblePositionManager",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 1494,
										"nodeType": "StructuredDocumentation",
										"src": "769:458:12",
										"text": "@notice Emitted when liquidity is increased for a position NFT\n @dev Also emitted when a token is minted\n @param tokenId The ID of the token for which liquidity was increased\n @param liquidity The amount by which liquidity for the NFT position was increased\n @param amount0 The amount of token0 that was paid for the increase in liquidity\n @param amount1 The amount of token1 that was paid for the increase in liquidity"
									},
									"id": 1504,
									"name": "IncreaseLiquidity",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1503,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1496,
												"indexed": true,
												"mutability": "mutable",
												"name": "tokenId",
												"nodeType": "VariableDeclaration",
												"scope": 1504,
												"src": "1256:23:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1495,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1256:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1498,
												"indexed": false,
												"mutability": "mutable",
												"name": "liquidity",
												"nodeType": "VariableDeclaration",
												"scope": 1504,
												"src": "1281:17:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1497,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "1281:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1500,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 1504,
												"src": "1300:15:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1499,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1300:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1502,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 1504,
												"src": "1317:15:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1501,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1317:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1255:78:12"
									},
									"src": "1232:102:12"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1505,
										"nodeType": "StructuredDocumentation",
										"src": "1339:419:12",
										"text": "@notice Emitted when liquidity is decreased for a position NFT\n @param tokenId The ID of the token for which liquidity was decreased\n @param liquidity The amount by which liquidity for the NFT position was decreased\n @param amount0 The amount of token0 that was accounted for the decrease in liquidity\n @param amount1 The amount of token1 that was accounted for the decrease in liquidity"
									},
									"id": 1515,
									"name": "DecreaseLiquidity",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1514,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1507,
												"indexed": true,
												"mutability": "mutable",
												"name": "tokenId",
												"nodeType": "VariableDeclaration",
												"scope": 1515,
												"src": "1787:23:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1506,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1787:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1509,
												"indexed": false,
												"mutability": "mutable",
												"name": "liquidity",
												"nodeType": "VariableDeclaration",
												"scope": 1515,
												"src": "1812:17:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1508,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "1812:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1511,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 1515,
												"src": "1831:15:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1510,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1831:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1513,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 1515,
												"src": "1848:15:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1512,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1848:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1786:78:12"
									},
									"src": "1763:102:12"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1516,
										"nodeType": "StructuredDocumentation",
										"src": "1870:522:12",
										"text": "@notice Emitted when tokens are collected for a position NFT\n @dev The amounts reported may not be exactly equivalent to the amounts transferred, due to rounding behavior\n @param tokenId The ID of the token for which underlying tokens were collected\n @param recipient The address of the account that received the collected tokens\n @param amount0 The amount of token0 owed to the position that was collected\n @param amount1 The amount of token1 owed to the position that was collected"
									},
									"id": 1526,
									"name": "Collect",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1525,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1518,
												"indexed": true,
												"mutability": "mutable",
												"name": "tokenId",
												"nodeType": "VariableDeclaration",
												"scope": 1526,
												"src": "2411:23:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1517,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2411:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1520,
												"indexed": false,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 1526,
												"src": "2436:17:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1519,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2436:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1522,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 1526,
												"src": "2455:15:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1521,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2455:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1524,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 1526,
												"src": "2472:15:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1523,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2472:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2410:78:12"
									},
									"src": "2397:92:12"
								},
								{
									"documentation": {
										"id": 1527,
										"nodeType": "StructuredDocumentation",
										"src": "2495:1157:12",
										"text": "@notice Returns the position information associated with a given token ID.\n @dev Throws if the token ID is not valid.\n @param tokenId The ID of the token that represents the position\n @return nonce The nonce for permits\n @return operator The address that is approved for spending\n @return token0 The address of the token0 for a specific pool\n @return token1 The address of the token1 for a specific pool\n @return fee The fee associated with the pool\n @return tickLower The lower end of the tick range for the position\n @return tickUpper The higher end of the tick range for the position\n @return liquidity The liquidity of the position\n @return feeGrowthInside0LastX128 The fee growth of token0 as of the last action on the individual position\n @return feeGrowthInside1LastX128 The fee growth of token1 as of the last action on the individual position\n @return tokensOwed0 The uncollected amount of token0 owed to the position as of the last computation\n @return tokensOwed1 The uncollected amount of token1 owed to the position as of the last computation"
									},
									"functionSelector": "99fbab88",
									"id": 1556,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "positions",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1530,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1529,
												"mutability": "mutable",
												"name": "tokenId",
												"nodeType": "VariableDeclaration",
												"scope": 1556,
												"src": "3676:15:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1528,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3676:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3675:17:12"
									},
									"returnParameters": {
										"id": 1555,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1532,
												"mutability": "mutable",
												"name": "nonce",
												"nodeType": "VariableDeclaration",
												"scope": 1556,
												"src": "3753:12:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint96",
													"typeString": "uint96"
												},
												"typeName": {
													"id": 1531,
													"name": "uint96",
													"nodeType": "ElementaryTypeName",
													"src": "3753:6:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint96",
														"typeString": "uint96"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1534,
												"mutability": "mutable",
												"name": "operator",
												"nodeType": "VariableDeclaration",
												"scope": 1556,
												"src": "3779:16:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1533,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3779:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1536,
												"mutability": "mutable",
												"name": "token0",
												"nodeType": "VariableDeclaration",
												"scope": 1556,
												"src": "3809:14:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1535,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3809:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1538,
												"mutability": "mutable",
												"name": "token1",
												"nodeType": "VariableDeclaration",
												"scope": 1556,
												"src": "3837:14:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1537,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3837:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1540,
												"mutability": "mutable",
												"name": "fee",
												"nodeType": "VariableDeclaration",
												"scope": 1556,
												"src": "3865:10:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint24",
													"typeString": "uint24"
												},
												"typeName": {
													"id": 1539,
													"name": "uint24",
													"nodeType": "ElementaryTypeName",
													"src": "3865:6:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint24",
														"typeString": "uint24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1542,
												"mutability": "mutable",
												"name": "tickLower",
												"nodeType": "VariableDeclaration",
												"scope": 1556,
												"src": "3889:15:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 1541,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "3889:5:12",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1544,
												"mutability": "mutable",
												"name": "tickUpper",
												"nodeType": "VariableDeclaration",
												"scope": 1556,
												"src": "3918:15:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 1543,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "3918:5:12",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1546,
												"mutability": "mutable",
												"name": "liquidity",
												"nodeType": "VariableDeclaration",
												"scope": 1556,
												"src": "3947:17:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1545,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "3947:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1548,
												"mutability": "mutable",
												"name": "feeGrowthInside0LastX128",
												"nodeType": "VariableDeclaration",
												"scope": 1556,
												"src": "3978:32:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1547,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3978:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1550,
												"mutability": "mutable",
												"name": "feeGrowthInside1LastX128",
												"nodeType": "VariableDeclaration",
												"scope": 1556,
												"src": "4024:32:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1549,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4024:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1552,
												"mutability": "mutable",
												"name": "tokensOwed0",
												"nodeType": "VariableDeclaration",
												"scope": 1556,
												"src": "4070:19:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1551,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "4070:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1554,
												"mutability": "mutable",
												"name": "tokensOwed1",
												"nodeType": "VariableDeclaration",
												"scope": 1556,
												"src": "4103:19:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1553,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "4103:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3739:393:12"
									},
									"scope": 1665,
									"src": "3657:476:12",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"canonicalName": "INonfungiblePositionManager.MintParams",
									"id": 1579,
									"members": [
										{
											"constant": false,
											"id": 1558,
											"mutability": "mutable",
											"name": "token0",
											"nodeType": "VariableDeclaration",
											"scope": 1579,
											"src": "4167:14:12",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 1557,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "4167:7:12",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1560,
											"mutability": "mutable",
											"name": "token1",
											"nodeType": "VariableDeclaration",
											"scope": 1579,
											"src": "4191:14:12",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 1559,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "4191:7:12",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1562,
											"mutability": "mutable",
											"name": "fee",
											"nodeType": "VariableDeclaration",
											"scope": 1579,
											"src": "4215:10:12",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint24",
												"typeString": "uint24"
											},
											"typeName": {
												"id": 1561,
												"name": "uint24",
												"nodeType": "ElementaryTypeName",
												"src": "4215:6:12",
												"typeDescriptions": {
													"typeIdentifier": "t_uint24",
													"typeString": "uint24"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1564,
											"mutability": "mutable",
											"name": "tickLower",
											"nodeType": "VariableDeclaration",
											"scope": 1579,
											"src": "4235:15:12",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_int24",
												"typeString": "int24"
											},
											"typeName": {
												"id": 1563,
												"name": "int24",
												"nodeType": "ElementaryTypeName",
												"src": "4235:5:12",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1566,
											"mutability": "mutable",
											"name": "tickUpper",
											"nodeType": "VariableDeclaration",
											"scope": 1579,
											"src": "4260:15:12",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_int24",
												"typeString": "int24"
											},
											"typeName": {
												"id": 1565,
												"name": "int24",
												"nodeType": "ElementaryTypeName",
												"src": "4260:5:12",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1568,
											"mutability": "mutable",
											"name": "amount0Desired",
											"nodeType": "VariableDeclaration",
											"scope": 1579,
											"src": "4285:22:12",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1567,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "4285:7:12",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1570,
											"mutability": "mutable",
											"name": "amount1Desired",
											"nodeType": "VariableDeclaration",
											"scope": 1579,
											"src": "4317:22:12",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1569,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "4317:7:12",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1572,
											"mutability": "mutable",
											"name": "amount0Min",
											"nodeType": "VariableDeclaration",
											"scope": 1579,
											"src": "4349:18:12",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1571,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "4349:7:12",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1574,
											"mutability": "mutable",
											"name": "amount1Min",
											"nodeType": "VariableDeclaration",
											"scope": 1579,
											"src": "4377:18:12",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1573,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "4377:7:12",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1576,
											"mutability": "mutable",
											"name": "recipient",
											"nodeType": "VariableDeclaration",
											"scope": 1579,
											"src": "4405:17:12",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 1575,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "4405:7:12",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1578,
											"mutability": "mutable",
											"name": "deadline",
											"nodeType": "VariableDeclaration",
											"scope": 1579,
											"src": "4432:16:12",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1577,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "4432:7:12",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "MintParams",
									"nodeType": "StructDefinition",
									"scope": 1665,
									"src": "4139:316:12",
									"visibility": "public"
								},
								{
									"documentation": {
										"id": 1580,
										"nodeType": "StructuredDocumentation",
										"src": "4461:586:12",
										"text": "@notice Creates a new position wrapped in a NFT\n @dev Call this when the pool does exist and is initialized. Note that if the pool is created but not initialized\n a method does not exist, i.e. the pool is assumed to be initialized.\n @param params The params necessary to mint a position, encoded as `MintParams` in calldata\n @return tokenId The ID of the token that represents the minted position\n @return liquidity The amount of liquidity for this position\n @return amount0 The amount of token0\n @return amount1 The amount of token1"
									},
									"functionSelector": "88316456",
									"id": 1593,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "mint",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1583,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1582,
												"mutability": "mutable",
												"name": "params",
												"nodeType": "VariableDeclaration",
												"scope": 1593,
												"src": "5066:26:12",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_MintParams_$1579_calldata_ptr",
													"typeString": "struct INonfungiblePositionManager.MintParams"
												},
												"typeName": {
													"id": 1581,
													"name": "MintParams",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 1579,
													"src": "5066:10:12",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_MintParams_$1579_storage_ptr",
														"typeString": "struct INonfungiblePositionManager.MintParams"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5065:28:12"
									},
									"returnParameters": {
										"id": 1592,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1585,
												"mutability": "mutable",
												"name": "tokenId",
												"nodeType": "VariableDeclaration",
												"scope": 1593,
												"src": "5157:15:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1584,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5157:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1587,
												"mutability": "mutable",
												"name": "liquidity",
												"nodeType": "VariableDeclaration",
												"scope": 1593,
												"src": "5186:17:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1586,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "5186:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1589,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 1593,
												"src": "5217:15:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1588,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5217:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1591,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 1593,
												"src": "5246:15:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1590,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5246:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5143:128:12"
									},
									"scope": 1665,
									"src": "5052:220:12",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"canonicalName": "INonfungiblePositionManager.IncreaseLiquidityParams",
									"id": 1606,
									"members": [
										{
											"constant": false,
											"id": 1595,
											"mutability": "mutable",
											"name": "tokenId",
											"nodeType": "VariableDeclaration",
											"scope": 1606,
											"src": "5319:15:12",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1594,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "5319:7:12",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1597,
											"mutability": "mutable",
											"name": "amount0Desired",
											"nodeType": "VariableDeclaration",
											"scope": 1606,
											"src": "5344:22:12",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1596,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "5344:7:12",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1599,
											"mutability": "mutable",
											"name": "amount1Desired",
											"nodeType": "VariableDeclaration",
											"scope": 1606,
											"src": "5376:22:12",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1598,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "5376:7:12",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1601,
											"mutability": "mutable",
											"name": "amount0Min",
											"nodeType": "VariableDeclaration",
											"scope": 1606,
											"src": "5408:18:12",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1600,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "5408:7:12",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1603,
											"mutability": "mutable",
											"name": "amount1Min",
											"nodeType": "VariableDeclaration",
											"scope": 1606,
											"src": "5436:18:12",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1602,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "5436:7:12",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1605,
											"mutability": "mutable",
											"name": "deadline",
											"nodeType": "VariableDeclaration",
											"scope": 1606,
											"src": "5464:16:12",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1604,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "5464:7:12",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "IncreaseLiquidityParams",
									"nodeType": "StructDefinition",
									"scope": 1665,
									"src": "5278:209:12",
									"visibility": "public"
								},
								{
									"documentation": {
										"id": 1607,
										"nodeType": "StructuredDocumentation",
										"src": "5493:821:12",
										"text": "@notice Increases the amount of liquidity in a position, with tokens paid by the `msg.sender`\n @param params tokenId The ID of the token for which liquidity is being increased,\n amount0Desired The desired amount of token0 to be spent,\n amount1Desired The desired amount of token1 to be spent,\n amount0Min The minimum amount of token0 to spend, which serves as a slippage check,\n amount1Min The minimum amount of token1 to spend, which serves as a slippage check,\n deadline The time by which the transaction must be included to effect the change\n @return liquidity The new liquidity amount as a result of the increase\n @return amount0 The amount of token0 to acheive resulting liquidity\n @return amount1 The amount of token1 to acheive resulting liquidity"
									},
									"functionSelector": "219f5d17",
									"id": 1618,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "increaseLiquidity",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1610,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1609,
												"mutability": "mutable",
												"name": "params",
												"nodeType": "VariableDeclaration",
												"scope": 1618,
												"src": "6346:39:12",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_IncreaseLiquidityParams_$1606_calldata_ptr",
													"typeString": "struct INonfungiblePositionManager.IncreaseLiquidityParams"
												},
												"typeName": {
													"id": 1608,
													"name": "IncreaseLiquidityParams",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 1606,
													"src": "6346:23:12",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_IncreaseLiquidityParams_$1606_storage_ptr",
														"typeString": "struct INonfungiblePositionManager.IncreaseLiquidityParams"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6345:41:12"
									},
									"returnParameters": {
										"id": 1617,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1612,
												"mutability": "mutable",
												"name": "liquidity",
												"nodeType": "VariableDeclaration",
												"scope": 1618,
												"src": "6450:17:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1611,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "6450:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1614,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 1618,
												"src": "6481:15:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1613,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6481:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1616,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 1618,
												"src": "6510:15:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1615,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6510:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6436:99:12"
									},
									"scope": 1665,
									"src": "6319:217:12",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"canonicalName": "INonfungiblePositionManager.DecreaseLiquidityParams",
									"id": 1629,
									"members": [
										{
											"constant": false,
											"id": 1620,
											"mutability": "mutable",
											"name": "tokenId",
											"nodeType": "VariableDeclaration",
											"scope": 1629,
											"src": "6583:15:12",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1619,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "6583:7:12",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1622,
											"mutability": "mutable",
											"name": "liquidity",
											"nodeType": "VariableDeclaration",
											"scope": 1629,
											"src": "6608:17:12",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint128",
												"typeString": "uint128"
											},
											"typeName": {
												"id": 1621,
												"name": "uint128",
												"nodeType": "ElementaryTypeName",
												"src": "6608:7:12",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1624,
											"mutability": "mutable",
											"name": "amount0Min",
											"nodeType": "VariableDeclaration",
											"scope": 1629,
											"src": "6635:18:12",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1623,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "6635:7:12",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1626,
											"mutability": "mutable",
											"name": "amount1Min",
											"nodeType": "VariableDeclaration",
											"scope": 1629,
											"src": "6663:18:12",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1625,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "6663:7:12",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1628,
											"mutability": "mutable",
											"name": "deadline",
											"nodeType": "VariableDeclaration",
											"scope": 1629,
											"src": "6691:16:12",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1627,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "6691:7:12",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "DecreaseLiquidityParams",
									"nodeType": "StructDefinition",
									"scope": 1665,
									"src": "6542:172:12",
									"visibility": "public"
								},
								{
									"documentation": {
										"id": 1630,
										"nodeType": "StructuredDocumentation",
										"src": "6720:702:12",
										"text": "@notice Decreases the amount of liquidity in a position and accounts it to the position\n @param params tokenId The ID of the token for which liquidity is being decreased,\n amount The amount by which liquidity will be decreased,\n amount0Min The minimum amount of token0 that should be accounted for the burned liquidity,\n amount1Min The minimum amount of token1 that should be accounted for the burned liquidity,\n deadline The time by which the transaction must be included to effect the change\n @return amount0 The amount of token0 accounted to the position's tokens owed\n @return amount1 The amount of token1 accounted to the position's tokens owed"
									},
									"functionSelector": "0c49ccbe",
									"id": 1639,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "decreaseLiquidity",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1633,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1632,
												"mutability": "mutable",
												"name": "params",
												"nodeType": "VariableDeclaration",
												"scope": 1639,
												"src": "7454:39:12",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_DecreaseLiquidityParams_$1629_calldata_ptr",
													"typeString": "struct INonfungiblePositionManager.DecreaseLiquidityParams"
												},
												"typeName": {
													"id": 1631,
													"name": "DecreaseLiquidityParams",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 1629,
													"src": "7454:23:12",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_DecreaseLiquidityParams_$1629_storage_ptr",
														"typeString": "struct INonfungiblePositionManager.DecreaseLiquidityParams"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7453:41:12"
									},
									"returnParameters": {
										"id": 1638,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1635,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 1639,
												"src": "7545:15:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1634,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7545:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1637,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 1639,
												"src": "7562:15:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1636,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7562:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7544:34:12"
									},
									"scope": 1665,
									"src": "7427:152:12",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"canonicalName": "INonfungiblePositionManager.CollectParams",
									"id": 1648,
									"members": [
										{
											"constant": false,
											"id": 1641,
											"mutability": "mutable",
											"name": "tokenId",
											"nodeType": "VariableDeclaration",
											"scope": 1648,
											"src": "7616:15:12",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1640,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "7616:7:12",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1643,
											"mutability": "mutable",
											"name": "recipient",
											"nodeType": "VariableDeclaration",
											"scope": 1648,
											"src": "7641:17:12",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 1642,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "7641:7:12",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1645,
											"mutability": "mutable",
											"name": "amount0Max",
											"nodeType": "VariableDeclaration",
											"scope": 1648,
											"src": "7668:18:12",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint128",
												"typeString": "uint128"
											},
											"typeName": {
												"id": 1644,
												"name": "uint128",
												"nodeType": "ElementaryTypeName",
												"src": "7668:7:12",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1647,
											"mutability": "mutable",
											"name": "amount1Max",
											"nodeType": "VariableDeclaration",
											"scope": 1648,
											"src": "7696:18:12",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint128",
												"typeString": "uint128"
											},
											"typeName": {
												"id": 1646,
												"name": "uint128",
												"nodeType": "ElementaryTypeName",
												"src": "7696:7:12",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "CollectParams",
									"nodeType": "StructDefinition",
									"scope": 1665,
									"src": "7585:136:12",
									"visibility": "public"
								},
								{
									"documentation": {
										"id": 1649,
										"nodeType": "StructuredDocumentation",
										"src": "7727:489:12",
										"text": "@notice Collects up to a maximum amount of fees owed to a specific position to the recipient\n @param params tokenId The ID of the NFT for which tokens are being collected,\n recipient The account that should receive the tokens,\n amount0Max The maximum amount of token0 to collect,\n amount1Max The maximum amount of token1 to collect\n @return amount0 The amount of fees collected in token0\n @return amount1 The amount of fees collected in token1"
									},
									"functionSelector": "fc6f7865",
									"id": 1658,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "collect",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1652,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1651,
												"mutability": "mutable",
												"name": "params",
												"nodeType": "VariableDeclaration",
												"scope": 1658,
												"src": "8238:29:12",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_CollectParams_$1648_calldata_ptr",
													"typeString": "struct INonfungiblePositionManager.CollectParams"
												},
												"typeName": {
													"id": 1650,
													"name": "CollectParams",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 1648,
													"src": "8238:13:12",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_CollectParams_$1648_storage_ptr",
														"typeString": "struct INonfungiblePositionManager.CollectParams"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8237:31:12"
									},
									"returnParameters": {
										"id": 1657,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1654,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 1658,
												"src": "8295:15:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1653,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8295:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1656,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 1658,
												"src": "8312:15:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1655,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8312:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8294:34:12"
									},
									"scope": 1665,
									"src": "8221:108:12",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1659,
										"nodeType": "StructuredDocumentation",
										"src": "8335:213:12",
										"text": "@notice Burns a token ID, which deletes it from the NFT contract. The token must have 0 liquidity and all tokens\n must be collected first.\n @param tokenId The ID of the token that is being burned"
									},
									"functionSelector": "42966c68",
									"id": 1664,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "burn",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1662,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1661,
												"mutability": "mutable",
												"name": "tokenId",
												"nodeType": "VariableDeclaration",
												"scope": 1664,
												"src": "8567:15:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1660,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8567:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8566:17:12"
									},
									"returnParameters": {
										"id": 1663,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8600:0:12"
									},
									"scope": 1665,
									"src": "8553:48:12",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1666,
							"src": "584:8019:12"
						}
					],
					"src": "45:8559:12"
				},
				"id": 12
			},
			"contracts/interfaces/IPeripheryImmutableState.sol": {
				"ast": {
					"absolutePath": "contracts/interfaces/IPeripheryImmutableState.sol",
					"exportedSymbols": {
						"IPeripheryImmutableState": [
							1681
						]
					},
					"id": 1682,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1667,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:13"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 1668,
								"nodeType": "StructuredDocumentation",
								"src": "71:91:13",
								"text": "@title Immutable state\n @notice Functions that return immutable state of the router"
							},
							"fullyImplemented": false,
							"id": 1681,
							"linearizedBaseContracts": [
								1681
							],
							"name": "IPeripheryImmutableState",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 1669,
										"nodeType": "StructuredDocumentation",
										"src": "203:57:13",
										"text": "@return Returns the address of the Uniswap V3 factory"
									},
									"functionSelector": "c45a0155",
									"id": 1674,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "factory",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1670,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "281:2:13"
									},
									"returnParameters": {
										"id": 1673,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1672,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1674,
												"src": "307:7:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1671,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "307:7:13",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "306:9:13"
									},
									"scope": 1681,
									"src": "265:51:13",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1675,
										"nodeType": "StructuredDocumentation",
										"src": "322:40:13",
										"text": "@return Returns the address of WETH9"
									},
									"functionSelector": "4aa4a4fc",
									"id": 1680,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "WETH9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1676,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "381:2:13"
									},
									"returnParameters": {
										"id": 1679,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1678,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1680,
												"src": "407:7:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1677,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "407:7:13",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "406:9:13"
									},
									"scope": 1681,
									"src": "367:49:13",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1682,
							"src": "162:256:13"
						}
					],
					"src": "45:374:13"
				},
				"id": 13
			},
			"contracts/interfaces/IPeripheryPayments.sol": {
				"ast": {
					"absolutePath": "contracts/interfaces/IPeripheryPayments.sol",
					"exportedSymbols": {
						"IPeripheryPayments": [
							1707
						]
					},
					"id": 1708,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1683,
							"literals": [
								"solidity",
								">=",
								"0.7",
								".5"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:14"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 1684,
								"nodeType": "StructuredDocumentation",
								"src": "71:92:14",
								"text": "@title Periphery Payments\n @notice Functions to ease deposits and withdrawals of ETH"
							},
							"fullyImplemented": false,
							"id": 1707,
							"linearizedBaseContracts": [
								1707
							],
							"name": "IPeripheryPayments",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 1685,
										"nodeType": "StructuredDocumentation",
										"src": "198:302:14",
										"text": "@notice Unwraps the contract's WETH9 balance and sends it to recipient as ETH.\n @dev The amountMinimum parameter prevents malicious contracts from stealing WETH9 from users.\n @param amountMinimum The minimum amount of WETH9 to unwrap\n @param recipient The address receiving ETH"
									},
									"functionSelector": "49404b7c",
									"id": 1692,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "unwrapWETH9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1690,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1687,
												"mutability": "mutable",
												"name": "amountMinimum",
												"nodeType": "VariableDeclaration",
												"scope": 1692,
												"src": "526:21:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1686,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "526:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1689,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 1692,
												"src": "549:17:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1688,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "549:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "525:42:14"
									},
									"returnParameters": {
										"id": 1691,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "584:0:14"
									},
									"scope": 1707,
									"src": "505:80:14",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1693,
										"nodeType": "StructuredDocumentation",
										"src": "591:225:14",
										"text": "@notice Refunds any ETH balance held by this contract to the `msg.sender`\n @dev Useful for bundling with mint or increase liquidity that uses ether, or exact output swaps\n that use ether for the input amount"
									},
									"functionSelector": "12210e8a",
									"id": 1696,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "refundETH",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1694,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "839:2:14"
									},
									"returnParameters": {
										"id": 1695,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "858:0:14"
									},
									"scope": 1707,
									"src": "821:38:14",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1697,
										"nodeType": "StructuredDocumentation",
										"src": "865:427:14",
										"text": "@notice Transfers the full amount of a token held by this contract to recipient\n @dev The amountMinimum parameter prevents malicious contracts from stealing the token from users\n @param token The contract address of the token which will be transferred to `recipient`\n @param amountMinimum The minimum amount of token required for a transfer\n @param recipient The destination address of the token"
									},
									"functionSelector": "df2ab5bb",
									"id": 1706,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "sweepToken",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1704,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1699,
												"mutability": "mutable",
												"name": "token",
												"nodeType": "VariableDeclaration",
												"scope": 1706,
												"src": "1326:13:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1698,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1326:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1701,
												"mutability": "mutable",
												"name": "amountMinimum",
												"nodeType": "VariableDeclaration",
												"scope": 1706,
												"src": "1349:21:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1700,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1349:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1703,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 1706,
												"src": "1380:17:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1702,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1380:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1316:87:14"
									},
									"returnParameters": {
										"id": 1705,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1420:0:14"
									},
									"scope": 1707,
									"src": "1297:124:14",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1708,
							"src": "163:1260:14"
						}
					],
					"src": "45:1379:14"
				},
				"id": 14
			},
			"contracts/interfaces/IPoolInitializer.sol": {
				"ast": {
					"absolutePath": "contracts/interfaces/IPoolInitializer.sol",
					"exportedSymbols": {
						"IPoolInitializer": [
							1726
						]
					},
					"id": 1727,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1709,
							"literals": [
								"solidity",
								">=",
								"0.7",
								".5"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:15"
						},
						{
							"id": 1710,
							"literals": [
								"abicoder",
								"v2"
							],
							"nodeType": "PragmaDirective",
							"src": "70:19:15"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 1711,
								"nodeType": "StructuredDocumentation",
								"src": "91:194:15",
								"text": "@title Creates and initializes V3 Pools\n @notice Provides a method for creating and initializing a pool, if necessary, for bundling with other methods that\n require the pool to exist."
							},
							"fullyImplemented": false,
							"id": 1726,
							"linearizedBaseContracts": [
								1726
							],
							"name": "IPoolInitializer",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 1712,
										"nodeType": "StructuredDocumentation",
										"src": "318:648:15",
										"text": "@notice Creates a new pool if it does not exist, then initializes if not initialized\n @dev This method can be bundled with others via IMulticall for the first action (e.g. mint) performed against a pool\n @param token0 The contract address of token0 of the pool\n @param token1 The contract address of token1 of the pool\n @param fee The fee amount of the v3 pool for the specified token pair\n @param sqrtPriceX96 The initial square root price of the pool as a Q64.96 value\n @return pool Returns the pool address based on the pair of tokens and fee, will return the newly created pool address if necessary"
									},
									"functionSelector": "13ead562",
									"id": 1725,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "createAndInitializePoolIfNecessary",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1721,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1714,
												"mutability": "mutable",
												"name": "token0",
												"nodeType": "VariableDeclaration",
												"scope": 1725,
												"src": "1024:14:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1713,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1024:7:15",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1716,
												"mutability": "mutable",
												"name": "token1",
												"nodeType": "VariableDeclaration",
												"scope": 1725,
												"src": "1048:14:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1715,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1048:7:15",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1718,
												"mutability": "mutable",
												"name": "fee",
												"nodeType": "VariableDeclaration",
												"scope": 1725,
												"src": "1072:10:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint24",
													"typeString": "uint24"
												},
												"typeName": {
													"id": 1717,
													"name": "uint24",
													"nodeType": "ElementaryTypeName",
													"src": "1072:6:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint24",
														"typeString": "uint24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1720,
												"mutability": "mutable",
												"name": "sqrtPriceX96",
												"nodeType": "VariableDeclaration",
												"scope": 1725,
												"src": "1092:20:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 1719,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "1092:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1014:104:15"
									},
									"returnParameters": {
										"id": 1724,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1723,
												"mutability": "mutable",
												"name": "pool",
												"nodeType": "VariableDeclaration",
												"scope": 1725,
												"src": "1145:12:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1722,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1145:7:15",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1144:14:15"
									},
									"scope": 1726,
									"src": "971:188:15",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1727,
							"src": "285:876:15"
						}
					],
					"src": "45:1117:15"
				},
				"id": 15
			},
			"contracts/libraries/LiquidityAmounts.sol": {
				"ast": {
					"absolutePath": "contracts/libraries/LiquidityAmounts.sol",
					"exportedSymbols": {
						"FixedPoint96": [
							1154
						],
						"FullMath": [
							1327
						],
						"LiquidityAmounts": [
							2066
						]
					},
					"id": 2067,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1728,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:16"
						},
						{
							"absolutePath": "@uniswap/v3-core/contracts/libraries/FullMath.sol",
							"file": "@uniswap/v3-core/contracts/libraries/FullMath.sol",
							"id": 1729,
							"nodeType": "ImportDirective",
							"scope": 2067,
							"sourceUnit": 1328,
							"src": "71:59:16",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@uniswap/v3-core/contracts/libraries/FixedPoint96.sol",
							"file": "@uniswap/v3-core/contracts/libraries/FixedPoint96.sol",
							"id": 1730,
							"nodeType": "ImportDirective",
							"scope": 2067,
							"sourceUnit": 1155,
							"src": "131:63:16",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 1731,
								"nodeType": "StructuredDocumentation",
								"src": "196:131:16",
								"text": "@title Liquidity amount functions\n @notice Provides functions for computing liquidity amounts from token amounts and prices"
							},
							"fullyImplemented": true,
							"id": 2066,
							"linearizedBaseContracts": [
								2066
							],
							"name": "LiquidityAmounts",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 1751,
										"nodeType": "Block",
										"src": "570:47:16",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1748,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"id": 1745,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 1740,
																			"name": "y",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1737,
																			"src": "589:1:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint128",
																				"typeString": "uint128"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "=",
																		"rightHandSide": {
																			"arguments": [
																				{
																					"id": 1743,
																					"name": "x",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1734,
																					"src": "601:1:16",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				],
																				"id": 1742,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "ElementaryTypeNameExpression",
																				"src": "593:7:16",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_uint128_$",
																					"typeString": "type(uint128)"
																				},
																				"typeName": {
																					"id": 1741,
																					"name": "uint128",
																					"nodeType": "ElementaryTypeName",
																					"src": "593:7:16",
																					"typeDescriptions": {}
																				}
																			},
																			"id": 1744,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "typeConversion",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "593:10:16",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint128",
																				"typeString": "uint128"
																			}
																		},
																		"src": "589:14:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint128",
																			"typeString": "uint128"
																		}
																	}
																],
																"id": 1746,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "588:16:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint128",
																	"typeString": "uint128"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"id": 1747,
																"name": "x",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1734,
																"src": "608:1:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "588:21:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 1739,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "580:7:16",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 1749,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "580:30:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1750,
												"nodeType": "ExpressionStatement",
												"src": "580:30:16"
											}
										]
									},
									"documentation": {
										"id": 1732,
										"nodeType": "StructuredDocumentation",
										"src": "358:144:16",
										"text": "@notice Downcasts uint256 to uint128\n @param x The uint258 to be downcasted\n @return y The passed value, downcasted to uint128"
									},
									"id": 1752,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toUint128",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1735,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1734,
												"mutability": "mutable",
												"name": "x",
												"nodeType": "VariableDeclaration",
												"scope": 1752,
												"src": "526:9:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1733,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "526:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "525:11:16"
									},
									"returnParameters": {
										"id": 1738,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1737,
												"mutability": "mutable",
												"name": "y",
												"nodeType": "VariableDeclaration",
												"scope": 1752,
												"src": "559:9:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1736,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "559:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "558:11:16"
									},
									"scope": 2066,
									"src": "507:110:16",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 1797,
										"nodeType": "Block",
										"src": "1252:308:16",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													},
													"id": 1766,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1764,
														"name": "sqrtRatioAX96",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1755,
														"src": "1266:13:16",
														"typeDescriptions": {
															"typeIdentifier": "t_uint160",
															"typeString": "uint160"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"id": 1765,
														"name": "sqrtRatioBX96",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1757,
														"src": "1282:13:16",
														"typeDescriptions": {
															"typeIdentifier": "t_uint160",
															"typeString": "uint160"
														}
													},
													"src": "1266:29:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1775,
												"nodeType": "IfStatement",
												"src": "1262:98:16",
												"trueBody": {
													"expression": {
														"id": 1773,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"components": [
																{
																	"id": 1767,
																	"name": "sqrtRatioAX96",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1755,
																	"src": "1298:13:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																},
																{
																	"id": 1768,
																	"name": "sqrtRatioBX96",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1757,
																	"src": "1313:13:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																}
															],
															"id": 1769,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": true,
															"nodeType": "TupleExpression",
															"src": "1297:30:16",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_uint160_$_t_uint160_$",
																"typeString": "tuple(uint160,uint160)"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"components": [
																{
																	"id": 1770,
																	"name": "sqrtRatioBX96",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1757,
																	"src": "1331:13:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																},
																{
																	"id": 1771,
																	"name": "sqrtRatioAX96",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1755,
																	"src": "1346:13:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																}
															],
															"id": 1772,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "1330:30:16",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_uint160_$_t_uint160_$",
																"typeString": "tuple(uint160,uint160)"
															}
														},
														"src": "1297:63:16",
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$__$",
															"typeString": "tuple()"
														}
													},
													"id": 1774,
													"nodeType": "ExpressionStatement",
													"src": "1297:63:16"
												}
											},
											{
												"assignments": [
													1777
												],
												"declarations": [
													{
														"constant": false,
														"id": 1777,
														"mutability": "mutable",
														"name": "intermediate",
														"nodeType": "VariableDeclaration",
														"scope": 1797,
														"src": "1370:20:16",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1776,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "1370:7:16",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1785,
												"initialValue": {
													"arguments": [
														{
															"id": 1780,
															"name": "sqrtRatioAX96",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1755,
															"src": "1409:13:16",
															"typeDescriptions": {
																"typeIdentifier": "t_uint160",
																"typeString": "uint160"
															}
														},
														{
															"id": 1781,
															"name": "sqrtRatioBX96",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1757,
															"src": "1424:13:16",
															"typeDescriptions": {
																"typeIdentifier": "t_uint160",
																"typeString": "uint160"
															}
														},
														{
															"expression": {
																"id": 1782,
																"name": "FixedPoint96",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1154,
																"src": "1439:12:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_FixedPoint96_$1154_$",
																	"typeString": "type(library FixedPoint96)"
																}
															},
															"id": 1783,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "Q96",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1153,
															"src": "1439:16:16",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint160",
																"typeString": "uint160"
															},
															{
																"typeIdentifier": "t_uint160",
																"typeString": "uint160"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 1778,
															"name": "FullMath",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1327,
															"src": "1393:8:16",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_FullMath_$1327_$",
																"typeString": "type(library FullMath)"
															}
														},
														"id": 1779,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "mulDiv",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1283,
														"src": "1393:15:16",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
															"typeString": "function (uint256,uint256,uint256) pure returns (uint256)"
														}
													},
													"id": 1784,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1393:63:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1370:86:16"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 1789,
																	"name": "amount0",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1759,
																	"src": "1499:7:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"id": 1790,
																	"name": "intermediate",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1777,
																	"src": "1508:12:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	},
																	"id": 1793,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 1791,
																		"name": "sqrtRatioBX96",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1757,
																		"src": "1522:13:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint160",
																			"typeString": "uint160"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "-",
																	"rightExpression": {
																		"id": 1792,
																		"name": "sqrtRatioAX96",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1755,
																		"src": "1538:13:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint160",
																			"typeString": "uint160"
																		}
																	},
																	"src": "1522:29:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																],
																"expression": {
																	"id": 1787,
																	"name": "FullMath",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1327,
																	"src": "1483:8:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_contract$_FullMath_$1327_$",
																		"typeString": "type(library FullMath)"
																	}
																},
																"id": 1788,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "mulDiv",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 1283,
																"src": "1483:15:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256,uint256,uint256) pure returns (uint256)"
																}
															},
															"id": 1794,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1483:69:16",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1786,
														"name": "toUint128",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1752,
														"src": "1473:9:16",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint128_$",
															"typeString": "function (uint256) pure returns (uint128)"
														}
													},
													"id": 1795,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1473:80:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"functionReturnParameters": 1763,
												"id": 1796,
												"nodeType": "Return",
												"src": "1466:87:16"
											}
										]
									},
									"documentation": {
										"id": 1753,
										"nodeType": "StructuredDocumentation",
										"src": "623:457:16",
										"text": "@notice Computes the amount of liquidity received for a given amount of token0 and price range\n @dev Calculates amount0 * (sqrt(upper) * sqrt(lower)) / (sqrt(upper) - sqrt(lower))\n @param sqrtRatioAX96 A sqrt price representing the first tick boundary\n @param sqrtRatioBX96 A sqrt price representing the second tick boundary\n @param amount0 The amount0 being sent in\n @return liquidity The amount of returned liquidity"
									},
									"id": 1798,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getLiquidityForAmount0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1760,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1755,
												"mutability": "mutable",
												"name": "sqrtRatioAX96",
												"nodeType": "VariableDeclaration",
												"scope": 1798,
												"src": "1126:21:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 1754,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "1126:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1757,
												"mutability": "mutable",
												"name": "sqrtRatioBX96",
												"nodeType": "VariableDeclaration",
												"scope": 1798,
												"src": "1157:21:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 1756,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "1157:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1759,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 1798,
												"src": "1188:15:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1758,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1188:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1116:93:16"
									},
									"returnParameters": {
										"id": 1763,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1762,
												"mutability": "mutable",
												"name": "liquidity",
												"nodeType": "VariableDeclaration",
												"scope": 1798,
												"src": "1233:17:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1761,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "1233:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1232:19:16"
									},
									"scope": 2066,
									"src": "1085:475:16",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1834,
										"nodeType": "Block",
										"src": "2166:216:16",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													},
													"id": 1812,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1810,
														"name": "sqrtRatioAX96",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1801,
														"src": "2180:13:16",
														"typeDescriptions": {
															"typeIdentifier": "t_uint160",
															"typeString": "uint160"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"id": 1811,
														"name": "sqrtRatioBX96",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1803,
														"src": "2196:13:16",
														"typeDescriptions": {
															"typeIdentifier": "t_uint160",
															"typeString": "uint160"
														}
													},
													"src": "2180:29:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1821,
												"nodeType": "IfStatement",
												"src": "2176:98:16",
												"trueBody": {
													"expression": {
														"id": 1819,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"components": [
																{
																	"id": 1813,
																	"name": "sqrtRatioAX96",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1801,
																	"src": "2212:13:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																},
																{
																	"id": 1814,
																	"name": "sqrtRatioBX96",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1803,
																	"src": "2227:13:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																}
															],
															"id": 1815,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": true,
															"nodeType": "TupleExpression",
															"src": "2211:30:16",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_uint160_$_t_uint160_$",
																"typeString": "tuple(uint160,uint160)"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"components": [
																{
																	"id": 1816,
																	"name": "sqrtRatioBX96",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1803,
																	"src": "2245:13:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																},
																{
																	"id": 1817,
																	"name": "sqrtRatioAX96",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1801,
																	"src": "2260:13:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																}
															],
															"id": 1818,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "2244:30:16",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_uint160_$_t_uint160_$",
																"typeString": "tuple(uint160,uint160)"
															}
														},
														"src": "2211:63:16",
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$__$",
															"typeString": "tuple()"
														}
													},
													"id": 1820,
													"nodeType": "ExpressionStatement",
													"src": "2211:63:16"
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 1825,
																	"name": "amount1",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1805,
																	"src": "2317:7:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"expression": {
																		"id": 1826,
																		"name": "FixedPoint96",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1154,
																		"src": "2326:12:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_contract$_FixedPoint96_$1154_$",
																			"typeString": "type(library FixedPoint96)"
																		}
																	},
																	"id": 1827,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "Q96",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 1153,
																	"src": "2326:16:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	},
																	"id": 1830,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 1828,
																		"name": "sqrtRatioBX96",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1803,
																		"src": "2344:13:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint160",
																			"typeString": "uint160"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "-",
																	"rightExpression": {
																		"id": 1829,
																		"name": "sqrtRatioAX96",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1801,
																		"src": "2360:13:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint160",
																			"typeString": "uint160"
																		}
																	},
																	"src": "2344:29:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																],
																"expression": {
																	"id": 1823,
																	"name": "FullMath",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1327,
																	"src": "2301:8:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_contract$_FullMath_$1327_$",
																		"typeString": "type(library FullMath)"
																	}
																},
																"id": 1824,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "mulDiv",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 1283,
																"src": "2301:15:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256,uint256,uint256) pure returns (uint256)"
																}
															},
															"id": 1831,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2301:73:16",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1822,
														"name": "toUint128",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1752,
														"src": "2291:9:16",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint128_$",
															"typeString": "function (uint256) pure returns (uint128)"
														}
													},
													"id": 1832,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2291:84:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"functionReturnParameters": 1809,
												"id": 1833,
												"nodeType": "Return",
												"src": "2284:91:16"
											}
										]
									},
									"documentation": {
										"id": 1799,
										"nodeType": "StructuredDocumentation",
										"src": "1566:428:16",
										"text": "@notice Computes the amount of liquidity received for a given amount of token1 and price range\n @dev Calculates amount1 / (sqrt(upper) - sqrt(lower)).\n @param sqrtRatioAX96 A sqrt price representing the first tick boundary\n @param sqrtRatioBX96 A sqrt price representing the second tick boundary\n @param amount1 The amount1 being sent in\n @return liquidity The amount of returned liquidity"
									},
									"id": 1835,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getLiquidityForAmount1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1806,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1801,
												"mutability": "mutable",
												"name": "sqrtRatioAX96",
												"nodeType": "VariableDeclaration",
												"scope": 1835,
												"src": "2040:21:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 1800,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "2040:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1803,
												"mutability": "mutable",
												"name": "sqrtRatioBX96",
												"nodeType": "VariableDeclaration",
												"scope": 1835,
												"src": "2071:21:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 1802,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "2071:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1805,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 1835,
												"src": "2102:15:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1804,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2102:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2030:93:16"
									},
									"returnParameters": {
										"id": 1809,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1808,
												"mutability": "mutable",
												"name": "liquidity",
												"nodeType": "VariableDeclaration",
												"scope": 1835,
												"src": "2147:17:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1807,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "2147:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2146:19:16"
									},
									"scope": 2066,
									"src": "1999:383:16",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1915,
										"nodeType": "Block",
										"src": "3204:679:16",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													},
													"id": 1853,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1851,
														"name": "sqrtRatioAX96",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1840,
														"src": "3218:13:16",
														"typeDescriptions": {
															"typeIdentifier": "t_uint160",
															"typeString": "uint160"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"id": 1852,
														"name": "sqrtRatioBX96",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1842,
														"src": "3234:13:16",
														"typeDescriptions": {
															"typeIdentifier": "t_uint160",
															"typeString": "uint160"
														}
													},
													"src": "3218:29:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1862,
												"nodeType": "IfStatement",
												"src": "3214:98:16",
												"trueBody": {
													"expression": {
														"id": 1860,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"components": [
																{
																	"id": 1854,
																	"name": "sqrtRatioAX96",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1840,
																	"src": "3250:13:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																},
																{
																	"id": 1855,
																	"name": "sqrtRatioBX96",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1842,
																	"src": "3265:13:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																}
															],
															"id": 1856,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": true,
															"nodeType": "TupleExpression",
															"src": "3249:30:16",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_uint160_$_t_uint160_$",
																"typeString": "tuple(uint160,uint160)"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"components": [
																{
																	"id": 1857,
																	"name": "sqrtRatioBX96",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1842,
																	"src": "3283:13:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																},
																{
																	"id": 1858,
																	"name": "sqrtRatioAX96",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1840,
																	"src": "3298:13:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																}
															],
															"id": 1859,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "3282:30:16",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_uint160_$_t_uint160_$",
																"typeString": "tuple(uint160,uint160)"
															}
														},
														"src": "3249:63:16",
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$__$",
															"typeString": "tuple()"
														}
													},
													"id": 1861,
													"nodeType": "ExpressionStatement",
													"src": "3249:63:16"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													},
													"id": 1865,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1863,
														"name": "sqrtRatioX96",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1838,
														"src": "3327:12:16",
														"typeDescriptions": {
															"typeIdentifier": "t_uint160",
															"typeString": "uint160"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<=",
													"rightExpression": {
														"id": 1864,
														"name": "sqrtRatioAX96",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1840,
														"src": "3343:13:16",
														"typeDescriptions": {
															"typeIdentifier": "t_uint160",
															"typeString": "uint160"
														}
													},
													"src": "3327:29:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_uint160",
															"typeString": "uint160"
														},
														"id": 1877,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1875,
															"name": "sqrtRatioX96",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1838,
															"src": "3466:12:16",
															"typeDescriptions": {
																"typeIdentifier": "t_uint160",
																"typeString": "uint160"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "<",
														"rightExpression": {
															"id": 1876,
															"name": "sqrtRatioBX96",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1842,
															"src": "3481:13:16",
															"typeDescriptions": {
																"typeIdentifier": "t_uint160",
																"typeString": "uint160"
															}
														},
														"src": "3466:28:16",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseBody": {
														"id": 1912,
														"nodeType": "Block",
														"src": "3779:98:16",
														"statements": [
															{
																"expression": {
																	"id": 1910,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftHandSide": {
																		"id": 1904,
																		"name": "liquidity",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1849,
																		"src": "3793:9:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint128",
																			"typeString": "uint128"
																		}
																	},
																	"nodeType": "Assignment",
																	"operator": "=",
																	"rightHandSide": {
																		"arguments": [
																			{
																				"id": 1906,
																				"name": "sqrtRatioAX96",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1840,
																				"src": "3828:13:16",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint160",
																					"typeString": "uint160"
																				}
																			},
																			{
																				"id": 1907,
																				"name": "sqrtRatioBX96",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1842,
																				"src": "3843:13:16",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint160",
																					"typeString": "uint160"
																				}
																			},
																			{
																				"id": 1908,
																				"name": "amount1",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1846,
																				"src": "3858:7:16",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_uint160",
																					"typeString": "uint160"
																				},
																				{
																					"typeIdentifier": "t_uint160",
																					"typeString": "uint160"
																				},
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			],
																			"id": 1905,
																			"name": "getLiquidityForAmount1",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1835,
																			"src": "3805:22:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_pure$_t_uint160_$_t_uint160_$_t_uint256_$returns$_t_uint128_$",
																				"typeString": "function (uint160,uint160,uint256) pure returns (uint128)"
																			}
																		},
																		"id": 1909,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "3805:61:16",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint128",
																			"typeString": "uint128"
																		}
																	},
																	"src": "3793:73:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint128",
																		"typeString": "uint128"
																	}
																},
																"id": 1911,
																"nodeType": "ExpressionStatement",
																"src": "3793:73:16"
															}
														]
													},
													"id": 1913,
													"nodeType": "IfStatement",
													"src": "3462:415:16",
													"trueBody": {
														"id": 1903,
														"nodeType": "Block",
														"src": "3496:277:16",
														"statements": [
															{
																"assignments": [
																	1879
																],
																"declarations": [
																	{
																		"constant": false,
																		"id": 1879,
																		"mutability": "mutable",
																		"name": "liquidity0",
																		"nodeType": "VariableDeclaration",
																		"scope": 1903,
																		"src": "3510:18:16",
																		"stateVariable": false,
																		"storageLocation": "default",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint128",
																			"typeString": "uint128"
																		},
																		"typeName": {
																			"id": 1878,
																			"name": "uint128",
																			"nodeType": "ElementaryTypeName",
																			"src": "3510:7:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint128",
																				"typeString": "uint128"
																			}
																		},
																		"visibility": "internal"
																	}
																],
																"id": 1885,
																"initialValue": {
																	"arguments": [
																		{
																			"id": 1881,
																			"name": "sqrtRatioX96",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1838,
																			"src": "3554:12:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint160",
																				"typeString": "uint160"
																			}
																		},
																		{
																			"id": 1882,
																			"name": "sqrtRatioBX96",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1842,
																			"src": "3568:13:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint160",
																				"typeString": "uint160"
																			}
																		},
																		{
																			"id": 1883,
																			"name": "amount0",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1844,
																			"src": "3583:7:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint160",
																				"typeString": "uint160"
																			},
																			{
																				"typeIdentifier": "t_uint160",
																				"typeString": "uint160"
																			},
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"id": 1880,
																		"name": "getLiquidityForAmount0",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1798,
																		"src": "3531:22:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_pure$_t_uint160_$_t_uint160_$_t_uint256_$returns$_t_uint128_$",
																			"typeString": "function (uint160,uint160,uint256) pure returns (uint128)"
																		}
																	},
																	"id": 1884,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "3531:60:16",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint128",
																		"typeString": "uint128"
																	}
																},
																"nodeType": "VariableDeclarationStatement",
																"src": "3510:81:16"
															},
															{
																"assignments": [
																	1887
																],
																"declarations": [
																	{
																		"constant": false,
																		"id": 1887,
																		"mutability": "mutable",
																		"name": "liquidity1",
																		"nodeType": "VariableDeclaration",
																		"scope": 1903,
																		"src": "3605:18:16",
																		"stateVariable": false,
																		"storageLocation": "default",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint128",
																			"typeString": "uint128"
																		},
																		"typeName": {
																			"id": 1886,
																			"name": "uint128",
																			"nodeType": "ElementaryTypeName",
																			"src": "3605:7:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint128",
																				"typeString": "uint128"
																			}
																		},
																		"visibility": "internal"
																	}
																],
																"id": 1893,
																"initialValue": {
																	"arguments": [
																		{
																			"id": 1889,
																			"name": "sqrtRatioAX96",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1840,
																			"src": "3649:13:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint160",
																				"typeString": "uint160"
																			}
																		},
																		{
																			"id": 1890,
																			"name": "sqrtRatioX96",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1838,
																			"src": "3664:12:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint160",
																				"typeString": "uint160"
																			}
																		},
																		{
																			"id": 1891,
																			"name": "amount1",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1846,
																			"src": "3678:7:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint160",
																				"typeString": "uint160"
																			},
																			{
																				"typeIdentifier": "t_uint160",
																				"typeString": "uint160"
																			},
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"id": 1888,
																		"name": "getLiquidityForAmount1",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1835,
																		"src": "3626:22:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_pure$_t_uint160_$_t_uint160_$_t_uint256_$returns$_t_uint128_$",
																			"typeString": "function (uint160,uint160,uint256) pure returns (uint128)"
																		}
																	},
																	"id": 1892,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "3626:60:16",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint128",
																		"typeString": "uint128"
																	}
																},
																"nodeType": "VariableDeclarationStatement",
																"src": "3605:81:16"
															},
															{
																"expression": {
																	"id": 1901,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftHandSide": {
																		"id": 1894,
																		"name": "liquidity",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1849,
																		"src": "3701:9:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint128",
																			"typeString": "uint128"
																		}
																	},
																	"nodeType": "Assignment",
																	"operator": "=",
																	"rightHandSide": {
																		"condition": {
																			"commonType": {
																				"typeIdentifier": "t_uint128",
																				"typeString": "uint128"
																			},
																			"id": 1897,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 1895,
																				"name": "liquidity0",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1879,
																				"src": "3713:10:16",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint128",
																					"typeString": "uint128"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "<",
																			"rightExpression": {
																				"id": 1896,
																				"name": "liquidity1",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1887,
																				"src": "3726:10:16",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint128",
																					"typeString": "uint128"
																				}
																			},
																			"src": "3713:23:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"falseExpression": {
																			"id": 1899,
																			"name": "liquidity1",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1887,
																			"src": "3752:10:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint128",
																				"typeString": "uint128"
																			}
																		},
																		"id": 1900,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "Conditional",
																		"src": "3713:49:16",
																		"trueExpression": {
																			"id": 1898,
																			"name": "liquidity0",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1879,
																			"src": "3739:10:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint128",
																				"typeString": "uint128"
																			}
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint128",
																			"typeString": "uint128"
																		}
																	},
																	"src": "3701:61:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint128",
																		"typeString": "uint128"
																	}
																},
																"id": 1902,
																"nodeType": "ExpressionStatement",
																"src": "3701:61:16"
															}
														]
													}
												},
												"id": 1914,
												"nodeType": "IfStatement",
												"src": "3323:554:16",
												"trueBody": {
													"id": 1874,
													"nodeType": "Block",
													"src": "3358:98:16",
													"statements": [
														{
															"expression": {
																"id": 1872,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 1866,
																	"name": "liquidity",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1849,
																	"src": "3372:9:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint128",
																		"typeString": "uint128"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"arguments": [
																		{
																			"id": 1868,
																			"name": "sqrtRatioAX96",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1840,
																			"src": "3407:13:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint160",
																				"typeString": "uint160"
																			}
																		},
																		{
																			"id": 1869,
																			"name": "sqrtRatioBX96",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1842,
																			"src": "3422:13:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint160",
																				"typeString": "uint160"
																			}
																		},
																		{
																			"id": 1870,
																			"name": "amount0",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1844,
																			"src": "3437:7:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint160",
																				"typeString": "uint160"
																			},
																			{
																				"typeIdentifier": "t_uint160",
																				"typeString": "uint160"
																			},
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"id": 1867,
																		"name": "getLiquidityForAmount0",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1798,
																		"src": "3384:22:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_pure$_t_uint160_$_t_uint160_$_t_uint256_$returns$_t_uint128_$",
																			"typeString": "function (uint160,uint160,uint256) pure returns (uint128)"
																		}
																	},
																	"id": 1871,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "3384:61:16",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint128",
																		"typeString": "uint128"
																	}
																},
																"src": "3372:73:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint128",
																	"typeString": "uint128"
																}
															},
															"id": 1873,
															"nodeType": "ExpressionStatement",
															"src": "3372:73:16"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1836,
										"nodeType": "StructuredDocumentation",
										"src": "2388:589:16",
										"text": "@notice Computes the maximum amount of liquidity received for a given amount of token0, token1, the current\n pool prices and the prices at the tick boundaries\n @param sqrtRatioX96 A sqrt price representing the current pool prices\n @param sqrtRatioAX96 A sqrt price representing the first tick boundary\n @param sqrtRatioBX96 A sqrt price representing the second tick boundary\n @param amount0 The amount of token0 being sent in\n @param amount1 The amount of token1 being sent in\n @return liquidity The maximum amount of liquidity received"
									},
									"id": 1916,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getLiquidityForAmounts",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1847,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1838,
												"mutability": "mutable",
												"name": "sqrtRatioX96",
												"nodeType": "VariableDeclaration",
												"scope": 1916,
												"src": "3023:20:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 1837,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "3023:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1840,
												"mutability": "mutable",
												"name": "sqrtRatioAX96",
												"nodeType": "VariableDeclaration",
												"scope": 1916,
												"src": "3053:21:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 1839,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "3053:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1842,
												"mutability": "mutable",
												"name": "sqrtRatioBX96",
												"nodeType": "VariableDeclaration",
												"scope": 1916,
												"src": "3084:21:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 1841,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "3084:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1844,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 1916,
												"src": "3115:15:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1843,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3115:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1846,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 1916,
												"src": "3140:15:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1845,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3140:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3013:148:16"
									},
									"returnParameters": {
										"id": 1850,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1849,
												"mutability": "mutable",
												"name": "liquidity",
												"nodeType": "VariableDeclaration",
												"scope": 1916,
												"src": "3185:17:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1848,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "3185:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3184:19:16"
									},
									"scope": 2066,
									"src": "2982:901:16",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1957,
										"nodeType": "Block",
										"src": "4408:331:16",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													},
													"id": 1930,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1928,
														"name": "sqrtRatioAX96",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1919,
														"src": "4422:13:16",
														"typeDescriptions": {
															"typeIdentifier": "t_uint160",
															"typeString": "uint160"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"id": 1929,
														"name": "sqrtRatioBX96",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1921,
														"src": "4438:13:16",
														"typeDescriptions": {
															"typeIdentifier": "t_uint160",
															"typeString": "uint160"
														}
													},
													"src": "4422:29:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1939,
												"nodeType": "IfStatement",
												"src": "4418:98:16",
												"trueBody": {
													"expression": {
														"id": 1937,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"components": [
																{
																	"id": 1931,
																	"name": "sqrtRatioAX96",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1919,
																	"src": "4454:13:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																},
																{
																	"id": 1932,
																	"name": "sqrtRatioBX96",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1921,
																	"src": "4469:13:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																}
															],
															"id": 1933,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": true,
															"nodeType": "TupleExpression",
															"src": "4453:30:16",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_uint160_$_t_uint160_$",
																"typeString": "tuple(uint160,uint160)"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"components": [
																{
																	"id": 1934,
																	"name": "sqrtRatioBX96",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1921,
																	"src": "4487:13:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																},
																{
																	"id": 1935,
																	"name": "sqrtRatioAX96",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1919,
																	"src": "4502:13:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																}
															],
															"id": 1936,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "4486:30:16",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_uint160_$_t_uint160_$",
																"typeString": "tuple(uint160,uint160)"
															}
														},
														"src": "4453:63:16",
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$__$",
															"typeString": "tuple()"
														}
													},
													"id": 1938,
													"nodeType": "ExpressionStatement",
													"src": "4453:63:16"
												}
											},
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1955,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1948,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"arguments": [
																		{
																			"id": 1944,
																			"name": "liquidity",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1923,
																			"src": "4587:9:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint128",
																				"typeString": "uint128"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint128",
																				"typeString": "uint128"
																			}
																		],
																		"id": 1943,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "4579:7:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_uint256_$",
																			"typeString": "type(uint256)"
																		},
																		"typeName": {
																			"id": 1942,
																			"name": "uint256",
																			"nodeType": "ElementaryTypeName",
																			"src": "4579:7:16",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 1945,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "4579:18:16",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<<",
																"rightExpression": {
																	"expression": {
																		"id": 1946,
																		"name": "FixedPoint96",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1154,
																		"src": "4601:12:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_contract$_FixedPoint96_$1154_$",
																			"typeString": "type(library FixedPoint96)"
																		}
																	},
																	"id": 1947,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "RESOLUTION",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 1150,
																	"src": "4601:23:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																},
																"src": "4579:45:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"commonType": {
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																},
																"id": 1951,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1949,
																	"name": "sqrtRatioBX96",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1921,
																	"src": "4642:13:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"id": 1950,
																	"name": "sqrtRatioAX96",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1919,
																	"src": "4658:13:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																},
																"src": "4642:29:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																}
															},
															{
																"id": 1952,
																"name": "sqrtRatioBX96",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1921,
																"src": "4689:13:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																{
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																},
																{
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																}
															],
															"expression": {
																"id": 1940,
																"name": "FullMath",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1327,
																"src": "4546:8:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_FullMath_$1327_$",
																	"typeString": "type(library FullMath)"
																}
															},
															"id": 1941,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "mulDiv",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1283,
															"src": "4546:15:16",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																"typeString": "function (uint256,uint256,uint256) pure returns (uint256)"
															}
														},
														"id": 1953,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "4546:170:16",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "/",
													"rightExpression": {
														"id": 1954,
														"name": "sqrtRatioAX96",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1919,
														"src": "4719:13:16",
														"typeDescriptions": {
															"typeIdentifier": "t_uint160",
															"typeString": "uint160"
														}
													},
													"src": "4546:186:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1927,
												"id": 1956,
												"nodeType": "Return",
												"src": "4527:205:16"
											}
										]
									},
									"documentation": {
										"id": 1917,
										"nodeType": "StructuredDocumentation",
										"src": "3889:347:16",
										"text": "@notice Computes the amount of token0 for a given amount of liquidity and a price range\n @param sqrtRatioAX96 A sqrt price representing the first tick boundary\n @param sqrtRatioBX96 A sqrt price representing the second tick boundary\n @param liquidity The liquidity being valued\n @return amount0 The amount of token0"
									},
									"id": 1958,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getAmount0ForLiquidity",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1924,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1919,
												"mutability": "mutable",
												"name": "sqrtRatioAX96",
												"nodeType": "VariableDeclaration",
												"scope": 1958,
												"src": "4282:21:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 1918,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "4282:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1921,
												"mutability": "mutable",
												"name": "sqrtRatioBX96",
												"nodeType": "VariableDeclaration",
												"scope": 1958,
												"src": "4313:21:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 1920,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "4313:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1923,
												"mutability": "mutable",
												"name": "liquidity",
												"nodeType": "VariableDeclaration",
												"scope": 1958,
												"src": "4344:17:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1922,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "4344:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4272:95:16"
									},
									"returnParameters": {
										"id": 1927,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1926,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 1958,
												"src": "4391:15:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1925,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4391:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4390:17:16"
									},
									"scope": 2066,
									"src": "4241:498:16",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1992,
										"nodeType": "Block",
										"src": "5264:208:16",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													},
													"id": 1972,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1970,
														"name": "sqrtRatioAX96",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1961,
														"src": "5278:13:16",
														"typeDescriptions": {
															"typeIdentifier": "t_uint160",
															"typeString": "uint160"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"id": 1971,
														"name": "sqrtRatioBX96",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1963,
														"src": "5294:13:16",
														"typeDescriptions": {
															"typeIdentifier": "t_uint160",
															"typeString": "uint160"
														}
													},
													"src": "5278:29:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1981,
												"nodeType": "IfStatement",
												"src": "5274:98:16",
												"trueBody": {
													"expression": {
														"id": 1979,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"components": [
																{
																	"id": 1973,
																	"name": "sqrtRatioAX96",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1961,
																	"src": "5310:13:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																},
																{
																	"id": 1974,
																	"name": "sqrtRatioBX96",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1963,
																	"src": "5325:13:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																}
															],
															"id": 1975,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": true,
															"nodeType": "TupleExpression",
															"src": "5309:30:16",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_uint160_$_t_uint160_$",
																"typeString": "tuple(uint160,uint160)"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"components": [
																{
																	"id": 1976,
																	"name": "sqrtRatioBX96",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1963,
																	"src": "5343:13:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																},
																{
																	"id": 1977,
																	"name": "sqrtRatioAX96",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1961,
																	"src": "5358:13:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																}
															],
															"id": 1978,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "5342:30:16",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_uint160_$_t_uint160_$",
																"typeString": "tuple(uint160,uint160)"
															}
														},
														"src": "5309:63:16",
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$__$",
															"typeString": "tuple()"
														}
													},
													"id": 1980,
													"nodeType": "ExpressionStatement",
													"src": "5309:63:16"
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1984,
															"name": "liquidity",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1965,
															"src": "5406:9:16",
															"typeDescriptions": {
																"typeIdentifier": "t_uint128",
																"typeString": "uint128"
															}
														},
														{
															"commonType": {
																"typeIdentifier": "t_uint160",
																"typeString": "uint160"
															},
															"id": 1987,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1985,
																"name": "sqrtRatioBX96",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1963,
																"src": "5417:13:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "-",
															"rightExpression": {
																"id": 1986,
																"name": "sqrtRatioAX96",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1961,
																"src": "5433:13:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																}
															},
															"src": "5417:29:16",
															"typeDescriptions": {
																"typeIdentifier": "t_uint160",
																"typeString": "uint160"
															}
														},
														{
															"expression": {
																"id": 1988,
																"name": "FixedPoint96",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1154,
																"src": "5448:12:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_FixedPoint96_$1154_$",
																	"typeString": "type(library FixedPoint96)"
																}
															},
															"id": 1989,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "Q96",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1153,
															"src": "5448:16:16",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint128",
																"typeString": "uint128"
															},
															{
																"typeIdentifier": "t_uint160",
																"typeString": "uint160"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 1982,
															"name": "FullMath",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1327,
															"src": "5390:8:16",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_FullMath_$1327_$",
																"typeString": "type(library FullMath)"
															}
														},
														"id": 1983,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "mulDiv",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1283,
														"src": "5390:15:16",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
															"typeString": "function (uint256,uint256,uint256) pure returns (uint256)"
														}
													},
													"id": 1990,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5390:75:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1969,
												"id": 1991,
												"nodeType": "Return",
												"src": "5383:82:16"
											}
										]
									},
									"documentation": {
										"id": 1959,
										"nodeType": "StructuredDocumentation",
										"src": "4745:347:16",
										"text": "@notice Computes the amount of token1 for a given amount of liquidity and a price range\n @param sqrtRatioAX96 A sqrt price representing the first tick boundary\n @param sqrtRatioBX96 A sqrt price representing the second tick boundary\n @param liquidity The liquidity being valued\n @return amount1 The amount of token1"
									},
									"id": 1993,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getAmount1ForLiquidity",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1966,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1961,
												"mutability": "mutable",
												"name": "sqrtRatioAX96",
												"nodeType": "VariableDeclaration",
												"scope": 1993,
												"src": "5138:21:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 1960,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "5138:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1963,
												"mutability": "mutable",
												"name": "sqrtRatioBX96",
												"nodeType": "VariableDeclaration",
												"scope": 1993,
												"src": "5169:21:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 1962,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "5169:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1965,
												"mutability": "mutable",
												"name": "liquidity",
												"nodeType": "VariableDeclaration",
												"scope": 1993,
												"src": "5200:17:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1964,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "5200:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5128:95:16"
									},
									"returnParameters": {
										"id": 1969,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1968,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 1993,
												"src": "5247:15:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1967,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5247:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5246:17:16"
									},
									"scope": 2066,
									"src": "5097:375:16",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2064,
										"nodeType": "Block",
										"src": "6227:585:16",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													},
													"id": 2011,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 2009,
														"name": "sqrtRatioAX96",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1998,
														"src": "6241:13:16",
														"typeDescriptions": {
															"typeIdentifier": "t_uint160",
															"typeString": "uint160"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"id": 2010,
														"name": "sqrtRatioBX96",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2000,
														"src": "6257:13:16",
														"typeDescriptions": {
															"typeIdentifier": "t_uint160",
															"typeString": "uint160"
														}
													},
													"src": "6241:29:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2020,
												"nodeType": "IfStatement",
												"src": "6237:98:16",
												"trueBody": {
													"expression": {
														"id": 2018,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"components": [
																{
																	"id": 2012,
																	"name": "sqrtRatioAX96",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1998,
																	"src": "6273:13:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																},
																{
																	"id": 2013,
																	"name": "sqrtRatioBX96",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2000,
																	"src": "6288:13:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																}
															],
															"id": 2014,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": true,
															"nodeType": "TupleExpression",
															"src": "6272:30:16",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_uint160_$_t_uint160_$",
																"typeString": "tuple(uint160,uint160)"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"components": [
																{
																	"id": 2015,
																	"name": "sqrtRatioBX96",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2000,
																	"src": "6306:13:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																},
																{
																	"id": 2016,
																	"name": "sqrtRatioAX96",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1998,
																	"src": "6321:13:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																}
															],
															"id": 2017,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "6305:30:16",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_uint160_$_t_uint160_$",
																"typeString": "tuple(uint160,uint160)"
															}
														},
														"src": "6272:63:16",
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$__$",
															"typeString": "tuple()"
														}
													},
													"id": 2019,
													"nodeType": "ExpressionStatement",
													"src": "6272:63:16"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													},
													"id": 2023,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 2021,
														"name": "sqrtRatioX96",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1996,
														"src": "6350:12:16",
														"typeDescriptions": {
															"typeIdentifier": "t_uint160",
															"typeString": "uint160"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<=",
													"rightExpression": {
														"id": 2022,
														"name": "sqrtRatioAX96",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1998,
														"src": "6366:13:16",
														"typeDescriptions": {
															"typeIdentifier": "t_uint160",
															"typeString": "uint160"
														}
													},
													"src": "6350:29:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_uint160",
															"typeString": "uint160"
														},
														"id": 2035,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 2033,
															"name": "sqrtRatioX96",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1996,
															"src": "6489:12:16",
															"typeDescriptions": {
																"typeIdentifier": "t_uint160",
																"typeString": "uint160"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "<",
														"rightExpression": {
															"id": 2034,
															"name": "sqrtRatioBX96",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2000,
															"src": "6504:13:16",
															"typeDescriptions": {
																"typeIdentifier": "t_uint160",
																"typeString": "uint160"
															}
														},
														"src": "6489:28:16",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseBody": {
														"id": 2061,
														"nodeType": "Block",
														"src": "6708:98:16",
														"statements": [
															{
																"expression": {
																	"id": 2059,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftHandSide": {
																		"id": 2053,
																		"name": "amount1",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2007,
																		"src": "6722:7:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "Assignment",
																	"operator": "=",
																	"rightHandSide": {
																		"arguments": [
																			{
																				"id": 2055,
																				"name": "sqrtRatioAX96",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1998,
																				"src": "6755:13:16",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint160",
																					"typeString": "uint160"
																				}
																			},
																			{
																				"id": 2056,
																				"name": "sqrtRatioBX96",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2000,
																				"src": "6770:13:16",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint160",
																					"typeString": "uint160"
																				}
																			},
																			{
																				"id": 2057,
																				"name": "liquidity",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2002,
																				"src": "6785:9:16",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint128",
																					"typeString": "uint128"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_uint160",
																					"typeString": "uint160"
																				},
																				{
																					"typeIdentifier": "t_uint160",
																					"typeString": "uint160"
																				},
																				{
																					"typeIdentifier": "t_uint128",
																					"typeString": "uint128"
																				}
																			],
																			"id": 2054,
																			"name": "getAmount1ForLiquidity",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1993,
																			"src": "6732:22:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_pure$_t_uint160_$_t_uint160_$_t_uint128_$returns$_t_uint256_$",
																				"typeString": "function (uint160,uint160,uint128) pure returns (uint256)"
																			}
																		},
																		"id": 2058,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "6732:63:16",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "6722:73:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"id": 2060,
																"nodeType": "ExpressionStatement",
																"src": "6722:73:16"
															}
														]
													},
													"id": 2062,
													"nodeType": "IfStatement",
													"src": "6485:321:16",
													"trueBody": {
														"id": 2052,
														"nodeType": "Block",
														"src": "6519:183:16",
														"statements": [
															{
																"expression": {
																	"id": 2042,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftHandSide": {
																		"id": 2036,
																		"name": "amount0",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2005,
																		"src": "6533:7:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "Assignment",
																	"operator": "=",
																	"rightHandSide": {
																		"arguments": [
																			{
																				"id": 2038,
																				"name": "sqrtRatioX96",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1996,
																				"src": "6566:12:16",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint160",
																					"typeString": "uint160"
																				}
																			},
																			{
																				"id": 2039,
																				"name": "sqrtRatioBX96",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2000,
																				"src": "6580:13:16",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint160",
																					"typeString": "uint160"
																				}
																			},
																			{
																				"id": 2040,
																				"name": "liquidity",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2002,
																				"src": "6595:9:16",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint128",
																					"typeString": "uint128"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_uint160",
																					"typeString": "uint160"
																				},
																				{
																					"typeIdentifier": "t_uint160",
																					"typeString": "uint160"
																				},
																				{
																					"typeIdentifier": "t_uint128",
																					"typeString": "uint128"
																				}
																			],
																			"id": 2037,
																			"name": "getAmount0ForLiquidity",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1958,
																			"src": "6543:22:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_pure$_t_uint160_$_t_uint160_$_t_uint128_$returns$_t_uint256_$",
																				"typeString": "function (uint160,uint160,uint128) pure returns (uint256)"
																			}
																		},
																		"id": 2041,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "6543:62:16",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "6533:72:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"id": 2043,
																"nodeType": "ExpressionStatement",
																"src": "6533:72:16"
															},
															{
																"expression": {
																	"id": 2050,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftHandSide": {
																		"id": 2044,
																		"name": "amount1",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2007,
																		"src": "6619:7:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "Assignment",
																	"operator": "=",
																	"rightHandSide": {
																		"arguments": [
																			{
																				"id": 2046,
																				"name": "sqrtRatioAX96",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1998,
																				"src": "6652:13:16",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint160",
																					"typeString": "uint160"
																				}
																			},
																			{
																				"id": 2047,
																				"name": "sqrtRatioX96",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1996,
																				"src": "6667:12:16",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint160",
																					"typeString": "uint160"
																				}
																			},
																			{
																				"id": 2048,
																				"name": "liquidity",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2002,
																				"src": "6681:9:16",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint128",
																					"typeString": "uint128"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_uint160",
																					"typeString": "uint160"
																				},
																				{
																					"typeIdentifier": "t_uint160",
																					"typeString": "uint160"
																				},
																				{
																					"typeIdentifier": "t_uint128",
																					"typeString": "uint128"
																				}
																			],
																			"id": 2045,
																			"name": "getAmount1ForLiquidity",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1993,
																			"src": "6629:22:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_pure$_t_uint160_$_t_uint160_$_t_uint128_$returns$_t_uint256_$",
																				"typeString": "function (uint160,uint160,uint128) pure returns (uint256)"
																			}
																		},
																		"id": 2049,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "6629:62:16",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "6619:72:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"id": 2051,
																"nodeType": "ExpressionStatement",
																"src": "6619:72:16"
															}
														]
													}
												},
												"id": 2063,
												"nodeType": "IfStatement",
												"src": "6346:460:16",
												"trueBody": {
													"id": 2032,
													"nodeType": "Block",
													"src": "6381:98:16",
													"statements": [
														{
															"expression": {
																"id": 2030,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 2024,
																	"name": "amount0",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2005,
																	"src": "6395:7:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"arguments": [
																		{
																			"id": 2026,
																			"name": "sqrtRatioAX96",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1998,
																			"src": "6428:13:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint160",
																				"typeString": "uint160"
																			}
																		},
																		{
																			"id": 2027,
																			"name": "sqrtRatioBX96",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2000,
																			"src": "6443:13:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint160",
																				"typeString": "uint160"
																			}
																		},
																		{
																			"id": 2028,
																			"name": "liquidity",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2002,
																			"src": "6458:9:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint128",
																				"typeString": "uint128"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint160",
																				"typeString": "uint160"
																			},
																			{
																				"typeIdentifier": "t_uint160",
																				"typeString": "uint160"
																			},
																			{
																				"typeIdentifier": "t_uint128",
																				"typeString": "uint128"
																			}
																		],
																		"id": 2025,
																		"name": "getAmount0ForLiquidity",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1958,
																		"src": "6405:22:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_pure$_t_uint160_$_t_uint160_$_t_uint128_$returns$_t_uint256_$",
																			"typeString": "function (uint160,uint160,uint128) pure returns (uint256)"
																		}
																	},
																	"id": 2029,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "6405:63:16",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "6395:73:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 2031,
															"nodeType": "ExpressionStatement",
															"src": "6395:73:16"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1994,
										"nodeType": "StructuredDocumentation",
										"src": "5478:530:16",
										"text": "@notice Computes the token0 and token1 value for a given amount of liquidity, the current\n pool prices and the prices at the tick boundaries\n @param sqrtRatioX96 A sqrt price representing the current pool prices\n @param sqrtRatioAX96 A sqrt price representing the first tick boundary\n @param sqrtRatioBX96 A sqrt price representing the second tick boundary\n @param liquidity The liquidity being valued\n @return amount0 The amount of token0\n @return amount1 The amount of token1"
									},
									"id": 2065,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getAmountsForLiquidity",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2003,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1996,
												"mutability": "mutable",
												"name": "sqrtRatioX96",
												"nodeType": "VariableDeclaration",
												"scope": 2065,
												"src": "6054:20:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 1995,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "6054:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1998,
												"mutability": "mutable",
												"name": "sqrtRatioAX96",
												"nodeType": "VariableDeclaration",
												"scope": 2065,
												"src": "6084:21:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 1997,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "6084:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2000,
												"mutability": "mutable",
												"name": "sqrtRatioBX96",
												"nodeType": "VariableDeclaration",
												"scope": 2065,
												"src": "6115:21:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 1999,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "6115:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2002,
												"mutability": "mutable",
												"name": "liquidity",
												"nodeType": "VariableDeclaration",
												"scope": 2065,
												"src": "6146:17:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 2001,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "6146:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6044:125:16"
									},
									"returnParameters": {
										"id": 2008,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2005,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 2065,
												"src": "6193:15:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2004,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6193:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2007,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 2065,
												"src": "6210:15:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2006,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6210:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6192:34:16"
									},
									"scope": 2066,
									"src": "6013:799:16",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 2067,
							"src": "327:6487:16"
						}
					],
					"src": "45:6770:16"
				},
				"id": 16
			},
			"contracts/libraries/PoolAddress.sol": {
				"ast": {
					"absolutePath": "contracts/libraries/PoolAddress.sol",
					"exportedSymbols": {
						"PoolAddress": [
							2158
						]
					},
					"id": 2159,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 2068,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:17"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 2069,
								"nodeType": "StructuredDocumentation",
								"src": "71:96:17",
								"text": "@title Provides functions for deriving a pool address from the factory, tokens, and the fee"
							},
							"fullyImplemented": true,
							"id": 2158,
							"linearizedBaseContracts": [
								2158
							],
							"name": "PoolAddress",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": true,
									"id": 2072,
									"mutability": "constant",
									"name": "POOL_INIT_CODE_HASH",
									"nodeType": "VariableDeclaration",
									"scope": 2158,
									"src": "193:114:17",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 2070,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "193:7:17",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"value": {
										"hexValue": "307865376461633738643464373539616239613761346433393633663933646235666130343663386162613364333835616633613965393831613730373732326338",
										"id": 2071,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "241:66:17",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_104870817939889140989134751335620183532528849141127607335221068871473561019080_by_1",
											"typeString": "int_const 1048...(70 digits omitted)...9080"
										},
										"value": "0xe7dac78d4d759ab9a7a4d3963f93db5fa046c8aba3d385af3a9e981a707722c8"
									},
									"visibility": "internal"
								},
								{
									"canonicalName": "PoolAddress.PoolKey",
									"id": 2079,
									"members": [
										{
											"constant": false,
											"id": 2074,
											"mutability": "mutable",
											"name": "token0",
											"nodeType": "VariableDeclaration",
											"scope": 2079,
											"src": "473:14:17",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 2073,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "473:7:17",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 2076,
											"mutability": "mutable",
											"name": "token1",
											"nodeType": "VariableDeclaration",
											"scope": 2079,
											"src": "497:14:17",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 2075,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "497:7:17",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 2078,
											"mutability": "mutable",
											"name": "fee",
											"nodeType": "VariableDeclaration",
											"scope": 2079,
											"src": "521:10:17",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint24",
												"typeString": "uint24"
											},
											"typeName": {
												"id": 2077,
												"name": "uint24",
												"nodeType": "ElementaryTypeName",
												"src": "521:6:17",
												"typeDescriptions": {
													"typeIdentifier": "t_uint24",
													"typeString": "uint24"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "PoolKey",
									"nodeType": "StructDefinition",
									"scope": 2158,
									"src": "448:90:17",
									"visibility": "public"
								},
								{
									"body": {
										"id": 2109,
										"nodeType": "Block",
										"src": "1004:141:17",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 2093,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 2091,
														"name": "tokenA",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2082,
														"src": "1018:6:17",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"id": 2092,
														"name": "tokenB",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2084,
														"src": "1027:6:17",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "1018:15:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2102,
												"nodeType": "IfStatement",
												"src": "1014:56:17",
												"trueBody": {
													"expression": {
														"id": 2100,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"components": [
																{
																	"id": 2094,
																	"name": "tokenA",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2082,
																	"src": "1036:6:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 2095,
																	"name": "tokenB",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2084,
																	"src": "1044:6:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"id": 2096,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": true,
															"nodeType": "TupleExpression",
															"src": "1035:16:17",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_address_$_t_address_$",
																"typeString": "tuple(address,address)"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"components": [
																{
																	"id": 2097,
																	"name": "tokenB",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2084,
																	"src": "1055:6:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 2098,
																	"name": "tokenA",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2082,
																	"src": "1063:6:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"id": 2099,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "1054:16:17",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_address_$_t_address_$",
																"typeString": "tuple(address,address)"
															}
														},
														"src": "1035:35:17",
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$__$",
															"typeString": "tuple()"
														}
													},
													"id": 2101,
													"nodeType": "ExpressionStatement",
													"src": "1035:35:17"
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 2104,
															"name": "tokenA",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2082,
															"src": "1104:6:17",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2105,
															"name": "tokenB",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2084,
															"src": "1120:6:17",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2106,
															"name": "fee",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2086,
															"src": "1133:3:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint24",
																"typeString": "uint24"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint24",
																"typeString": "uint24"
															}
														],
														"id": 2103,
														"name": "PoolKey",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2079,
														"src": "1087:7:17",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_struct$_PoolKey_$2079_storage_ptr_$",
															"typeString": "type(struct PoolAddress.PoolKey storage pointer)"
														}
													},
													"id": 2107,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "structConstructorCall",
													"lValueRequested": false,
													"names": [
														"token0",
														"token1",
														"fee"
													],
													"nodeType": "FunctionCall",
													"src": "1087:51:17",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_PoolKey_$2079_memory_ptr",
														"typeString": "struct PoolAddress.PoolKey memory"
													}
												},
												"functionReturnParameters": 2090,
												"id": 2108,
												"nodeType": "Return",
												"src": "1080:58:17"
											}
										]
									},
									"documentation": {
										"id": 2080,
										"nodeType": "StructuredDocumentation",
										"src": "545:321:17",
										"text": "@notice Returns PoolKey: the ordered tokens with the matched fee levels\n @param tokenA The first token of a pool, unsorted\n @param tokenB The second token of a pool, unsorted\n @param fee The fee level of the pool\n @return Poolkey The pool details with ordered token0 and token1 assignments"
									},
									"id": 2110,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getPoolKey",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2087,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2082,
												"mutability": "mutable",
												"name": "tokenA",
												"nodeType": "VariableDeclaration",
												"scope": 2110,
												"src": "900:14:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2081,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "900:7:17",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2084,
												"mutability": "mutable",
												"name": "tokenB",
												"nodeType": "VariableDeclaration",
												"scope": 2110,
												"src": "924:14:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2083,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "924:7:17",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2086,
												"mutability": "mutable",
												"name": "fee",
												"nodeType": "VariableDeclaration",
												"scope": 2110,
												"src": "948:10:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint24",
													"typeString": "uint24"
												},
												"typeName": {
													"id": 2085,
													"name": "uint24",
													"nodeType": "ElementaryTypeName",
													"src": "948:6:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint24",
														"typeString": "uint24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "890:74:17"
									},
									"returnParameters": {
										"id": 2090,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2089,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 2110,
												"src": "988:14:17",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_PoolKey_$2079_memory_ptr",
													"typeString": "struct PoolAddress.PoolKey"
												},
												"typeName": {
													"id": 2088,
													"name": "PoolKey",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 2079,
													"src": "988:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_PoolKey_$2079_storage_ptr",
														"typeString": "struct PoolAddress.PoolKey"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "987:16:17"
									},
									"scope": 2158,
									"src": "871:274:17",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2156,
										"nodeType": "Block",
										"src": "1490:414:17",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 2125,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 2121,
																	"name": "key",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2115,
																	"src": "1508:3:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_PoolKey_$2079_memory_ptr",
																		"typeString": "struct PoolAddress.PoolKey memory"
																	}
																},
																"id": 2122,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "token0",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2074,
																"src": "1508:10:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<",
															"rightExpression": {
																"expression": {
																	"id": 2123,
																	"name": "key",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2115,
																	"src": "1521:3:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_PoolKey_$2079_memory_ptr",
																		"typeString": "struct PoolAddress.PoolKey memory"
																	}
																},
																"id": 2124,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "token1",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2076,
																"src": "1521:10:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "1508:23:17",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 2120,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1500:7:17",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 2126,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1500:32:17",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2127,
												"nodeType": "ExpressionStatement",
												"src": "1500:32:17"
											},
											{
												"expression": {
													"id": 2154,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 2128,
														"name": "pool",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2118,
														"src": "1542:4:17",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"hexValue": "ff",
																						"id": 2136,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "hexString",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "1668:7:17",
																						"typeDescriptions": {
																							"typeIdentifier": "t_stringliteral_8b1a944cf13a9a1c08facb2c9e98623ef3254d2ddb48113885c3e8e97fec8db9",
																							"typeString": "literal_string hex\"ff\""
																						}
																					},
																					{
																						"id": 2137,
																						"name": "factory",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 2113,
																						"src": "1701:7:17",
																						"typeDescriptions": {
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						}
																					},
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"expression": {
																											"id": 2141,
																											"name": "key",
																											"nodeType": "Identifier",
																											"overloadedDeclarations": [],
																											"referencedDeclaration": 2115,
																											"src": "1755:3:17",
																											"typeDescriptions": {
																												"typeIdentifier": "t_struct$_PoolKey_$2079_memory_ptr",
																												"typeString": "struct PoolAddress.PoolKey memory"
																											}
																										},
																										"id": 2142,
																										"isConstant": false,
																										"isLValue": true,
																										"isPure": false,
																										"lValueRequested": false,
																										"memberName": "token0",
																										"nodeType": "MemberAccess",
																										"referencedDeclaration": 2074,
																										"src": "1755:10:17",
																										"typeDescriptions": {
																											"typeIdentifier": "t_address",
																											"typeString": "address"
																										}
																									},
																									{
																										"expression": {
																											"id": 2143,
																											"name": "key",
																											"nodeType": "Identifier",
																											"overloadedDeclarations": [],
																											"referencedDeclaration": 2115,
																											"src": "1767:3:17",
																											"typeDescriptions": {
																												"typeIdentifier": "t_struct$_PoolKey_$2079_memory_ptr",
																												"typeString": "struct PoolAddress.PoolKey memory"
																											}
																										},
																										"id": 2144,
																										"isConstant": false,
																										"isLValue": true,
																										"isPure": false,
																										"lValueRequested": false,
																										"memberName": "token1",
																										"nodeType": "MemberAccess",
																										"referencedDeclaration": 2076,
																										"src": "1767:10:17",
																										"typeDescriptions": {
																											"typeIdentifier": "t_address",
																											"typeString": "address"
																										}
																									},
																									{
																										"expression": {
																											"id": 2145,
																											"name": "key",
																											"nodeType": "Identifier",
																											"overloadedDeclarations": [],
																											"referencedDeclaration": 2115,
																											"src": "1779:3:17",
																											"typeDescriptions": {
																												"typeIdentifier": "t_struct$_PoolKey_$2079_memory_ptr",
																												"typeString": "struct PoolAddress.PoolKey memory"
																											}
																										},
																										"id": 2146,
																										"isConstant": false,
																										"isLValue": true,
																										"isPure": false,
																										"lValueRequested": false,
																										"memberName": "fee",
																										"nodeType": "MemberAccess",
																										"referencedDeclaration": 2078,
																										"src": "1779:7:17",
																										"typeDescriptions": {
																											"typeIdentifier": "t_uint24",
																											"typeString": "uint24"
																										}
																									}
																								],
																								"expression": {
																									"argumentTypes": [
																										{
																											"typeIdentifier": "t_address",
																											"typeString": "address"
																										},
																										{
																											"typeIdentifier": "t_address",
																											"typeString": "address"
																										},
																										{
																											"typeIdentifier": "t_uint24",
																											"typeString": "uint24"
																										}
																									],
																									"expression": {
																										"id": 2139,
																										"name": "abi",
																										"nodeType": "Identifier",
																										"overloadedDeclarations": [],
																										"referencedDeclaration": 4294967295,
																										"src": "1744:3:17",
																										"typeDescriptions": {
																											"typeIdentifier": "t_magic_abi",
																											"typeString": "abi"
																										}
																									},
																									"id": 2140,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": true,
																									"lValueRequested": false,
																									"memberName": "encode",
																									"nodeType": "MemberAccess",
																									"src": "1744:10:17",
																									"typeDescriptions": {
																										"typeIdentifier": "t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$",
																										"typeString": "function () pure returns (bytes memory)"
																									}
																								},
																								"id": 2147,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": false,
																								"kind": "functionCall",
																								"lValueRequested": false,
																								"names": [],
																								"nodeType": "FunctionCall",
																								"src": "1744:43:17",
																								"tryCall": false,
																								"typeDescriptions": {
																									"typeIdentifier": "t_bytes_memory_ptr",
																									"typeString": "bytes memory"
																								}
																							}
																						],
																						"expression": {
																							"argumentTypes": [
																								{
																									"typeIdentifier": "t_bytes_memory_ptr",
																									"typeString": "bytes memory"
																								}
																							],
																							"id": 2138,
																							"name": "keccak256",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 4294967288,
																							"src": "1734:9:17",
																							"typeDescriptions": {
																								"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
																								"typeString": "function (bytes memory) pure returns (bytes32)"
																							}
																						},
																						"id": 2148,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"kind": "functionCall",
																						"lValueRequested": false,
																						"names": [],
																						"nodeType": "FunctionCall",
																						"src": "1734:54:17",
																						"tryCall": false,
																						"typeDescriptions": {
																							"typeIdentifier": "t_bytes32",
																							"typeString": "bytes32"
																						}
																					},
																					{
																						"id": 2149,
																						"name": "POOL_INIT_CODE_HASH",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 2072,
																						"src": "1814:19:17",
																						"typeDescriptions": {
																							"typeIdentifier": "t_bytes32",
																							"typeString": "bytes32"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_stringliteral_8b1a944cf13a9a1c08facb2c9e98623ef3254d2ddb48113885c3e8e97fec8db9",
																							"typeString": "literal_string hex\"ff\""
																						},
																						{
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						},
																						{
																							"typeIdentifier": "t_bytes32",
																							"typeString": "bytes32"
																						},
																						{
																							"typeIdentifier": "t_bytes32",
																							"typeString": "bytes32"
																						}
																					],
																					"expression": {
																						"id": 2134,
																						"name": "abi",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 4294967295,
																						"src": "1626:3:17",
																						"typeDescriptions": {
																							"typeIdentifier": "t_magic_abi",
																							"typeString": "abi"
																						}
																					},
																					"id": 2135,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"memberName": "encodePacked",
																					"nodeType": "MemberAccess",
																					"src": "1626:16:17",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
																						"typeString": "function () pure returns (bytes memory)"
																					}
																				},
																				"id": 2150,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "functionCall",
																				"lValueRequested": false,
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "1626:229:17",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes_memory_ptr",
																					"typeString": "bytes memory"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_bytes_memory_ptr",
																					"typeString": "bytes memory"
																				}
																			],
																			"id": 2133,
																			"name": "keccak256",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967288,
																			"src": "1595:9:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
																				"typeString": "function (bytes memory) pure returns (bytes32)"
																			}
																		},
																		"id": 2151,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "1595:278:17",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	],
																	"id": 2132,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "1570:7:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint256_$",
																		"typeString": "type(uint256)"
																	},
																	"typeName": {
																		"id": 2131,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "1570:7:17",
																		"typeDescriptions": {}
																	}
																},
																"id": 2152,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1570:317:17",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"id": 2130,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "1549:7:17",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 2129,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "1549:7:17",
																"typeDescriptions": {}
															}
														},
														"id": 2153,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1549:348:17",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address_payable",
															"typeString": "address payable"
														}
													},
													"src": "1542:355:17",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 2155,
												"nodeType": "ExpressionStatement",
												"src": "1542:355:17"
											}
										]
									},
									"documentation": {
										"id": 2111,
										"nodeType": "StructuredDocumentation",
										"src": "1151:236:17",
										"text": "@notice Deterministically computes the pool address given the factory and PoolKey\n @param factory The Uniswap V3 factory contract address\n @param key The PoolKey\n @return pool The contract address of the V3 pool"
									},
									"id": 2157,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "computeAddress",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2116,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2113,
												"mutability": "mutable",
												"name": "factory",
												"nodeType": "VariableDeclaration",
												"scope": 2157,
												"src": "1416:15:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2112,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1416:7:17",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2115,
												"mutability": "mutable",
												"name": "key",
												"nodeType": "VariableDeclaration",
												"scope": 2157,
												"src": "1433:18:17",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_PoolKey_$2079_memory_ptr",
													"typeString": "struct PoolAddress.PoolKey"
												},
												"typeName": {
													"id": 2114,
													"name": "PoolKey",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 2079,
													"src": "1433:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_PoolKey_$2079_storage_ptr",
														"typeString": "struct PoolAddress.PoolKey"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1415:37:17"
									},
									"returnParameters": {
										"id": 2119,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2118,
												"mutability": "mutable",
												"name": "pool",
												"nodeType": "VariableDeclaration",
												"scope": 2157,
												"src": "1476:12:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2117,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1476:7:17",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1475:14:17"
									},
									"scope": 2158,
									"src": "1392:512:17",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 2159,
							"src": "167:1739:17"
						}
					],
					"src": "45:1862:17"
				},
				"id": 17
			},
			"contracts/libraries/TickMath.sol": {
				"ast": {
					"absolutePath": "contracts/libraries/TickMath.sol",
					"exportedSymbols": {
						"TickMath": [
							2693
						]
					},
					"id": 2694,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 2160,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0",
								"<",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "45:31:18"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 2161,
								"nodeType": "StructuredDocumentation",
								"src": "78:235:18",
								"text": "@title Math library for computing sqrt prices from ticks and vice versa\n @notice Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports\n prices between 2**-128 and 2**128"
							},
							"fullyImplemented": true,
							"id": 2693,
							"linearizedBaseContracts": [
								2693
							],
							"name": "TickMath",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": true,
									"documentation": {
										"id": 2162,
										"nodeType": "StructuredDocumentation",
										"src": "336:108:18",
										"text": "@dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128"
									},
									"id": 2166,
									"mutability": "constant",
									"name": "MIN_TICK",
									"nodeType": "VariableDeclaration",
									"scope": 2693,
									"src": "449:42:18",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_int24",
										"typeString": "int24"
									},
									"typeName": {
										"id": 2163,
										"name": "int24",
										"nodeType": "ElementaryTypeName",
										"src": "449:5:18",
										"typeDescriptions": {
											"typeIdentifier": "t_int24",
											"typeString": "int24"
										}
									},
									"value": {
										"id": 2165,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"lValueRequested": false,
										"nodeType": "UnaryOperation",
										"operator": "-",
										"prefix": true,
										"src": "484:7:18",
										"subExpression": {
											"hexValue": "383837323732",
											"id": 2164,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "number",
											"lValueRequested": false,
											"nodeType": "Literal",
											"src": "485:6:18",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_887272_by_1",
												"typeString": "int_const 887272"
											},
											"value": "887272"
										},
										"typeDescriptions": {
											"typeIdentifier": "t_rational_minus_887272_by_1",
											"typeString": "int_const -887272"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"documentation": {
										"id": 2167,
										"nodeType": "StructuredDocumentation",
										"src": "497:107:18",
										"text": "@dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128"
									},
									"id": 2171,
									"mutability": "constant",
									"name": "MAX_TICK",
									"nodeType": "VariableDeclaration",
									"scope": 2693,
									"src": "609:44:18",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_int24",
										"typeString": "int24"
									},
									"typeName": {
										"id": 2168,
										"name": "int24",
										"nodeType": "ElementaryTypeName",
										"src": "609:5:18",
										"typeDescriptions": {
											"typeIdentifier": "t_int24",
											"typeString": "int24"
										}
									},
									"value": {
										"id": 2170,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"lValueRequested": false,
										"nodeType": "UnaryOperation",
										"operator": "-",
										"prefix": true,
										"src": "644:9:18",
										"subExpression": {
											"id": 2169,
											"name": "MIN_TICK",
											"nodeType": "Identifier",
											"overloadedDeclarations": [],
											"referencedDeclaration": 2166,
											"src": "645:8:18",
											"typeDescriptions": {
												"typeIdentifier": "t_int24",
												"typeString": "int24"
											}
										},
										"typeDescriptions": {
											"typeIdentifier": "t_int24",
											"typeString": "int24"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"documentation": {
										"id": 2172,
										"nodeType": "StructuredDocumentation",
										"src": "660:116:18",
										"text": "@dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)"
									},
									"id": 2175,
									"mutability": "constant",
									"name": "MIN_SQRT_RATIO",
									"nodeType": "VariableDeclaration",
									"scope": 2693,
									"src": "781:53:18",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint160",
										"typeString": "uint160"
									},
									"typeName": {
										"id": 2173,
										"name": "uint160",
										"nodeType": "ElementaryTypeName",
										"src": "781:7:18",
										"typeDescriptions": {
											"typeIdentifier": "t_uint160",
											"typeString": "uint160"
										}
									},
									"value": {
										"hexValue": "34323935313238373339",
										"id": 2174,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "824:10:18",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_4295128739_by_1",
											"typeString": "int_const 4295128739"
										},
										"value": "4295128739"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"documentation": {
										"id": 2176,
										"nodeType": "StructuredDocumentation",
										"src": "840:116:18",
										"text": "@dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)"
									},
									"id": 2179,
									"mutability": "constant",
									"name": "MAX_SQRT_RATIO",
									"nodeType": "VariableDeclaration",
									"scope": 2693,
									"src": "961:92:18",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint160",
										"typeString": "uint160"
									},
									"typeName": {
										"id": 2177,
										"name": "uint160",
										"nodeType": "ElementaryTypeName",
										"src": "961:7:18",
										"typeDescriptions": {
											"typeIdentifier": "t_uint160",
											"typeString": "uint160"
										}
									},
									"value": {
										"hexValue": "31343631343436373033343835323130313033323837323733303532323033393838383232333738373233393730333432",
										"id": 2178,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "1004:49:18",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_1461446703485210103287273052203988822378723970342_by_1",
											"typeString": "int_const 1461...(41 digits omitted)...0342"
										},
										"value": "1461446703485210103287273052203988822378723970342"
									},
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2552,
										"nodeType": "Block",
										"src": "1447:2495:18",
										"statements": [
											{
												"assignments": [
													2188
												],
												"declarations": [
													{
														"constant": false,
														"id": 2188,
														"mutability": "mutable",
														"name": "absTick",
														"nodeType": "VariableDeclaration",
														"scope": 2552,
														"src": "1457:15:18",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 2187,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "1457:7:18",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2208,
												"initialValue": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_int24",
															"typeString": "int24"
														},
														"id": 2191,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 2189,
															"name": "tick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2182,
															"src": "1475:4:18",
															"typeDescriptions": {
																"typeIdentifier": "t_int24",
																"typeString": "int24"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "<",
														"rightExpression": {
															"hexValue": "30",
															"id": 2190,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1482:1:18",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "1475:8:18",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"arguments": [
															{
																"arguments": [
																	{
																		"id": 2204,
																		"name": "tick",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2182,
																		"src": "1526:4:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_int24",
																			"typeString": "int24"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_int24",
																			"typeString": "int24"
																		}
																	],
																	"id": 2203,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "1519:6:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_int256_$",
																		"typeString": "type(int256)"
																	},
																	"typeName": {
																		"id": 2202,
																		"name": "int256",
																		"nodeType": "ElementaryTypeName",
																		"src": "1519:6:18",
																		"typeDescriptions": {}
																	}
																},
																"id": 2205,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1519:12:18",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																}
															],
															"id": 2201,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "1511:7:18",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_uint256_$",
																"typeString": "type(uint256)"
															},
															"typeName": {
																"id": 2200,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "1511:7:18",
																"typeDescriptions": {}
															}
														},
														"id": 2206,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1511:21:18",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 2207,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "1475:57:18",
													"trueExpression": {
														"arguments": [
															{
																"id": 2198,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "UnaryOperation",
																"operator": "-",
																"prefix": true,
																"src": "1494:13:18",
																"subExpression": {
																	"arguments": [
																		{
																			"id": 2196,
																			"name": "tick",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2182,
																			"src": "1502:4:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int24",
																				"typeString": "int24"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_int24",
																				"typeString": "int24"
																			}
																		],
																		"id": 2195,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "1495:6:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_int256_$",
																			"typeString": "type(int256)"
																		},
																		"typeName": {
																			"id": 2194,
																			"name": "int256",
																			"nodeType": "ElementaryTypeName",
																			"src": "1495:6:18",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 2197,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "1495:12:18",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																},
																"typeDescriptions": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																}
															],
															"id": 2193,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "1486:7:18",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_uint256_$",
																"typeString": "type(uint256)"
															},
															"typeName": {
																"id": 2192,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "1486:7:18",
																"typeDescriptions": {}
															}
														},
														"id": 2199,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1486:22:18",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1457:75:18"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2215,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2210,
																"name": "absTick",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2188,
																"src": "1550:7:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<=",
															"rightExpression": {
																"arguments": [
																	{
																		"id": 2213,
																		"name": "MAX_TICK",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2171,
																		"src": "1569:8:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_int24",
																			"typeString": "int24"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_int24",
																			"typeString": "int24"
																		}
																	],
																	"id": 2212,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "1561:7:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint256_$",
																		"typeString": "type(uint256)"
																	},
																	"typeName": {
																		"id": 2211,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "1561:7:18",
																		"typeDescriptions": {}
																	}
																},
																"id": 2214,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1561:17:18",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1550:28:18",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "54",
															"id": 2216,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1580:3:18",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_846b7b6deb1cfa110d0ea7ec6162a7123b761785528db70cceed5143183b11fc",
																"typeString": "literal_string \"T\""
															},
															"value": "T"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_846b7b6deb1cfa110d0ea7ec6162a7123b761785528db70cceed5143183b11fc",
																"typeString": "literal_string \"T\""
															}
														],
														"id": 2209,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1542:7:18",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 2217,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1542:42:18",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2218,
												"nodeType": "ExpressionStatement",
												"src": "1542:42:18"
											},
											{
												"assignments": [
													2220
												],
												"declarations": [
													{
														"constant": false,
														"id": 2220,
														"mutability": "mutable",
														"name": "ratio",
														"nodeType": "VariableDeclaration",
														"scope": 2552,
														"src": "1595:13:18",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 2219,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "1595:7:18",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2229,
												"initialValue": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2225,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2223,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2221,
																"name": "absTick",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2188,
																"src": "1611:7:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "&",
															"rightExpression": {
																"hexValue": "307831",
																"id": 2222,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1621:3:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1_by_1",
																	"typeString": "int_const 1"
																},
																"value": "0x1"
															},
															"src": "1611:13:18",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "!=",
														"rightExpression": {
															"hexValue": "30",
															"id": 2224,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1628:1:18",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "1611:18:18",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"hexValue": "3078313030303030303030303030303030303030303030303030303030303030303030",
														"id": 2227,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1669:35:18",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_340282366920938463463374607431768211456_by_1",
															"typeString": "int_const 3402...(31 digits omitted)...1456"
														},
														"value": "0x100000000000000000000000000000000"
													},
													"id": 2228,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "1611:93:18",
													"trueExpression": {
														"hexValue": "30786666666362393333626436666164333761613264313632643161353934303031",
														"id": 2226,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1632:34:18",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_340265354078544963557816517032075149313_by_1",
															"typeString": "int_const 3402...(31 digits omitted)...9313"
														},
														"value": "0xfffcb933bd6fad37aa2d162d1a594001"
													},
													"typeDescriptions": {
														"typeIdentifier": "t_uint136",
														"typeString": "uint136"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1595:109:18"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2234,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2232,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 2230,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2188,
															"src": "1718:7:18",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "307832",
															"id": 2231,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1728:3:18",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_2_by_1",
																"typeString": "int_const 2"
															},
															"value": "0x2"
														},
														"src": "1718:13:18",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 2233,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1735:1:18",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "1718:18:18",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2244,
												"nodeType": "IfStatement",
												"src": "1714:83:18",
												"trueBody": {
													"expression": {
														"id": 2242,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 2235,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2220,
															"src": "1738:5:18",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2241,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 2238,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 2236,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2220,
																			"src": "1747:5:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30786666663937323732333733643431333235396134363939303538306532313361",
																			"id": 2237,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1755:34:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_340248342086729790484326174814286782778_by_1",
																				"typeString": "int_const 3402...(31 digits omitted)...2778"
																			},
																			"value": "0xfff97272373d413259a46990580e213a"
																		},
																		"src": "1747:42:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 2239,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1746:44:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 2240,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1794:3:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "1746:51:18",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "1738:59:18",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 2243,
													"nodeType": "ExpressionStatement",
													"src": "1738:59:18"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2249,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2247,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 2245,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2188,
															"src": "1811:7:18",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "307834",
															"id": 2246,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1821:3:18",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_4_by_1",
																"typeString": "int_const 4"
															},
															"value": "0x4"
														},
														"src": "1811:13:18",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 2248,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1828:1:18",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "1811:18:18",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2259,
												"nodeType": "IfStatement",
												"src": "1807:83:18",
												"trueBody": {
													"expression": {
														"id": 2257,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 2250,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2220,
															"src": "1831:5:18",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2256,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 2253,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 2251,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2220,
																			"src": "1840:5:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30786666663265353066356636353639333265663132333537636633633766646363",
																			"id": 2252,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1848:34:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_340214320654664324051920982716015181260_by_1",
																				"typeString": "int_const 3402...(31 digits omitted)...1260"
																			},
																			"value": "0xfff2e50f5f656932ef12357cf3c7fdcc"
																		},
																		"src": "1840:42:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 2254,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1839:44:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 2255,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1887:3:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "1839:51:18",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "1831:59:18",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 2258,
													"nodeType": "ExpressionStatement",
													"src": "1831:59:18"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2264,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2262,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 2260,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2188,
															"src": "1904:7:18",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "307838",
															"id": 2261,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1914:3:18",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_8_by_1",
																"typeString": "int_const 8"
															},
															"value": "0x8"
														},
														"src": "1904:13:18",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 2263,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1921:1:18",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "1904:18:18",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2274,
												"nodeType": "IfStatement",
												"src": "1900:83:18",
												"trueBody": {
													"expression": {
														"id": 2272,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 2265,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2220,
															"src": "1924:5:18",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2271,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 2268,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 2266,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2220,
																			"src": "1933:5:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30786666653563616361376531306534653631633336323465616130393431636430",
																			"id": 2267,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1941:34:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_340146287995602323631171512101879684304_by_1",
																				"typeString": "int_const 3401...(31 digits omitted)...4304"
																			},
																			"value": "0xffe5caca7e10e4e61c3624eaa0941cd0"
																		},
																		"src": "1933:42:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 2269,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1932:44:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 2270,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1980:3:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "1932:51:18",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "1924:59:18",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 2273,
													"nodeType": "ExpressionStatement",
													"src": "1924:59:18"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2279,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2277,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 2275,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2188,
															"src": "1997:7:18",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "30783130",
															"id": 2276,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2007:4:18",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_16_by_1",
																"typeString": "int_const 16"
															},
															"value": "0x10"
														},
														"src": "1997:14:18",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 2278,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2015:1:18",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "1997:19:18",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2289,
												"nodeType": "IfStatement",
												"src": "1993:84:18",
												"trueBody": {
													"expression": {
														"id": 2287,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 2280,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2220,
															"src": "2018:5:18",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2286,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 2283,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 2281,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2220,
																			"src": "2027:5:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30786666636239383433643630663631353963396462353838333563393236363434",
																			"id": 2282,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "2035:34:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_340010263488231146823593991679159461444_by_1",
																				"typeString": "int_const 3400...(31 digits omitted)...1444"
																			},
																			"value": "0xffcb9843d60f6159c9db58835c926644"
																		},
																		"src": "2027:42:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 2284,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2026:44:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 2285,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2074:3:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "2026:51:18",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "2018:59:18",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 2288,
													"nodeType": "ExpressionStatement",
													"src": "2018:59:18"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2294,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2292,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 2290,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2188,
															"src": "2091:7:18",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "30783230",
															"id": 2291,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2101:4:18",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_32_by_1",
																"typeString": "int_const 32"
															},
															"value": "0x20"
														},
														"src": "2091:14:18",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 2293,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2109:1:18",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2091:19:18",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2304,
												"nodeType": "IfStatement",
												"src": "2087:84:18",
												"trueBody": {
													"expression": {
														"id": 2302,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 2295,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2220,
															"src": "2112:5:18",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2301,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 2298,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 2296,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2220,
																			"src": "2121:5:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30786666393733623431666139386330383134373265363839366466623235346330",
																			"id": 2297,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "2129:34:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_339738377640345403697157401104375502016_by_1",
																				"typeString": "int_const 3397...(31 digits omitted)...2016"
																			},
																			"value": "0xff973b41fa98c081472e6896dfb254c0"
																		},
																		"src": "2121:42:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 2299,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2120:44:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 2300,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2168:3:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "2120:51:18",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "2112:59:18",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 2303,
													"nodeType": "ExpressionStatement",
													"src": "2112:59:18"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2309,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2307,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 2305,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2188,
															"src": "2185:7:18",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "30783430",
															"id": 2306,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2195:4:18",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_64_by_1",
																"typeString": "int_const 64"
															},
															"value": "0x40"
														},
														"src": "2185:14:18",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 2308,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2203:1:18",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2185:19:18",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2319,
												"nodeType": "IfStatement",
												"src": "2181:84:18",
												"trueBody": {
													"expression": {
														"id": 2317,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 2310,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2220,
															"src": "2206:5:18",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2316,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 2313,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 2311,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2220,
																			"src": "2215:5:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30786666326561313634363663393661333834336563373862333236623532383631",
																			"id": 2312,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "2223:34:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_339195258003219555707034227454543997025_by_1",
																				"typeString": "int_const 3391...(31 digits omitted)...7025"
																			},
																			"value": "0xff2ea16466c96a3843ec78b326b52861"
																		},
																		"src": "2215:42:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 2314,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2214:44:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 2315,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2262:3:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "2214:51:18",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "2206:59:18",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 2318,
													"nodeType": "ExpressionStatement",
													"src": "2206:59:18"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2324,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2322,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 2320,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2188,
															"src": "2279:7:18",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "30783830",
															"id": 2321,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2289:4:18",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_128_by_1",
																"typeString": "int_const 128"
															},
															"value": "0x80"
														},
														"src": "2279:14:18",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 2323,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2297:1:18",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2279:19:18",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2334,
												"nodeType": "IfStatement",
												"src": "2275:84:18",
												"trueBody": {
													"expression": {
														"id": 2332,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 2325,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2220,
															"src": "2300:5:18",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2331,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 2328,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 2326,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2220,
																			"src": "2309:5:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30786665356465653034366139396132613831316334363166313936396333303533",
																			"id": 2327,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "2317:34:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_338111622100601834656805679988414885971_by_1",
																				"typeString": "int_const 3381...(31 digits omitted)...5971"
																			},
																			"value": "0xfe5dee046a99a2a811c461f1969c3053"
																		},
																		"src": "2309:42:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 2329,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2308:44:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 2330,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2356:3:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "2308:51:18",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "2300:59:18",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 2333,
													"nodeType": "ExpressionStatement",
													"src": "2300:59:18"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2339,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2337,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 2335,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2188,
															"src": "2373:7:18",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "3078313030",
															"id": 2336,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2383:5:18",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_256_by_1",
																"typeString": "int_const 256"
															},
															"value": "0x100"
														},
														"src": "2373:15:18",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 2338,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2392:1:18",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2373:20:18",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2349,
												"nodeType": "IfStatement",
												"src": "2369:85:18",
												"trueBody": {
													"expression": {
														"id": 2347,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 2340,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2220,
															"src": "2395:5:18",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2346,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 2343,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 2341,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2220,
																			"src": "2404:5:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30786663626538366337393030613838616564636666633833623437396161336134",
																			"id": 2342,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "2412:34:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_335954724994790223023589805789778977700_by_1",
																				"typeString": "int_const 3359...(31 digits omitted)...7700"
																			},
																			"value": "0xfcbe86c7900a88aedcffc83b479aa3a4"
																		},
																		"src": "2404:42:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 2344,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2403:44:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 2345,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2451:3:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "2403:51:18",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "2395:59:18",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 2348,
													"nodeType": "ExpressionStatement",
													"src": "2395:59:18"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2354,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2352,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 2350,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2188,
															"src": "2468:7:18",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "3078323030",
															"id": 2351,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2478:5:18",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_512_by_1",
																"typeString": "int_const 512"
															},
															"value": "0x200"
														},
														"src": "2468:15:18",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 2353,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2487:1:18",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2468:20:18",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2364,
												"nodeType": "IfStatement",
												"src": "2464:85:18",
												"trueBody": {
													"expression": {
														"id": 2362,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 2355,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2220,
															"src": "2490:5:18",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2361,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 2358,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 2356,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2220,
																			"src": "2499:5:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30786639383761373235336163343133313736663262303734636637383135653534",
																			"id": 2357,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "2507:34:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_331682121138379247127172139078559817300_by_1",
																				"typeString": "int_const 3316...(31 digits omitted)...7300"
																			},
																			"value": "0xf987a7253ac413176f2b074cf7815e54"
																		},
																		"src": "2499:42:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 2359,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2498:44:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 2360,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2546:3:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "2498:51:18",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "2490:59:18",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 2363,
													"nodeType": "ExpressionStatement",
													"src": "2490:59:18"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2369,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2367,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 2365,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2188,
															"src": "2563:7:18",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "3078343030",
															"id": 2366,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2573:5:18",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1024_by_1",
																"typeString": "int_const 1024"
															},
															"value": "0x400"
														},
														"src": "2563:15:18",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 2368,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2582:1:18",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2563:20:18",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2379,
												"nodeType": "IfStatement",
												"src": "2559:85:18",
												"trueBody": {
													"expression": {
														"id": 2377,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 2370,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2220,
															"src": "2585:5:18",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2376,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 2373,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 2371,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2220,
																			"src": "2594:5:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30786633333932623038323262373030303539343063376133393865346237306633",
																			"id": 2372,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "2602:34:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_323299236684853023288211250268160618739_by_1",
																				"typeString": "int_const 3232...(31 digits omitted)...8739"
																			},
																			"value": "0xf3392b0822b70005940c7a398e4b70f3"
																		},
																		"src": "2594:42:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 2374,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2593:44:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 2375,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2641:3:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "2593:51:18",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "2585:59:18",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 2378,
													"nodeType": "ExpressionStatement",
													"src": "2585:59:18"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2384,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2382,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 2380,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2188,
															"src": "2658:7:18",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "3078383030",
															"id": 2381,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2668:5:18",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_2048_by_1",
																"typeString": "int_const 2048"
															},
															"value": "0x800"
														},
														"src": "2658:15:18",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 2383,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2677:1:18",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2658:20:18",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2394,
												"nodeType": "IfStatement",
												"src": "2654:85:18",
												"trueBody": {
													"expression": {
														"id": 2392,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 2385,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2220,
															"src": "2680:5:18",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2391,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 2388,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 2386,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2220,
																			"src": "2689:5:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30786537313539343735613263323962373434336232396337666136653838396439",
																			"id": 2387,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "2697:34:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_307163716377032989948697243942600083929_by_1",
																				"typeString": "int_const 3071...(31 digits omitted)...3929"
																			},
																			"value": "0xe7159475a2c29b7443b29c7fa6e889d9"
																		},
																		"src": "2689:42:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 2389,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2688:44:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 2390,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2736:3:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "2688:51:18",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "2680:59:18",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 2393,
													"nodeType": "ExpressionStatement",
													"src": "2680:59:18"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2399,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2397,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 2395,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2188,
															"src": "2753:7:18",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "307831303030",
															"id": 2396,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2763:6:18",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_4096_by_1",
																"typeString": "int_const 4096"
															},
															"value": "0x1000"
														},
														"src": "2753:16:18",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 2398,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2773:1:18",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2753:21:18",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2409,
												"nodeType": "IfStatement",
												"src": "2749:86:18",
												"trueBody": {
													"expression": {
														"id": 2407,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 2400,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2220,
															"src": "2776:5:18",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2406,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 2403,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 2401,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2220,
																			"src": "2785:5:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30786430393766336264666432303232623838343561643866373932616135383235",
																			"id": 2402,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "2793:34:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_277268403626896220162999269216087595045_by_1",
																				"typeString": "int_const 2772...(31 digits omitted)...5045"
																			},
																			"value": "0xd097f3bdfd2022b8845ad8f792aa5825"
																		},
																		"src": "2785:42:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 2404,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2784:44:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 2405,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2832:3:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "2784:51:18",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "2776:59:18",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 2408,
													"nodeType": "ExpressionStatement",
													"src": "2776:59:18"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2414,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2412,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 2410,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2188,
															"src": "2849:7:18",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "307832303030",
															"id": 2411,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2859:6:18",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_8192_by_1",
																"typeString": "int_const 8192"
															},
															"value": "0x2000"
														},
														"src": "2849:16:18",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 2413,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2869:1:18",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2849:21:18",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2424,
												"nodeType": "IfStatement",
												"src": "2845:86:18",
												"trueBody": {
													"expression": {
														"id": 2422,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 2415,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2220,
															"src": "2872:5:18",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2421,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 2418,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 2416,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2220,
																			"src": "2881:5:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30786139663734363436326438373066646638613635646331663930653036316535",
																			"id": 2417,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "2889:34:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_225923453940442621947126027127485391333_by_1",
																				"typeString": "int_const 2259...(31 digits omitted)...1333"
																			},
																			"value": "0xa9f746462d870fdf8a65dc1f90e061e5"
																		},
																		"src": "2881:42:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 2419,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2880:44:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 2420,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2928:3:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "2880:51:18",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "2872:59:18",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 2423,
													"nodeType": "ExpressionStatement",
													"src": "2872:59:18"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2429,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2427,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 2425,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2188,
															"src": "2945:7:18",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "307834303030",
															"id": 2426,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2955:6:18",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_16384_by_1",
																"typeString": "int_const 16384"
															},
															"value": "0x4000"
														},
														"src": "2945:16:18",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 2428,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2965:1:18",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2945:21:18",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2439,
												"nodeType": "IfStatement",
												"src": "2941:86:18",
												"trueBody": {
													"expression": {
														"id": 2437,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 2430,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2220,
															"src": "2968:5:18",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2436,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 2433,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 2431,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2220,
																			"src": "2977:5:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30783730643836396131353664326131623839306262336466363262616633326637",
																			"id": 2432,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "2985:34:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_149997214084966997727330242082538205943_by_1",
																				"typeString": "int_const 1499...(31 digits omitted)...5943"
																			},
																			"value": "0x70d869a156d2a1b890bb3df62baf32f7"
																		},
																		"src": "2977:42:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 2434,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2976:44:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 2435,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "3024:3:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "2976:51:18",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "2968:59:18",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 2438,
													"nodeType": "ExpressionStatement",
													"src": "2968:59:18"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2444,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2442,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 2440,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2188,
															"src": "3041:7:18",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "307838303030",
															"id": 2441,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3051:6:18",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_32768_by_1",
																"typeString": "int_const 32768"
															},
															"value": "0x8000"
														},
														"src": "3041:16:18",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 2443,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3061:1:18",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "3041:21:18",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2454,
												"nodeType": "IfStatement",
												"src": "3037:86:18",
												"trueBody": {
													"expression": {
														"id": 2452,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 2445,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2220,
															"src": "3064:5:18",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2451,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 2448,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 2446,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2220,
																			"src": "3073:5:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30783331626531333566393764303866643938313233313530353534326663666136",
																			"id": 2447,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "3081:34:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_66119101136024775622716233608466517926_by_1",
																				"typeString": "int_const 6611...(30 digits omitted)...7926"
																			},
																			"value": "0x31be135f97d08fd981231505542fcfa6"
																		},
																		"src": "3073:42:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 2449,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "3072:44:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 2450,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "3120:3:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "3072:51:18",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "3064:59:18",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 2453,
													"nodeType": "ExpressionStatement",
													"src": "3064:59:18"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2459,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2457,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 2455,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2188,
															"src": "3137:7:18",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "30783130303030",
															"id": 2456,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3147:7:18",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_65536_by_1",
																"typeString": "int_const 65536"
															},
															"value": "0x10000"
														},
														"src": "3137:17:18",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 2458,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3158:1:18",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "3137:22:18",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2469,
												"nodeType": "IfStatement",
												"src": "3133:86:18",
												"trueBody": {
													"expression": {
														"id": 2467,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 2460,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2220,
															"src": "3161:5:18",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2466,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 2463,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 2461,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2220,
																			"src": "3170:5:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "307839616135303862356237613834653163363737646535346633653939626339",
																			"id": 2462,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "3178:33:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_12847376061809297530290974190478138313_by_1",
																				"typeString": "int_const 1284...(30 digits omitted)...8313"
																			},
																			"value": "0x9aa508b5b7a84e1c677de54f3e99bc9"
																		},
																		"src": "3170:41:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 2464,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "3169:43:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 2465,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "3216:3:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "3169:50:18",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "3161:58:18",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 2468,
													"nodeType": "ExpressionStatement",
													"src": "3161:58:18"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2474,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2472,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 2470,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2188,
															"src": "3233:7:18",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "30783230303030",
															"id": 2471,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3243:7:18",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_131072_by_1",
																"typeString": "int_const 131072"
															},
															"value": "0x20000"
														},
														"src": "3233:17:18",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 2473,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3254:1:18",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "3233:22:18",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2484,
												"nodeType": "IfStatement",
												"src": "3229:85:18",
												"trueBody": {
													"expression": {
														"id": 2482,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 2475,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2220,
															"src": "3257:5:18",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2481,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 2478,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 2476,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2220,
																			"src": "3266:5:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "3078356436616638646564623831313936363939633332393232356565363034",
																			"id": 2477,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "3274:32:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_485053260817066172746253684029974020_by_1",
																				"typeString": "int_const 4850...(28 digits omitted)...4020"
																			},
																			"value": "0x5d6af8dedb81196699c329225ee604"
																		},
																		"src": "3266:40:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 2479,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "3265:42:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 2480,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "3311:3:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "3265:49:18",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "3257:57:18",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 2483,
													"nodeType": "ExpressionStatement",
													"src": "3257:57:18"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2489,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2487,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 2485,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2188,
															"src": "3328:7:18",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "30783430303030",
															"id": 2486,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3338:7:18",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_262144_by_1",
																"typeString": "int_const 262144"
															},
															"value": "0x40000"
														},
														"src": "3328:17:18",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 2488,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3349:1:18",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "3328:22:18",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2499,
												"nodeType": "IfStatement",
												"src": "3324:83:18",
												"trueBody": {
													"expression": {
														"id": 2497,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 2490,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2220,
															"src": "3352:5:18",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2496,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 2493,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 2491,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2220,
																			"src": "3361:5:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "307832323136653538346635666131656139323630343162656466653938",
																			"id": 2492,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "3369:30:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_691415978906521570653435304214168_by_1",
																				"typeString": "int_const 6914...(25 digits omitted)...4168"
																			},
																			"value": "0x2216e584f5fa1ea926041bedfe98"
																		},
																		"src": "3361:38:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 2494,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "3360:40:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 2495,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "3404:3:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "3360:47:18",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "3352:55:18",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 2498,
													"nodeType": "ExpressionStatement",
													"src": "3352:55:18"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2504,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2502,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 2500,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2188,
															"src": "3421:7:18",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "30783830303030",
															"id": 2501,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3431:7:18",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_524288_by_1",
																"typeString": "int_const 524288"
															},
															"value": "0x80000"
														},
														"src": "3421:17:18",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 2503,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3442:1:18",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "3421:22:18",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2514,
												"nodeType": "IfStatement",
												"src": "3417:78:18",
												"trueBody": {
													"expression": {
														"id": 2512,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 2505,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2220,
															"src": "3445:5:18",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2511,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 2508,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 2506,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2220,
																			"src": "3454:5:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30783438613137303339316637646334323434346538666132",
																			"id": 2507,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "3462:25:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1404880482679654955896180642_by_1",
																				"typeString": "int_const 1404880482679654955896180642"
																			},
																			"value": "0x48a170391f7dc42444e8fa2"
																		},
																		"src": "3454:33:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 2509,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "3453:35:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 2510,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "3492:3:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "3453:42:18",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "3445:50:18",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 2513,
													"nodeType": "ExpressionStatement",
													"src": "3445:50:18"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													},
													"id": 2517,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 2515,
														"name": "tick",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2182,
														"src": "3510:4:18",
														"typeDescriptions": {
															"typeIdentifier": "t_int24",
															"typeString": "int24"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 2516,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3517:1:18",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "3510:8:18",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2528,
												"nodeType": "IfStatement",
												"src": "3506:47:18",
												"trueBody": {
													"expression": {
														"id": 2526,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 2518,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2220,
															"src": "3520:5:18",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2525,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 2521,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "3533:7:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_uint256_$",
																				"typeString": "type(uint256)"
																			},
																			"typeName": {
																				"id": 2520,
																				"name": "uint256",
																				"nodeType": "ElementaryTypeName",
																				"src": "3533:7:18",
																				"typeDescriptions": {}
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_type$_t_uint256_$",
																				"typeString": "type(uint256)"
																			}
																		],
																		"id": 2519,
																		"name": "type",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967269,
																		"src": "3528:4:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																			"typeString": "function () pure"
																		}
																	},
																	"id": 2522,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "3528:13:18",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_meta_type_t_uint256",
																		"typeString": "type(uint256)"
																	}
																},
																"id": 2523,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "max",
																"nodeType": "MemberAccess",
																"src": "3528:17:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "/",
															"rightExpression": {
																"id": 2524,
																"name": "ratio",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2220,
																"src": "3548:5:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "3528:25:18",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "3520:33:18",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 2527,
													"nodeType": "ExpressionStatement",
													"src": "3520:33:18"
												}
											},
											{
												"expression": {
													"id": 2550,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 2529,
														"name": "sqrtPriceX96",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2185,
														"src": "3863:12:18",
														"typeDescriptions": {
															"typeIdentifier": "t_uint160",
															"typeString": "uint160"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2548,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 2534,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 2532,
																				"name": "ratio",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2220,
																				"src": "3887:5:18",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": ">>",
																			"rightExpression": {
																				"hexValue": "3332",
																				"id": 2533,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "3896:2:18",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_32_by_1",
																					"typeString": "int_const 32"
																				},
																				"value": "32"
																			},
																			"src": "3887:11:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 2535,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "3886:13:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "+",
																"rightExpression": {
																	"components": [
																		{
																			"condition": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 2543,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 2541,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"id": 2536,
																						"name": "ratio",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 2220,
																						"src": "3903:5:18",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "%",
																					"rightExpression": {
																						"components": [
																							{
																								"commonType": {
																									"typeIdentifier": "t_rational_4294967296_by_1",
																									"typeString": "int_const 4294967296"
																								},
																								"id": 2539,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": true,
																								"lValueRequested": false,
																								"leftExpression": {
																									"hexValue": "31",
																									"id": 2537,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": true,
																									"kind": "number",
																									"lValueRequested": false,
																									"nodeType": "Literal",
																									"src": "3912:1:18",
																									"typeDescriptions": {
																										"typeIdentifier": "t_rational_1_by_1",
																										"typeString": "int_const 1"
																									},
																									"value": "1"
																								},
																								"nodeType": "BinaryOperation",
																								"operator": "<<",
																								"rightExpression": {
																									"hexValue": "3332",
																									"id": 2538,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": true,
																									"kind": "number",
																									"lValueRequested": false,
																									"nodeType": "Literal",
																									"src": "3917:2:18",
																									"typeDescriptions": {
																										"typeIdentifier": "t_rational_32_by_1",
																										"typeString": "int_const 32"
																									},
																									"value": "32"
																								},
																								"src": "3912:7:18",
																								"typeDescriptions": {
																									"typeIdentifier": "t_rational_4294967296_by_1",
																									"typeString": "int_const 4294967296"
																								}
																							}
																						],
																						"id": 2540,
																						"isConstant": false,
																						"isInlineArray": false,
																						"isLValue": false,
																						"isPure": true,
																						"lValueRequested": false,
																						"nodeType": "TupleExpression",
																						"src": "3911:9:18",
																						"typeDescriptions": {
																							"typeIdentifier": "t_rational_4294967296_by_1",
																							"typeString": "int_const 4294967296"
																						}
																					},
																					"src": "3903:17:18",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "==",
																				"rightExpression": {
																					"hexValue": "30",
																					"id": 2542,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "number",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "3924:1:18",
																					"typeDescriptions": {
																						"typeIdentifier": "t_rational_0_by_1",
																						"typeString": "int_const 0"
																					},
																					"value": "0"
																				},
																				"src": "3903:22:18",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"falseExpression": {
																				"hexValue": "31",
																				"id": 2545,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "3932:1:18",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_1_by_1",
																					"typeString": "int_const 1"
																				},
																				"value": "1"
																			},
																			"id": 2546,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "Conditional",
																			"src": "3903:30:18",
																			"trueExpression": {
																				"hexValue": "30",
																				"id": 2544,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "3928:1:18",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			},
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint8",
																				"typeString": "uint8"
																			}
																		}
																	],
																	"id": 2547,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "3902:32:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																},
																"src": "3886:48:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"id": 2531,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "3878:7:18",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_uint160_$",
																"typeString": "type(uint160)"
															},
															"typeName": {
																"id": 2530,
																"name": "uint160",
																"nodeType": "ElementaryTypeName",
																"src": "3878:7:18",
																"typeDescriptions": {}
															}
														},
														"id": 2549,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "3878:57:18",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint160",
															"typeString": "uint160"
														}
													},
													"src": "3863:72:18",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"id": 2551,
												"nodeType": "ExpressionStatement",
												"src": "3863:72:18"
											}
										]
									},
									"documentation": {
										"id": 2180,
										"nodeType": "StructuredDocumentation",
										"src": "1060:297:18",
										"text": "@notice Calculates sqrt(1.0001^tick) * 2^96\n @dev Throws if |tick| > max tick\n @param tick The input tick for the above formula\n @return sqrtPriceX96 A Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)\n at the given tick"
									},
									"id": 2553,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getSqrtRatioAtTick",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2183,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2182,
												"mutability": "mutable",
												"name": "tick",
												"nodeType": "VariableDeclaration",
												"scope": 2553,
												"src": "1390:10:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 2181,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "1390:5:18",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1389:12:18"
									},
									"returnParameters": {
										"id": 2186,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2185,
												"mutability": "mutable",
												"name": "sqrtPriceX96",
												"nodeType": "VariableDeclaration",
												"scope": 2553,
												"src": "1425:20:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 2184,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "1425:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1424:22:18"
									},
									"scope": 2693,
									"src": "1362:2580:18",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2691,
										"nodeType": "Block",
										"src": "4446:4196:18",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 2568,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																},
																"id": 2564,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2562,
																	"name": "sqrtPriceX96",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2556,
																	"src": "4563:12:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">=",
																"rightExpression": {
																	"id": 2563,
																	"name": "MIN_SQRT_RATIO",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2175,
																	"src": "4579:14:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																},
																"src": "4563:30:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "&&",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																},
																"id": 2567,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2565,
																	"name": "sqrtPriceX96",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2556,
																	"src": "4597:12:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<",
																"rightExpression": {
																	"id": 2566,
																	"name": "MAX_SQRT_RATIO",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2179,
																	"src": "4612:14:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																},
																"src": "4597:29:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "4563:63:18",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "52",
															"id": 2569,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4628:3:18",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_ef22bddd350b943170a67d35191c27e310709a28c38b5762a152ff640108f5b2",
																"typeString": "literal_string \"R\""
															},
															"value": "R"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_ef22bddd350b943170a67d35191c27e310709a28c38b5762a152ff640108f5b2",
																"typeString": "literal_string \"R\""
															}
														],
														"id": 2561,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "4555:7:18",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 2570,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4555:77:18",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2571,
												"nodeType": "ExpressionStatement",
												"src": "4555:77:18"
											},
											{
												"assignments": [
													2573
												],
												"declarations": [
													{
														"constant": false,
														"id": 2573,
														"mutability": "mutable",
														"name": "ratio",
														"nodeType": "VariableDeclaration",
														"scope": 2691,
														"src": "4642:13:18",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 2572,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "4642:7:18",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2580,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2579,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"id": 2576,
																"name": "sqrtPriceX96",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2556,
																"src": "4666:12:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																}
															],
															"id": 2575,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "4658:7:18",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_uint256_$",
																"typeString": "type(uint256)"
															},
															"typeName": {
																"id": 2574,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "4658:7:18",
																"typeDescriptions": {}
															}
														},
														"id": 2577,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "4658:21:18",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<<",
													"rightExpression": {
														"hexValue": "3332",
														"id": 2578,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "4683:2:18",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_32_by_1",
															"typeString": "int_const 32"
														},
														"value": "32"
													},
													"src": "4658:27:18",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4642:43:18"
											},
											{
												"assignments": [
													2582
												],
												"declarations": [
													{
														"constant": false,
														"id": 2582,
														"mutability": "mutable",
														"name": "r",
														"nodeType": "VariableDeclaration",
														"scope": 2691,
														"src": "4696:9:18",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 2581,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "4696:7:18",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2584,
												"initialValue": {
													"id": 2583,
													"name": "ratio",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 2573,
													"src": "4708:5:18",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4696:17:18"
											},
											{
												"assignments": [
													2586
												],
												"declarations": [
													{
														"constant": false,
														"id": 2586,
														"mutability": "mutable",
														"name": "msb",
														"nodeType": "VariableDeclaration",
														"scope": 2691,
														"src": "4723:11:18",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 2585,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "4723:7:18",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2588,
												"initialValue": {
													"hexValue": "30",
													"id": 2587,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "4737:1:18",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4723:15:18"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "4758:139:18",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "4772:58:18",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4785:1:18",
																		"type": "",
																		"value": "7"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "4791:1:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4794:34:18",
																				"type": "",
																				"value": "0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "4788:2:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4788:41:18"
																	}
																],
																"functionName": {
																	"name": "shl",
																	"nodeType": "YulIdentifier",
																	"src": "4781:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "4781:49:18"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "4776:1:18",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "4843:17:18",
															"value": {
																"arguments": [
																	{
																		"name": "msb",
																		"nodeType": "YulIdentifier",
																		"src": "4853:3:18"
																	},
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "4858:1:18"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "4850:2:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "4850:10:18"
															},
															"variableNames": [
																{
																	"name": "msb",
																	"nodeType": "YulIdentifier",
																	"src": "4843:3:18"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "4873:14:18",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "4882:1:18"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "4885:1:18"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "4878:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "4878:9:18"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "4873:1:18"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 2586,
														"isOffset": false,
														"isSlot": false,
														"src": "4843:3:18",
														"valueSize": 1
													},
													{
														"declaration": 2586,
														"isOffset": false,
														"isSlot": false,
														"src": "4853:3:18",
														"valueSize": 1
													},
													{
														"declaration": 2582,
														"isOffset": false,
														"isSlot": false,
														"src": "4791:1:18",
														"valueSize": 1
													},
													{
														"declaration": 2582,
														"isOffset": false,
														"isSlot": false,
														"src": "4873:1:18",
														"valueSize": 1
													},
													{
														"declaration": 2582,
														"isOffset": false,
														"isSlot": false,
														"src": "4885:1:18",
														"valueSize": 1
													}
												],
												"id": 2589,
												"nodeType": "InlineAssembly",
												"src": "4749:148:18"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "4915:123:18",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "4929:42:18",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4942:1:18",
																		"type": "",
																		"value": "6"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "4948:1:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4951:18:18",
																				"type": "",
																				"value": "0xFFFFFFFFFFFFFFFF"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "4945:2:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4945:25:18"
																	}
																],
																"functionName": {
																	"name": "shl",
																	"nodeType": "YulIdentifier",
																	"src": "4938:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "4938:33:18"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "4933:1:18",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "4984:17:18",
															"value": {
																"arguments": [
																	{
																		"name": "msb",
																		"nodeType": "YulIdentifier",
																		"src": "4994:3:18"
																	},
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "4999:1:18"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "4991:2:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "4991:10:18"
															},
															"variableNames": [
																{
																	"name": "msb",
																	"nodeType": "YulIdentifier",
																	"src": "4984:3:18"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "5014:14:18",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "5023:1:18"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "5026:1:18"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "5019:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "5019:9:18"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "5014:1:18"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 2586,
														"isOffset": false,
														"isSlot": false,
														"src": "4984:3:18",
														"valueSize": 1
													},
													{
														"declaration": 2586,
														"isOffset": false,
														"isSlot": false,
														"src": "4994:3:18",
														"valueSize": 1
													},
													{
														"declaration": 2582,
														"isOffset": false,
														"isSlot": false,
														"src": "4948:1:18",
														"valueSize": 1
													},
													{
														"declaration": 2582,
														"isOffset": false,
														"isSlot": false,
														"src": "5014:1:18",
														"valueSize": 1
													},
													{
														"declaration": 2582,
														"isOffset": false,
														"isSlot": false,
														"src": "5026:1:18",
														"valueSize": 1
													}
												],
												"id": 2590,
												"nodeType": "InlineAssembly",
												"src": "4906:132:18"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "5056:115:18",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5070:34:18",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5083:1:18",
																		"type": "",
																		"value": "5"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "5089:1:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5092:10:18",
																				"type": "",
																				"value": "0xFFFFFFFF"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "5086:2:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5086:17:18"
																	}
																],
																"functionName": {
																	"name": "shl",
																	"nodeType": "YulIdentifier",
																	"src": "5079:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "5079:25:18"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "5074:1:18",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "5117:17:18",
															"value": {
																"arguments": [
																	{
																		"name": "msb",
																		"nodeType": "YulIdentifier",
																		"src": "5127:3:18"
																	},
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "5132:1:18"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "5124:2:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "5124:10:18"
															},
															"variableNames": [
																{
																	"name": "msb",
																	"nodeType": "YulIdentifier",
																	"src": "5117:3:18"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "5147:14:18",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "5156:1:18"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "5159:1:18"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "5152:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "5152:9:18"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "5147:1:18"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 2586,
														"isOffset": false,
														"isSlot": false,
														"src": "5117:3:18",
														"valueSize": 1
													},
													{
														"declaration": 2586,
														"isOffset": false,
														"isSlot": false,
														"src": "5127:3:18",
														"valueSize": 1
													},
													{
														"declaration": 2582,
														"isOffset": false,
														"isSlot": false,
														"src": "5089:1:18",
														"valueSize": 1
													},
													{
														"declaration": 2582,
														"isOffset": false,
														"isSlot": false,
														"src": "5147:1:18",
														"valueSize": 1
													},
													{
														"declaration": 2582,
														"isOffset": false,
														"isSlot": false,
														"src": "5159:1:18",
														"valueSize": 1
													}
												],
												"id": 2591,
												"nodeType": "InlineAssembly",
												"src": "5047:124:18"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "5189:111:18",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5203:30:18",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5216:1:18",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "5222:1:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5225:6:18",
																				"type": "",
																				"value": "0xFFFF"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "5219:2:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5219:13:18"
																	}
																],
																"functionName": {
																	"name": "shl",
																	"nodeType": "YulIdentifier",
																	"src": "5212:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "5212:21:18"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "5207:1:18",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "5246:17:18",
															"value": {
																"arguments": [
																	{
																		"name": "msb",
																		"nodeType": "YulIdentifier",
																		"src": "5256:3:18"
																	},
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "5261:1:18"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "5253:2:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "5253:10:18"
															},
															"variableNames": [
																{
																	"name": "msb",
																	"nodeType": "YulIdentifier",
																	"src": "5246:3:18"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "5276:14:18",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "5285:1:18"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "5288:1:18"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "5281:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "5281:9:18"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "5276:1:18"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 2586,
														"isOffset": false,
														"isSlot": false,
														"src": "5246:3:18",
														"valueSize": 1
													},
													{
														"declaration": 2586,
														"isOffset": false,
														"isSlot": false,
														"src": "5256:3:18",
														"valueSize": 1
													},
													{
														"declaration": 2582,
														"isOffset": false,
														"isSlot": false,
														"src": "5222:1:18",
														"valueSize": 1
													},
													{
														"declaration": 2582,
														"isOffset": false,
														"isSlot": false,
														"src": "5276:1:18",
														"valueSize": 1
													},
													{
														"declaration": 2582,
														"isOffset": false,
														"isSlot": false,
														"src": "5288:1:18",
														"valueSize": 1
													}
												],
												"id": 2592,
												"nodeType": "InlineAssembly",
												"src": "5180:120:18"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "5318:109:18",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5332:28:18",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5345:1:18",
																		"type": "",
																		"value": "3"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "5351:1:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5354:4:18",
																				"type": "",
																				"value": "0xFF"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "5348:2:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5348:11:18"
																	}
																],
																"functionName": {
																	"name": "shl",
																	"nodeType": "YulIdentifier",
																	"src": "5341:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "5341:19:18"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "5336:1:18",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "5373:17:18",
															"value": {
																"arguments": [
																	{
																		"name": "msb",
																		"nodeType": "YulIdentifier",
																		"src": "5383:3:18"
																	},
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "5388:1:18"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "5380:2:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "5380:10:18"
															},
															"variableNames": [
																{
																	"name": "msb",
																	"nodeType": "YulIdentifier",
																	"src": "5373:3:18"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "5403:14:18",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "5412:1:18"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "5415:1:18"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "5408:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "5408:9:18"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "5403:1:18"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 2586,
														"isOffset": false,
														"isSlot": false,
														"src": "5373:3:18",
														"valueSize": 1
													},
													{
														"declaration": 2586,
														"isOffset": false,
														"isSlot": false,
														"src": "5383:3:18",
														"valueSize": 1
													},
													{
														"declaration": 2582,
														"isOffset": false,
														"isSlot": false,
														"src": "5351:1:18",
														"valueSize": 1
													},
													{
														"declaration": 2582,
														"isOffset": false,
														"isSlot": false,
														"src": "5403:1:18",
														"valueSize": 1
													},
													{
														"declaration": 2582,
														"isOffset": false,
														"isSlot": false,
														"src": "5415:1:18",
														"valueSize": 1
													}
												],
												"id": 2593,
												"nodeType": "InlineAssembly",
												"src": "5309:118:18"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "5445:108:18",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5459:27:18",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5472:1:18",
																		"type": "",
																		"value": "2"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "5478:1:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5481:3:18",
																				"type": "",
																				"value": "0xF"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "5475:2:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5475:10:18"
																	}
																],
																"functionName": {
																	"name": "shl",
																	"nodeType": "YulIdentifier",
																	"src": "5468:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "5468:18:18"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "5463:1:18",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "5499:17:18",
															"value": {
																"arguments": [
																	{
																		"name": "msb",
																		"nodeType": "YulIdentifier",
																		"src": "5509:3:18"
																	},
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "5514:1:18"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "5506:2:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "5506:10:18"
															},
															"variableNames": [
																{
																	"name": "msb",
																	"nodeType": "YulIdentifier",
																	"src": "5499:3:18"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "5529:14:18",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "5538:1:18"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "5541:1:18"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "5534:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "5534:9:18"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "5529:1:18"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 2586,
														"isOffset": false,
														"isSlot": false,
														"src": "5499:3:18",
														"valueSize": 1
													},
													{
														"declaration": 2586,
														"isOffset": false,
														"isSlot": false,
														"src": "5509:3:18",
														"valueSize": 1
													},
													{
														"declaration": 2582,
														"isOffset": false,
														"isSlot": false,
														"src": "5478:1:18",
														"valueSize": 1
													},
													{
														"declaration": 2582,
														"isOffset": false,
														"isSlot": false,
														"src": "5529:1:18",
														"valueSize": 1
													},
													{
														"declaration": 2582,
														"isOffset": false,
														"isSlot": false,
														"src": "5541:1:18",
														"valueSize": 1
													}
												],
												"id": 2594,
												"nodeType": "InlineAssembly",
												"src": "5436:117:18"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "5571:108:18",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5585:27:18",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5598:1:18",
																		"type": "",
																		"value": "1"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "5604:1:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5607:3:18",
																				"type": "",
																				"value": "0x3"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "5601:2:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5601:10:18"
																	}
																],
																"functionName": {
																	"name": "shl",
																	"nodeType": "YulIdentifier",
																	"src": "5594:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "5594:18:18"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "5589:1:18",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "5625:17:18",
															"value": {
																"arguments": [
																	{
																		"name": "msb",
																		"nodeType": "YulIdentifier",
																		"src": "5635:3:18"
																	},
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "5640:1:18"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "5632:2:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "5632:10:18"
															},
															"variableNames": [
																{
																	"name": "msb",
																	"nodeType": "YulIdentifier",
																	"src": "5625:3:18"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "5655:14:18",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "5664:1:18"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "5667:1:18"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "5660:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "5660:9:18"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "5655:1:18"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 2586,
														"isOffset": false,
														"isSlot": false,
														"src": "5625:3:18",
														"valueSize": 1
													},
													{
														"declaration": 2586,
														"isOffset": false,
														"isSlot": false,
														"src": "5635:3:18",
														"valueSize": 1
													},
													{
														"declaration": 2582,
														"isOffset": false,
														"isSlot": false,
														"src": "5604:1:18",
														"valueSize": 1
													},
													{
														"declaration": 2582,
														"isOffset": false,
														"isSlot": false,
														"src": "5655:1:18",
														"valueSize": 1
													},
													{
														"declaration": 2582,
														"isOffset": false,
														"isSlot": false,
														"src": "5667:1:18",
														"valueSize": 1
													}
												],
												"id": 2595,
												"nodeType": "InlineAssembly",
												"src": "5562:117:18"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "5697:73:18",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5711:19:18",
															"value": {
																"arguments": [
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "5723:1:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5726:3:18",
																		"type": "",
																		"value": "0x1"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "5720:2:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "5720:10:18"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "5715:1:18",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "5743:17:18",
															"value": {
																"arguments": [
																	{
																		"name": "msb",
																		"nodeType": "YulIdentifier",
																		"src": "5753:3:18"
																	},
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "5758:1:18"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "5750:2:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "5750:10:18"
															},
															"variableNames": [
																{
																	"name": "msb",
																	"nodeType": "YulIdentifier",
																	"src": "5743:3:18"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 2586,
														"isOffset": false,
														"isSlot": false,
														"src": "5743:3:18",
														"valueSize": 1
													},
													{
														"declaration": 2586,
														"isOffset": false,
														"isSlot": false,
														"src": "5753:3:18",
														"valueSize": 1
													},
													{
														"declaration": 2582,
														"isOffset": false,
														"isSlot": false,
														"src": "5723:1:18",
														"valueSize": 1
													}
												],
												"id": 2596,
												"nodeType": "InlineAssembly",
												"src": "5688:82:18"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2599,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 2597,
														"name": "msb",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2586,
														"src": "5784:3:18",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">=",
													"rightExpression": {
														"hexValue": "313238",
														"id": 2598,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "5791:3:18",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_128_by_1",
															"typeString": "int_const 128"
														},
														"value": "128"
													},
													"src": "5784:10:18",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"expression": {
														"id": 2616,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 2609,
															"name": "r",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2582,
															"src": "5835:1:18",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2615,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2610,
																"name": "ratio",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2573,
																"src": "5839:5:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<<",
															"rightExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 2613,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"hexValue": "313237",
																			"id": 2611,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "5849:3:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_127_by_1",
																				"typeString": "int_const 127"
																			},
																			"value": "127"
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "-",
																		"rightExpression": {
																			"id": 2612,
																			"name": "msb",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2586,
																			"src": "5855:3:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "5849:9:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 2614,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "5848:11:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5839:20:18",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "5835:24:18",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 2617,
													"nodeType": "ExpressionStatement",
													"src": "5835:24:18"
												},
												"id": 2618,
												"nodeType": "IfStatement",
												"src": "5780:79:18",
												"trueBody": {
													"expression": {
														"id": 2607,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 2600,
															"name": "r",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2582,
															"src": "5796:1:18",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2606,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2601,
																"name": "ratio",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2573,
																"src": "5800:5:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 2604,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 2602,
																			"name": "msb",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2586,
																			"src": "5810:3:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "-",
																		"rightExpression": {
																			"hexValue": "313237",
																			"id": 2603,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "5816:3:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_127_by_1",
																				"typeString": "int_const 127"
																			},
																			"value": "127"
																		},
																		"src": "5810:9:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 2605,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "5809:11:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5800:20:18",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "5796:24:18",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 2608,
													"nodeType": "ExpressionStatement",
													"src": "5796:24:18"
												}
											},
											{
												"assignments": [
													2620
												],
												"declarations": [
													{
														"constant": false,
														"id": 2620,
														"mutability": "mutable",
														"name": "log_2",
														"nodeType": "VariableDeclaration",
														"scope": 2691,
														"src": "5870:12:18",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														},
														"typeName": {
															"id": 2619,
															"name": "int256",
															"nodeType": "ElementaryTypeName",
															"src": "5870:6:18",
															"typeDescriptions": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2630,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													},
													"id": 2629,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																},
																"id": 2626,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"arguments": [
																		{
																			"id": 2623,
																			"name": "msb",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2586,
																			"src": "5893:3:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"id": 2622,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "5886:6:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_int256_$",
																			"typeString": "type(int256)"
																		},
																		"typeName": {
																			"id": 2621,
																			"name": "int256",
																			"nodeType": "ElementaryTypeName",
																			"src": "5886:6:18",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 2624,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "5886:11:18",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"hexValue": "313238",
																	"id": 2625,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "5900:3:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_128_by_1",
																		"typeString": "int_const 128"
																	},
																	"value": "128"
																},
																"src": "5886:17:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																}
															}
														],
														"id": 2627,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "5885:19:18",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<<",
													"rightExpression": {
														"hexValue": "3634",
														"id": 2628,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "5908:2:18",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_64_by_1",
															"typeString": "int_const 64"
														},
														"value": "64"
													},
													"src": "5885:25:18",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5870:40:18"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "5930:151:18",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "5944:24:18",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5953:3:18",
																		"type": "",
																		"value": "127"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "5962:1:18"
																			},
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "5965:1:18"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nodeType": "YulIdentifier",
																			"src": "5958:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5958:9:18"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "5949:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "5949:19:18"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "5944:1:18"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5981:20:18",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5994:3:18",
																		"type": "",
																		"value": "128"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "5999:1:18"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "5990:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "5990:11:18"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "5985:1:18",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "6014:30:18",
															"value": {
																"arguments": [
																	{
																		"name": "log_2",
																		"nodeType": "YulIdentifier",
																		"src": "6026:5:18"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6037:2:18",
																				"type": "",
																				"value": "63"
																			},
																			{
																				"name": "f",
																				"nodeType": "YulIdentifier",
																				"src": "6041:1:18"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "6033:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6033:10:18"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "6023:2:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "6023:21:18"
															},
															"variableNames": [
																{
																	"name": "log_2",
																	"nodeType": "YulIdentifier",
																	"src": "6014:5:18"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "6057:14:18",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "6066:1:18"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "6069:1:18"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6062:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "6062:9:18"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "6057:1:18"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 2620,
														"isOffset": false,
														"isSlot": false,
														"src": "6014:5:18",
														"valueSize": 1
													},
													{
														"declaration": 2620,
														"isOffset": false,
														"isSlot": false,
														"src": "6026:5:18",
														"valueSize": 1
													},
													{
														"declaration": 2582,
														"isOffset": false,
														"isSlot": false,
														"src": "5944:1:18",
														"valueSize": 1
													},
													{
														"declaration": 2582,
														"isOffset": false,
														"isSlot": false,
														"src": "5962:1:18",
														"valueSize": 1
													},
													{
														"declaration": 2582,
														"isOffset": false,
														"isSlot": false,
														"src": "5965:1:18",
														"valueSize": 1
													},
													{
														"declaration": 2582,
														"isOffset": false,
														"isSlot": false,
														"src": "5999:1:18",
														"valueSize": 1
													},
													{
														"declaration": 2582,
														"isOffset": false,
														"isSlot": false,
														"src": "6057:1:18",
														"valueSize": 1
													},
													{
														"declaration": 2582,
														"isOffset": false,
														"isSlot": false,
														"src": "6069:1:18",
														"valueSize": 1
													}
												],
												"id": 2631,
												"nodeType": "InlineAssembly",
												"src": "5921:160:18"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "6099:151:18",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "6113:24:18",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6122:3:18",
																		"type": "",
																		"value": "127"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "6131:1:18"
																			},
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "6134:1:18"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nodeType": "YulIdentifier",
																			"src": "6127:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6127:9:18"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6118:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "6118:19:18"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "6113:1:18"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "6150:20:18",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6163:3:18",
																		"type": "",
																		"value": "128"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "6168:1:18"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6159:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "6159:11:18"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "6154:1:18",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "6183:30:18",
															"value": {
																"arguments": [
																	{
																		"name": "log_2",
																		"nodeType": "YulIdentifier",
																		"src": "6195:5:18"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6206:2:18",
																				"type": "",
																				"value": "62"
																			},
																			{
																				"name": "f",
																				"nodeType": "YulIdentifier",
																				"src": "6210:1:18"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "6202:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6202:10:18"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "6192:2:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "6192:21:18"
															},
															"variableNames": [
																{
																	"name": "log_2",
																	"nodeType": "YulIdentifier",
																	"src": "6183:5:18"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "6226:14:18",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "6235:1:18"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "6238:1:18"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6231:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "6231:9:18"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "6226:1:18"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 2620,
														"isOffset": false,
														"isSlot": false,
														"src": "6183:5:18",
														"valueSize": 1
													},
													{
														"declaration": 2620,
														"isOffset": false,
														"isSlot": false,
														"src": "6195:5:18",
														"valueSize": 1
													},
													{
														"declaration": 2582,
														"isOffset": false,
														"isSlot": false,
														"src": "6113:1:18",
														"valueSize": 1
													},
													{
														"declaration": 2582,
														"isOffset": false,
														"isSlot": false,
														"src": "6131:1:18",
														"valueSize": 1
													},
													{
														"declaration": 2582,
														"isOffset": false,
														"isSlot": false,
														"src": "6134:1:18",
														"valueSize": 1
													},
													{
														"declaration": 2582,
														"isOffset": false,
														"isSlot": false,
														"src": "6168:1:18",
														"valueSize": 1
													},
													{
														"declaration": 2582,
														"isOffset": false,
														"isSlot": false,
														"src": "6226:1:18",
														"valueSize": 1
													},
													{
														"declaration": 2582,
														"isOffset": false,
														"isSlot": false,
														"src": "6238:1:18",
														"valueSize": 1
													}
												],
												"id": 2632,
												"nodeType": "InlineAssembly",
												"src": "6090:160:18"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "6268:151:18",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "6282:24:18",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6291:3:18",
																		"type": "",
																		"value": "127"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "6300:1:18"
																			},
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "6303:1:18"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nodeType": "YulIdentifier",
																			"src": "6296:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6296:9:18"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6287:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "6287:19:18"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "6282:1:18"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "6319:20:18",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6332:3:18",
																		"type": "",
																		"value": "128"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "6337:1:18"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6328:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "6328:11:18"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "6323:1:18",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "6352:30:18",
															"value": {
																"arguments": [
																	{
																		"name": "log_2",
																		"nodeType": "YulIdentifier",
																		"src": "6364:5:18"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6375:2:18",
																				"type": "",
																				"value": "61"
																			},
																			{
																				"name": "f",
																				"nodeType": "YulIdentifier",
																				"src": "6379:1:18"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "6371:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6371:10:18"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "6361:2:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "6361:21:18"
															},
															"variableNames": [
																{
																	"name": "log_2",
																	"nodeType": "YulIdentifier",
																	"src": "6352:5:18"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "6395:14:18",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "6404:1:18"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "6407:1:18"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6400:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "6400:9:18"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "6395:1:18"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 2620,
														"isOffset": false,
														"isSlot": false,
														"src": "6352:5:18",
														"valueSize": 1
													},
													{
														"declaration": 2620,
														"isOffset": false,
														"isSlot": false,
														"src": "6364:5:18",
														"valueSize": 1
													},
													{
														"declaration": 2582,
														"isOffset": false,
														"isSlot": false,
														"src": "6282:1:18",
														"valueSize": 1
													},
													{
														"declaration": 2582,
														"isOffset": false,
														"isSlot": false,
														"src": "6300:1:18",
														"valueSize": 1
													},
													{
														"declaration": 2582,
														"isOffset": false,
														"isSlot": false,
														"src": "6303:1:18",
														"valueSize": 1
													},
													{
														"declaration": 2582,
														"isOffset": false,
														"isSlot": false,
														"src": "6337:1:18",
														"valueSize": 1
													},
													{
														"declaration": 2582,
														"isOffset": false,
														"isSlot": false,
														"src": "6395:1:18",
														"valueSize": 1
													},
													{
														"declaration": 2582,
														"isOffset": false,
														"isSlot": false,
														"src": "6407:1:18",
														"valueSize": 1
													}
												],
												"id": 2633,
												"nodeType": "InlineAssembly",
												"src": "6259:160:18"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "6437:151:18",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "6451:24:18",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6460:3:18",
																		"type": "",
																		"value": "127"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "6469:1:18"
																			},
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "6472:1:18"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nodeType": "YulIdentifier",
																			"src": "6465:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6465:9:18"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6456:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "6456:19:18"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "6451:1:18"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "6488:20:18",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6501:3:18",
																		"type": "",
																		"value": "128"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "6506:1:18"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6497:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "6497:11:18"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "6492:1:18",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "6521:30:18",
															"value": {
																"arguments": [
																	{
																		"name": "log_2",
																		"nodeType": "YulIdentifier",
																		"src": "6533:5:18"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6544:2:18",
																				"type": "",
																				"value": "60"
																			},
																			{
																				"name": "f",
																				"nodeType": "YulIdentifier",
																				"src": "6548:1:18"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "6540:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6540:10:18"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "6530:2:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "6530:21:18"
															},
															"variableNames": [
																{
																	"name": "log_2",
																	"nodeType": "YulIdentifier",
																	"src": "6521:5:18"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "6564:14:18",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "6573:1:18"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "6576:1:18"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6569:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "6569:9:18"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "6564:1:18"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 2620,
														"isOffset": false,
														"isSlot": false,
														"src": "6521:5:18",
														"valueSize": 1
													},
													{
														"declaration": 2620,
														"isOffset": false,
														"isSlot": false,
														"src": "6533:5:18",
														"valueSize": 1
													},
													{
														"declaration": 2582,
														"isOffset": false,
														"isSlot": false,
														"src": "6451:1:18",
														"valueSize": 1
													},
													{
														"declaration": 2582,
														"isOffset": false,
														"isSlot": false,
														"src": "6469:1:18",
														"valueSize": 1
													},
													{
														"declaration": 2582,
														"isOffset": false,
														"isSlot": false,
														"src": "6472:1:18",
														"valueSize": 1
													},
													{
														"declaration": 2582,
														"isOffset": false,
														"isSlot": false,
														"src": "6506:1:18",
														"valueSize": 1
													},
													{
														"declaration": 2582,
														"isOffset": false,
														"isSlot": false,
														"src": "6564:1:18",
														"valueSize": 1
													},
													{
														"declaration": 2582,
														"isOffset": false,
														"isSlot": false,
														"src": "6576:1:18",
														"valueSize": 1
													}
												],
												"id": 2634,
												"nodeType": "InlineAssembly",
												"src": "6428:160:18"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "6606:151:18",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "6620:24:18",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6629:3:18",
																		"type": "",
																		"value": "127"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "6638:1:18"
																			},
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "6641:1:18"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nodeType": "YulIdentifier",
																			"src": "6634:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6634:9:18"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6625:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "6625:19:18"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "6620:1:18"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "6657:20:18",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6670:3:18",
																		"type": "",
																		"value": "128"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "6675:1:18"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6666:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "6666:11:18"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "6661:1:18",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "6690:30:18",
															"value": {
																"arguments": [
																	{
																		"name": "log_2",
																		"nodeType": "YulIdentifier",
																		"src": "6702:5:18"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6713:2:18",
																				"type": "",
																				"value": "59"
																			},
																			{
																				"name": "f",
																				"nodeType": "YulIdentifier",
																				"src": "6717:1:18"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "6709:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6709:10:18"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "6699:2:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "6699:21:18"
															},
															"variableNames": [
																{
																	"name": "log_2",
																	"nodeType": "YulIdentifier",
																	"src": "6690:5:18"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "6733:14:18",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "6742:1:18"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "6745:1:18"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6738:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "6738:9:18"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "6733:1:18"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 2620,
														"isOffset": false,
														"isSlot": false,
														"src": "6690:5:18",
														"valueSize": 1
													},
													{
														"declaration": 2620,
														"isOffset": false,
														"isSlot": false,
														"src": "6702:5:18",
														"valueSize": 1
													},
													{
														"declaration": 2582,
														"isOffset": false,
														"isSlot": false,
														"src": "6620:1:18",
														"valueSize": 1
													},
													{
														"declaration": 2582,
														"isOffset": false,
														"isSlot": false,
														"src": "6638:1:18",
														"valueSize": 1
													},
													{
														"declaration": 2582,
														"isOffset": false,
														"isSlot": false,
														"src": "6641:1:18",
														"valueSize": 1
													},
													{
														"declaration": 2582,
														"isOffset": false,
														"isSlot": false,
														"src": "6675:1:18",
														"valueSize": 1
													},
													{
														"declaration": 2582,
														"isOffset": false,
														"isSlot": false,
														"src": "6733:1:18",
														"valueSize": 1
													},
													{
														"declaration": 2582,
														"isOffset": false,
														"isSlot": false,
														"src": "6745:1:18",
														"valueSize": 1
													}
												],
												"id": 2635,
												"nodeType": "InlineAssembly",
												"src": "6597:160:18"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "6775:151:18",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "6789:24:18",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6798:3:18",
																		"type": "",
																		"value": "127"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "6807:1:18"
																			},
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "6810:1:18"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nodeType": "YulIdentifier",
																			"src": "6803:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6803:9:18"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6794:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "6794:19:18"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "6789:1:18"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "6826:20:18",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6839:3:18",
																		"type": "",
																		"value": "128"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "6844:1:18"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6835:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "6835:11:18"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "6830:1:18",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "6859:30:18",
															"value": {
																"arguments": [
																	{
																		"name": "log_2",
																		"nodeType": "YulIdentifier",
																		"src": "6871:5:18"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6882:2:18",
																				"type": "",
																				"value": "58"
																			},
																			{
																				"name": "f",
																				"nodeType": "YulIdentifier",
																				"src": "6886:1:18"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "6878:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6878:10:18"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "6868:2:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "6868:21:18"
															},
															"variableNames": [
																{
																	"name": "log_2",
																	"nodeType": "YulIdentifier",
																	"src": "6859:5:18"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "6902:14:18",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "6911:1:18"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "6914:1:18"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6907:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "6907:9:18"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "6902:1:18"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 2620,
														"isOffset": false,
														"isSlot": false,
														"src": "6859:5:18",
														"valueSize": 1
													},
													{
														"declaration": 2620,
														"isOffset": false,
														"isSlot": false,
														"src": "6871:5:18",
														"valueSize": 1
													},
													{
														"declaration": 2582,
														"isOffset": false,
														"isSlot": false,
														"src": "6789:1:18",
														"valueSize": 1
													},
													{
														"declaration": 2582,
														"isOffset": false,
														"isSlot": false,
														"src": "6807:1:18",
														"valueSize": 1
													},
													{
														"declaration": 2582,
														"isOffset": false,
														"isSlot": false,
														"src": "6810:1:18",
														"valueSize": 1
													},
													{
														"declaration": 2582,
														"isOffset": false,
														"isSlot": false,
														"src": "6844:1:18",
														"valueSize": 1
													},
													{
														"declaration": 2582,
														"isOffset": false,
														"isSlot": false,
														"src": "6902:1:18",
														"valueSize": 1
													},
													{
														"declaration": 2582,
														"isOffset": false,
														"isSlot": false,
														"src": "6914:1:18",
														"valueSize": 1
													}
												],
												"id": 2636,
												"nodeType": "InlineAssembly",
												"src": "6766:160:18"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "6944:151:18",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "6958:24:18",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6967:3:18",
																		"type": "",
																		"value": "127"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "6976:1:18"
																			},
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "6979:1:18"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nodeType": "YulIdentifier",
																			"src": "6972:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6972:9:18"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6963:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "6963:19:18"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "6958:1:18"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "6995:20:18",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7008:3:18",
																		"type": "",
																		"value": "128"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "7013:1:18"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7004:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "7004:11:18"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "6999:1:18",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "7028:30:18",
															"value": {
																"arguments": [
																	{
																		"name": "log_2",
																		"nodeType": "YulIdentifier",
																		"src": "7040:5:18"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7051:2:18",
																				"type": "",
																				"value": "57"
																			},
																			{
																				"name": "f",
																				"nodeType": "YulIdentifier",
																				"src": "7055:1:18"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "7047:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7047:10:18"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "7037:2:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "7037:21:18"
															},
															"variableNames": [
																{
																	"name": "log_2",
																	"nodeType": "YulIdentifier",
																	"src": "7028:5:18"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "7071:14:18",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "7080:1:18"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "7083:1:18"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7076:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "7076:9:18"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "7071:1:18"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 2620,
														"isOffset": false,
														"isSlot": false,
														"src": "7028:5:18",
														"valueSize": 1
													},
													{
														"declaration": 2620,
														"isOffset": false,
														"isSlot": false,
														"src": "7040:5:18",
														"valueSize": 1
													},
													{
														"declaration": 2582,
														"isOffset": false,
														"isSlot": false,
														"src": "6958:1:18",
														"valueSize": 1
													},
													{
														"declaration": 2582,
														"isOffset": false,
														"isSlot": false,
														"src": "6976:1:18",
														"valueSize": 1
													},
													{
														"declaration": 2582,
														"isOffset": false,
														"isSlot": false,
														"src": "6979:1:18",
														"valueSize": 1
													},
													{
														"declaration": 2582,
														"isOffset": false,
														"isSlot": false,
														"src": "7013:1:18",
														"valueSize": 1
													},
													{
														"declaration": 2582,
														"isOffset": false,
														"isSlot": false,
														"src": "7071:1:18",
														"valueSize": 1
													},
													{
														"declaration": 2582,
														"isOffset": false,
														"isSlot": false,
														"src": "7083:1:18",
														"valueSize": 1
													}
												],
												"id": 2637,
												"nodeType": "InlineAssembly",
												"src": "6935:160:18"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "7113:151:18",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "7127:24:18",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7136:3:18",
																		"type": "",
																		"value": "127"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "7145:1:18"
																			},
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "7148:1:18"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nodeType": "YulIdentifier",
																			"src": "7141:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7141:9:18"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7132:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "7132:19:18"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "7127:1:18"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "7164:20:18",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7177:3:18",
																		"type": "",
																		"value": "128"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "7182:1:18"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7173:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "7173:11:18"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "7168:1:18",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "7197:30:18",
															"value": {
																"arguments": [
																	{
																		"name": "log_2",
																		"nodeType": "YulIdentifier",
																		"src": "7209:5:18"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7220:2:18",
																				"type": "",
																				"value": "56"
																			},
																			{
																				"name": "f",
																				"nodeType": "YulIdentifier",
																				"src": "7224:1:18"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "7216:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7216:10:18"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "7206:2:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "7206:21:18"
															},
															"variableNames": [
																{
																	"name": "log_2",
																	"nodeType": "YulIdentifier",
																	"src": "7197:5:18"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "7240:14:18",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "7249:1:18"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "7252:1:18"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7245:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "7245:9:18"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "7240:1:18"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 2620,
														"isOffset": false,
														"isSlot": false,
														"src": "7197:5:18",
														"valueSize": 1
													},
													{
														"declaration": 2620,
														"isOffset": false,
														"isSlot": false,
														"src": "7209:5:18",
														"valueSize": 1
													},
													{
														"declaration": 2582,
														"isOffset": false,
														"isSlot": false,
														"src": "7127:1:18",
														"valueSize": 1
													},
													{
														"declaration": 2582,
														"isOffset": false,
														"isSlot": false,
														"src": "7145:1:18",
														"valueSize": 1
													},
													{
														"declaration": 2582,
														"isOffset": false,
														"isSlot": false,
														"src": "7148:1:18",
														"valueSize": 1
													},
													{
														"declaration": 2582,
														"isOffset": false,
														"isSlot": false,
														"src": "7182:1:18",
														"valueSize": 1
													},
													{
														"declaration": 2582,
														"isOffset": false,
														"isSlot": false,
														"src": "7240:1:18",
														"valueSize": 1
													},
													{
														"declaration": 2582,
														"isOffset": false,
														"isSlot": false,
														"src": "7252:1:18",
														"valueSize": 1
													}
												],
												"id": 2638,
												"nodeType": "InlineAssembly",
												"src": "7104:160:18"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "7282:151:18",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "7296:24:18",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7305:3:18",
																		"type": "",
																		"value": "127"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "7314:1:18"
																			},
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "7317:1:18"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nodeType": "YulIdentifier",
																			"src": "7310:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7310:9:18"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7301:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "7301:19:18"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "7296:1:18"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "7333:20:18",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7346:3:18",
																		"type": "",
																		"value": "128"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "7351:1:18"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7342:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "7342:11:18"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "7337:1:18",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "7366:30:18",
															"value": {
																"arguments": [
																	{
																		"name": "log_2",
																		"nodeType": "YulIdentifier",
																		"src": "7378:5:18"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7389:2:18",
																				"type": "",
																				"value": "55"
																			},
																			{
																				"name": "f",
																				"nodeType": "YulIdentifier",
																				"src": "7393:1:18"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "7385:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7385:10:18"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "7375:2:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "7375:21:18"
															},
															"variableNames": [
																{
																	"name": "log_2",
																	"nodeType": "YulIdentifier",
																	"src": "7366:5:18"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "7409:14:18",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "7418:1:18"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "7421:1:18"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7414:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "7414:9:18"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "7409:1:18"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 2620,
														"isOffset": false,
														"isSlot": false,
														"src": "7366:5:18",
														"valueSize": 1
													},
													{
														"declaration": 2620,
														"isOffset": false,
														"isSlot": false,
														"src": "7378:5:18",
														"valueSize": 1
													},
													{
														"declaration": 2582,
														"isOffset": false,
														"isSlot": false,
														"src": "7296:1:18",
														"valueSize": 1
													},
													{
														"declaration": 2582,
														"isOffset": false,
														"isSlot": false,
														"src": "7314:1:18",
														"valueSize": 1
													},
													{
														"declaration": 2582,
														"isOffset": false,
														"isSlot": false,
														"src": "7317:1:18",
														"valueSize": 1
													},
													{
														"declaration": 2582,
														"isOffset": false,
														"isSlot": false,
														"src": "7351:1:18",
														"valueSize": 1
													},
													{
														"declaration": 2582,
														"isOffset": false,
														"isSlot": false,
														"src": "7409:1:18",
														"valueSize": 1
													},
													{
														"declaration": 2582,
														"isOffset": false,
														"isSlot": false,
														"src": "7421:1:18",
														"valueSize": 1
													}
												],
												"id": 2639,
												"nodeType": "InlineAssembly",
												"src": "7273:160:18"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "7451:151:18",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "7465:24:18",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7474:3:18",
																		"type": "",
																		"value": "127"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "7483:1:18"
																			},
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "7486:1:18"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nodeType": "YulIdentifier",
																			"src": "7479:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7479:9:18"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7470:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "7470:19:18"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "7465:1:18"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "7502:20:18",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7515:3:18",
																		"type": "",
																		"value": "128"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "7520:1:18"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7511:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "7511:11:18"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "7506:1:18",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "7535:30:18",
															"value": {
																"arguments": [
																	{
																		"name": "log_2",
																		"nodeType": "YulIdentifier",
																		"src": "7547:5:18"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7558:2:18",
																				"type": "",
																				"value": "54"
																			},
																			{
																				"name": "f",
																				"nodeType": "YulIdentifier",
																				"src": "7562:1:18"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "7554:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7554:10:18"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "7544:2:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "7544:21:18"
															},
															"variableNames": [
																{
																	"name": "log_2",
																	"nodeType": "YulIdentifier",
																	"src": "7535:5:18"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "7578:14:18",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "7587:1:18"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "7590:1:18"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7583:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "7583:9:18"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "7578:1:18"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 2620,
														"isOffset": false,
														"isSlot": false,
														"src": "7535:5:18",
														"valueSize": 1
													},
													{
														"declaration": 2620,
														"isOffset": false,
														"isSlot": false,
														"src": "7547:5:18",
														"valueSize": 1
													},
													{
														"declaration": 2582,
														"isOffset": false,
														"isSlot": false,
														"src": "7465:1:18",
														"valueSize": 1
													},
													{
														"declaration": 2582,
														"isOffset": false,
														"isSlot": false,
														"src": "7483:1:18",
														"valueSize": 1
													},
													{
														"declaration": 2582,
														"isOffset": false,
														"isSlot": false,
														"src": "7486:1:18",
														"valueSize": 1
													},
													{
														"declaration": 2582,
														"isOffset": false,
														"isSlot": false,
														"src": "7520:1:18",
														"valueSize": 1
													},
													{
														"declaration": 2582,
														"isOffset": false,
														"isSlot": false,
														"src": "7578:1:18",
														"valueSize": 1
													},
													{
														"declaration": 2582,
														"isOffset": false,
														"isSlot": false,
														"src": "7590:1:18",
														"valueSize": 1
													}
												],
												"id": 2640,
												"nodeType": "InlineAssembly",
												"src": "7442:160:18"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "7620:151:18",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "7634:24:18",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7643:3:18",
																		"type": "",
																		"value": "127"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "7652:1:18"
																			},
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "7655:1:18"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nodeType": "YulIdentifier",
																			"src": "7648:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7648:9:18"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7639:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "7639:19:18"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "7634:1:18"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "7671:20:18",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7684:3:18",
																		"type": "",
																		"value": "128"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "7689:1:18"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7680:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "7680:11:18"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "7675:1:18",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "7704:30:18",
															"value": {
																"arguments": [
																	{
																		"name": "log_2",
																		"nodeType": "YulIdentifier",
																		"src": "7716:5:18"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7727:2:18",
																				"type": "",
																				"value": "53"
																			},
																			{
																				"name": "f",
																				"nodeType": "YulIdentifier",
																				"src": "7731:1:18"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "7723:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7723:10:18"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "7713:2:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "7713:21:18"
															},
															"variableNames": [
																{
																	"name": "log_2",
																	"nodeType": "YulIdentifier",
																	"src": "7704:5:18"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "7747:14:18",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "7756:1:18"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "7759:1:18"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7752:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "7752:9:18"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "7747:1:18"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 2620,
														"isOffset": false,
														"isSlot": false,
														"src": "7704:5:18",
														"valueSize": 1
													},
													{
														"declaration": 2620,
														"isOffset": false,
														"isSlot": false,
														"src": "7716:5:18",
														"valueSize": 1
													},
													{
														"declaration": 2582,
														"isOffset": false,
														"isSlot": false,
														"src": "7634:1:18",
														"valueSize": 1
													},
													{
														"declaration": 2582,
														"isOffset": false,
														"isSlot": false,
														"src": "7652:1:18",
														"valueSize": 1
													},
													{
														"declaration": 2582,
														"isOffset": false,
														"isSlot": false,
														"src": "7655:1:18",
														"valueSize": 1
													},
													{
														"declaration": 2582,
														"isOffset": false,
														"isSlot": false,
														"src": "7689:1:18",
														"valueSize": 1
													},
													{
														"declaration": 2582,
														"isOffset": false,
														"isSlot": false,
														"src": "7747:1:18",
														"valueSize": 1
													},
													{
														"declaration": 2582,
														"isOffset": false,
														"isSlot": false,
														"src": "7759:1:18",
														"valueSize": 1
													}
												],
												"id": 2641,
												"nodeType": "InlineAssembly",
												"src": "7611:160:18"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "7789:151:18",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "7803:24:18",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7812:3:18",
																		"type": "",
																		"value": "127"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "7821:1:18"
																			},
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "7824:1:18"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nodeType": "YulIdentifier",
																			"src": "7817:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7817:9:18"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7808:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "7808:19:18"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "7803:1:18"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "7840:20:18",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7853:3:18",
																		"type": "",
																		"value": "128"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "7858:1:18"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7849:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "7849:11:18"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "7844:1:18",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "7873:30:18",
															"value": {
																"arguments": [
																	{
																		"name": "log_2",
																		"nodeType": "YulIdentifier",
																		"src": "7885:5:18"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7896:2:18",
																				"type": "",
																				"value": "52"
																			},
																			{
																				"name": "f",
																				"nodeType": "YulIdentifier",
																				"src": "7900:1:18"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "7892:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7892:10:18"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "7882:2:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "7882:21:18"
															},
															"variableNames": [
																{
																	"name": "log_2",
																	"nodeType": "YulIdentifier",
																	"src": "7873:5:18"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "7916:14:18",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "7925:1:18"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "7928:1:18"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7921:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "7921:9:18"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "7916:1:18"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 2620,
														"isOffset": false,
														"isSlot": false,
														"src": "7873:5:18",
														"valueSize": 1
													},
													{
														"declaration": 2620,
														"isOffset": false,
														"isSlot": false,
														"src": "7885:5:18",
														"valueSize": 1
													},
													{
														"declaration": 2582,
														"isOffset": false,
														"isSlot": false,
														"src": "7803:1:18",
														"valueSize": 1
													},
													{
														"declaration": 2582,
														"isOffset": false,
														"isSlot": false,
														"src": "7821:1:18",
														"valueSize": 1
													},
													{
														"declaration": 2582,
														"isOffset": false,
														"isSlot": false,
														"src": "7824:1:18",
														"valueSize": 1
													},
													{
														"declaration": 2582,
														"isOffset": false,
														"isSlot": false,
														"src": "7858:1:18",
														"valueSize": 1
													},
													{
														"declaration": 2582,
														"isOffset": false,
														"isSlot": false,
														"src": "7916:1:18",
														"valueSize": 1
													},
													{
														"declaration": 2582,
														"isOffset": false,
														"isSlot": false,
														"src": "7928:1:18",
														"valueSize": 1
													}
												],
												"id": 2642,
												"nodeType": "InlineAssembly",
												"src": "7780:160:18"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "7958:151:18",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "7972:24:18",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7981:3:18",
																		"type": "",
																		"value": "127"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "7990:1:18"
																			},
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "7993:1:18"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nodeType": "YulIdentifier",
																			"src": "7986:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7986:9:18"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7977:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "7977:19:18"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "7972:1:18"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "8009:20:18",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8022:3:18",
																		"type": "",
																		"value": "128"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "8027:1:18"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "8018:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "8018:11:18"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "8013:1:18",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "8042:30:18",
															"value": {
																"arguments": [
																	{
																		"name": "log_2",
																		"nodeType": "YulIdentifier",
																		"src": "8054:5:18"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8065:2:18",
																				"type": "",
																				"value": "51"
																			},
																			{
																				"name": "f",
																				"nodeType": "YulIdentifier",
																				"src": "8069:1:18"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "8061:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8061:10:18"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "8051:2:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "8051:21:18"
															},
															"variableNames": [
																{
																	"name": "log_2",
																	"nodeType": "YulIdentifier",
																	"src": "8042:5:18"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "8085:14:18",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "8094:1:18"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "8097:1:18"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "8090:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "8090:9:18"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "8085:1:18"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 2620,
														"isOffset": false,
														"isSlot": false,
														"src": "8042:5:18",
														"valueSize": 1
													},
													{
														"declaration": 2620,
														"isOffset": false,
														"isSlot": false,
														"src": "8054:5:18",
														"valueSize": 1
													},
													{
														"declaration": 2582,
														"isOffset": false,
														"isSlot": false,
														"src": "7972:1:18",
														"valueSize": 1
													},
													{
														"declaration": 2582,
														"isOffset": false,
														"isSlot": false,
														"src": "7990:1:18",
														"valueSize": 1
													},
													{
														"declaration": 2582,
														"isOffset": false,
														"isSlot": false,
														"src": "7993:1:18",
														"valueSize": 1
													},
													{
														"declaration": 2582,
														"isOffset": false,
														"isSlot": false,
														"src": "8027:1:18",
														"valueSize": 1
													},
													{
														"declaration": 2582,
														"isOffset": false,
														"isSlot": false,
														"src": "8085:1:18",
														"valueSize": 1
													},
													{
														"declaration": 2582,
														"isOffset": false,
														"isSlot": false,
														"src": "8097:1:18",
														"valueSize": 1
													}
												],
												"id": 2643,
												"nodeType": "InlineAssembly",
												"src": "7949:160:18"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "8127:124:18",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "8141:24:18",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8150:3:18",
																		"type": "",
																		"value": "127"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "8159:1:18"
																			},
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "8162:1:18"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nodeType": "YulIdentifier",
																			"src": "8155:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8155:9:18"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "8146:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "8146:19:18"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "8141:1:18"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "8178:20:18",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8191:3:18",
																		"type": "",
																		"value": "128"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "8196:1:18"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "8187:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "8187:11:18"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "8182:1:18",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "8211:30:18",
															"value": {
																"arguments": [
																	{
																		"name": "log_2",
																		"nodeType": "YulIdentifier",
																		"src": "8223:5:18"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8234:2:18",
																				"type": "",
																				"value": "50"
																			},
																			{
																				"name": "f",
																				"nodeType": "YulIdentifier",
																				"src": "8238:1:18"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "8230:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8230:10:18"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "8220:2:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "8220:21:18"
															},
															"variableNames": [
																{
																	"name": "log_2",
																	"nodeType": "YulIdentifier",
																	"src": "8211:5:18"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 2620,
														"isOffset": false,
														"isSlot": false,
														"src": "8211:5:18",
														"valueSize": 1
													},
													{
														"declaration": 2620,
														"isOffset": false,
														"isSlot": false,
														"src": "8223:5:18",
														"valueSize": 1
													},
													{
														"declaration": 2582,
														"isOffset": false,
														"isSlot": false,
														"src": "8141:1:18",
														"valueSize": 1
													},
													{
														"declaration": 2582,
														"isOffset": false,
														"isSlot": false,
														"src": "8159:1:18",
														"valueSize": 1
													},
													{
														"declaration": 2582,
														"isOffset": false,
														"isSlot": false,
														"src": "8162:1:18",
														"valueSize": 1
													},
													{
														"declaration": 2582,
														"isOffset": false,
														"isSlot": false,
														"src": "8196:1:18",
														"valueSize": 1
													}
												],
												"id": 2644,
												"nodeType": "InlineAssembly",
												"src": "8118:133:18"
											},
											{
												"assignments": [
													2646
												],
												"declarations": [
													{
														"constant": false,
														"id": 2646,
														"mutability": "mutable",
														"name": "log_sqrt10001",
														"nodeType": "VariableDeclaration",
														"scope": 2691,
														"src": "8261:20:18",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														},
														"typeName": {
															"id": 2645,
															"name": "int256",
															"nodeType": "ElementaryTypeName",
															"src": "8261:6:18",
															"typeDescriptions": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2650,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													},
													"id": 2649,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 2647,
														"name": "log_2",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2620,
														"src": "8284:5:18",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "*",
													"rightExpression": {
														"hexValue": "323535373338393538393939363033383236333437313431",
														"id": 2648,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "8292:24:18",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_255738958999603826347141_by_1",
															"typeString": "int_const 255738958999603826347141"
														},
														"value": "255738958999603826347141"
													},
													"src": "8284:32:18",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "8261:55:18"
											},
											{
												"assignments": [
													2652
												],
												"declarations": [
													{
														"constant": false,
														"id": 2652,
														"mutability": "mutable",
														"name": "tickLow",
														"nodeType": "VariableDeclaration",
														"scope": 2691,
														"src": "8345:13:18",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_int24",
															"typeString": "int24"
														},
														"typeName": {
															"id": 2651,
															"name": "int24",
															"nodeType": "ElementaryTypeName",
															"src": "8345:5:18",
															"typeDescriptions": {
																"typeIdentifier": "t_int24",
																"typeString": "int24"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2662,
												"initialValue": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															},
															"id": 2660,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_int256",
																			"typeString": "int256"
																		},
																		"id": 2657,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 2655,
																			"name": "log_sqrt10001",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2646,
																			"src": "8368:13:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "-",
																		"rightExpression": {
																			"hexValue": "33343032393932393536383039313332343138353936313430313030363630323437323130",
																			"id": 2656,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "8384:37:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_3402992956809132418596140100660247210_by_1",
																				"typeString": "int_const 3402...(29 digits omitted)...7210"
																			},
																			"value": "3402992956809132418596140100660247210"
																		},
																		"src": "8368:53:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_int256",
																			"typeString": "int256"
																		}
																	}
																],
																"id": 2658,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "8367:55:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 2659,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "8426:3:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "8367:62:18",
															"typeDescriptions": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														],
														"id": 2654,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "ElementaryTypeNameExpression",
														"src": "8361:5:18",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_int24_$",
															"typeString": "type(int24)"
														},
														"typeName": {
															"id": 2653,
															"name": "int24",
															"nodeType": "ElementaryTypeName",
															"src": "8361:5:18",
															"typeDescriptions": {}
														}
													},
													"id": 2661,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8361:69:18",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "8345:85:18"
											},
											{
												"assignments": [
													2664
												],
												"declarations": [
													{
														"constant": false,
														"id": 2664,
														"mutability": "mutable",
														"name": "tickHi",
														"nodeType": "VariableDeclaration",
														"scope": 2691,
														"src": "8440:12:18",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_int24",
															"typeString": "int24"
														},
														"typeName": {
															"id": 2663,
															"name": "int24",
															"nodeType": "ElementaryTypeName",
															"src": "8440:5:18",
															"typeDescriptions": {
																"typeIdentifier": "t_int24",
																"typeString": "int24"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2674,
												"initialValue": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															},
															"id": 2672,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_int256",
																			"typeString": "int256"
																		},
																		"id": 2669,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 2667,
																			"name": "log_sqrt10001",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2646,
																			"src": "8462:13:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "+",
																		"rightExpression": {
																			"hexValue": "323931333339343634373731393839363232393037303237363231313533333938303838343935",
																			"id": 2668,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "8478:39:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_291339464771989622907027621153398088495_by_1",
																				"typeString": "int_const 2913...(31 digits omitted)...8495"
																			},
																			"value": "291339464771989622907027621153398088495"
																		},
																		"src": "8462:55:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_int256",
																			"typeString": "int256"
																		}
																	}
																],
																"id": 2670,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "8461:57:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 2671,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "8522:3:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "8461:64:18",
															"typeDescriptions": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														],
														"id": 2666,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "ElementaryTypeNameExpression",
														"src": "8455:5:18",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_int24_$",
															"typeString": "type(int24)"
														},
														"typeName": {
															"id": 2665,
															"name": "int24",
															"nodeType": "ElementaryTypeName",
															"src": "8455:5:18",
															"typeDescriptions": {}
														}
													},
													"id": 2673,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8455:71:18",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "8440:86:18"
											},
											{
												"expression": {
													"id": 2689,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 2675,
														"name": "tick",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2559,
														"src": "8537:4:18",
														"typeDescriptions": {
															"typeIdentifier": "t_int24",
															"typeString": "int24"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"condition": {
															"commonType": {
																"typeIdentifier": "t_int24",
																"typeString": "int24"
															},
															"id": 2678,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2676,
																"name": "tickLow",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2652,
																"src": "8544:7:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_int24",
																	"typeString": "int24"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"id": 2677,
																"name": "tickHi",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2664,
																"src": "8555:6:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_int24",
																	"typeString": "int24"
																}
															},
															"src": "8544:17:18",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"falseExpression": {
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																},
																"id": 2684,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"arguments": [
																		{
																			"id": 2681,
																			"name": "tickHi",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2664,
																			"src": "8593:6:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int24",
																				"typeString": "int24"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_int24",
																				"typeString": "int24"
																			}
																		],
																		"id": 2680,
																		"name": "getSqrtRatioAtTick",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2553,
																		"src": "8574:18:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_pure$_t_int24_$returns$_t_uint160_$",
																			"typeString": "function (int24) pure returns (uint160)"
																		}
																	},
																	"id": 2682,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "8574:26:18",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<=",
																"rightExpression": {
																	"id": 2683,
																	"name": "sqrtPriceX96",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2556,
																	"src": "8604:12:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																},
																"src": "8574:42:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"falseExpression": {
																"id": 2686,
																"name": "tickLow",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2652,
																"src": "8628:7:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_int24",
																	"typeString": "int24"
																}
															},
															"id": 2687,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "Conditional",
															"src": "8574:61:18",
															"trueExpression": {
																"id": 2685,
																"name": "tickHi",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2664,
																"src": "8619:6:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_int24",
																	"typeString": "int24"
																}
															},
															"typeDescriptions": {
																"typeIdentifier": "t_int24",
																"typeString": "int24"
															}
														},
														"id": 2688,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "Conditional",
														"src": "8544:91:18",
														"trueExpression": {
															"id": 2679,
															"name": "tickLow",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2652,
															"src": "8564:7:18",
															"typeDescriptions": {
																"typeIdentifier": "t_int24",
																"typeString": "int24"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_int24",
															"typeString": "int24"
														}
													},
													"src": "8537:98:18",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"id": 2690,
												"nodeType": "ExpressionStatement",
												"src": "8537:98:18"
											}
										]
									},
									"documentation": {
										"id": 2554,
										"nodeType": "StructuredDocumentation",
										"src": "3948:408:18",
										"text": "@notice Calculates the greatest tick value such that getRatioAtTick(tick) <= ratio\n @dev Throws in case sqrtPriceX96 < MIN_SQRT_RATIO, as MIN_SQRT_RATIO is the lowest value getRatioAtTick may\n ever return.\n @param sqrtPriceX96 The sqrt ratio for which to compute the tick as a Q64.96\n @return tick The greatest tick for which the ratio is less than or equal to the input ratio"
									},
									"id": 2692,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getTickAtSqrtRatio",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2557,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2556,
												"mutability": "mutable",
												"name": "sqrtPriceX96",
												"nodeType": "VariableDeclaration",
												"scope": 2692,
												"src": "4389:20:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 2555,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "4389:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4388:22:18"
									},
									"returnParameters": {
										"id": 2560,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2559,
												"mutability": "mutable",
												"name": "tick",
												"nodeType": "VariableDeclaration",
												"scope": 2692,
												"src": "4434:10:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 2558,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "4434:5:18",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4433:12:18"
									},
									"scope": 2693,
									"src": "4361:4281:18",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 2694,
							"src": "313:8331:18"
						}
					],
					"src": "45:8600:18"
				},
				"id": 18
			}
		}
	}
}