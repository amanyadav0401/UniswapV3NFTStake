{
	"id": "dec413b36678b72a8de78b08ac607660",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.7.6",
	"solcLongVersion": "0.7.6+commit.7338295f",
	"input": {
		"language": "Solidity",
		"sources": {
			"contracts/SwapRouter.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity =0.7.6;\npragma abicoder v2;\n\nimport '@uniswap/v3-core/contracts/libraries/SafeCast.sol';\nimport '@uniswap/v3-core/contracts/libraries/TickMath.sol';\nimport '@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol';\n\nimport './interfaces/ISwapRouter.sol';\nimport './base/PeripheryImmutableState.sol';\nimport './base/PeripheryValidation.sol';\nimport './base/PeripheryPaymentsWithFee.sol';\nimport './base/Multicall.sol';\nimport './base/SelfPermit.sol';\nimport './libraries/Path.sol';\nimport './libraries/PoolAddress.sol';\nimport './libraries/CallbackValidation.sol';\nimport './interfaces/external/IWETH9.sol';\n\n/// @title Uniswap V3 Swap Router\n/// @notice Router for stateless execution of swaps against Uniswap V3\ncontract SwapRouter is\n    ISwapRouter,\n    PeripheryImmutableState,\n    PeripheryValidation,\n    PeripheryPaymentsWithFee,\n    Multicall,\n    SelfPermit\n{\n    using Path for bytes;\n    using SafeCast for uint256;\n\n    /// @dev Used as the placeholder value for amountInCached, because the computed amount in for an exact output swap\n    /// can never actually be this value\n    uint256 private constant DEFAULT_AMOUNT_IN_CACHED = type(uint256).max;\n\n    /// @dev Transient storage variable used for returning the computed amount in for an exact output swap.\n    uint256 private amountInCached = DEFAULT_AMOUNT_IN_CACHED;\n\n    constructor(address _factory, address _WETH9) PeripheryImmutableState(_factory, _WETH9) {}\n\n    /// @dev Returns the pool for the given token pair and fee. The pool contract may or may not exist.\n    function getPool(\n        address tokenA,\n        address tokenB,\n        uint24 fee\n    ) private view returns (IUniswapV3Pool) {\n        return IUniswapV3Pool(PoolAddress.computeAddress(factory, PoolAddress.getPoolKey(tokenA, tokenB, fee)));\n    }\n\n    struct SwapCallbackData {\n        bytes path;\n        address payer;\n    }\n\n    /// @inheritdoc IUniswapV3SwapCallback\n    function uniswapV3SwapCallback(\n        int256 amount0Delta,\n        int256 amount1Delta,\n        bytes calldata _data\n    ) external override {\n        require(amount0Delta > 0 || amount1Delta > 0); // swaps entirely within 0-liquidity regions are not supported\n        SwapCallbackData memory data = abi.decode(_data, (SwapCallbackData));\n        (address tokenIn, address tokenOut, uint24 fee) = data.path.decodeFirstPool();\n        CallbackValidation.verifyCallback(factory, tokenIn, tokenOut, fee);\n\n        (bool isExactInput, uint256 amountToPay) =\n            amount0Delta > 0\n                ? (tokenIn < tokenOut, uint256(amount0Delta))\n                : (tokenOut < tokenIn, uint256(amount1Delta));\n        if (isExactInput) {\n            pay(tokenIn, data.payer, msg.sender, amountToPay);\n        } else {\n            // either initiate the next swap or pay\n            if (data.path.hasMultiplePools()) {\n                data.path = data.path.skipToken();\n                exactOutputInternal(amountToPay, msg.sender, 0, data);\n            } else {\n                amountInCached = amountToPay;\n                tokenIn = tokenOut; // swap in/out because exact output swaps are reversed\n                pay(tokenIn, data.payer, msg.sender, amountToPay);\n            }\n        }\n    }\n\n    /// @dev Performs a single exact input swap\n    function exactInputInternal(\n        uint256 amountIn,\n        address recipient,\n        uint160 sqrtPriceLimitX96,\n        SwapCallbackData memory data\n    ) private returns (uint256 amountOut) {\n        // allow swapping to the router address with address 0\n        if (recipient == address(0)) recipient = address(this);\n\n        (address tokenIn, address tokenOut, uint24 fee) = data.path.decodeFirstPool();\n\n        bool zeroForOne = tokenIn < tokenOut;\n\n        (int256 amount0, int256 amount1) =\n            getPool(tokenIn, tokenOut, fee).swap(\n                recipient,\n                zeroForOne,\n                amountIn.toInt256(),\n                sqrtPriceLimitX96 == 0\n                    ? (zeroForOne ? TickMath.MIN_SQRT_RATIO + 1 : TickMath.MAX_SQRT_RATIO - 1)\n                    : sqrtPriceLimitX96,\n                abi.encode(data)\n            );\n\n        return uint256(-(zeroForOne ? amount1 : amount0));\n    }\n\n    /// @inheritdoc ISwapRouter\n    function exactInputSingle(ExactInputSingleParams calldata params)\n        external\n        payable\n        override\n        checkDeadline(params.deadline)\n        returns (uint256 amountOut)\n    {\n        amountOut = exactInputInternal(\n            params.amountIn,\n            params.recipient,\n            params.sqrtPriceLimitX96,\n            SwapCallbackData({path: abi.encodePacked(params.tokenIn, params.fee, params.tokenOut), payer: msg.sender})\n        );\n        require(amountOut >= params.amountOutMinimum, 'Too little received');\n    }\n\n    /// @inheritdoc ISwapRouter\n    function exactInput(ExactInputParams memory params)\n        external\n        payable\n        override\n        checkDeadline(params.deadline)\n        returns (uint256 amountOut)\n    {\n        address payer = msg.sender; // msg.sender pays for the first hop\n\n        while (true) {\n            bool hasMultiplePools = params.path.hasMultiplePools();\n\n            // the outputs of prior swaps become the inputs to subsequent ones\n            params.amountIn = exactInputInternal(\n                params.amountIn,\n                hasMultiplePools ? address(this) : params.recipient, // for intermediate swaps, this contract custodies\n                0,\n                SwapCallbackData({\n                    path: params.path.getFirstPool(), // only the first pool in the path is necessary\n                    payer: payer\n                })\n            );\n\n            // decide whether to continue or terminate\n            if (hasMultiplePools) {\n                payer = address(this); // at this point, the caller has paid\n                params.path = params.path.skipToken();\n            } else {\n                amountOut = params.amountIn;\n                break;\n            }\n        }\n\n        require(amountOut >= params.amountOutMinimum, 'Too little received');\n    }\n\n    /// @dev Performs a single exact output swap\n    function exactOutputInternal(\n        uint256 amountOut,\n        address recipient,\n        uint160 sqrtPriceLimitX96,\n        SwapCallbackData memory data\n    ) private returns (uint256 amountIn) {\n        // allow swapping to the router address with address 0\n        if (recipient == address(0)) recipient = address(this);\n\n        (address tokenOut, address tokenIn, uint24 fee) = data.path.decodeFirstPool();\n\n        bool zeroForOne = tokenIn < tokenOut;\n\n        (int256 amount0Delta, int256 amount1Delta) =\n            getPool(tokenIn, tokenOut, fee).swap(\n                recipient,\n                zeroForOne,\n                -amountOut.toInt256(),\n                sqrtPriceLimitX96 == 0\n                    ? (zeroForOne ? TickMath.MIN_SQRT_RATIO + 1 : TickMath.MAX_SQRT_RATIO - 1)\n                    : sqrtPriceLimitX96,\n                abi.encode(data)\n            );\n\n        uint256 amountOutReceived;\n        (amountIn, amountOutReceived) = zeroForOne\n            ? (uint256(amount0Delta), uint256(-amount1Delta))\n            : (uint256(amount1Delta), uint256(-amount0Delta));\n        // it's technically possible to not receive the full output amount,\n        // so if no price limit has been specified, require this possibility away\n        if (sqrtPriceLimitX96 == 0) require(amountOutReceived == amountOut);\n    }\n\n    /// @inheritdoc ISwapRouter\n    function exactOutputSingle(ExactOutputSingleParams calldata params)\n        external\n        payable\n        override\n        checkDeadline(params.deadline)\n        returns (uint256 amountIn)\n    {\n        // avoid an SLOAD by using the swap return data\n        amountIn = exactOutputInternal(\n            params.amountOut,\n            params.recipient,\n            params.sqrtPriceLimitX96,\n            SwapCallbackData({path: abi.encodePacked(params.tokenOut, params.fee, params.tokenIn), payer: msg.sender})\n        );\n\n        require(amountIn <= params.amountInMaximum, 'Too much requested');\n        // has to be reset even though we don't use it in the single hop case\n        amountInCached = DEFAULT_AMOUNT_IN_CACHED;\n    }\n\n    /// @inheritdoc ISwapRouter\n    function exactOutput(ExactOutputParams calldata params)\n        external\n        payable\n        override\n        checkDeadline(params.deadline)\n        returns (uint256 amountIn)\n    {\n        // it's okay that the payer is fixed to msg.sender here, as they're only paying for the \"final\" exact output\n        // swap, which happens first, and subsequent swaps are paid for within nested callback frames\n        exactOutputInternal(\n            params.amountOut,\n            params.recipient,\n            0,\n            SwapCallbackData({path: params.path, payer: msg.sender})\n        );\n\n        amountIn = amountInCached;\n        require(amountIn <= params.amountInMaximum, 'Too much requested');\n        amountInCached = DEFAULT_AMOUNT_IN_CACHED;\n    }\n}\n"
			},
			"contracts/interfaces/external/IWETH9.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity =0.7.6;\n\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\n\n/// @title Interface for WETH9\ninterface IWETH9 is IERC20 {\n    /// @notice Deposit ether to get wrapped ether\n    function deposit() external payable;\n\n    /// @notice Withdraw wrapped ether to get ether\n    function withdraw(uint256) external;\n}\n"
			},
			"contracts/libraries/CallbackValidation.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity =0.7.6;\n\nimport '@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol';\nimport './PoolAddress.sol';\n\n/// @notice Provides validation for callbacks from Uniswap V3 Pools\nlibrary CallbackValidation {\n    /// @notice Returns the address of a valid Uniswap V3 Pool\n    /// @param factory The contract address of the Uniswap V3 factory\n    /// @param tokenA The contract address of either token0 or token1\n    /// @param tokenB The contract address of the other token\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\n    /// @return pool The V3 pool contract address\n    function verifyCallback(\n        address factory,\n        address tokenA,\n        address tokenB,\n        uint24 fee\n    ) internal view returns (IUniswapV3Pool pool) {\n        return verifyCallback(factory, PoolAddress.getPoolKey(tokenA, tokenB, fee));\n    }\n\n    /// @notice Returns the address of a valid Uniswap V3 Pool\n    /// @param factory The contract address of the Uniswap V3 factory\n    /// @param poolKey The identifying key of the V3 pool\n    /// @return pool The V3 pool contract address\n    function verifyCallback(address factory, PoolAddress.PoolKey memory poolKey)\n        internal\n        view\n        returns (IUniswapV3Pool pool)\n    {\n        pool = IUniswapV3Pool(PoolAddress.computeAddress(factory, poolKey));\n        require(msg.sender == address(pool));\n    }\n}\n"
			},
			"contracts/libraries/PoolAddress.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Provides functions for deriving a pool address from the factory, tokens, and the fee\nlibrary PoolAddress {\n    bytes32 internal constant POOL_INIT_CODE_HASH = 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54;\n\n    /// @notice The identifying key of the pool\n    struct PoolKey {\n        address token0;\n        address token1;\n        uint24 fee;\n    }\n\n    /// @notice Returns PoolKey: the ordered tokens with the matched fee levels\n    /// @param tokenA The first token of a pool, unsorted\n    /// @param tokenB The second token of a pool, unsorted\n    /// @param fee The fee level of the pool\n    /// @return Poolkey The pool details with ordered token0 and token1 assignments\n    function getPoolKey(\n        address tokenA,\n        address tokenB,\n        uint24 fee\n    ) internal pure returns (PoolKey memory) {\n        if (tokenA > tokenB) (tokenA, tokenB) = (tokenB, tokenA);\n        return PoolKey({token0: tokenA, token1: tokenB, fee: fee});\n    }\n\n    /// @notice Deterministically computes the pool address given the factory and PoolKey\n    /// @param factory The Uniswap V3 factory contract address\n    /// @param key The PoolKey\n    /// @return pool The contract address of the V3 pool\n    function computeAddress(address factory, PoolKey memory key) internal pure returns (address pool) {\n        require(key.token0 < key.token1);\n        pool = address(\n            uint256(\n                keccak256(\n                    abi.encodePacked(\n                        hex'ff',\n                        factory,\n                        keccak256(abi.encode(key.token0, key.token1, key.fee)),\n                        POOL_INIT_CODE_HASH\n                    )\n                )\n            )\n        );\n    }\n}\n"
			},
			"contracts/libraries/Path.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.6.0;\n\nimport './BytesLib.sol';\n\n/// @title Functions for manipulating path data for multihop swaps\nlibrary Path {\n    using BytesLib for bytes;\n\n    /// @dev The length of the bytes encoded address\n    uint256 private constant ADDR_SIZE = 20;\n    /// @dev The length of the bytes encoded fee\n    uint256 private constant FEE_SIZE = 3;\n\n    /// @dev The offset of a single token address and pool fee\n    uint256 private constant NEXT_OFFSET = ADDR_SIZE + FEE_SIZE;\n    /// @dev The offset of an encoded pool key\n    uint256 private constant POP_OFFSET = NEXT_OFFSET + ADDR_SIZE;\n    /// @dev The minimum length of an encoding that contains 2 or more pools\n    uint256 private constant MULTIPLE_POOLS_MIN_LENGTH = POP_OFFSET + NEXT_OFFSET;\n\n    /// @notice Returns true iff the path contains two or more pools\n    /// @param path The encoded swap path\n    /// @return True if path contains two or more pools, otherwise false\n    function hasMultiplePools(bytes memory path) internal pure returns (bool) {\n        return path.length >= MULTIPLE_POOLS_MIN_LENGTH;\n    }\n\n    /// @notice Returns the number of pools in the path\n    /// @param path The encoded swap path\n    /// @return The number of pools in the path\n    function numPools(bytes memory path) internal pure returns (uint256) {\n        // Ignore the first token address. From then on every fee and token offset indicates a pool.\n        return ((path.length - ADDR_SIZE) / NEXT_OFFSET);\n    }\n\n    /// @notice Decodes the first pool in path\n    /// @param path The bytes encoded swap path\n    /// @return tokenA The first token of the given pool\n    /// @return tokenB The second token of the given pool\n    /// @return fee The fee level of the pool\n    function decodeFirstPool(bytes memory path)\n        internal\n        pure\n        returns (\n            address tokenA,\n            address tokenB,\n            uint24 fee\n        )\n    {\n        tokenA = path.toAddress(0);\n        fee = path.toUint24(ADDR_SIZE);\n        tokenB = path.toAddress(NEXT_OFFSET);\n    }\n\n    /// @notice Gets the segment corresponding to the first pool in the path\n    /// @param path The bytes encoded swap path\n    /// @return The segment containing all data necessary to target the first pool in the path\n    function getFirstPool(bytes memory path) internal pure returns (bytes memory) {\n        return path.slice(0, POP_OFFSET);\n    }\n\n    /// @notice Skips a token + fee element from the buffer and returns the remainder\n    /// @param path The swap path\n    /// @return The remaining token + fee elements in the path\n    function skipToken(bytes memory path) internal pure returns (bytes memory) {\n        return path.slice(NEXT_OFFSET, path.length - NEXT_OFFSET);\n    }\n}\n"
			},
			"contracts/base/SelfPermit.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\nimport '@openzeppelin/contracts/drafts/IERC20Permit.sol';\n\nimport '../interfaces/ISelfPermit.sol';\nimport '../interfaces/external/IERC20PermitAllowed.sol';\n\n/// @title Self Permit\n/// @notice Functionality to call permit on any EIP-2612-compliant token for use in the route\n/// @dev These functions are expected to be embedded in multicalls to allow EOAs to approve a contract and call a function\n/// that requires an approval in a single transaction.\nabstract contract SelfPermit is ISelfPermit {\n    /// @inheritdoc ISelfPermit\n    function selfPermit(\n        address token,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public payable override {\n        IERC20Permit(token).permit(msg.sender, address(this), value, deadline, v, r, s);\n    }\n\n    /// @inheritdoc ISelfPermit\n    function selfPermitIfNecessary(\n        address token,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external payable override {\n        if (IERC20(token).allowance(msg.sender, address(this)) < value) selfPermit(token, value, deadline, v, r, s);\n    }\n\n    /// @inheritdoc ISelfPermit\n    function selfPermitAllowed(\n        address token,\n        uint256 nonce,\n        uint256 expiry,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public payable override {\n        IERC20PermitAllowed(token).permit(msg.sender, address(this), nonce, expiry, true, v, r, s);\n    }\n\n    /// @inheritdoc ISelfPermit\n    function selfPermitAllowedIfNecessary(\n        address token,\n        uint256 nonce,\n        uint256 expiry,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external payable override {\n        if (IERC20(token).allowance(msg.sender, address(this)) < type(uint256).max)\n            selfPermitAllowed(token, nonce, expiry, v, r, s);\n    }\n}\n"
			},
			"contracts/base/Multicall.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity =0.7.6;\npragma abicoder v2;\n\nimport '../interfaces/IMulticall.sol';\n\n/// @title Multicall\n/// @notice Enables calling multiple methods in a single call to the contract\nabstract contract Multicall is IMulticall {\n    /// @inheritdoc IMulticall\n    function multicall(bytes[] calldata data) public payable override returns (bytes[] memory results) {\n        results = new bytes[](data.length);\n        for (uint256 i = 0; i < data.length; i++) {\n            (bool success, bytes memory result) = address(this).delegatecall(data[i]);\n\n            if (!success) {\n                // Next 5 lines from https://ethereum.stackexchange.com/a/83577\n                if (result.length < 68) revert();\n                assembly {\n                    result := add(result, 0x04)\n                }\n                revert(abi.decode(result, (string)));\n            }\n\n            results[i] = result;\n        }\n    }\n}\n"
			},
			"contracts/base/PeripheryPaymentsWithFee.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.5;\n\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\nimport '@uniswap/v3-core/contracts/libraries/LowGasSafeMath.sol';\n\nimport './PeripheryPayments.sol';\nimport '../interfaces/IPeripheryPaymentsWithFee.sol';\n\nimport '../interfaces/external/IWETH9.sol';\nimport '../libraries/TransferHelper.sol';\n\nabstract contract PeripheryPaymentsWithFee is PeripheryPayments, IPeripheryPaymentsWithFee {\n    using LowGasSafeMath for uint256;\n\n    /// @inheritdoc IPeripheryPaymentsWithFee\n    function unwrapWETH9WithFee(\n        uint256 amountMinimum,\n        address recipient,\n        uint256 feeBips,\n        address feeRecipient\n    ) public payable override {\n        require(feeBips > 0 && feeBips <= 100);\n\n        uint256 balanceWETH9 = IWETH9(WETH9).balanceOf(address(this));\n        require(balanceWETH9 >= amountMinimum, 'Insufficient WETH9');\n\n        if (balanceWETH9 > 0) {\n            IWETH9(WETH9).withdraw(balanceWETH9);\n            uint256 feeAmount = balanceWETH9.mul(feeBips) / 10_000;\n            if (feeAmount > 0) TransferHelper.safeTransferETH(feeRecipient, feeAmount);\n            TransferHelper.safeTransferETH(recipient, balanceWETH9 - feeAmount);\n        }\n    }\n\n    /// @inheritdoc IPeripheryPaymentsWithFee\n    function sweepTokenWithFee(\n        address token,\n        uint256 amountMinimum,\n        address recipient,\n        uint256 feeBips,\n        address feeRecipient\n    ) public payable override {\n        require(feeBips > 0 && feeBips <= 100);\n\n        uint256 balanceToken = IERC20(token).balanceOf(address(this));\n        require(balanceToken >= amountMinimum, 'Insufficient token');\n\n        if (balanceToken > 0) {\n            uint256 feeAmount = balanceToken.mul(feeBips) / 10_000;\n            if (feeAmount > 0) TransferHelper.safeTransfer(token, feeRecipient, feeAmount);\n            TransferHelper.safeTransfer(token, recipient, balanceToken - feeAmount);\n        }\n    }\n}\n"
			},
			"contracts/base/PeripheryValidation.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity =0.7.6;\n\nimport './BlockTimestamp.sol';\n\nabstract contract PeripheryValidation is BlockTimestamp {\n    modifier checkDeadline(uint256 deadline) {\n        require(_blockTimestamp() <= deadline, 'Transaction too old');\n        _;\n    }\n}\n"
			},
			"contracts/base/PeripheryImmutableState.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity =0.7.6;\n\nimport '../interfaces/IPeripheryImmutableState.sol';\n\n/// @title Immutable state\n/// @notice Immutable state used by periphery contracts\nabstract contract PeripheryImmutableState is IPeripheryImmutableState {\n    /// @inheritdoc IPeripheryImmutableState\n    address public immutable override factory;\n    /// @inheritdoc IPeripheryImmutableState\n    address public immutable override WETH9;\n\n    constructor(address _factory, address _WETH9) {\n        factory = _factory;\n        WETH9 = _WETH9;\n    }\n}\n"
			},
			"contracts/interfaces/ISwapRouter.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.5;\npragma abicoder v2;\n\nimport '@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol';\n\n/// @title Router token swapping functionality\n/// @notice Functions for swapping tokens via Uniswap V3\ninterface ISwapRouter is IUniswapV3SwapCallback {\n    struct ExactInputSingleParams {\n        address tokenIn;\n        address tokenOut;\n        uint24 fee;\n        address recipient;\n        uint256 deadline;\n        uint256 amountIn;\n        uint256 amountOutMinimum;\n        uint160 sqrtPriceLimitX96;\n    }\n\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\n    /// @return amountOut The amount of the received token\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\n\n    struct ExactInputParams {\n        bytes path;\n        address recipient;\n        uint256 deadline;\n        uint256 amountIn;\n        uint256 amountOutMinimum;\n    }\n\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\n    /// @return amountOut The amount of the received token\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\n\n    struct ExactOutputSingleParams {\n        address tokenIn;\n        address tokenOut;\n        uint24 fee;\n        address recipient;\n        uint256 deadline;\n        uint256 amountOut;\n        uint256 amountInMaximum;\n        uint160 sqrtPriceLimitX96;\n    }\n\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\n    /// @return amountIn The amount of the input token\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\n\n    struct ExactOutputParams {\n        bytes path;\n        address recipient;\n        uint256 deadline;\n        uint256 amountOut;\n        uint256 amountInMaximum;\n    }\n\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\n    /// @return amountIn The amount of the input token\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\n}\n"
			},
			"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\nimport './pool/IUniswapV3PoolImmutables.sol';\nimport './pool/IUniswapV3PoolState.sol';\nimport './pool/IUniswapV3PoolDerivedState.sol';\nimport './pool/IUniswapV3PoolActions.sol';\nimport './pool/IUniswapV3PoolOwnerActions.sol';\nimport './pool/IUniswapV3PoolEvents.sol';\n\n/// @title The interface for a Uniswap V3 Pool\n/// @notice A Uniswap pool facilitates swapping and automated market making between any two assets that strictly conform\n/// to the ERC20 specification\n/// @dev The pool interface is broken up into many smaller pieces\ninterface IUniswapV3Pool is\n    IUniswapV3PoolImmutables,\n    IUniswapV3PoolState,\n    IUniswapV3PoolDerivedState,\n    IUniswapV3PoolActions,\n    IUniswapV3PoolOwnerActions,\n    IUniswapV3PoolEvents\n{\n\n}\n"
			},
			"@uniswap/v3-core/contracts/libraries/TickMath.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Math library for computing sqrt prices from ticks and vice versa\n/// @notice Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports\n/// prices between 2**-128 and 2**128\nlibrary TickMath {\n    /// @dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128\n    int24 internal constant MIN_TICK = -887272;\n    /// @dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\n    int24 internal constant MAX_TICK = -MIN_TICK;\n\n    /// @dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\n    uint160 internal constant MIN_SQRT_RATIO = 4295128739;\n    /// @dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\n    uint160 internal constant MAX_SQRT_RATIO = 1461446703485210103287273052203988822378723970342;\n\n    /// @notice Calculates sqrt(1.0001^tick) * 2^96\n    /// @dev Throws if |tick| > max tick\n    /// @param tick The input tick for the above formula\n    /// @return sqrtPriceX96 A Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)\n    /// at the given tick\n    function getSqrtRatioAtTick(int24 tick) internal pure returns (uint160 sqrtPriceX96) {\n        uint256 absTick = tick < 0 ? uint256(-int256(tick)) : uint256(int256(tick));\n        require(absTick <= uint256(MAX_TICK), 'T');\n\n        uint256 ratio = absTick & 0x1 != 0 ? 0xfffcb933bd6fad37aa2d162d1a594001 : 0x100000000000000000000000000000000;\n        if (absTick & 0x2 != 0) ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128;\n        if (absTick & 0x4 != 0) ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;\n        if (absTick & 0x8 != 0) ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;\n        if (absTick & 0x10 != 0) ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128;\n        if (absTick & 0x20 != 0) ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128;\n        if (absTick & 0x40 != 0) ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128;\n        if (absTick & 0x80 != 0) ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;\n        if (absTick & 0x100 != 0) ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;\n        if (absTick & 0x200 != 0) ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128;\n        if (absTick & 0x400 != 0) ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;\n        if (absTick & 0x800 != 0) ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;\n        if (absTick & 0x1000 != 0) ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;\n        if (absTick & 0x2000 != 0) ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;\n        if (absTick & 0x4000 != 0) ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;\n        if (absTick & 0x8000 != 0) ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128;\n        if (absTick & 0x10000 != 0) ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;\n        if (absTick & 0x20000 != 0) ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128;\n        if (absTick & 0x40000 != 0) ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128;\n        if (absTick & 0x80000 != 0) ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128;\n\n        if (tick > 0) ratio = type(uint256).max / ratio;\n\n        // this divides by 1<<32 rounding up to go from a Q128.128 to a Q128.96.\n        // we then downcast because we know the result always fits within 160 bits due to our tick input constraint\n        // we round up in the division so getTickAtSqrtRatio of the output price is always consistent\n        sqrtPriceX96 = uint160((ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1));\n    }\n\n    /// @notice Calculates the greatest tick value such that getRatioAtTick(tick) <= ratio\n    /// @dev Throws in case sqrtPriceX96 < MIN_SQRT_RATIO, as MIN_SQRT_RATIO is the lowest value getRatioAtTick may\n    /// ever return.\n    /// @param sqrtPriceX96 The sqrt ratio for which to compute the tick as a Q64.96\n    /// @return tick The greatest tick for which the ratio is less than or equal to the input ratio\n    function getTickAtSqrtRatio(uint160 sqrtPriceX96) internal pure returns (int24 tick) {\n        // second inequality must be < because the price can never reach the price at the max tick\n        require(sqrtPriceX96 >= MIN_SQRT_RATIO && sqrtPriceX96 < MAX_SQRT_RATIO, 'R');\n        uint256 ratio = uint256(sqrtPriceX96) << 32;\n\n        uint256 r = ratio;\n        uint256 msb = 0;\n\n        assembly {\n            let f := shl(7, gt(r, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(6, gt(r, 0xFFFFFFFFFFFFFFFF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(5, gt(r, 0xFFFFFFFF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(4, gt(r, 0xFFFF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(3, gt(r, 0xFF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(2, gt(r, 0xF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(1, gt(r, 0x3))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := gt(r, 0x1)\n            msb := or(msb, f)\n        }\n\n        if (msb >= 128) r = ratio >> (msb - 127);\n        else r = ratio << (127 - msb);\n\n        int256 log_2 = (int256(msb) - 128) << 64;\n\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(63, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(62, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(61, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(60, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(59, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(58, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(57, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(56, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(55, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(54, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(53, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(52, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(51, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(50, f))\n        }\n\n        int256 log_sqrt10001 = log_2 * 255738958999603826347141; // 128.128 number\n\n        int24 tickLow = int24((log_sqrt10001 - 3402992956809132418596140100660247210) >> 128);\n        int24 tickHi = int24((log_sqrt10001 + 291339464771989622907027621153398088495) >> 128);\n\n        tick = tickLow == tickHi ? tickLow : getSqrtRatioAtTick(tickHi) <= sqrtPriceX96 ? tickHi : tickLow;\n    }\n}\n"
			},
			"@uniswap/v3-core/contracts/libraries/SafeCast.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Safe casting methods\n/// @notice Contains methods for safely casting between types\nlibrary SafeCast {\n    /// @notice Cast a uint256 to a uint160, revert on overflow\n    /// @param y The uint256 to be downcasted\n    /// @return z The downcasted integer, now type uint160\n    function toUint160(uint256 y) internal pure returns (uint160 z) {\n        require((z = uint160(y)) == y);\n    }\n\n    /// @notice Cast a int256 to a int128, revert on overflow or underflow\n    /// @param y The int256 to be downcasted\n    /// @return z The downcasted integer, now type int128\n    function toInt128(int256 y) internal pure returns (int128 z) {\n        require((z = int128(y)) == y);\n    }\n\n    /// @notice Cast a uint256 to a int256, revert on overflow\n    /// @param y The uint256 to be casted\n    /// @return z The casted integer, now type int256\n    function toInt256(uint256 y) internal pure returns (int256 z) {\n        require(y < 2**255);\n        z = int256(y);\n    }\n}\n"
			},
			"contracts/libraries/BytesLib.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\n/*\n * @title Solidity Bytes Arrays Utils\n * @author Gonçalo Sá <goncalo.sa@consensys.net>\n *\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\n */\npragma solidity >=0.5.0 <0.8.0;\n\nlibrary BytesLib {\n    function slice(\n        bytes memory _bytes,\n        uint256 _start,\n        uint256 _length\n    ) internal pure returns (bytes memory) {\n        require(_length + 31 >= _length, 'slice_overflow');\n        require(_start + _length >= _start, 'slice_overflow');\n        require(_bytes.length >= _start + _length, 'slice_outOfBounds');\n\n        bytes memory tempBytes;\n\n        assembly {\n            switch iszero(_length)\n                case 0 {\n                    // Get a location of some free memory and store it in tempBytes as\n                    // Solidity does for memory variables.\n                    tempBytes := mload(0x40)\n\n                    // The first word of the slice result is potentially a partial\n                    // word read from the original array. To read it, we calculate\n                    // the length of that partial word and start copying that many\n                    // bytes into the array. The first word we copy will start with\n                    // data we don't care about, but the last `lengthmod` bytes will\n                    // land at the beginning of the contents of the new array. When\n                    // we're done copying, we overwrite the full first word with\n                    // the actual length of the slice.\n                    let lengthmod := and(_length, 31)\n\n                    // The multiplication in the next line is necessary\n                    // because when slicing multiples of 32 bytes (lengthmod == 0)\n                    // the following copy loop was copying the origin's length\n                    // and then ending prematurely not copying everything it should.\n                    let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\n                    let end := add(mc, _length)\n\n                    for {\n                        // The multiplication in the next line has the same exact purpose\n                        // as the one above.\n                        let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\n                    } lt(mc, end) {\n                        mc := add(mc, 0x20)\n                        cc := add(cc, 0x20)\n                    } {\n                        mstore(mc, mload(cc))\n                    }\n\n                    mstore(tempBytes, _length)\n\n                    //update free-memory pointer\n                    //allocating the array padded to 32 bytes like the compiler does now\n                    mstore(0x40, and(add(mc, 31), not(31)))\n                }\n                //if we want a zero-length slice let's just return a zero-length array\n                default {\n                    tempBytes := mload(0x40)\n                    //zero out the 32 bytes slice we are about to return\n                    //we need to do it because Solidity does not garbage collect\n                    mstore(tempBytes, 0)\n\n                    mstore(0x40, add(tempBytes, 0x20))\n                }\n        }\n\n        return tempBytes;\n    }\n\n    function toAddress(bytes memory _bytes, uint256 _start) internal pure returns (address) {\n        require(_start + 20 >= _start, 'toAddress_overflow');\n        require(_bytes.length >= _start + 20, 'toAddress_outOfBounds');\n        address tempAddress;\n\n        assembly {\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\n        }\n\n        return tempAddress;\n    }\n\n    function toUint24(bytes memory _bytes, uint256 _start) internal pure returns (uint24) {\n        require(_start + 3 >= _start, 'toUint24_overflow');\n        require(_bytes.length >= _start + 3, 'toUint24_outOfBounds');\n        uint24 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x3), _start))\n        }\n\n        return tempUint;\n    }\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
			},
			"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Callback for IUniswapV3PoolActions#swap\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\ninterface IUniswapV3SwapCallback {\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\n    function uniswapV3SwapCallback(\n        int256 amount0Delta,\n        int256 amount1Delta,\n        bytes calldata data\n    ) external;\n}\n"
			},
			"contracts/interfaces/external/IERC20PermitAllowed.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Interface for permit\n/// @notice Interface used by DAI/CHAI for permit\ninterface IERC20PermitAllowed {\n    /// @notice Approve the spender to spend some tokens via the holder signature\n    /// @dev This is the permit interface used by DAI and CHAI\n    /// @param holder The address of the token holder, the token owner\n    /// @param spender The address of the token spender\n    /// @param nonce The holder's nonce, increases at each call to permit\n    /// @param expiry The timestamp at which the permit is no longer valid\n    /// @param allowed Boolean that sets approval amount, true for type(uint256).max and false for 0\n    /// @param v Must produce valid secp256k1 signature from the holder along with `r` and `s`\n    /// @param r Must produce valid secp256k1 signature from the holder along with `v` and `s`\n    /// @param s Must produce valid secp256k1 signature from the holder along with `r` and `v`\n    function permit(\n        address holder,\n        address spender,\n        uint256 nonce,\n        uint256 expiry,\n        bool allowed,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n}\n"
			},
			"contracts/interfaces/ISelfPermit.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.5;\n\n/// @title Self Permit\n/// @notice Functionality to call permit on any EIP-2612-compliant token for use in the route\ninterface ISelfPermit {\n    /// @notice Permits this contract to spend a given token from `msg.sender`\n    /// @dev The `owner` is always msg.sender and the `spender` is always address(this).\n    /// @param token The address of the token spent\n    /// @param value The amount that can be spent of token\n    /// @param deadline A timestamp, the current blocktime must be less than or equal to this timestamp\n    /// @param v Must produce valid secp256k1 signature from the holder along with `r` and `s`\n    /// @param r Must produce valid secp256k1 signature from the holder along with `v` and `s`\n    /// @param s Must produce valid secp256k1 signature from the holder along with `r` and `v`\n    function selfPermit(\n        address token,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external payable;\n\n    /// @notice Permits this contract to spend a given token from `msg.sender`\n    /// @dev The `owner` is always msg.sender and the `spender` is always address(this).\n    /// Can be used instead of #selfPermit to prevent calls from failing due to a frontrun of a call to #selfPermit\n    /// @param token The address of the token spent\n    /// @param value The amount that can be spent of token\n    /// @param deadline A timestamp, the current blocktime must be less than or equal to this timestamp\n    /// @param v Must produce valid secp256k1 signature from the holder along with `r` and `s`\n    /// @param r Must produce valid secp256k1 signature from the holder along with `v` and `s`\n    /// @param s Must produce valid secp256k1 signature from the holder along with `r` and `v`\n    function selfPermitIfNecessary(\n        address token,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external payable;\n\n    /// @notice Permits this contract to spend the sender's tokens for permit signatures that have the `allowed` parameter\n    /// @dev The `owner` is always msg.sender and the `spender` is always address(this)\n    /// @param token The address of the token spent\n    /// @param nonce The current nonce of the owner\n    /// @param expiry The timestamp at which the permit is no longer valid\n    /// @param v Must produce valid secp256k1 signature from the holder along with `r` and `s`\n    /// @param r Must produce valid secp256k1 signature from the holder along with `v` and `s`\n    /// @param s Must produce valid secp256k1 signature from the holder along with `r` and `v`\n    function selfPermitAllowed(\n        address token,\n        uint256 nonce,\n        uint256 expiry,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external payable;\n\n    /// @notice Permits this contract to spend the sender's tokens for permit signatures that have the `allowed` parameter\n    /// @dev The `owner` is always msg.sender and the `spender` is always address(this)\n    /// Can be used instead of #selfPermitAllowed to prevent calls from failing due to a frontrun of a call to #selfPermitAllowed.\n    /// @param token The address of the token spent\n    /// @param nonce The current nonce of the owner\n    /// @param expiry The timestamp at which the permit is no longer valid\n    /// @param v Must produce valid secp256k1 signature from the holder along with `r` and `s`\n    /// @param r Must produce valid secp256k1 signature from the holder along with `v` and `s`\n    /// @param s Must produce valid secp256k1 signature from the holder along with `r` and `v`\n    function selfPermitAllowedIfNecessary(\n        address token,\n        uint256 nonce,\n        uint256 expiry,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external payable;\n}\n"
			},
			"@openzeppelin/contracts/drafts/IERC20Permit.sol": {
				"content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over `owner`'s tokens,\n     * given `owner`'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for `permit`, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
			},
			"contracts/base/BlockTimestamp.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity =0.7.6;\n\n/// @title Function for getting block timestamp\n/// @dev Base contract that is overridden for tests\nabstract contract BlockTimestamp {\n    /// @dev Method that exists purely to be overridden for tests\n    /// @return The current block timestamp\n    function _blockTimestamp() internal view virtual returns (uint256) {\n        return block.timestamp;\n    }\n}\n"
			},
			"contracts/libraries/TransferHelper.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.6.0;\n\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\n\nlibrary TransferHelper {\n    /// @notice Transfers tokens from the targeted address to the given destination\n    /// @notice Errors with 'STF' if transfer fails\n    /// @param token The contract address of the token to be transferred\n    /// @param from The originating address from which the tokens will be transferred\n    /// @param to The destination address of the transfer\n    /// @param value The amount to be transferred\n    function safeTransferFrom(\n        address token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        (bool success, bytes memory data) =\n            token.call(abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'STF');\n    }\n\n    /// @notice Transfers tokens from msg.sender to a recipient\n    /// @dev Errors with ST if transfer fails\n    /// @param token The contract address of the token which will be transferred\n    /// @param to The recipient of the transfer\n    /// @param value The value of the transfer\n    function safeTransfer(\n        address token,\n        address to,\n        uint256 value\n    ) internal {\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.transfer.selector, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'ST');\n    }\n\n    /// @notice Approves the stipulated contract to spend the given allowance in the given token\n    /// @dev Errors with 'SA' if transfer fails\n    /// @param token The contract address of the token to be approved\n    /// @param to The target of the approval\n    /// @param value The amount of the given token the target will be allowed to spend\n    function safeApprove(\n        address token,\n        address to,\n        uint256 value\n    ) internal {\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.approve.selector, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'SA');\n    }\n\n    /// @notice Transfers ETH to the recipient address\n    /// @dev Fails with `STE`\n    /// @param to The destination of the transfer\n    /// @param value The value to be transferred\n    function safeTransferETH(address to, uint256 value) internal {\n        (bool success, ) = to.call{value: value}(new bytes(0));\n        require(success, 'STE');\n    }\n}\n"
			},
			"contracts/interfaces/IPeripheryPaymentsWithFee.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.5;\n\nimport './IPeripheryPayments.sol';\n\n/// @title Periphery Payments\n/// @notice Functions to ease deposits and withdrawals of ETH\ninterface IPeripheryPaymentsWithFee is IPeripheryPayments {\n    /// @notice Unwraps the contract's WETH9 balance and sends it to recipient as ETH, with a percentage between\n    /// 0 (exclusive), and 1 (inclusive) going to feeRecipient\n    /// @dev The amountMinimum parameter prevents malicious contracts from stealing WETH9 from users.\n    function unwrapWETH9WithFee(\n        uint256 amountMinimum,\n        address recipient,\n        uint256 feeBips,\n        address feeRecipient\n    ) external payable;\n\n    /// @notice Transfers the full amount of a token held by this contract to recipient, with a percentage between\n    /// 0 (exclusive) and 1 (inclusive) going to feeRecipient\n    /// @dev The amountMinimum parameter prevents malicious contracts from stealing the token from users\n    function sweepTokenWithFee(\n        address token,\n        uint256 amountMinimum,\n        address recipient,\n        uint256 feeBips,\n        address feeRecipient\n    ) external payable;\n}\n"
			},
			"contracts/base/PeripheryPayments.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.5;\n\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\n\nimport '../interfaces/IPeripheryPayments.sol';\nimport '../interfaces/external/IWETH9.sol';\n\nimport '../libraries/TransferHelper.sol';\n\nimport './PeripheryImmutableState.sol';\n\nabstract contract PeripheryPayments is IPeripheryPayments, PeripheryImmutableState {\n    receive() external payable {\n        require(msg.sender == WETH9, 'Not WETH9');\n    }\n\n    /// @inheritdoc IPeripheryPayments\n    function unwrapWETH9(uint256 amountMinimum, address recipient) public payable override {\n        uint256 balanceWETH9 = IWETH9(WETH9).balanceOf(address(this));\n        require(balanceWETH9 >= amountMinimum, 'Insufficient WETH9');\n\n        if (balanceWETH9 > 0) {\n            IWETH9(WETH9).withdraw(balanceWETH9);\n            TransferHelper.safeTransferETH(recipient, balanceWETH9);\n        }\n    }\n\n    /// @inheritdoc IPeripheryPayments\n    function sweepToken(\n        address token,\n        uint256 amountMinimum,\n        address recipient\n    ) public payable override {\n        uint256 balanceToken = IERC20(token).balanceOf(address(this));\n        require(balanceToken >= amountMinimum, 'Insufficient token');\n\n        if (balanceToken > 0) {\n            TransferHelper.safeTransfer(token, recipient, balanceToken);\n        }\n    }\n\n    /// @inheritdoc IPeripheryPayments\n    function refundETH() external payable override {\n        if (address(this).balance > 0) TransferHelper.safeTransferETH(msg.sender, address(this).balance);\n    }\n\n    /// @param token The token to pay\n    /// @param payer The entity that must pay\n    /// @param recipient The entity that will receive payment\n    /// @param value The amount to pay\n    function pay(\n        address token,\n        address payer,\n        address recipient,\n        uint256 value\n    ) internal {\n        if (token == WETH9 && address(this).balance >= value) {\n            // pay with WETH9\n            IWETH9(WETH9).deposit{value: value}(); // wrap only what is needed to pay\n            IWETH9(WETH9).transfer(recipient, value);\n        } else if (payer == address(this)) {\n            // pay with tokens already in the contract (for the exact input multihop case)\n            TransferHelper.safeTransfer(token, recipient, value);\n        } else {\n            // pull payment\n            TransferHelper.safeTransferFrom(token, payer, recipient, value);\n        }\n    }\n}\n"
			},
			"@uniswap/v3-core/contracts/libraries/LowGasSafeMath.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.0;\n\n/// @title Optimized overflow and underflow safe math operations\n/// @notice Contains methods for doing math operations that revert on overflow or underflow for minimal gas cost\nlibrary LowGasSafeMath {\n    /// @notice Returns x + y, reverts if sum overflows uint256\n    /// @param x The augend\n    /// @param y The addend\n    /// @return z The sum of x and y\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        require((z = x + y) >= x);\n    }\n\n    /// @notice Returns x - y, reverts if underflows\n    /// @param x The minuend\n    /// @param y The subtrahend\n    /// @return z The difference of x and y\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        require((z = x - y) <= x);\n    }\n\n    /// @notice Returns x * y, reverts if overflows\n    /// @param x The multiplicand\n    /// @param y The multiplier\n    /// @return z The product of x and y\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        require(x == 0 || (z = x * y) / x == y);\n    }\n\n    /// @notice Returns x + y, reverts if overflows or underflows\n    /// @param x The augend\n    /// @param y The addend\n    /// @return z The sum of x and y\n    function add(int256 x, int256 y) internal pure returns (int256 z) {\n        require((z = x + y) >= x == (y >= 0));\n    }\n\n    /// @notice Returns x - y, reverts if overflows or underflows\n    /// @param x The minuend\n    /// @param y The subtrahend\n    /// @return z The difference of x and y\n    function sub(int256 x, int256 y) internal pure returns (int256 z) {\n        require((z = x - y) <= x == (y >= 0));\n    }\n}\n"
			},
			"contracts/interfaces/IPeripheryImmutableState.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Immutable state\n/// @notice Functions that return immutable state of the router\ninterface IPeripheryImmutableState {\n    /// @return Returns the address of the Uniswap V3 factory\n    function factory() external view returns (address);\n\n    /// @return Returns the address of WETH9\n    function WETH9() external view returns (address);\n}\n"
			},
			"contracts/interfaces/IMulticall.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.5;\npragma abicoder v2;\n\n/// @title Multicall interface\n/// @notice Enables calling multiple methods in a single call to the contract\ninterface IMulticall {\n    /// @notice Call multiple functions in the current contract and return the data from all of them if they all succeed\n    /// @dev The `msg.value` should not be trusted for any method callable from multicall.\n    /// @param data The encoded function data for each of the calls to make to this contract\n    /// @return results The results from each of the calls passed in via data\n    function multicall(bytes[] calldata data) external payable returns (bytes[] memory results);\n}\n"
			},
			"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Events emitted by a pool\n/// @notice Contains all events emitted by the pool\ninterface IUniswapV3PoolEvents {\n    /// @notice Emitted exactly once by a pool when #initialize is first called on the pool\n    /// @dev Mint/Burn/Swap cannot be emitted by the pool before Initialize\n    /// @param sqrtPriceX96 The initial sqrt price of the pool, as a Q64.96\n    /// @param tick The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool\n    event Initialize(uint160 sqrtPriceX96, int24 tick);\n\n    /// @notice Emitted when liquidity is minted for a given position\n    /// @param sender The address that minted the liquidity\n    /// @param owner The owner of the position and recipient of any minted liquidity\n    /// @param tickLower The lower tick of the position\n    /// @param tickUpper The upper tick of the position\n    /// @param amount The amount of liquidity minted to the position range\n    /// @param amount0 How much token0 was required for the minted liquidity\n    /// @param amount1 How much token1 was required for the minted liquidity\n    event Mint(\n        address sender,\n        address indexed owner,\n        int24 indexed tickLower,\n        int24 indexed tickUpper,\n        uint128 amount,\n        uint256 amount0,\n        uint256 amount1\n    );\n\n    /// @notice Emitted when fees are collected by the owner of a position\n    /// @dev Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees\n    /// @param owner The owner of the position for which fees are collected\n    /// @param tickLower The lower tick of the position\n    /// @param tickUpper The upper tick of the position\n    /// @param amount0 The amount of token0 fees collected\n    /// @param amount1 The amount of token1 fees collected\n    event Collect(\n        address indexed owner,\n        address recipient,\n        int24 indexed tickLower,\n        int24 indexed tickUpper,\n        uint128 amount0,\n        uint128 amount1\n    );\n\n    /// @notice Emitted when a position's liquidity is removed\n    /// @dev Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect\n    /// @param owner The owner of the position for which liquidity is removed\n    /// @param tickLower The lower tick of the position\n    /// @param tickUpper The upper tick of the position\n    /// @param amount The amount of liquidity to remove\n    /// @param amount0 The amount of token0 withdrawn\n    /// @param amount1 The amount of token1 withdrawn\n    event Burn(\n        address indexed owner,\n        int24 indexed tickLower,\n        int24 indexed tickUpper,\n        uint128 amount,\n        uint256 amount0,\n        uint256 amount1\n    );\n\n    /// @notice Emitted by the pool for any swaps between token0 and token1\n    /// @param sender The address that initiated the swap call, and that received the callback\n    /// @param recipient The address that received the output of the swap\n    /// @param amount0 The delta of the token0 balance of the pool\n    /// @param amount1 The delta of the token1 balance of the pool\n    /// @param sqrtPriceX96 The sqrt(price) of the pool after the swap, as a Q64.96\n    /// @param liquidity The liquidity of the pool after the swap\n    /// @param tick The log base 1.0001 of price of the pool after the swap\n    event Swap(\n        address indexed sender,\n        address indexed recipient,\n        int256 amount0,\n        int256 amount1,\n        uint160 sqrtPriceX96,\n        uint128 liquidity,\n        int24 tick\n    );\n\n    /// @notice Emitted by the pool for any flashes of token0/token1\n    /// @param sender The address that initiated the swap call, and that received the callback\n    /// @param recipient The address that received the tokens from flash\n    /// @param amount0 The amount of token0 that was flashed\n    /// @param amount1 The amount of token1 that was flashed\n    /// @param paid0 The amount of token0 paid for the flash, which can exceed the amount0 plus the fee\n    /// @param paid1 The amount of token1 paid for the flash, which can exceed the amount1 plus the fee\n    event Flash(\n        address indexed sender,\n        address indexed recipient,\n        uint256 amount0,\n        uint256 amount1,\n        uint256 paid0,\n        uint256 paid1\n    );\n\n    /// @notice Emitted by the pool for increases to the number of observations that can be stored\n    /// @dev observationCardinalityNext is not the observation cardinality until an observation is written at the index\n    /// just before a mint/swap/burn.\n    /// @param observationCardinalityNextOld The previous value of the next observation cardinality\n    /// @param observationCardinalityNextNew The updated value of the next observation cardinality\n    event IncreaseObservationCardinalityNext(\n        uint16 observationCardinalityNextOld,\n        uint16 observationCardinalityNextNew\n    );\n\n    /// @notice Emitted when the protocol fee is changed by the pool\n    /// @param feeProtocol0Old The previous value of the token0 protocol fee\n    /// @param feeProtocol1Old The previous value of the token1 protocol fee\n    /// @param feeProtocol0New The updated value of the token0 protocol fee\n    /// @param feeProtocol1New The updated value of the token1 protocol fee\n    event SetFeeProtocol(uint8 feeProtocol0Old, uint8 feeProtocol1Old, uint8 feeProtocol0New, uint8 feeProtocol1New);\n\n    /// @notice Emitted when the collected protocol fees are withdrawn by the factory owner\n    /// @param sender The address that collects the protocol fees\n    /// @param recipient The address that receives the collected protocol fees\n    /// @param amount0 The amount of token0 protocol fees that is withdrawn\n    /// @param amount0 The amount of token1 protocol fees that is withdrawn\n    event CollectProtocol(address indexed sender, address indexed recipient, uint128 amount0, uint128 amount1);\n}\n"
			},
			"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Permissioned pool actions\n/// @notice Contains pool methods that may only be called by the factory owner\ninterface IUniswapV3PoolOwnerActions {\n    /// @notice Set the denominator of the protocol's % share of the fees\n    /// @param feeProtocol0 new protocol fee for token0 of the pool\n    /// @param feeProtocol1 new protocol fee for token1 of the pool\n    function setFeeProtocol(uint8 feeProtocol0, uint8 feeProtocol1) external;\n\n    /// @notice Collect the protocol fee accrued to the pool\n    /// @param recipient The address to which collected protocol fees should be sent\n    /// @param amount0Requested The maximum amount of token0 to send, can be 0 to collect fees in only token1\n    /// @param amount1Requested The maximum amount of token1 to send, can be 0 to collect fees in only token0\n    /// @return amount0 The protocol fee collected in token0\n    /// @return amount1 The protocol fee collected in token1\n    function collectProtocol(\n        address recipient,\n        uint128 amount0Requested,\n        uint128 amount1Requested\n    ) external returns (uint128 amount0, uint128 amount1);\n}\n"
			},
			"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Permissionless pool actions\n/// @notice Contains pool methods that can be called by anyone\ninterface IUniswapV3PoolActions {\n    /// @notice Sets the initial price for the pool\n    /// @dev Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\n    /// @param sqrtPriceX96 the initial sqrt price of the pool as a Q64.96\n    function initialize(uint160 sqrtPriceX96) external;\n\n    /// @notice Adds liquidity for the given recipient/tickLower/tickUpper position\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback\n    /// in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends\n    /// on tickLower, tickUpper, the amount of liquidity, and the current price.\n    /// @param recipient The address for which the liquidity will be created\n    /// @param tickLower The lower tick of the position in which to add liquidity\n    /// @param tickUpper The upper tick of the position in which to add liquidity\n    /// @param amount The amount of liquidity to mint\n    /// @param data Any data that should be passed through to the callback\n    /// @return amount0 The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\n    /// @return amount1 The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback\n    function mint(\n        address recipient,\n        int24 tickLower,\n        int24 tickUpper,\n        uint128 amount,\n        bytes calldata data\n    ) external returns (uint256 amount0, uint256 amount1);\n\n    /// @notice Collects tokens owed to a position\n    /// @dev Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity.\n    /// Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or\n    /// amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the\n    /// actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\n    /// @param recipient The address which should receive the fees collected\n    /// @param tickLower The lower tick of the position for which to collect fees\n    /// @param tickUpper The upper tick of the position for which to collect fees\n    /// @param amount0Requested How much token0 should be withdrawn from the fees owed\n    /// @param amount1Requested How much token1 should be withdrawn from the fees owed\n    /// @return amount0 The amount of fees collected in token0\n    /// @return amount1 The amount of fees collected in token1\n    function collect(\n        address recipient,\n        int24 tickLower,\n        int24 tickUpper,\n        uint128 amount0Requested,\n        uint128 amount1Requested\n    ) external returns (uint128 amount0, uint128 amount1);\n\n    /// @notice Burn liquidity from the sender and account tokens owed for the liquidity to the position\n    /// @dev Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0\n    /// @dev Fees must be collected separately via a call to #collect\n    /// @param tickLower The lower tick of the position for which to burn liquidity\n    /// @param tickUpper The upper tick of the position for which to burn liquidity\n    /// @param amount How much liquidity to burn\n    /// @return amount0 The amount of token0 sent to the recipient\n    /// @return amount1 The amount of token1 sent to the recipient\n    function burn(\n        int24 tickLower,\n        int24 tickUpper,\n        uint128 amount\n    ) external returns (uint256 amount0, uint256 amount1);\n\n    /// @notice Swap token0 for token1, or token1 for token0\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback\n    /// @param recipient The address to receive the output of the swap\n    /// @param zeroForOne The direction of the swap, true for token0 to token1, false for token1 to token0\n    /// @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\n    /// @param sqrtPriceLimitX96 The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\n    /// value after the swap. If one for zero, the price cannot be greater than this value after the swap\n    /// @param data Any data to be passed through to the callback\n    /// @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\n    /// @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive\n    function swap(\n        address recipient,\n        bool zeroForOne,\n        int256 amountSpecified,\n        uint160 sqrtPriceLimitX96,\n        bytes calldata data\n    ) external returns (int256 amount0, int256 amount1);\n\n    /// @notice Receive token0 and/or token1 and pay it back, plus a fee, in the callback\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallback\n    /// @dev Can be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling\n    /// with 0 amount{0,1} and sending the donation amount(s) from the callback\n    /// @param recipient The address which will receive the token0 and token1 amounts\n    /// @param amount0 The amount of token0 to send\n    /// @param amount1 The amount of token1 to send\n    /// @param data Any data to be passed through to the callback\n    function flash(\n        address recipient,\n        uint256 amount0,\n        uint256 amount1,\n        bytes calldata data\n    ) external;\n\n    /// @notice Increase the maximum number of price and liquidity observations that this pool will store\n    /// @dev This method is no-op if the pool already has an observationCardinalityNext greater than or equal to\n    /// the input observationCardinalityNext.\n    /// @param observationCardinalityNext The desired minimum number of observations for the pool to store\n    function increaseObservationCardinalityNext(uint16 observationCardinalityNext) external;\n}\n"
			},
			"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Pool state that is not stored\n/// @notice Contains view functions to provide information about the pool that is computed rather than stored on the\n/// blockchain. The functions here may have variable gas costs.\ninterface IUniswapV3PoolDerivedState {\n    /// @notice Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\n    /// @dev To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing\n    /// the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick,\n    /// you must call it with secondsAgos = [3600, 0].\n    /// @dev The time weighted average tick represents the geometric time weighted average price of the pool, in\n    /// log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\n    /// @param secondsAgos From how long ago each cumulative tick and liquidity value should be returned\n    /// @return tickCumulatives Cumulative tick values as of each `secondsAgos` from the current block timestamp\n    /// @return secondsPerLiquidityCumulativeX128s Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block\n    /// timestamp\n    function observe(uint32[] calldata secondsAgos)\n        external\n        view\n        returns (int56[] memory tickCumulatives, uint160[] memory secondsPerLiquidityCumulativeX128s);\n\n    /// @notice Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\n    /// @dev Snapshots must only be compared to other snapshots, taken over a period for which a position existed.\n    /// I.e., snapshots cannot be compared if a position is not held for the entire period between when the first\n    /// snapshot is taken and the second snapshot is taken.\n    /// @param tickLower The lower tick of the range\n    /// @param tickUpper The upper tick of the range\n    /// @return tickCumulativeInside The snapshot of the tick accumulator for the range\n    /// @return secondsPerLiquidityInsideX128 The snapshot of seconds per liquidity for the range\n    /// @return secondsInside The snapshot of seconds per liquidity for the range\n    function snapshotCumulativesInside(int24 tickLower, int24 tickUpper)\n        external\n        view\n        returns (\n            int56 tickCumulativeInside,\n            uint160 secondsPerLiquidityInsideX128,\n            uint32 secondsInside\n        );\n}\n"
			},
			"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Pool state that can change\n/// @notice These methods compose the pool's state, and can change with any frequency including multiple times\n/// per transaction\ninterface IUniswapV3PoolState {\n    /// @notice The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas\n    /// when accessed externally.\n    /// @return sqrtPriceX96 The current price of the pool as a sqrt(token1/token0) Q64.96 value\n    /// tick The current tick of the pool, i.e. according to the last tick transition that was run.\n    /// This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick\n    /// boundary.\n    /// observationIndex The index of the last oracle observation that was written,\n    /// observationCardinality The current maximum number of observations stored in the pool,\n    /// observationCardinalityNext The next maximum number of observations, to be updated when the observation.\n    /// feeProtocol The protocol fee for both tokens of the pool.\n    /// Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0\n    /// is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee.\n    /// unlocked Whether the pool is currently locked to reentrancy\n    function slot0()\n        external\n        view\n        returns (\n            uint160 sqrtPriceX96,\n            int24 tick,\n            uint16 observationIndex,\n            uint16 observationCardinality,\n            uint16 observationCardinalityNext,\n            uint8 feeProtocol,\n            bool unlocked\n        );\n\n    /// @notice The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\n    /// @dev This value can overflow the uint256\n    function feeGrowthGlobal0X128() external view returns (uint256);\n\n    /// @notice The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\n    /// @dev This value can overflow the uint256\n    function feeGrowthGlobal1X128() external view returns (uint256);\n\n    /// @notice The amounts of token0 and token1 that are owed to the protocol\n    /// @dev Protocol fees will never exceed uint128 max in either token\n    function protocolFees() external view returns (uint128 token0, uint128 token1);\n\n    /// @notice The currently in range liquidity available to the pool\n    /// @dev This value has no relationship to the total liquidity across all ticks\n    function liquidity() external view returns (uint128);\n\n    /// @notice Look up information about a specific tick in the pool\n    /// @param tick The tick to look up\n    /// @return liquidityGross the total amount of position liquidity that uses the pool either as tick lower or\n    /// tick upper,\n    /// liquidityNet how much liquidity changes when the pool price crosses the tick,\n    /// feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0,\n    /// feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1,\n    /// tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick\n    /// secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick,\n    /// secondsOutside the seconds spent on the other side of the tick from the current tick,\n    /// initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false.\n    /// Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0.\n    /// In addition, these values are only relative and must be used only in comparison to previous snapshots for\n    /// a specific position.\n    function ticks(int24 tick)\n        external\n        view\n        returns (\n            uint128 liquidityGross,\n            int128 liquidityNet,\n            uint256 feeGrowthOutside0X128,\n            uint256 feeGrowthOutside1X128,\n            int56 tickCumulativeOutside,\n            uint160 secondsPerLiquidityOutsideX128,\n            uint32 secondsOutside,\n            bool initialized\n        );\n\n    /// @notice Returns 256 packed tick initialized boolean values. See TickBitmap for more information\n    function tickBitmap(int16 wordPosition) external view returns (uint256);\n\n    /// @notice Returns the information about a position by the position's key\n    /// @param key The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\n    /// @return _liquidity The amount of liquidity in the position,\n    /// Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke,\n    /// Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke,\n    /// Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke,\n    /// Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke\n    function positions(bytes32 key)\n        external\n        view\n        returns (\n            uint128 _liquidity,\n            uint256 feeGrowthInside0LastX128,\n            uint256 feeGrowthInside1LastX128,\n            uint128 tokensOwed0,\n            uint128 tokensOwed1\n        );\n\n    /// @notice Returns data about a specific observation index\n    /// @param index The element of the observations array to fetch\n    /// @dev You most likely want to use #observe() instead of this method to get an observation as of some amount of time\n    /// ago, rather than at a specific index in the array.\n    /// @return blockTimestamp The timestamp of the observation,\n    /// Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp,\n    /// Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp,\n    /// Returns initialized whether the observation has been initialized and the values are safe to use\n    function observations(uint256 index)\n        external\n        view\n        returns (\n            uint32 blockTimestamp,\n            int56 tickCumulative,\n            uint160 secondsPerLiquidityCumulativeX128,\n            bool initialized\n        );\n}\n"
			},
			"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Pool state that never changes\n/// @notice These parameters are fixed for a pool forever, i.e., the methods will always return the same values\ninterface IUniswapV3PoolImmutables {\n    /// @notice The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface\n    /// @return The contract address\n    function factory() external view returns (address);\n\n    /// @notice The first of the two tokens of the pool, sorted by address\n    /// @return The token contract address\n    function token0() external view returns (address);\n\n    /// @notice The second of the two tokens of the pool, sorted by address\n    /// @return The token contract address\n    function token1() external view returns (address);\n\n    /// @notice The pool's fee in hundredths of a bip, i.e. 1e-6\n    /// @return The fee\n    function fee() external view returns (uint24);\n\n    /// @notice The pool tick spacing\n    /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\n    /// e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\n    /// This value is an int24 to avoid casting even though it is always positive.\n    /// @return The tick spacing\n    function tickSpacing() external view returns (int24);\n\n    /// @notice The maximum amount of position liquidity that can use any tick in the range\n    /// @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\n    /// also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\n    /// @return The max amount of liquidity per tick\n    function maxLiquidityPerTick() external view returns (uint128);\n}\n"
			},
			"contracts/interfaces/IPeripheryPayments.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.5;\n\n/// @title Periphery Payments\n/// @notice Functions to ease deposits and withdrawals of ETH\ninterface IPeripheryPayments {\n    /// @notice Unwraps the contract's WETH9 balance and sends it to recipient as ETH.\n    /// @dev The amountMinimum parameter prevents malicious contracts from stealing WETH9 from users.\n    /// @param amountMinimum The minimum amount of WETH9 to unwrap\n    /// @param recipient The address receiving ETH\n    function unwrapWETH9(uint256 amountMinimum, address recipient) external payable;\n\n    /// @notice Refunds any ETH balance held by this contract to the `msg.sender`\n    /// @dev Useful for bundling with mint or increase liquidity that uses ether, or exact output swaps\n    /// that use ether for the input amount\n    function refundETH() external payable;\n\n    /// @notice Transfers the full amount of a token held by this contract to recipient\n    /// @dev The amountMinimum parameter prevents malicious contracts from stealing the token from users\n    /// @param token The contract address of the token which will be transferred to `recipient`\n    /// @param amountMinimum The minimum amount of token required for a transfer\n    /// @param recipient The destination address of the token\n    function sweepToken(\n        address token,\n        uint256 amountMinimum,\n        address recipient\n    ) external payable;\n}\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": true,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			}
		}
	},
	"output": {
		"contracts": {
			"@openzeppelin/contracts/drafts/IERC20Permit.sol": {
				"IERC20Permit": {
					"abi": [
						{
							"inputs": [],
							"name": "DOMAIN_SEPARATOR",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "nonces",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "deadline",
									"type": "uint256"
								},
								{
									"internalType": "uint8",
									"name": "v",
									"type": "uint8"
								},
								{
									"internalType": "bytes32",
									"name": "r",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "s",
									"type": "bytes32"
								}
							],
							"name": "permit",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all.",
						"kind": "dev",
						"methods": {
							"DOMAIN_SEPARATOR()": {
								"details": "Returns the domain separator used in the encoding of the signature for `permit`, as defined by {EIP712}."
							},
							"nonces(address)": {
								"details": "Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times."
							},
							"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
								"details": "Sets `value` as the allowance of `spender` over `owner`'s tokens, given `owner`'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"DOMAIN_SEPARATOR()": "3644e515",
							"nonces(address)": "7ecebe00",
							"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": "d505accf"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all.\",\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"Returns the domain separator used in the encoding of the signature for `permit`, as defined by {EIP712}.\"},\"nonces(address)\":{\"details\":\"Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"Sets `value` as the allowance of `spender` over `owner`'s tokens, given `owner`'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section].\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/drafts/IERC20Permit.sol\":\"IERC20Permit\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/drafts/IERC20Permit.sol\":{\"keccak256\":\"0x1aab7754719ba764a8a05bec47e975001400f62986474945eb3dbee6d871259f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8c14e8ff1b384bdb68f262669364b1e79fbbd82b85938b7ce788a1395c40c6a2\",\"dweb:/ipfs/QmUKLXfSeEuRUXkeWLBhjHTKeSFoNBCS1RaMXv1AmHXYzn\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"IERC20": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC20 standard as defined in the EIP.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the amount of tokens owned by `account`."
							},
							"totalSupply()": {
								"details": "Returns the amount of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves `amount` tokens from the caller's account to `recipient`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves `amount` tokens from `sender` to `recipient` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `recipient`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `sender` to `recipient` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xbd74f587ab9b9711801baf667db1426e4a03fd2d7f15af33e0e0d0394e7cef76\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2d0913dfbfce90d170df0d496ad7596c0778518e5fa7aba6c32562522546f66b\",\"dweb:/ipfs/QmR6B8nLj2PJf5e1JWD9Nk7ErkAwkqUwadCnvE82FJr1RU\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol": {
				"IUniswapV3Pool": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "amount",
									"type": "uint128"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"name": "Burn",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "amount0",
									"type": "uint128"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "amount1",
									"type": "uint128"
								}
							],
							"name": "Collect",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "amount0",
									"type": "uint128"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "amount1",
									"type": "uint128"
								}
							],
							"name": "CollectProtocol",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "paid0",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "paid1",
									"type": "uint256"
								}
							],
							"name": "Flash",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint16",
									"name": "observationCardinalityNextOld",
									"type": "uint16"
								},
								{
									"indexed": false,
									"internalType": "uint16",
									"name": "observationCardinalityNextNew",
									"type": "uint16"
								}
							],
							"name": "IncreaseObservationCardinalityNext",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint160",
									"name": "sqrtPriceX96",
									"type": "uint160"
								},
								{
									"indexed": false,
									"internalType": "int24",
									"name": "tick",
									"type": "int24"
								}
							],
							"name": "Initialize",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "amount",
									"type": "uint128"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"name": "Mint",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "feeProtocol0Old",
									"type": "uint8"
								},
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "feeProtocol1Old",
									"type": "uint8"
								},
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "feeProtocol0New",
									"type": "uint8"
								},
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "feeProtocol1New",
									"type": "uint8"
								}
							],
							"name": "SetFeeProtocol",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "int256",
									"name": "amount0",
									"type": "int256"
								},
								{
									"indexed": false,
									"internalType": "int256",
									"name": "amount1",
									"type": "int256"
								},
								{
									"indexed": false,
									"internalType": "uint160",
									"name": "sqrtPriceX96",
									"type": "uint160"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "liquidity",
									"type": "uint128"
								},
								{
									"indexed": false,
									"internalType": "int24",
									"name": "tick",
									"type": "int24"
								}
							],
							"name": "Swap",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"internalType": "uint128",
									"name": "amount",
									"type": "uint128"
								}
							],
							"name": "burn",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"internalType": "uint128",
									"name": "amount0Requested",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "amount1Requested",
									"type": "uint128"
								}
							],
							"name": "collect",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "amount0",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "amount1",
									"type": "uint128"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint128",
									"name": "amount0Requested",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "amount1Requested",
									"type": "uint128"
								}
							],
							"name": "collectProtocol",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "amount0",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "amount1",
									"type": "uint128"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "factory",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "fee",
							"outputs": [
								{
									"internalType": "uint24",
									"name": "",
									"type": "uint24"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "feeGrowthGlobal0X128",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "feeGrowthGlobal1X128",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "flash",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint16",
									"name": "observationCardinalityNext",
									"type": "uint16"
								}
							],
							"name": "increaseObservationCardinalityNext",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint160",
									"name": "sqrtPriceX96",
									"type": "uint160"
								}
							],
							"name": "initialize",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "liquidity",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "",
									"type": "uint128"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "maxLiquidityPerTick",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "",
									"type": "uint128"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"internalType": "uint128",
									"name": "amount",
									"type": "uint128"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "mint",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "index",
									"type": "uint256"
								}
							],
							"name": "observations",
							"outputs": [
								{
									"internalType": "uint32",
									"name": "blockTimestamp",
									"type": "uint32"
								},
								{
									"internalType": "int56",
									"name": "tickCumulative",
									"type": "int56"
								},
								{
									"internalType": "uint160",
									"name": "secondsPerLiquidityCumulativeX128",
									"type": "uint160"
								},
								{
									"internalType": "bool",
									"name": "initialized",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint32[]",
									"name": "secondsAgos",
									"type": "uint32[]"
								}
							],
							"name": "observe",
							"outputs": [
								{
									"internalType": "int56[]",
									"name": "tickCumulatives",
									"type": "int56[]"
								},
								{
									"internalType": "uint160[]",
									"name": "secondsPerLiquidityCumulativeX128s",
									"type": "uint160[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "key",
									"type": "bytes32"
								}
							],
							"name": "positions",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "_liquidity",
									"type": "uint128"
								},
								{
									"internalType": "uint256",
									"name": "feeGrowthInside0LastX128",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "feeGrowthInside1LastX128",
									"type": "uint256"
								},
								{
									"internalType": "uint128",
									"name": "tokensOwed0",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "tokensOwed1",
									"type": "uint128"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "protocolFees",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "token0",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "token1",
									"type": "uint128"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint8",
									"name": "feeProtocol0",
									"type": "uint8"
								},
								{
									"internalType": "uint8",
									"name": "feeProtocol1",
									"type": "uint8"
								}
							],
							"name": "setFeeProtocol",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "slot0",
							"outputs": [
								{
									"internalType": "uint160",
									"name": "sqrtPriceX96",
									"type": "uint160"
								},
								{
									"internalType": "int24",
									"name": "tick",
									"type": "int24"
								},
								{
									"internalType": "uint16",
									"name": "observationIndex",
									"type": "uint16"
								},
								{
									"internalType": "uint16",
									"name": "observationCardinality",
									"type": "uint16"
								},
								{
									"internalType": "uint16",
									"name": "observationCardinalityNext",
									"type": "uint16"
								},
								{
									"internalType": "uint8",
									"name": "feeProtocol",
									"type": "uint8"
								},
								{
									"internalType": "bool",
									"name": "unlocked",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								}
							],
							"name": "snapshotCumulativesInside",
							"outputs": [
								{
									"internalType": "int56",
									"name": "tickCumulativeInside",
									"type": "int56"
								},
								{
									"internalType": "uint160",
									"name": "secondsPerLiquidityInsideX128",
									"type": "uint160"
								},
								{
									"internalType": "uint32",
									"name": "secondsInside",
									"type": "uint32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "zeroForOne",
									"type": "bool"
								},
								{
									"internalType": "int256",
									"name": "amountSpecified",
									"type": "int256"
								},
								{
									"internalType": "uint160",
									"name": "sqrtPriceLimitX96",
									"type": "uint160"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "swap",
							"outputs": [
								{
									"internalType": "int256",
									"name": "amount0",
									"type": "int256"
								},
								{
									"internalType": "int256",
									"name": "amount1",
									"type": "int256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "int16",
									"name": "wordPosition",
									"type": "int16"
								}
							],
							"name": "tickBitmap",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "tickSpacing",
							"outputs": [
								{
									"internalType": "int24",
									"name": "",
									"type": "int24"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "int24",
									"name": "tick",
									"type": "int24"
								}
							],
							"name": "ticks",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "liquidityGross",
									"type": "uint128"
								},
								{
									"internalType": "int128",
									"name": "liquidityNet",
									"type": "int128"
								},
								{
									"internalType": "uint256",
									"name": "feeGrowthOutside0X128",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "feeGrowthOutside1X128",
									"type": "uint256"
								},
								{
									"internalType": "int56",
									"name": "tickCumulativeOutside",
									"type": "int56"
								},
								{
									"internalType": "uint160",
									"name": "secondsPerLiquidityOutsideX128",
									"type": "uint160"
								},
								{
									"internalType": "uint32",
									"name": "secondsOutside",
									"type": "uint32"
								},
								{
									"internalType": "bool",
									"name": "initialized",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "token0",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "token1",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "The pool interface is broken up into many smaller pieces",
						"kind": "dev",
						"methods": {
							"burn(int24,int24,uint128)": {
								"details": "Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0Fees must be collected separately via a call to #collect",
								"params": {
									"amount": "How much liquidity to burn",
									"tickLower": "The lower tick of the position for which to burn liquidity",
									"tickUpper": "The upper tick of the position for which to burn liquidity"
								},
								"returns": {
									"amount0": "The amount of token0 sent to the recipient",
									"amount1": "The amount of token1 sent to the recipient"
								}
							},
							"collect(address,int24,int24,uint128,uint128)": {
								"details": "Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity. Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.",
								"params": {
									"amount0Requested": "How much token0 should be withdrawn from the fees owed",
									"amount1Requested": "How much token1 should be withdrawn from the fees owed",
									"recipient": "The address which should receive the fees collected",
									"tickLower": "The lower tick of the position for which to collect fees",
									"tickUpper": "The upper tick of the position for which to collect fees"
								},
								"returns": {
									"amount0": "The amount of fees collected in token0",
									"amount1": "The amount of fees collected in token1"
								}
							},
							"collectProtocol(address,uint128,uint128)": {
								"params": {
									"amount0Requested": "The maximum amount of token0 to send, can be 0 to collect fees in only token1",
									"amount1Requested": "The maximum amount of token1 to send, can be 0 to collect fees in only token0",
									"recipient": "The address to which collected protocol fees should be sent"
								},
								"returns": {
									"amount0": "The protocol fee collected in token0",
									"amount1": "The protocol fee collected in token1"
								}
							},
							"factory()": {
								"returns": {
									"_0": "The contract address"
								}
							},
							"fee()": {
								"returns": {
									"_0": "The fee"
								}
							},
							"feeGrowthGlobal0X128()": {
								"details": "This value can overflow the uint256"
							},
							"feeGrowthGlobal1X128()": {
								"details": "This value can overflow the uint256"
							},
							"flash(address,uint256,uint256,bytes)": {
								"details": "The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallbackCan be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling with 0 amount{0,1} and sending the donation amount(s) from the callback",
								"params": {
									"amount0": "The amount of token0 to send",
									"amount1": "The amount of token1 to send",
									"data": "Any data to be passed through to the callback",
									"recipient": "The address which will receive the token0 and token1 amounts"
								}
							},
							"increaseObservationCardinalityNext(uint16)": {
								"details": "This method is no-op if the pool already has an observationCardinalityNext greater than or equal to the input observationCardinalityNext.",
								"params": {
									"observationCardinalityNext": "The desired minimum number of observations for the pool to store"
								}
							},
							"initialize(uint160)": {
								"details": "Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value",
								"params": {
									"sqrtPriceX96": "the initial sqrt price of the pool as a Q64.96"
								}
							},
							"liquidity()": {
								"details": "This value has no relationship to the total liquidity across all ticks"
							},
							"maxLiquidityPerTick()": {
								"details": "This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool",
								"returns": {
									"_0": "The max amount of liquidity per tick"
								}
							},
							"mint(address,int24,int24,uint128,bytes)": {
								"details": "The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends on tickLower, tickUpper, the amount of liquidity, and the current price.",
								"params": {
									"amount": "The amount of liquidity to mint",
									"data": "Any data that should be passed through to the callback",
									"recipient": "The address for which the liquidity will be created",
									"tickLower": "The lower tick of the position in which to add liquidity",
									"tickUpper": "The upper tick of the position in which to add liquidity"
								},
								"returns": {
									"amount0": "The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback",
									"amount1": "The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback"
								}
							},
							"observations(uint256)": {
								"details": "You most likely want to use #observe() instead of this method to get an observation as of some amount of time ago, rather than at a specific index in the array.",
								"params": {
									"index": "The element of the observations array to fetch"
								},
								"returns": {
									"blockTimestamp": "The timestamp of the observation, Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp, Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp, Returns initialized whether the observation has been initialized and the values are safe to use"
								}
							},
							"observe(uint32[])": {
								"details": "To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick, you must call it with secondsAgos = [3600, 0].The time weighted average tick represents the geometric time weighted average price of the pool, in log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.",
								"params": {
									"secondsAgos": "From how long ago each cumulative tick and liquidity value should be returned"
								},
								"returns": {
									"secondsPerLiquidityCumulativeX128s": "Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block timestamp",
									"tickCumulatives": "Cumulative tick values as of each `secondsAgos` from the current block timestamp"
								}
							},
							"positions(bytes32)": {
								"params": {
									"key": "The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper"
								},
								"returns": {
									"_liquidity": "The amount of liquidity in the position, Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke, Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke, Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke, Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke"
								}
							},
							"protocolFees()": {
								"details": "Protocol fees will never exceed uint128 max in either token"
							},
							"setFeeProtocol(uint8,uint8)": {
								"params": {
									"feeProtocol0": "new protocol fee for token0 of the pool",
									"feeProtocol1": "new protocol fee for token1 of the pool"
								}
							},
							"slot0()": {
								"returns": {
									"sqrtPriceX96": "The current price of the pool as a sqrt(token1/token0) Q64.96 value tick The current tick of the pool, i.e. according to the last tick transition that was run. This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick boundary. observationIndex The index of the last oracle observation that was written, observationCardinality The current maximum number of observations stored in the pool, observationCardinalityNext The next maximum number of observations, to be updated when the observation. feeProtocol The protocol fee for both tokens of the pool. Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0 is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee. unlocked Whether the pool is currently locked to reentrancy"
								}
							},
							"snapshotCumulativesInside(int24,int24)": {
								"details": "Snapshots must only be compared to other snapshots, taken over a period for which a position existed. I.e., snapshots cannot be compared if a position is not held for the entire period between when the first snapshot is taken and the second snapshot is taken.",
								"params": {
									"tickLower": "The lower tick of the range",
									"tickUpper": "The upper tick of the range"
								},
								"returns": {
									"secondsInside": "The snapshot of seconds per liquidity for the range",
									"secondsPerLiquidityInsideX128": "The snapshot of seconds per liquidity for the range",
									"tickCumulativeInside": "The snapshot of the tick accumulator for the range"
								}
							},
							"swap(address,bool,int256,uint160,bytes)": {
								"details": "The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback",
								"params": {
									"amountSpecified": "The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)",
									"data": "Any data to be passed through to the callback",
									"recipient": "The address to receive the output of the swap",
									"sqrtPriceLimitX96": "The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this value after the swap. If one for zero, the price cannot be greater than this value after the swap",
									"zeroForOne": "The direction of the swap, true for token0 to token1, false for token1 to token0"
								},
								"returns": {
									"amount0": "The delta of the balance of token0 of the pool, exact when negative, minimum when positive",
									"amount1": "The delta of the balance of token1 of the pool, exact when negative, minimum when positive"
								}
							},
							"tickSpacing()": {
								"details": "Ticks can only be used at multiples of this value, minimum of 1 and always positive e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ... This value is an int24 to avoid casting even though it is always positive.",
								"returns": {
									"_0": "The tick spacing"
								}
							},
							"ticks(int24)": {
								"params": {
									"tick": "The tick to look up"
								},
								"returns": {
									"liquidityGross": "the total amount of position liquidity that uses the pool either as tick lower or tick upper, liquidityNet how much liquidity changes when the pool price crosses the tick, feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0, feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1, tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick, secondsOutside the seconds spent on the other side of the tick from the current tick, initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false. Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0. In addition, these values are only relative and must be used only in comparison to previous snapshots for a specific position."
								}
							},
							"token0()": {
								"returns": {
									"_0": "The token contract address"
								}
							},
							"token1()": {
								"returns": {
									"_0": "The token contract address"
								}
							}
						},
						"title": "The interface for a Uniswap V3 Pool",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"burn(int24,int24,uint128)": "a34123a7",
							"collect(address,int24,int24,uint128,uint128)": "4f1eb3d8",
							"collectProtocol(address,uint128,uint128)": "85b66729",
							"factory()": "c45a0155",
							"fee()": "ddca3f43",
							"feeGrowthGlobal0X128()": "f3058399",
							"feeGrowthGlobal1X128()": "46141319",
							"flash(address,uint256,uint256,bytes)": "490e6cbc",
							"increaseObservationCardinalityNext(uint16)": "32148f67",
							"initialize(uint160)": "f637731d",
							"liquidity()": "1a686502",
							"maxLiquidityPerTick()": "70cf754a",
							"mint(address,int24,int24,uint128,bytes)": "3c8a7d8d",
							"observations(uint256)": "252c09d7",
							"observe(uint32[])": "883bdbfd",
							"positions(bytes32)": "514ea4bf",
							"protocolFees()": "1ad8b03b",
							"setFeeProtocol(uint8,uint8)": "8206a4d1",
							"slot0()": "3850c7bd",
							"snapshotCumulativesInside(int24,int24)": "a38807f2",
							"swap(address,bool,int256,uint160,bytes)": "128acb08",
							"tickBitmap(int16)": "5339c296",
							"tickSpacing()": "d0c93a7c",
							"ticks(int24)": "f30dba93",
							"token0()": "0dfe1681",
							"token1()": "d21220a7"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount0\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount1\",\"type\":\"uint128\"}],\"name\":\"Collect\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount0\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount1\",\"type\":\"uint128\"}],\"name\":\"CollectProtocol\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paid0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paid1\",\"type\":\"uint256\"}],\"name\":\"Flash\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"observationCardinalityNextOld\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"observationCardinalityNextNew\",\"type\":\"uint16\"}],\"name\":\"IncreaseObservationCardinalityNext\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"},{\"indexed\":false,\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"}],\"name\":\"Initialize\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"feeProtocol0Old\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"feeProtocol1Old\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"feeProtocol0New\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"feeProtocol1New\",\"type\":\"uint8\"}],\"name\":\"SetFeeProtocol\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"amount0\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"amount1\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint128\",\"name\":\"amount0Requested\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1Requested\",\"type\":\"uint128\"}],\"name\":\"collect\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"amount0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"amount0Requested\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1Requested\",\"type\":\"uint128\"}],\"name\":\"collectProtocol\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"amount0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeGrowthGlobal0X128\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeGrowthGlobal1X128\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"flash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"observationCardinalityNext\",\"type\":\"uint16\"}],\"name\":\"increaseObservationCardinalityNext\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidity\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxLiquidityPerTick\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"observations\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"blockTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"int56\",\"name\":\"tickCumulative\",\"type\":\"int56\"},{\"internalType\":\"uint160\",\"name\":\"secondsPerLiquidityCumulativeX128\",\"type\":\"uint160\"},{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32[]\",\"name\":\"secondsAgos\",\"type\":\"uint32[]\"}],\"name\":\"observe\",\"outputs\":[{\"internalType\":\"int56[]\",\"name\":\"tickCumulatives\",\"type\":\"int56[]\"},{\"internalType\":\"uint160[]\",\"name\":\"secondsPerLiquidityCumulativeX128s\",\"type\":\"uint160[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"positions\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"_liquidity\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthInside0LastX128\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthInside1LastX128\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"tokensOwed0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"tokensOwed1\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFees\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"token0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"token1\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"feeProtocol0\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"feeProtocol1\",\"type\":\"uint8\"}],\"name\":\"setFeeProtocol\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slot0\",\"outputs\":[{\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"},{\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"},{\"internalType\":\"uint16\",\"name\":\"observationIndex\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"observationCardinality\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"observationCardinalityNext\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"feeProtocol\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"unlocked\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"}],\"name\":\"snapshotCumulativesInside\",\"outputs\":[{\"internalType\":\"int56\",\"name\":\"tickCumulativeInside\",\"type\":\"int56\"},{\"internalType\":\"uint160\",\"name\":\"secondsPerLiquidityInsideX128\",\"type\":\"uint160\"},{\"internalType\":\"uint32\",\"name\":\"secondsInside\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"zeroForOne\",\"type\":\"bool\"},{\"internalType\":\"int256\",\"name\":\"amountSpecified\",\"type\":\"int256\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceLimitX96\",\"type\":\"uint160\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"amount0\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"amount1\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int16\",\"name\":\"wordPosition\",\"type\":\"int16\"}],\"name\":\"tickBitmap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tickSpacing\",\"outputs\":[{\"internalType\":\"int24\",\"name\":\"\",\"type\":\"int24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"}],\"name\":\"ticks\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"liquidityGross\",\"type\":\"uint128\"},{\"internalType\":\"int128\",\"name\":\"liquidityNet\",\"type\":\"int128\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthOutside0X128\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthOutside1X128\",\"type\":\"uint256\"},{\"internalType\":\"int56\",\"name\":\"tickCumulativeOutside\",\"type\":\"int56\"},{\"internalType\":\"uint160\",\"name\":\"secondsPerLiquidityOutsideX128\",\"type\":\"uint160\"},{\"internalType\":\"uint32\",\"name\":\"secondsOutside\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token0\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"The pool interface is broken up into many smaller pieces\",\"kind\":\"dev\",\"methods\":{\"burn(int24,int24,uint128)\":{\"details\":\"Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0Fees must be collected separately via a call to #collect\",\"params\":{\"amount\":\"How much liquidity to burn\",\"tickLower\":\"The lower tick of the position for which to burn liquidity\",\"tickUpper\":\"The upper tick of the position for which to burn liquidity\"},\"returns\":{\"amount0\":\"The amount of token0 sent to the recipient\",\"amount1\":\"The amount of token1 sent to the recipient\"}},\"collect(address,int24,int24,uint128,uint128)\":{\"details\":\"Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity. Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\",\"params\":{\"amount0Requested\":\"How much token0 should be withdrawn from the fees owed\",\"amount1Requested\":\"How much token1 should be withdrawn from the fees owed\",\"recipient\":\"The address which should receive the fees collected\",\"tickLower\":\"The lower tick of the position for which to collect fees\",\"tickUpper\":\"The upper tick of the position for which to collect fees\"},\"returns\":{\"amount0\":\"The amount of fees collected in token0\",\"amount1\":\"The amount of fees collected in token1\"}},\"collectProtocol(address,uint128,uint128)\":{\"params\":{\"amount0Requested\":\"The maximum amount of token0 to send, can be 0 to collect fees in only token1\",\"amount1Requested\":\"The maximum amount of token1 to send, can be 0 to collect fees in only token0\",\"recipient\":\"The address to which collected protocol fees should be sent\"},\"returns\":{\"amount0\":\"The protocol fee collected in token0\",\"amount1\":\"The protocol fee collected in token1\"}},\"factory()\":{\"returns\":{\"_0\":\"The contract address\"}},\"fee()\":{\"returns\":{\"_0\":\"The fee\"}},\"feeGrowthGlobal0X128()\":{\"details\":\"This value can overflow the uint256\"},\"feeGrowthGlobal1X128()\":{\"details\":\"This value can overflow the uint256\"},\"flash(address,uint256,uint256,bytes)\":{\"details\":\"The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallbackCan be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling with 0 amount{0,1} and sending the donation amount(s) from the callback\",\"params\":{\"amount0\":\"The amount of token0 to send\",\"amount1\":\"The amount of token1 to send\",\"data\":\"Any data to be passed through to the callback\",\"recipient\":\"The address which will receive the token0 and token1 amounts\"}},\"increaseObservationCardinalityNext(uint16)\":{\"details\":\"This method is no-op if the pool already has an observationCardinalityNext greater than or equal to the input observationCardinalityNext.\",\"params\":{\"observationCardinalityNext\":\"The desired minimum number of observations for the pool to store\"}},\"initialize(uint160)\":{\"details\":\"Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\",\"params\":{\"sqrtPriceX96\":\"the initial sqrt price of the pool as a Q64.96\"}},\"liquidity()\":{\"details\":\"This value has no relationship to the total liquidity across all ticks\"},\"maxLiquidityPerTick()\":{\"details\":\"This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\",\"returns\":{\"_0\":\"The max amount of liquidity per tick\"}},\"mint(address,int24,int24,uint128,bytes)\":{\"details\":\"The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends on tickLower, tickUpper, the amount of liquidity, and the current price.\",\"params\":{\"amount\":\"The amount of liquidity to mint\",\"data\":\"Any data that should be passed through to the callback\",\"recipient\":\"The address for which the liquidity will be created\",\"tickLower\":\"The lower tick of the position in which to add liquidity\",\"tickUpper\":\"The upper tick of the position in which to add liquidity\"},\"returns\":{\"amount0\":\"The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\",\"amount1\":\"The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback\"}},\"observations(uint256)\":{\"details\":\"You most likely want to use #observe() instead of this method to get an observation as of some amount of time ago, rather than at a specific index in the array.\",\"params\":{\"index\":\"The element of the observations array to fetch\"},\"returns\":{\"blockTimestamp\":\"The timestamp of the observation, Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp, Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp, Returns initialized whether the observation has been initialized and the values are safe to use\"}},\"observe(uint32[])\":{\"details\":\"To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick, you must call it with secondsAgos = [3600, 0].The time weighted average tick represents the geometric time weighted average price of the pool, in log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\",\"params\":{\"secondsAgos\":\"From how long ago each cumulative tick and liquidity value should be returned\"},\"returns\":{\"secondsPerLiquidityCumulativeX128s\":\"Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block timestamp\",\"tickCumulatives\":\"Cumulative tick values as of each `secondsAgos` from the current block timestamp\"}},\"positions(bytes32)\":{\"params\":{\"key\":\"The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\"},\"returns\":{\"_liquidity\":\"The amount of liquidity in the position, Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke, Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke, Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke, Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke\"}},\"protocolFees()\":{\"details\":\"Protocol fees will never exceed uint128 max in either token\"},\"setFeeProtocol(uint8,uint8)\":{\"params\":{\"feeProtocol0\":\"new protocol fee for token0 of the pool\",\"feeProtocol1\":\"new protocol fee for token1 of the pool\"}},\"slot0()\":{\"returns\":{\"sqrtPriceX96\":\"The current price of the pool as a sqrt(token1/token0) Q64.96 value tick The current tick of the pool, i.e. according to the last tick transition that was run. This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick boundary. observationIndex The index of the last oracle observation that was written, observationCardinality The current maximum number of observations stored in the pool, observationCardinalityNext The next maximum number of observations, to be updated when the observation. feeProtocol The protocol fee for both tokens of the pool. Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0 is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee. unlocked Whether the pool is currently locked to reentrancy\"}},\"snapshotCumulativesInside(int24,int24)\":{\"details\":\"Snapshots must only be compared to other snapshots, taken over a period for which a position existed. I.e., snapshots cannot be compared if a position is not held for the entire period between when the first snapshot is taken and the second snapshot is taken.\",\"params\":{\"tickLower\":\"The lower tick of the range\",\"tickUpper\":\"The upper tick of the range\"},\"returns\":{\"secondsInside\":\"The snapshot of seconds per liquidity for the range\",\"secondsPerLiquidityInsideX128\":\"The snapshot of seconds per liquidity for the range\",\"tickCumulativeInside\":\"The snapshot of the tick accumulator for the range\"}},\"swap(address,bool,int256,uint160,bytes)\":{\"details\":\"The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback\",\"params\":{\"amountSpecified\":\"The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\",\"data\":\"Any data to be passed through to the callback\",\"recipient\":\"The address to receive the output of the swap\",\"sqrtPriceLimitX96\":\"The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this value after the swap. If one for zero, the price cannot be greater than this value after the swap\",\"zeroForOne\":\"The direction of the swap, true for token0 to token1, false for token1 to token0\"},\"returns\":{\"amount0\":\"The delta of the balance of token0 of the pool, exact when negative, minimum when positive\",\"amount1\":\"The delta of the balance of token1 of the pool, exact when negative, minimum when positive\"}},\"tickSpacing()\":{\"details\":\"Ticks can only be used at multiples of this value, minimum of 1 and always positive e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ... This value is an int24 to avoid casting even though it is always positive.\",\"returns\":{\"_0\":\"The tick spacing\"}},\"ticks(int24)\":{\"params\":{\"tick\":\"The tick to look up\"},\"returns\":{\"liquidityGross\":\"the total amount of position liquidity that uses the pool either as tick lower or tick upper, liquidityNet how much liquidity changes when the pool price crosses the tick, feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0, feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1, tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick, secondsOutside the seconds spent on the other side of the tick from the current tick, initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false. Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0. In addition, these values are only relative and must be used only in comparison to previous snapshots for a specific position.\"}},\"token0()\":{\"returns\":{\"_0\":\"The token contract address\"}},\"token1()\":{\"returns\":{\"_0\":\"The token contract address\"}}},\"title\":\"The interface for a Uniswap V3 Pool\",\"version\":1},\"userdoc\":{\"events\":{\"Burn(address,int24,int24,uint128,uint256,uint256)\":{\"notice\":\"Emitted when a position's liquidity is removed\"},\"Collect(address,address,int24,int24,uint128,uint128)\":{\"notice\":\"Emitted when fees are collected by the owner of a position\"},\"CollectProtocol(address,address,uint128,uint128)\":{\"notice\":\"Emitted when the collected protocol fees are withdrawn by the factory owner\"},\"Flash(address,address,uint256,uint256,uint256,uint256)\":{\"notice\":\"Emitted by the pool for any flashes of token0/token1\"},\"IncreaseObservationCardinalityNext(uint16,uint16)\":{\"notice\":\"Emitted by the pool for increases to the number of observations that can be stored\"},\"Initialize(uint160,int24)\":{\"notice\":\"Emitted exactly once by a pool when #initialize is first called on the pool\"},\"Mint(address,address,int24,int24,uint128,uint256,uint256)\":{\"notice\":\"Emitted when liquidity is minted for a given position\"},\"SetFeeProtocol(uint8,uint8,uint8,uint8)\":{\"notice\":\"Emitted when the protocol fee is changed by the pool\"},\"Swap(address,address,int256,int256,uint160,uint128,int24)\":{\"notice\":\"Emitted by the pool for any swaps between token0 and token1\"}},\"kind\":\"user\",\"methods\":{\"burn(int24,int24,uint128)\":{\"notice\":\"Burn liquidity from the sender and account tokens owed for the liquidity to the position\"},\"collect(address,int24,int24,uint128,uint128)\":{\"notice\":\"Collects tokens owed to a position\"},\"collectProtocol(address,uint128,uint128)\":{\"notice\":\"Collect the protocol fee accrued to the pool\"},\"factory()\":{\"notice\":\"The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface\"},\"fee()\":{\"notice\":\"The pool's fee in hundredths of a bip, i.e. 1e-6\"},\"feeGrowthGlobal0X128()\":{\"notice\":\"The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\"},\"feeGrowthGlobal1X128()\":{\"notice\":\"The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\"},\"flash(address,uint256,uint256,bytes)\":{\"notice\":\"Receive token0 and/or token1 and pay it back, plus a fee, in the callback\"},\"increaseObservationCardinalityNext(uint16)\":{\"notice\":\"Increase the maximum number of price and liquidity observations that this pool will store\"},\"initialize(uint160)\":{\"notice\":\"Sets the initial price for the pool\"},\"liquidity()\":{\"notice\":\"The currently in range liquidity available to the pool\"},\"maxLiquidityPerTick()\":{\"notice\":\"The maximum amount of position liquidity that can use any tick in the range\"},\"mint(address,int24,int24,uint128,bytes)\":{\"notice\":\"Adds liquidity for the given recipient/tickLower/tickUpper position\"},\"observations(uint256)\":{\"notice\":\"Returns data about a specific observation index\"},\"observe(uint32[])\":{\"notice\":\"Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\"},\"positions(bytes32)\":{\"notice\":\"Returns the information about a position by the position's key\"},\"protocolFees()\":{\"notice\":\"The amounts of token0 and token1 that are owed to the protocol\"},\"setFeeProtocol(uint8,uint8)\":{\"notice\":\"Set the denominator of the protocol's % share of the fees\"},\"slot0()\":{\"notice\":\"The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas when accessed externally.\"},\"snapshotCumulativesInside(int24,int24)\":{\"notice\":\"Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\"},\"swap(address,bool,int256,uint160,bytes)\":{\"notice\":\"Swap token0 for token1, or token1 for token0\"},\"tickBitmap(int16)\":{\"notice\":\"Returns 256 packed tick initialized boolean values. See TickBitmap for more information\"},\"tickSpacing()\":{\"notice\":\"The pool tick spacing\"},\"ticks(int24)\":{\"notice\":\"Look up information about a specific tick in the pool\"},\"token0()\":{\"notice\":\"The first of the two tokens of the pool, sorted by address\"},\"token1()\":{\"notice\":\"The second of the two tokens of the pool, sorted by address\"}},\"notice\":\"A Uniswap pool facilitates swapping and automated market making between any two assets that strictly conform to the ERC20 specification\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol\":\"IUniswapV3Pool\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol\":{\"keccak256\":\"0xfe6113d518466cd6652c85b111e01f33eb62157f49ae5ed7d5a3947a2044adb1\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://1c42b9e6f5902ac38dd43e25750939baa7e0c1425dc75afd717c4412731065d5\",\"dweb:/ipfs/QmWaoacnzsucTvBME2o7YgZBZMhaHv7fkj83htHMVWJKWh\"]},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol\":{\"keccak256\":\"0x9453dd0e7442188667d01d9b65de3f1e14e9511ff3e303179a15f6fc267f7634\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://982f4328f956c3e60e67501e759eb292ac487f76460c774c50e9ae4fcc92aae5\",\"dweb:/ipfs/QmRnzEDsaqtd9PJEVcgQi7p5aV5pMSvRUoGZJAdwFUJxgZ\"]},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol\":{\"keccak256\":\"0xe603ac5b17ecdee73ba2b27efdf386c257a19c14206e87eee77e2017b742d9e5\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://8febc9bdb399a4d94bb89f5377732652e2400e4a8dee808201ade6848f9004e7\",\"dweb:/ipfs/QmaKDqYYFU4d2W2iN77aDHptfbFmYZRrMYXHeGpJmM8C1c\"]},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol\":{\"keccak256\":\"0x8071514d0fe5d17d6fbd31c191cdfb703031c24e0ece3621d88ab10e871375cd\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://d0b571930cc7488b1d546a7e9cea7c52d8b3c4e207da657ed0e0db7343b8cd03\",\"dweb:/ipfs/QmaGK6vVwB95QSTR1XMYvrh7ivYAYZxi3fD7v6VMA4jZ39\"]},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol\":{\"keccak256\":\"0xf6e5d2cd1139c4c276bdbc8e1d2b256e456c866a91f1b868da265c6d2685c3f7\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://b99c8c9ae8e27ee6559e5866bea82cbc9ffc8247f8d15b7422a4deb287d4d047\",\"dweb:/ipfs/QmfL8gaqt3ffAnm6nVj5ksuNpLygXuL3xq5VBqrkwC2JJ3\"]},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol\":{\"keccak256\":\"0x759b78a2918af9e99e246dc3af084f654e48ef32bb4e4cb8a966aa3dcaece235\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://64144fb96e1c7fdba87305acadb98a198d26a3d46c097cb3a666e567f6f29735\",\"dweb:/ipfs/QmUnWVwN9FKB9uV5Pr8YfLpWZnYM2DENnRMaadZ492JS9u\"]},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol\":{\"keccak256\":\"0x852dc1f5df7dcf7f11e7bb3eed79f0cea72ad4b25f6a9d2c35aafb48925fd49f\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://ed63907c38ff36b0e22bc9ffc53e791ea74f0d4f0e7c257fdfb5aaf8825b1f0f\",\"dweb:/ipfs/QmSQrckghEjs6HVsA5GVgpNpZWvTXMY5eQLF7cN6deFeEg\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"events": {
							"Burn(address,int24,int24,uint128,uint256,uint256)": {
								"notice": "Emitted when a position's liquidity is removed"
							},
							"Collect(address,address,int24,int24,uint128,uint128)": {
								"notice": "Emitted when fees are collected by the owner of a position"
							},
							"CollectProtocol(address,address,uint128,uint128)": {
								"notice": "Emitted when the collected protocol fees are withdrawn by the factory owner"
							},
							"Flash(address,address,uint256,uint256,uint256,uint256)": {
								"notice": "Emitted by the pool for any flashes of token0/token1"
							},
							"IncreaseObservationCardinalityNext(uint16,uint16)": {
								"notice": "Emitted by the pool for increases to the number of observations that can be stored"
							},
							"Initialize(uint160,int24)": {
								"notice": "Emitted exactly once by a pool when #initialize is first called on the pool"
							},
							"Mint(address,address,int24,int24,uint128,uint256,uint256)": {
								"notice": "Emitted when liquidity is minted for a given position"
							},
							"SetFeeProtocol(uint8,uint8,uint8,uint8)": {
								"notice": "Emitted when the protocol fee is changed by the pool"
							},
							"Swap(address,address,int256,int256,uint160,uint128,int24)": {
								"notice": "Emitted by the pool for any swaps between token0 and token1"
							}
						},
						"kind": "user",
						"methods": {
							"burn(int24,int24,uint128)": {
								"notice": "Burn liquidity from the sender and account tokens owed for the liquidity to the position"
							},
							"collect(address,int24,int24,uint128,uint128)": {
								"notice": "Collects tokens owed to a position"
							},
							"collectProtocol(address,uint128,uint128)": {
								"notice": "Collect the protocol fee accrued to the pool"
							},
							"factory()": {
								"notice": "The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface"
							},
							"fee()": {
								"notice": "The pool's fee in hundredths of a bip, i.e. 1e-6"
							},
							"feeGrowthGlobal0X128()": {
								"notice": "The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool"
							},
							"feeGrowthGlobal1X128()": {
								"notice": "The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool"
							},
							"flash(address,uint256,uint256,bytes)": {
								"notice": "Receive token0 and/or token1 and pay it back, plus a fee, in the callback"
							},
							"increaseObservationCardinalityNext(uint16)": {
								"notice": "Increase the maximum number of price and liquidity observations that this pool will store"
							},
							"initialize(uint160)": {
								"notice": "Sets the initial price for the pool"
							},
							"liquidity()": {
								"notice": "The currently in range liquidity available to the pool"
							},
							"maxLiquidityPerTick()": {
								"notice": "The maximum amount of position liquidity that can use any tick in the range"
							},
							"mint(address,int24,int24,uint128,bytes)": {
								"notice": "Adds liquidity for the given recipient/tickLower/tickUpper position"
							},
							"observations(uint256)": {
								"notice": "Returns data about a specific observation index"
							},
							"observe(uint32[])": {
								"notice": "Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp"
							},
							"positions(bytes32)": {
								"notice": "Returns the information about a position by the position's key"
							},
							"protocolFees()": {
								"notice": "The amounts of token0 and token1 that are owed to the protocol"
							},
							"setFeeProtocol(uint8,uint8)": {
								"notice": "Set the denominator of the protocol's % share of the fees"
							},
							"slot0()": {
								"notice": "The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas when accessed externally."
							},
							"snapshotCumulativesInside(int24,int24)": {
								"notice": "Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range"
							},
							"swap(address,bool,int256,uint160,bytes)": {
								"notice": "Swap token0 for token1, or token1 for token0"
							},
							"tickBitmap(int16)": {
								"notice": "Returns 256 packed tick initialized boolean values. See TickBitmap for more information"
							},
							"tickSpacing()": {
								"notice": "The pool tick spacing"
							},
							"ticks(int24)": {
								"notice": "Look up information about a specific tick in the pool"
							},
							"token0()": {
								"notice": "The first of the two tokens of the pool, sorted by address"
							},
							"token1()": {
								"notice": "The second of the two tokens of the pool, sorted by address"
							}
						},
						"notice": "A Uniswap pool facilitates swapping and automated market making between any two assets that strictly conform to the ERC20 specification",
						"version": 1
					}
				}
			},
			"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol": {
				"IUniswapV3SwapCallback": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "int256",
									"name": "amount0Delta",
									"type": "int256"
								},
								{
									"internalType": "int256",
									"name": "amount1Delta",
									"type": "int256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "uniswapV3SwapCallback",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"uniswapV3SwapCallback(int256,int256,bytes)": {
								"details": "In the implementation you must pay the pool tokens owed for the swap. The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory. amount0Delta and amount1Delta can both be 0 if no tokens were swapped.",
								"params": {
									"amount0Delta": "The amount of token0 that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token0 to the pool.",
									"amount1Delta": "The amount of token1 that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token1 to the pool.",
									"data": "Any data passed through by the caller via the IUniswapV3PoolActions#swap call"
								}
							}
						},
						"title": "Callback for IUniswapV3PoolActions#swap",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"uniswapV3SwapCallback(int256,int256,bytes)": "fa461e33"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"amount0Delta\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"amount1Delta\",\"type\":\"int256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"uniswapV3SwapCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"uniswapV3SwapCallback(int256,int256,bytes)\":{\"details\":\"In the implementation you must pay the pool tokens owed for the swap. The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory. amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\",\"params\":{\"amount0Delta\":\"The amount of token0 that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token0 to the pool.\",\"amount1Delta\":\"The amount of token1 that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token1 to the pool.\",\"data\":\"Any data passed through by the caller via the IUniswapV3PoolActions#swap call\"}}},\"title\":\"Callback for IUniswapV3PoolActions#swap\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"uniswapV3SwapCallback(int256,int256,bytes)\":{\"notice\":\"Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\"}},\"notice\":\"Any contract that calls IUniswapV3PoolActions#swap must implement this interface\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol\":\"IUniswapV3SwapCallback\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol\":{\"keccak256\":\"0x3f485fb1a44e8fbeadefb5da07d66edab3cfe809f0ac4074b1e54e3eb3c4cf69\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://095ce0626b41318c772b3ebf19d548282607f6a8f3d6c41c13edfbd5370c8652\",\"dweb:/ipfs/QmVDZfJJ89UUCE1hMyzqpkZAtQ8jUsBgZNE5AMRG7RzRFS\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"uniswapV3SwapCallback(int256,int256,bytes)": {
								"notice": "Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap."
							}
						},
						"notice": "Any contract that calls IUniswapV3PoolActions#swap must implement this interface",
						"version": 1
					}
				}
			},
			"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol": {
				"IUniswapV3PoolActions": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"internalType": "uint128",
									"name": "amount",
									"type": "uint128"
								}
							],
							"name": "burn",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"internalType": "uint128",
									"name": "amount0Requested",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "amount1Requested",
									"type": "uint128"
								}
							],
							"name": "collect",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "amount0",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "amount1",
									"type": "uint128"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "flash",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint16",
									"name": "observationCardinalityNext",
									"type": "uint16"
								}
							],
							"name": "increaseObservationCardinalityNext",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint160",
									"name": "sqrtPriceX96",
									"type": "uint160"
								}
							],
							"name": "initialize",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"internalType": "uint128",
									"name": "amount",
									"type": "uint128"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "mint",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "zeroForOne",
									"type": "bool"
								},
								{
									"internalType": "int256",
									"name": "amountSpecified",
									"type": "int256"
								},
								{
									"internalType": "uint160",
									"name": "sqrtPriceLimitX96",
									"type": "uint160"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "swap",
							"outputs": [
								{
									"internalType": "int256",
									"name": "amount0",
									"type": "int256"
								},
								{
									"internalType": "int256",
									"name": "amount1",
									"type": "int256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"burn(int24,int24,uint128)": {
								"details": "Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0Fees must be collected separately via a call to #collect",
								"params": {
									"amount": "How much liquidity to burn",
									"tickLower": "The lower tick of the position for which to burn liquidity",
									"tickUpper": "The upper tick of the position for which to burn liquidity"
								},
								"returns": {
									"amount0": "The amount of token0 sent to the recipient",
									"amount1": "The amount of token1 sent to the recipient"
								}
							},
							"collect(address,int24,int24,uint128,uint128)": {
								"details": "Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity. Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.",
								"params": {
									"amount0Requested": "How much token0 should be withdrawn from the fees owed",
									"amount1Requested": "How much token1 should be withdrawn from the fees owed",
									"recipient": "The address which should receive the fees collected",
									"tickLower": "The lower tick of the position for which to collect fees",
									"tickUpper": "The upper tick of the position for which to collect fees"
								},
								"returns": {
									"amount0": "The amount of fees collected in token0",
									"amount1": "The amount of fees collected in token1"
								}
							},
							"flash(address,uint256,uint256,bytes)": {
								"details": "The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallbackCan be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling with 0 amount{0,1} and sending the donation amount(s) from the callback",
								"params": {
									"amount0": "The amount of token0 to send",
									"amount1": "The amount of token1 to send",
									"data": "Any data to be passed through to the callback",
									"recipient": "The address which will receive the token0 and token1 amounts"
								}
							},
							"increaseObservationCardinalityNext(uint16)": {
								"details": "This method is no-op if the pool already has an observationCardinalityNext greater than or equal to the input observationCardinalityNext.",
								"params": {
									"observationCardinalityNext": "The desired minimum number of observations for the pool to store"
								}
							},
							"initialize(uint160)": {
								"details": "Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value",
								"params": {
									"sqrtPriceX96": "the initial sqrt price of the pool as a Q64.96"
								}
							},
							"mint(address,int24,int24,uint128,bytes)": {
								"details": "The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends on tickLower, tickUpper, the amount of liquidity, and the current price.",
								"params": {
									"amount": "The amount of liquidity to mint",
									"data": "Any data that should be passed through to the callback",
									"recipient": "The address for which the liquidity will be created",
									"tickLower": "The lower tick of the position in which to add liquidity",
									"tickUpper": "The upper tick of the position in which to add liquidity"
								},
								"returns": {
									"amount0": "The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback",
									"amount1": "The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback"
								}
							},
							"swap(address,bool,int256,uint160,bytes)": {
								"details": "The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback",
								"params": {
									"amountSpecified": "The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)",
									"data": "Any data to be passed through to the callback",
									"recipient": "The address to receive the output of the swap",
									"sqrtPriceLimitX96": "The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this value after the swap. If one for zero, the price cannot be greater than this value after the swap",
									"zeroForOne": "The direction of the swap, true for token0 to token1, false for token1 to token0"
								},
								"returns": {
									"amount0": "The delta of the balance of token0 of the pool, exact when negative, minimum when positive",
									"amount1": "The delta of the balance of token1 of the pool, exact when negative, minimum when positive"
								}
							}
						},
						"title": "Permissionless pool actions",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"burn(int24,int24,uint128)": "a34123a7",
							"collect(address,int24,int24,uint128,uint128)": "4f1eb3d8",
							"flash(address,uint256,uint256,bytes)": "490e6cbc",
							"increaseObservationCardinalityNext(uint16)": "32148f67",
							"initialize(uint160)": "f637731d",
							"mint(address,int24,int24,uint128,bytes)": "3c8a7d8d",
							"swap(address,bool,int256,uint160,bytes)": "128acb08"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint128\",\"name\":\"amount0Requested\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1Requested\",\"type\":\"uint128\"}],\"name\":\"collect\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"amount0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"flash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"observationCardinalityNext\",\"type\":\"uint16\"}],\"name\":\"increaseObservationCardinalityNext\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"zeroForOne\",\"type\":\"bool\"},{\"internalType\":\"int256\",\"name\":\"amountSpecified\",\"type\":\"int256\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceLimitX96\",\"type\":\"uint160\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"amount0\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"amount1\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"burn(int24,int24,uint128)\":{\"details\":\"Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0Fees must be collected separately via a call to #collect\",\"params\":{\"amount\":\"How much liquidity to burn\",\"tickLower\":\"The lower tick of the position for which to burn liquidity\",\"tickUpper\":\"The upper tick of the position for which to burn liquidity\"},\"returns\":{\"amount0\":\"The amount of token0 sent to the recipient\",\"amount1\":\"The amount of token1 sent to the recipient\"}},\"collect(address,int24,int24,uint128,uint128)\":{\"details\":\"Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity. Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\",\"params\":{\"amount0Requested\":\"How much token0 should be withdrawn from the fees owed\",\"amount1Requested\":\"How much token1 should be withdrawn from the fees owed\",\"recipient\":\"The address which should receive the fees collected\",\"tickLower\":\"The lower tick of the position for which to collect fees\",\"tickUpper\":\"The upper tick of the position for which to collect fees\"},\"returns\":{\"amount0\":\"The amount of fees collected in token0\",\"amount1\":\"The amount of fees collected in token1\"}},\"flash(address,uint256,uint256,bytes)\":{\"details\":\"The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallbackCan be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling with 0 amount{0,1} and sending the donation amount(s) from the callback\",\"params\":{\"amount0\":\"The amount of token0 to send\",\"amount1\":\"The amount of token1 to send\",\"data\":\"Any data to be passed through to the callback\",\"recipient\":\"The address which will receive the token0 and token1 amounts\"}},\"increaseObservationCardinalityNext(uint16)\":{\"details\":\"This method is no-op if the pool already has an observationCardinalityNext greater than or equal to the input observationCardinalityNext.\",\"params\":{\"observationCardinalityNext\":\"The desired minimum number of observations for the pool to store\"}},\"initialize(uint160)\":{\"details\":\"Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\",\"params\":{\"sqrtPriceX96\":\"the initial sqrt price of the pool as a Q64.96\"}},\"mint(address,int24,int24,uint128,bytes)\":{\"details\":\"The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends on tickLower, tickUpper, the amount of liquidity, and the current price.\",\"params\":{\"amount\":\"The amount of liquidity to mint\",\"data\":\"Any data that should be passed through to the callback\",\"recipient\":\"The address for which the liquidity will be created\",\"tickLower\":\"The lower tick of the position in which to add liquidity\",\"tickUpper\":\"The upper tick of the position in which to add liquidity\"},\"returns\":{\"amount0\":\"The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\",\"amount1\":\"The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback\"}},\"swap(address,bool,int256,uint160,bytes)\":{\"details\":\"The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback\",\"params\":{\"amountSpecified\":\"The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\",\"data\":\"Any data to be passed through to the callback\",\"recipient\":\"The address to receive the output of the swap\",\"sqrtPriceLimitX96\":\"The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this value after the swap. If one for zero, the price cannot be greater than this value after the swap\",\"zeroForOne\":\"The direction of the swap, true for token0 to token1, false for token1 to token0\"},\"returns\":{\"amount0\":\"The delta of the balance of token0 of the pool, exact when negative, minimum when positive\",\"amount1\":\"The delta of the balance of token1 of the pool, exact when negative, minimum when positive\"}}},\"title\":\"Permissionless pool actions\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"burn(int24,int24,uint128)\":{\"notice\":\"Burn liquidity from the sender and account tokens owed for the liquidity to the position\"},\"collect(address,int24,int24,uint128,uint128)\":{\"notice\":\"Collects tokens owed to a position\"},\"flash(address,uint256,uint256,bytes)\":{\"notice\":\"Receive token0 and/or token1 and pay it back, plus a fee, in the callback\"},\"increaseObservationCardinalityNext(uint16)\":{\"notice\":\"Increase the maximum number of price and liquidity observations that this pool will store\"},\"initialize(uint160)\":{\"notice\":\"Sets the initial price for the pool\"},\"mint(address,int24,int24,uint128,bytes)\":{\"notice\":\"Adds liquidity for the given recipient/tickLower/tickUpper position\"},\"swap(address,bool,int256,uint160,bytes)\":{\"notice\":\"Swap token0 for token1, or token1 for token0\"}},\"notice\":\"Contains pool methods that can be called by anyone\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol\":\"IUniswapV3PoolActions\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol\":{\"keccak256\":\"0x9453dd0e7442188667d01d9b65de3f1e14e9511ff3e303179a15f6fc267f7634\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://982f4328f956c3e60e67501e759eb292ac487f76460c774c50e9ae4fcc92aae5\",\"dweb:/ipfs/QmRnzEDsaqtd9PJEVcgQi7p5aV5pMSvRUoGZJAdwFUJxgZ\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"burn(int24,int24,uint128)": {
								"notice": "Burn liquidity from the sender and account tokens owed for the liquidity to the position"
							},
							"collect(address,int24,int24,uint128,uint128)": {
								"notice": "Collects tokens owed to a position"
							},
							"flash(address,uint256,uint256,bytes)": {
								"notice": "Receive token0 and/or token1 and pay it back, plus a fee, in the callback"
							},
							"increaseObservationCardinalityNext(uint16)": {
								"notice": "Increase the maximum number of price and liquidity observations that this pool will store"
							},
							"initialize(uint160)": {
								"notice": "Sets the initial price for the pool"
							},
							"mint(address,int24,int24,uint128,bytes)": {
								"notice": "Adds liquidity for the given recipient/tickLower/tickUpper position"
							},
							"swap(address,bool,int256,uint160,bytes)": {
								"notice": "Swap token0 for token1, or token1 for token0"
							}
						},
						"notice": "Contains pool methods that can be called by anyone",
						"version": 1
					}
				}
			},
			"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol": {
				"IUniswapV3PoolDerivedState": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "uint32[]",
									"name": "secondsAgos",
									"type": "uint32[]"
								}
							],
							"name": "observe",
							"outputs": [
								{
									"internalType": "int56[]",
									"name": "tickCumulatives",
									"type": "int56[]"
								},
								{
									"internalType": "uint160[]",
									"name": "secondsPerLiquidityCumulativeX128s",
									"type": "uint160[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								}
							],
							"name": "snapshotCumulativesInside",
							"outputs": [
								{
									"internalType": "int56",
									"name": "tickCumulativeInside",
									"type": "int56"
								},
								{
									"internalType": "uint160",
									"name": "secondsPerLiquidityInsideX128",
									"type": "uint160"
								},
								{
									"internalType": "uint32",
									"name": "secondsInside",
									"type": "uint32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"observe(uint32[])": {
								"details": "To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick, you must call it with secondsAgos = [3600, 0].The time weighted average tick represents the geometric time weighted average price of the pool, in log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.",
								"params": {
									"secondsAgos": "From how long ago each cumulative tick and liquidity value should be returned"
								},
								"returns": {
									"secondsPerLiquidityCumulativeX128s": "Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block timestamp",
									"tickCumulatives": "Cumulative tick values as of each `secondsAgos` from the current block timestamp"
								}
							},
							"snapshotCumulativesInside(int24,int24)": {
								"details": "Snapshots must only be compared to other snapshots, taken over a period for which a position existed. I.e., snapshots cannot be compared if a position is not held for the entire period between when the first snapshot is taken and the second snapshot is taken.",
								"params": {
									"tickLower": "The lower tick of the range",
									"tickUpper": "The upper tick of the range"
								},
								"returns": {
									"secondsInside": "The snapshot of seconds per liquidity for the range",
									"secondsPerLiquidityInsideX128": "The snapshot of seconds per liquidity for the range",
									"tickCumulativeInside": "The snapshot of the tick accumulator for the range"
								}
							}
						},
						"title": "Pool state that is not stored",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"observe(uint32[])": "883bdbfd",
							"snapshotCumulativesInside(int24,int24)": "a38807f2"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint32[]\",\"name\":\"secondsAgos\",\"type\":\"uint32[]\"}],\"name\":\"observe\",\"outputs\":[{\"internalType\":\"int56[]\",\"name\":\"tickCumulatives\",\"type\":\"int56[]\"},{\"internalType\":\"uint160[]\",\"name\":\"secondsPerLiquidityCumulativeX128s\",\"type\":\"uint160[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"}],\"name\":\"snapshotCumulativesInside\",\"outputs\":[{\"internalType\":\"int56\",\"name\":\"tickCumulativeInside\",\"type\":\"int56\"},{\"internalType\":\"uint160\",\"name\":\"secondsPerLiquidityInsideX128\",\"type\":\"uint160\"},{\"internalType\":\"uint32\",\"name\":\"secondsInside\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"observe(uint32[])\":{\"details\":\"To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick, you must call it with secondsAgos = [3600, 0].The time weighted average tick represents the geometric time weighted average price of the pool, in log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\",\"params\":{\"secondsAgos\":\"From how long ago each cumulative tick and liquidity value should be returned\"},\"returns\":{\"secondsPerLiquidityCumulativeX128s\":\"Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block timestamp\",\"tickCumulatives\":\"Cumulative tick values as of each `secondsAgos` from the current block timestamp\"}},\"snapshotCumulativesInside(int24,int24)\":{\"details\":\"Snapshots must only be compared to other snapshots, taken over a period for which a position existed. I.e., snapshots cannot be compared if a position is not held for the entire period between when the first snapshot is taken and the second snapshot is taken.\",\"params\":{\"tickLower\":\"The lower tick of the range\",\"tickUpper\":\"The upper tick of the range\"},\"returns\":{\"secondsInside\":\"The snapshot of seconds per liquidity for the range\",\"secondsPerLiquidityInsideX128\":\"The snapshot of seconds per liquidity for the range\",\"tickCumulativeInside\":\"The snapshot of the tick accumulator for the range\"}}},\"title\":\"Pool state that is not stored\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"observe(uint32[])\":{\"notice\":\"Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\"},\"snapshotCumulativesInside(int24,int24)\":{\"notice\":\"Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\"}},\"notice\":\"Contains view functions to provide information about the pool that is computed rather than stored on the blockchain. The functions here may have variable gas costs.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol\":\"IUniswapV3PoolDerivedState\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol\":{\"keccak256\":\"0xe603ac5b17ecdee73ba2b27efdf386c257a19c14206e87eee77e2017b742d9e5\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://8febc9bdb399a4d94bb89f5377732652e2400e4a8dee808201ade6848f9004e7\",\"dweb:/ipfs/QmaKDqYYFU4d2W2iN77aDHptfbFmYZRrMYXHeGpJmM8C1c\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"observe(uint32[])": {
								"notice": "Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp"
							},
							"snapshotCumulativesInside(int24,int24)": {
								"notice": "Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range"
							}
						},
						"notice": "Contains view functions to provide information about the pool that is computed rather than stored on the blockchain. The functions here may have variable gas costs.",
						"version": 1
					}
				}
			},
			"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol": {
				"IUniswapV3PoolEvents": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "amount",
									"type": "uint128"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"name": "Burn",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "amount0",
									"type": "uint128"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "amount1",
									"type": "uint128"
								}
							],
							"name": "Collect",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "amount0",
									"type": "uint128"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "amount1",
									"type": "uint128"
								}
							],
							"name": "CollectProtocol",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "paid0",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "paid1",
									"type": "uint256"
								}
							],
							"name": "Flash",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint16",
									"name": "observationCardinalityNextOld",
									"type": "uint16"
								},
								{
									"indexed": false,
									"internalType": "uint16",
									"name": "observationCardinalityNextNew",
									"type": "uint16"
								}
							],
							"name": "IncreaseObservationCardinalityNext",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint160",
									"name": "sqrtPriceX96",
									"type": "uint160"
								},
								{
									"indexed": false,
									"internalType": "int24",
									"name": "tick",
									"type": "int24"
								}
							],
							"name": "Initialize",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "amount",
									"type": "uint128"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"name": "Mint",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "feeProtocol0Old",
									"type": "uint8"
								},
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "feeProtocol1Old",
									"type": "uint8"
								},
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "feeProtocol0New",
									"type": "uint8"
								},
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "feeProtocol1New",
									"type": "uint8"
								}
							],
							"name": "SetFeeProtocol",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "int256",
									"name": "amount0",
									"type": "int256"
								},
								{
									"indexed": false,
									"internalType": "int256",
									"name": "amount1",
									"type": "int256"
								},
								{
									"indexed": false,
									"internalType": "uint160",
									"name": "sqrtPriceX96",
									"type": "uint160"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "liquidity",
									"type": "uint128"
								},
								{
									"indexed": false,
									"internalType": "int24",
									"name": "tick",
									"type": "int24"
								}
							],
							"name": "Swap",
							"type": "event"
						}
					],
					"devdoc": {
						"events": {
							"Burn(address,int24,int24,uint128,uint256,uint256)": {
								"details": "Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect",
								"params": {
									"amount": "The amount of liquidity to remove",
									"amount0": "The amount of token0 withdrawn",
									"amount1": "The amount of token1 withdrawn",
									"owner": "The owner of the position for which liquidity is removed",
									"tickLower": "The lower tick of the position",
									"tickUpper": "The upper tick of the position"
								}
							},
							"Collect(address,address,int24,int24,uint128,uint128)": {
								"details": "Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees",
								"params": {
									"amount0": "The amount of token0 fees collected",
									"amount1": "The amount of token1 fees collected",
									"owner": "The owner of the position for which fees are collected",
									"tickLower": "The lower tick of the position",
									"tickUpper": "The upper tick of the position"
								}
							},
							"CollectProtocol(address,address,uint128,uint128)": {
								"params": {
									"amount0": "The amount of token1 protocol fees that is withdrawn",
									"recipient": "The address that receives the collected protocol fees",
									"sender": "The address that collects the protocol fees"
								}
							},
							"Flash(address,address,uint256,uint256,uint256,uint256)": {
								"params": {
									"amount0": "The amount of token0 that was flashed",
									"amount1": "The amount of token1 that was flashed",
									"paid0": "The amount of token0 paid for the flash, which can exceed the amount0 plus the fee",
									"paid1": "The amount of token1 paid for the flash, which can exceed the amount1 plus the fee",
									"recipient": "The address that received the tokens from flash",
									"sender": "The address that initiated the swap call, and that received the callback"
								}
							},
							"IncreaseObservationCardinalityNext(uint16,uint16)": {
								"details": "observationCardinalityNext is not the observation cardinality until an observation is written at the index just before a mint/swap/burn.",
								"params": {
									"observationCardinalityNextNew": "The updated value of the next observation cardinality",
									"observationCardinalityNextOld": "The previous value of the next observation cardinality"
								}
							},
							"Initialize(uint160,int24)": {
								"details": "Mint/Burn/Swap cannot be emitted by the pool before Initialize",
								"params": {
									"sqrtPriceX96": "The initial sqrt price of the pool, as a Q64.96",
									"tick": "The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool"
								}
							},
							"Mint(address,address,int24,int24,uint128,uint256,uint256)": {
								"params": {
									"amount": "The amount of liquidity minted to the position range",
									"amount0": "How much token0 was required for the minted liquidity",
									"amount1": "How much token1 was required for the minted liquidity",
									"owner": "The owner of the position and recipient of any minted liquidity",
									"sender": "The address that minted the liquidity",
									"tickLower": "The lower tick of the position",
									"tickUpper": "The upper tick of the position"
								}
							},
							"SetFeeProtocol(uint8,uint8,uint8,uint8)": {
								"params": {
									"feeProtocol0New": "The updated value of the token0 protocol fee",
									"feeProtocol0Old": "The previous value of the token0 protocol fee",
									"feeProtocol1New": "The updated value of the token1 protocol fee",
									"feeProtocol1Old": "The previous value of the token1 protocol fee"
								}
							},
							"Swap(address,address,int256,int256,uint160,uint128,int24)": {
								"params": {
									"amount0": "The delta of the token0 balance of the pool",
									"amount1": "The delta of the token1 balance of the pool",
									"liquidity": "The liquidity of the pool after the swap",
									"recipient": "The address that received the output of the swap",
									"sender": "The address that initiated the swap call, and that received the callback",
									"sqrtPriceX96": "The sqrt(price) of the pool after the swap, as a Q64.96",
									"tick": "The log base 1.0001 of price of the pool after the swap"
								}
							}
						},
						"kind": "dev",
						"methods": {},
						"title": "Events emitted by a pool",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount0\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount1\",\"type\":\"uint128\"}],\"name\":\"Collect\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount0\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount1\",\"type\":\"uint128\"}],\"name\":\"CollectProtocol\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paid0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paid1\",\"type\":\"uint256\"}],\"name\":\"Flash\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"observationCardinalityNextOld\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"observationCardinalityNextNew\",\"type\":\"uint16\"}],\"name\":\"IncreaseObservationCardinalityNext\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"},{\"indexed\":false,\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"}],\"name\":\"Initialize\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"feeProtocol0Old\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"feeProtocol1Old\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"feeProtocol0New\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"feeProtocol1New\",\"type\":\"uint8\"}],\"name\":\"SetFeeProtocol\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"amount0\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"amount1\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"}],\"name\":\"Swap\",\"type\":\"event\"}],\"devdoc\":{\"events\":{\"Burn(address,int24,int24,uint128,uint256,uint256)\":{\"details\":\"Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect\",\"params\":{\"amount\":\"The amount of liquidity to remove\",\"amount0\":\"The amount of token0 withdrawn\",\"amount1\":\"The amount of token1 withdrawn\",\"owner\":\"The owner of the position for which liquidity is removed\",\"tickLower\":\"The lower tick of the position\",\"tickUpper\":\"The upper tick of the position\"}},\"Collect(address,address,int24,int24,uint128,uint128)\":{\"details\":\"Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees\",\"params\":{\"amount0\":\"The amount of token0 fees collected\",\"amount1\":\"The amount of token1 fees collected\",\"owner\":\"The owner of the position for which fees are collected\",\"tickLower\":\"The lower tick of the position\",\"tickUpper\":\"The upper tick of the position\"}},\"CollectProtocol(address,address,uint128,uint128)\":{\"params\":{\"amount0\":\"The amount of token1 protocol fees that is withdrawn\",\"recipient\":\"The address that receives the collected protocol fees\",\"sender\":\"The address that collects the protocol fees\"}},\"Flash(address,address,uint256,uint256,uint256,uint256)\":{\"params\":{\"amount0\":\"The amount of token0 that was flashed\",\"amount1\":\"The amount of token1 that was flashed\",\"paid0\":\"The amount of token0 paid for the flash, which can exceed the amount0 plus the fee\",\"paid1\":\"The amount of token1 paid for the flash, which can exceed the amount1 plus the fee\",\"recipient\":\"The address that received the tokens from flash\",\"sender\":\"The address that initiated the swap call, and that received the callback\"}},\"IncreaseObservationCardinalityNext(uint16,uint16)\":{\"details\":\"observationCardinalityNext is not the observation cardinality until an observation is written at the index just before a mint/swap/burn.\",\"params\":{\"observationCardinalityNextNew\":\"The updated value of the next observation cardinality\",\"observationCardinalityNextOld\":\"The previous value of the next observation cardinality\"}},\"Initialize(uint160,int24)\":{\"details\":\"Mint/Burn/Swap cannot be emitted by the pool before Initialize\",\"params\":{\"sqrtPriceX96\":\"The initial sqrt price of the pool, as a Q64.96\",\"tick\":\"The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool\"}},\"Mint(address,address,int24,int24,uint128,uint256,uint256)\":{\"params\":{\"amount\":\"The amount of liquidity minted to the position range\",\"amount0\":\"How much token0 was required for the minted liquidity\",\"amount1\":\"How much token1 was required for the minted liquidity\",\"owner\":\"The owner of the position and recipient of any minted liquidity\",\"sender\":\"The address that minted the liquidity\",\"tickLower\":\"The lower tick of the position\",\"tickUpper\":\"The upper tick of the position\"}},\"SetFeeProtocol(uint8,uint8,uint8,uint8)\":{\"params\":{\"feeProtocol0New\":\"The updated value of the token0 protocol fee\",\"feeProtocol0Old\":\"The previous value of the token0 protocol fee\",\"feeProtocol1New\":\"The updated value of the token1 protocol fee\",\"feeProtocol1Old\":\"The previous value of the token1 protocol fee\"}},\"Swap(address,address,int256,int256,uint160,uint128,int24)\":{\"params\":{\"amount0\":\"The delta of the token0 balance of the pool\",\"amount1\":\"The delta of the token1 balance of the pool\",\"liquidity\":\"The liquidity of the pool after the swap\",\"recipient\":\"The address that received the output of the swap\",\"sender\":\"The address that initiated the swap call, and that received the callback\",\"sqrtPriceX96\":\"The sqrt(price) of the pool after the swap, as a Q64.96\",\"tick\":\"The log base 1.0001 of price of the pool after the swap\"}}},\"kind\":\"dev\",\"methods\":{},\"title\":\"Events emitted by a pool\",\"version\":1},\"userdoc\":{\"events\":{\"Burn(address,int24,int24,uint128,uint256,uint256)\":{\"notice\":\"Emitted when a position's liquidity is removed\"},\"Collect(address,address,int24,int24,uint128,uint128)\":{\"notice\":\"Emitted when fees are collected by the owner of a position\"},\"CollectProtocol(address,address,uint128,uint128)\":{\"notice\":\"Emitted when the collected protocol fees are withdrawn by the factory owner\"},\"Flash(address,address,uint256,uint256,uint256,uint256)\":{\"notice\":\"Emitted by the pool for any flashes of token0/token1\"},\"IncreaseObservationCardinalityNext(uint16,uint16)\":{\"notice\":\"Emitted by the pool for increases to the number of observations that can be stored\"},\"Initialize(uint160,int24)\":{\"notice\":\"Emitted exactly once by a pool when #initialize is first called on the pool\"},\"Mint(address,address,int24,int24,uint128,uint256,uint256)\":{\"notice\":\"Emitted when liquidity is minted for a given position\"},\"SetFeeProtocol(uint8,uint8,uint8,uint8)\":{\"notice\":\"Emitted when the protocol fee is changed by the pool\"},\"Swap(address,address,int256,int256,uint160,uint128,int24)\":{\"notice\":\"Emitted by the pool for any swaps between token0 and token1\"}},\"kind\":\"user\",\"methods\":{},\"notice\":\"Contains all events emitted by the pool\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol\":\"IUniswapV3PoolEvents\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol\":{\"keccak256\":\"0x8071514d0fe5d17d6fbd31c191cdfb703031c24e0ece3621d88ab10e871375cd\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://d0b571930cc7488b1d546a7e9cea7c52d8b3c4e207da657ed0e0db7343b8cd03\",\"dweb:/ipfs/QmaGK6vVwB95QSTR1XMYvrh7ivYAYZxi3fD7v6VMA4jZ39\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"events": {
							"Burn(address,int24,int24,uint128,uint256,uint256)": {
								"notice": "Emitted when a position's liquidity is removed"
							},
							"Collect(address,address,int24,int24,uint128,uint128)": {
								"notice": "Emitted when fees are collected by the owner of a position"
							},
							"CollectProtocol(address,address,uint128,uint128)": {
								"notice": "Emitted when the collected protocol fees are withdrawn by the factory owner"
							},
							"Flash(address,address,uint256,uint256,uint256,uint256)": {
								"notice": "Emitted by the pool for any flashes of token0/token1"
							},
							"IncreaseObservationCardinalityNext(uint16,uint16)": {
								"notice": "Emitted by the pool for increases to the number of observations that can be stored"
							},
							"Initialize(uint160,int24)": {
								"notice": "Emitted exactly once by a pool when #initialize is first called on the pool"
							},
							"Mint(address,address,int24,int24,uint128,uint256,uint256)": {
								"notice": "Emitted when liquidity is minted for a given position"
							},
							"SetFeeProtocol(uint8,uint8,uint8,uint8)": {
								"notice": "Emitted when the protocol fee is changed by the pool"
							},
							"Swap(address,address,int256,int256,uint160,uint128,int24)": {
								"notice": "Emitted by the pool for any swaps between token0 and token1"
							}
						},
						"kind": "user",
						"methods": {},
						"notice": "Contains all events emitted by the pool",
						"version": 1
					}
				}
			},
			"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol": {
				"IUniswapV3PoolImmutables": {
					"abi": [
						{
							"inputs": [],
							"name": "factory",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "fee",
							"outputs": [
								{
									"internalType": "uint24",
									"name": "",
									"type": "uint24"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "maxLiquidityPerTick",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "",
									"type": "uint128"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "tickSpacing",
							"outputs": [
								{
									"internalType": "int24",
									"name": "",
									"type": "int24"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "token0",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "token1",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"factory()": {
								"returns": {
									"_0": "The contract address"
								}
							},
							"fee()": {
								"returns": {
									"_0": "The fee"
								}
							},
							"maxLiquidityPerTick()": {
								"details": "This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool",
								"returns": {
									"_0": "The max amount of liquidity per tick"
								}
							},
							"tickSpacing()": {
								"details": "Ticks can only be used at multiples of this value, minimum of 1 and always positive e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ... This value is an int24 to avoid casting even though it is always positive.",
								"returns": {
									"_0": "The tick spacing"
								}
							},
							"token0()": {
								"returns": {
									"_0": "The token contract address"
								}
							},
							"token1()": {
								"returns": {
									"_0": "The token contract address"
								}
							}
						},
						"title": "Pool state that never changes",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"factory()": "c45a0155",
							"fee()": "ddca3f43",
							"maxLiquidityPerTick()": "70cf754a",
							"tickSpacing()": "d0c93a7c",
							"token0()": "0dfe1681",
							"token1()": "d21220a7"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxLiquidityPerTick\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tickSpacing\",\"outputs\":[{\"internalType\":\"int24\",\"name\":\"\",\"type\":\"int24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token0\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"factory()\":{\"returns\":{\"_0\":\"The contract address\"}},\"fee()\":{\"returns\":{\"_0\":\"The fee\"}},\"maxLiquidityPerTick()\":{\"details\":\"This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\",\"returns\":{\"_0\":\"The max amount of liquidity per tick\"}},\"tickSpacing()\":{\"details\":\"Ticks can only be used at multiples of this value, minimum of 1 and always positive e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ... This value is an int24 to avoid casting even though it is always positive.\",\"returns\":{\"_0\":\"The tick spacing\"}},\"token0()\":{\"returns\":{\"_0\":\"The token contract address\"}},\"token1()\":{\"returns\":{\"_0\":\"The token contract address\"}}},\"title\":\"Pool state that never changes\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"factory()\":{\"notice\":\"The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface\"},\"fee()\":{\"notice\":\"The pool's fee in hundredths of a bip, i.e. 1e-6\"},\"maxLiquidityPerTick()\":{\"notice\":\"The maximum amount of position liquidity that can use any tick in the range\"},\"tickSpacing()\":{\"notice\":\"The pool tick spacing\"},\"token0()\":{\"notice\":\"The first of the two tokens of the pool, sorted by address\"},\"token1()\":{\"notice\":\"The second of the two tokens of the pool, sorted by address\"}},\"notice\":\"These parameters are fixed for a pool forever, i.e., the methods will always return the same values\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol\":\"IUniswapV3PoolImmutables\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol\":{\"keccak256\":\"0xf6e5d2cd1139c4c276bdbc8e1d2b256e456c866a91f1b868da265c6d2685c3f7\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://b99c8c9ae8e27ee6559e5866bea82cbc9ffc8247f8d15b7422a4deb287d4d047\",\"dweb:/ipfs/QmfL8gaqt3ffAnm6nVj5ksuNpLygXuL3xq5VBqrkwC2JJ3\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"factory()": {
								"notice": "The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface"
							},
							"fee()": {
								"notice": "The pool's fee in hundredths of a bip, i.e. 1e-6"
							},
							"maxLiquidityPerTick()": {
								"notice": "The maximum amount of position liquidity that can use any tick in the range"
							},
							"tickSpacing()": {
								"notice": "The pool tick spacing"
							},
							"token0()": {
								"notice": "The first of the two tokens of the pool, sorted by address"
							},
							"token1()": {
								"notice": "The second of the two tokens of the pool, sorted by address"
							}
						},
						"notice": "These parameters are fixed for a pool forever, i.e., the methods will always return the same values",
						"version": 1
					}
				}
			},
			"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol": {
				"IUniswapV3PoolOwnerActions": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint128",
									"name": "amount0Requested",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "amount1Requested",
									"type": "uint128"
								}
							],
							"name": "collectProtocol",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "amount0",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "amount1",
									"type": "uint128"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint8",
									"name": "feeProtocol0",
									"type": "uint8"
								},
								{
									"internalType": "uint8",
									"name": "feeProtocol1",
									"type": "uint8"
								}
							],
							"name": "setFeeProtocol",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"collectProtocol(address,uint128,uint128)": {
								"params": {
									"amount0Requested": "The maximum amount of token0 to send, can be 0 to collect fees in only token1",
									"amount1Requested": "The maximum amount of token1 to send, can be 0 to collect fees in only token0",
									"recipient": "The address to which collected protocol fees should be sent"
								},
								"returns": {
									"amount0": "The protocol fee collected in token0",
									"amount1": "The protocol fee collected in token1"
								}
							},
							"setFeeProtocol(uint8,uint8)": {
								"params": {
									"feeProtocol0": "new protocol fee for token0 of the pool",
									"feeProtocol1": "new protocol fee for token1 of the pool"
								}
							}
						},
						"title": "Permissioned pool actions",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"collectProtocol(address,uint128,uint128)": "85b66729",
							"setFeeProtocol(uint8,uint8)": "8206a4d1"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"amount0Requested\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1Requested\",\"type\":\"uint128\"}],\"name\":\"collectProtocol\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"amount0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"feeProtocol0\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"feeProtocol1\",\"type\":\"uint8\"}],\"name\":\"setFeeProtocol\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"collectProtocol(address,uint128,uint128)\":{\"params\":{\"amount0Requested\":\"The maximum amount of token0 to send, can be 0 to collect fees in only token1\",\"amount1Requested\":\"The maximum amount of token1 to send, can be 0 to collect fees in only token0\",\"recipient\":\"The address to which collected protocol fees should be sent\"},\"returns\":{\"amount0\":\"The protocol fee collected in token0\",\"amount1\":\"The protocol fee collected in token1\"}},\"setFeeProtocol(uint8,uint8)\":{\"params\":{\"feeProtocol0\":\"new protocol fee for token0 of the pool\",\"feeProtocol1\":\"new protocol fee for token1 of the pool\"}}},\"title\":\"Permissioned pool actions\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"collectProtocol(address,uint128,uint128)\":{\"notice\":\"Collect the protocol fee accrued to the pool\"},\"setFeeProtocol(uint8,uint8)\":{\"notice\":\"Set the denominator of the protocol's % share of the fees\"}},\"notice\":\"Contains pool methods that may only be called by the factory owner\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol\":\"IUniswapV3PoolOwnerActions\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol\":{\"keccak256\":\"0x759b78a2918af9e99e246dc3af084f654e48ef32bb4e4cb8a966aa3dcaece235\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://64144fb96e1c7fdba87305acadb98a198d26a3d46c097cb3a666e567f6f29735\",\"dweb:/ipfs/QmUnWVwN9FKB9uV5Pr8YfLpWZnYM2DENnRMaadZ492JS9u\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"collectProtocol(address,uint128,uint128)": {
								"notice": "Collect the protocol fee accrued to the pool"
							},
							"setFeeProtocol(uint8,uint8)": {
								"notice": "Set the denominator of the protocol's % share of the fees"
							}
						},
						"notice": "Contains pool methods that may only be called by the factory owner",
						"version": 1
					}
				}
			},
			"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol": {
				"IUniswapV3PoolState": {
					"abi": [
						{
							"inputs": [],
							"name": "feeGrowthGlobal0X128",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "feeGrowthGlobal1X128",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "liquidity",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "",
									"type": "uint128"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "index",
									"type": "uint256"
								}
							],
							"name": "observations",
							"outputs": [
								{
									"internalType": "uint32",
									"name": "blockTimestamp",
									"type": "uint32"
								},
								{
									"internalType": "int56",
									"name": "tickCumulative",
									"type": "int56"
								},
								{
									"internalType": "uint160",
									"name": "secondsPerLiquidityCumulativeX128",
									"type": "uint160"
								},
								{
									"internalType": "bool",
									"name": "initialized",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "key",
									"type": "bytes32"
								}
							],
							"name": "positions",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "_liquidity",
									"type": "uint128"
								},
								{
									"internalType": "uint256",
									"name": "feeGrowthInside0LastX128",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "feeGrowthInside1LastX128",
									"type": "uint256"
								},
								{
									"internalType": "uint128",
									"name": "tokensOwed0",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "tokensOwed1",
									"type": "uint128"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "protocolFees",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "token0",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "token1",
									"type": "uint128"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "slot0",
							"outputs": [
								{
									"internalType": "uint160",
									"name": "sqrtPriceX96",
									"type": "uint160"
								},
								{
									"internalType": "int24",
									"name": "tick",
									"type": "int24"
								},
								{
									"internalType": "uint16",
									"name": "observationIndex",
									"type": "uint16"
								},
								{
									"internalType": "uint16",
									"name": "observationCardinality",
									"type": "uint16"
								},
								{
									"internalType": "uint16",
									"name": "observationCardinalityNext",
									"type": "uint16"
								},
								{
									"internalType": "uint8",
									"name": "feeProtocol",
									"type": "uint8"
								},
								{
									"internalType": "bool",
									"name": "unlocked",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "int16",
									"name": "wordPosition",
									"type": "int16"
								}
							],
							"name": "tickBitmap",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "int24",
									"name": "tick",
									"type": "int24"
								}
							],
							"name": "ticks",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "liquidityGross",
									"type": "uint128"
								},
								{
									"internalType": "int128",
									"name": "liquidityNet",
									"type": "int128"
								},
								{
									"internalType": "uint256",
									"name": "feeGrowthOutside0X128",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "feeGrowthOutside1X128",
									"type": "uint256"
								},
								{
									"internalType": "int56",
									"name": "tickCumulativeOutside",
									"type": "int56"
								},
								{
									"internalType": "uint160",
									"name": "secondsPerLiquidityOutsideX128",
									"type": "uint160"
								},
								{
									"internalType": "uint32",
									"name": "secondsOutside",
									"type": "uint32"
								},
								{
									"internalType": "bool",
									"name": "initialized",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"feeGrowthGlobal0X128()": {
								"details": "This value can overflow the uint256"
							},
							"feeGrowthGlobal1X128()": {
								"details": "This value can overflow the uint256"
							},
							"liquidity()": {
								"details": "This value has no relationship to the total liquidity across all ticks"
							},
							"observations(uint256)": {
								"details": "You most likely want to use #observe() instead of this method to get an observation as of some amount of time ago, rather than at a specific index in the array.",
								"params": {
									"index": "The element of the observations array to fetch"
								},
								"returns": {
									"blockTimestamp": "The timestamp of the observation, Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp, Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp, Returns initialized whether the observation has been initialized and the values are safe to use"
								}
							},
							"positions(bytes32)": {
								"params": {
									"key": "The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper"
								},
								"returns": {
									"_liquidity": "The amount of liquidity in the position, Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke, Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke, Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke, Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke"
								}
							},
							"protocolFees()": {
								"details": "Protocol fees will never exceed uint128 max in either token"
							},
							"slot0()": {
								"returns": {
									"sqrtPriceX96": "The current price of the pool as a sqrt(token1/token0) Q64.96 value tick The current tick of the pool, i.e. according to the last tick transition that was run. This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick boundary. observationIndex The index of the last oracle observation that was written, observationCardinality The current maximum number of observations stored in the pool, observationCardinalityNext The next maximum number of observations, to be updated when the observation. feeProtocol The protocol fee for both tokens of the pool. Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0 is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee. unlocked Whether the pool is currently locked to reentrancy"
								}
							},
							"ticks(int24)": {
								"params": {
									"tick": "The tick to look up"
								},
								"returns": {
									"liquidityGross": "the total amount of position liquidity that uses the pool either as tick lower or tick upper, liquidityNet how much liquidity changes when the pool price crosses the tick, feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0, feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1, tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick, secondsOutside the seconds spent on the other side of the tick from the current tick, initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false. Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0. In addition, these values are only relative and must be used only in comparison to previous snapshots for a specific position."
								}
							}
						},
						"title": "Pool state that can change",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"feeGrowthGlobal0X128()": "f3058399",
							"feeGrowthGlobal1X128()": "46141319",
							"liquidity()": "1a686502",
							"observations(uint256)": "252c09d7",
							"positions(bytes32)": "514ea4bf",
							"protocolFees()": "1ad8b03b",
							"slot0()": "3850c7bd",
							"tickBitmap(int16)": "5339c296",
							"ticks(int24)": "f30dba93"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"feeGrowthGlobal0X128\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeGrowthGlobal1X128\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidity\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"observations\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"blockTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"int56\",\"name\":\"tickCumulative\",\"type\":\"int56\"},{\"internalType\":\"uint160\",\"name\":\"secondsPerLiquidityCumulativeX128\",\"type\":\"uint160\"},{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"positions\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"_liquidity\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthInside0LastX128\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthInside1LastX128\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"tokensOwed0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"tokensOwed1\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFees\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"token0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"token1\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slot0\",\"outputs\":[{\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"},{\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"},{\"internalType\":\"uint16\",\"name\":\"observationIndex\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"observationCardinality\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"observationCardinalityNext\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"feeProtocol\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"unlocked\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int16\",\"name\":\"wordPosition\",\"type\":\"int16\"}],\"name\":\"tickBitmap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"}],\"name\":\"ticks\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"liquidityGross\",\"type\":\"uint128\"},{\"internalType\":\"int128\",\"name\":\"liquidityNet\",\"type\":\"int128\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthOutside0X128\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthOutside1X128\",\"type\":\"uint256\"},{\"internalType\":\"int56\",\"name\":\"tickCumulativeOutside\",\"type\":\"int56\"},{\"internalType\":\"uint160\",\"name\":\"secondsPerLiquidityOutsideX128\",\"type\":\"uint160\"},{\"internalType\":\"uint32\",\"name\":\"secondsOutside\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"feeGrowthGlobal0X128()\":{\"details\":\"This value can overflow the uint256\"},\"feeGrowthGlobal1X128()\":{\"details\":\"This value can overflow the uint256\"},\"liquidity()\":{\"details\":\"This value has no relationship to the total liquidity across all ticks\"},\"observations(uint256)\":{\"details\":\"You most likely want to use #observe() instead of this method to get an observation as of some amount of time ago, rather than at a specific index in the array.\",\"params\":{\"index\":\"The element of the observations array to fetch\"},\"returns\":{\"blockTimestamp\":\"The timestamp of the observation, Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp, Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp, Returns initialized whether the observation has been initialized and the values are safe to use\"}},\"positions(bytes32)\":{\"params\":{\"key\":\"The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\"},\"returns\":{\"_liquidity\":\"The amount of liquidity in the position, Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke, Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke, Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke, Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke\"}},\"protocolFees()\":{\"details\":\"Protocol fees will never exceed uint128 max in either token\"},\"slot0()\":{\"returns\":{\"sqrtPriceX96\":\"The current price of the pool as a sqrt(token1/token0) Q64.96 value tick The current tick of the pool, i.e. according to the last tick transition that was run. This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick boundary. observationIndex The index of the last oracle observation that was written, observationCardinality The current maximum number of observations stored in the pool, observationCardinalityNext The next maximum number of observations, to be updated when the observation. feeProtocol The protocol fee for both tokens of the pool. Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0 is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee. unlocked Whether the pool is currently locked to reentrancy\"}},\"ticks(int24)\":{\"params\":{\"tick\":\"The tick to look up\"},\"returns\":{\"liquidityGross\":\"the total amount of position liquidity that uses the pool either as tick lower or tick upper, liquidityNet how much liquidity changes when the pool price crosses the tick, feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0, feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1, tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick, secondsOutside the seconds spent on the other side of the tick from the current tick, initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false. Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0. In addition, these values are only relative and must be used only in comparison to previous snapshots for a specific position.\"}}},\"title\":\"Pool state that can change\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"feeGrowthGlobal0X128()\":{\"notice\":\"The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\"},\"feeGrowthGlobal1X128()\":{\"notice\":\"The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\"},\"liquidity()\":{\"notice\":\"The currently in range liquidity available to the pool\"},\"observations(uint256)\":{\"notice\":\"Returns data about a specific observation index\"},\"positions(bytes32)\":{\"notice\":\"Returns the information about a position by the position's key\"},\"protocolFees()\":{\"notice\":\"The amounts of token0 and token1 that are owed to the protocol\"},\"slot0()\":{\"notice\":\"The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas when accessed externally.\"},\"tickBitmap(int16)\":{\"notice\":\"Returns 256 packed tick initialized boolean values. See TickBitmap for more information\"},\"ticks(int24)\":{\"notice\":\"Look up information about a specific tick in the pool\"}},\"notice\":\"These methods compose the pool's state, and can change with any frequency including multiple times per transaction\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol\":\"IUniswapV3PoolState\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol\":{\"keccak256\":\"0x852dc1f5df7dcf7f11e7bb3eed79f0cea72ad4b25f6a9d2c35aafb48925fd49f\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://ed63907c38ff36b0e22bc9ffc53e791ea74f0d4f0e7c257fdfb5aaf8825b1f0f\",\"dweb:/ipfs/QmSQrckghEjs6HVsA5GVgpNpZWvTXMY5eQLF7cN6deFeEg\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"feeGrowthGlobal0X128()": {
								"notice": "The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool"
							},
							"feeGrowthGlobal1X128()": {
								"notice": "The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool"
							},
							"liquidity()": {
								"notice": "The currently in range liquidity available to the pool"
							},
							"observations(uint256)": {
								"notice": "Returns data about a specific observation index"
							},
							"positions(bytes32)": {
								"notice": "Returns the information about a position by the position's key"
							},
							"protocolFees()": {
								"notice": "The amounts of token0 and token1 that are owed to the protocol"
							},
							"slot0()": {
								"notice": "The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas when accessed externally."
							},
							"tickBitmap(int16)": {
								"notice": "Returns 256 packed tick initialized boolean values. See TickBitmap for more information"
							},
							"ticks(int24)": {
								"notice": "Look up information about a specific tick in the pool"
							}
						},
						"notice": "These methods compose the pool's state, and can change with any frequency including multiple times per transaction",
						"version": 1
					}
				}
			},
			"@uniswap/v3-core/contracts/libraries/LowGasSafeMath.sol": {
				"LowGasSafeMath": {
					"abi": [],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"title": "Optimized overflow and underflow safe math operations",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@uniswap/v3-core/contracts/libraries/LowGasSafeMath.sol\":249:1695  library LowGasSafeMath {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  invalid\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@uniswap/v3-core/contracts/libraries/LowGasSafeMath.sol\":249:1695  library LowGasSafeMath {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa264697066735822122091a1d3d8cf98d4661df3db6ed46ce35fba6243786bd138b8687b18a6f683182164736f6c63430007060033\n}\n",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122091a1d3d8cf98d4661df3db6ed46ce35fba6243786bd138b8687b18a6f683182164736f6c63430007060033",
							"opcodes": "PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP2 LOG1 0xD3 0xD8 0xCF SWAP9 0xD4 PUSH7 0x1DF3DB6ED46CE3 0x5F 0xBA PUSH3 0x43786B 0xD1 CODESIZE 0xB8 PUSH9 0x7B18A6F68318216473 PUSH16 0x6C634300070600330000000000000000 ",
							"sourceMap": "249:1446:10:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122091a1d3d8cf98d4661df3db6ed46ce35fba6243786bd138b8687b18a6f683182164736f6c63430007060033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP2 LOG1 0xD3 0xD8 0xCF SWAP9 0xD4 PUSH7 0x1DF3DB6ED46CE3 0x5F 0xBA PUSH3 0x43786B 0xD1 CODESIZE 0xB8 PUSH9 0x7B18A6F68318216473 PUSH16 0x6C634300070600330000000000000000 ",
							"sourceMap": "249:1446:10:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							},
							"internal": {
								"add(int256,int256)": "infinite",
								"add(uint256,uint256)": "infinite",
								"mul(uint256,uint256)": "infinite",
								"sub(int256,int256)": "infinite",
								"sub(uint256,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 249,
									"end": 1695,
									"name": "PUSH #[$]",
									"source": 10,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 249,
									"end": 1695,
									"name": "PUSH [$]",
									"source": 10,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 249,
									"end": 1695,
									"name": "PUSH",
									"source": 10,
									"value": "B"
								},
								{
									"begin": 249,
									"end": 1695,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 249,
									"end": 1695,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 249,
									"end": 1695,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 249,
									"end": 1695,
									"name": "CODECOPY",
									"source": 10
								},
								{
									"begin": 249,
									"end": 1695,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 249,
									"end": 1695,
									"name": "MLOAD",
									"source": 10
								},
								{
									"begin": 249,
									"end": 1695,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 249,
									"end": 1695,
									"name": "BYTE",
									"source": 10
								},
								{
									"begin": 249,
									"end": 1695,
									"name": "PUSH",
									"source": 10,
									"value": "73"
								},
								{
									"begin": 249,
									"end": 1695,
									"name": "EQ",
									"source": 10
								},
								{
									"begin": 249,
									"end": 1695,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "1"
								},
								{
									"begin": 249,
									"end": 1695,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": 249,
									"end": 1695,
									"name": "INVALID",
									"source": 10
								},
								{
									"begin": 249,
									"end": 1695,
									"name": "tag",
									"source": 10,
									"value": "1"
								},
								{
									"begin": 249,
									"end": 1695,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 249,
									"end": 1695,
									"name": "ADDRESS",
									"source": 10
								},
								{
									"begin": 249,
									"end": 1695,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 249,
									"end": 1695,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 249,
									"end": 1695,
									"name": "PUSH",
									"source": 10,
									"value": "73"
								},
								{
									"begin": 249,
									"end": 1695,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 249,
									"end": 1695,
									"name": "MSTORE8",
									"source": 10
								},
								{
									"begin": 249,
									"end": 1695,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 249,
									"end": 1695,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 249,
									"end": 1695,
									"name": "RETURN",
									"source": 10
								}
							],
							".data": {
								"0": {
									".auxdata": "a264697066735822122091a1d3d8cf98d4661df3db6ed46ce35fba6243786bd138b8687b18a6f683182164736f6c63430007060033",
									".code": [
										{
											"begin": 249,
											"end": 1695,
											"name": "PUSHDEPLOYADDRESS",
											"source": 10
										},
										{
											"begin": 249,
											"end": 1695,
											"name": "ADDRESS",
											"source": 10
										},
										{
											"begin": 249,
											"end": 1695,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 249,
											"end": 1695,
											"name": "PUSH",
											"source": 10,
											"value": "80"
										},
										{
											"begin": 249,
											"end": 1695,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 249,
											"end": 1695,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 249,
											"end": 1695,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 249,
											"end": 1695,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 249,
											"end": 1695,
											"name": "REVERT",
											"source": 10
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"title\":\"Optimized overflow and underflow safe math operations\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Contains methods for doing math operations that revert on overflow or underflow for minimal gas cost\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@uniswap/v3-core/contracts/libraries/LowGasSafeMath.sol\":\"LowGasSafeMath\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@uniswap/v3-core/contracts/libraries/LowGasSafeMath.sol\":{\"keccak256\":\"0x86715eb960f18e01ac94e3bba4614ed51a887fa3c5bd1c43bf80aa98e019cf2d\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://bfc1d5d58e59015086b0e65a6c3a2ddad312e2350480510f6c0c8167f3d71a37\",\"dweb:/ipfs/QmQndULYjFsHKHjMAKLMfc12vWbVB5FawtioHtvwcWRJZp\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"notice": "Contains methods for doing math operations that revert on overflow or underflow for minimal gas cost",
						"version": 1
					}
				}
			},
			"@uniswap/v3-core/contracts/libraries/SafeCast.sol": {
				"SafeCast": {
					"abi": [],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"title": "Safe casting methods",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@uniswap/v3-core/contracts/libraries/SafeCast.sol\":165:1047  library SafeCast {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  invalid\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@uniswap/v3-core/contracts/libraries/SafeCast.sol\":165:1047  library SafeCast {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa264697066735822122073d5f2b94e4c352abd46019a798fe01b76a9deedc64eaab543860374326baddc64736f6c63430007060033\n}\n",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122073d5f2b94e4c352abd46019a798fe01b76a9deedc64eaab543860374326baddc64736f6c63430007060033",
							"opcodes": "PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH20 0xD5F2B94E4C352ABD46019A798FE01B76A9DEEDC6 0x4E 0xAA 0xB5 NUMBER DUP7 SUB PUSH21 0x326BADDC64736F6C63430007060033000000000000 ",
							"sourceMap": "165:882:11:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122073d5f2b94e4c352abd46019a798fe01b76a9deedc64eaab543860374326baddc64736f6c63430007060033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH20 0xD5F2B94E4C352ABD46019A798FE01B76A9DEEDC6 0x4E 0xAA 0xB5 NUMBER DUP7 SUB PUSH21 0x326BADDC64736F6C63430007060033000000000000 ",
							"sourceMap": "165:882:11:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							},
							"internal": {
								"toInt128(int256)": "infinite",
								"toInt256(uint256)": "infinite",
								"toUint160(uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 165,
									"end": 1047,
									"name": "PUSH #[$]",
									"source": 11,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 165,
									"end": 1047,
									"name": "PUSH [$]",
									"source": 11,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 165,
									"end": 1047,
									"name": "PUSH",
									"source": 11,
									"value": "B"
								},
								{
									"begin": 165,
									"end": 1047,
									"name": "DUP3",
									"source": 11
								},
								{
									"begin": 165,
									"end": 1047,
									"name": "DUP3",
									"source": 11
								},
								{
									"begin": 165,
									"end": 1047,
									"name": "DUP3",
									"source": 11
								},
								{
									"begin": 165,
									"end": 1047,
									"name": "CODECOPY",
									"source": 11
								},
								{
									"begin": 165,
									"end": 1047,
									"name": "DUP1",
									"source": 11
								},
								{
									"begin": 165,
									"end": 1047,
									"name": "MLOAD",
									"source": 11
								},
								{
									"begin": 165,
									"end": 1047,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 165,
									"end": 1047,
									"name": "BYTE",
									"source": 11
								},
								{
									"begin": 165,
									"end": 1047,
									"name": "PUSH",
									"source": 11,
									"value": "73"
								},
								{
									"begin": 165,
									"end": 1047,
									"name": "EQ",
									"source": 11
								},
								{
									"begin": 165,
									"end": 1047,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "1"
								},
								{
									"begin": 165,
									"end": 1047,
									"name": "JUMPI",
									"source": 11
								},
								{
									"begin": 165,
									"end": 1047,
									"name": "INVALID",
									"source": 11
								},
								{
									"begin": 165,
									"end": 1047,
									"name": "tag",
									"source": 11,
									"value": "1"
								},
								{
									"begin": 165,
									"end": 1047,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 165,
									"end": 1047,
									"name": "ADDRESS",
									"source": 11
								},
								{
									"begin": 165,
									"end": 1047,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 165,
									"end": 1047,
									"name": "MSTORE",
									"source": 11
								},
								{
									"begin": 165,
									"end": 1047,
									"name": "PUSH",
									"source": 11,
									"value": "73"
								},
								{
									"begin": 165,
									"end": 1047,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 165,
									"end": 1047,
									"name": "MSTORE8",
									"source": 11
								},
								{
									"begin": 165,
									"end": 1047,
									"name": "DUP3",
									"source": 11
								},
								{
									"begin": 165,
									"end": 1047,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 165,
									"end": 1047,
									"name": "RETURN",
									"source": 11
								}
							],
							".data": {
								"0": {
									".auxdata": "a264697066735822122073d5f2b94e4c352abd46019a798fe01b76a9deedc64eaab543860374326baddc64736f6c63430007060033",
									".code": [
										{
											"begin": 165,
											"end": 1047,
											"name": "PUSHDEPLOYADDRESS",
											"source": 11
										},
										{
											"begin": 165,
											"end": 1047,
											"name": "ADDRESS",
											"source": 11
										},
										{
											"begin": 165,
											"end": 1047,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 165,
											"end": 1047,
											"name": "PUSH",
											"source": 11,
											"value": "80"
										},
										{
											"begin": 165,
											"end": 1047,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 165,
											"end": 1047,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 165,
											"end": 1047,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 165,
											"end": 1047,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 165,
											"end": 1047,
											"name": "REVERT",
											"source": 11
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"title\":\"Safe casting methods\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Contains methods for safely casting between types\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@uniswap/v3-core/contracts/libraries/SafeCast.sol\":\"SafeCast\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@uniswap/v3-core/contracts/libraries/SafeCast.sol\":{\"keccak256\":\"0x4c12bf820c0b011f5490a209960ca34dd8af34660ef9e01de0438393d15e3fd8\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://fed11489e218e55d087d42b4f350a30e10cd2aedec8f432bd3cc712f648d5869\",\"dweb:/ipfs/QmWfRnRxyXwHUDcTQPazxYYk5jxErGeQqdvnYtyg5nBPbU\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"notice": "Contains methods for safely casting between types",
						"version": 1
					}
				}
			},
			"@uniswap/v3-core/contracts/libraries/TickMath.sol": {
				"TickMath": {
					"abi": [],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"stateVariables": {
							"MAX_SQRT_RATIO": {
								"details": "The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)"
							},
							"MAX_TICK": {
								"details": "The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128"
							},
							"MIN_SQRT_RATIO": {
								"details": "The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)"
							},
							"MIN_TICK": {
								"details": "The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128"
							}
						},
						"title": "Math library for computing sqrt prices from ticks and vice versa",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":306:8637  library TickMath {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  invalid\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@uniswap/v3-core/contracts/libraries/TickMath.sol\":306:8637  library TickMath {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220d620b0b145a03ddf9b9201d2bd8e1e9d22df87691c5475e6c9963760a2ccee4b64736f6c63430007060033\n}\n",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220d620b0b145a03ddf9b9201d2bd8e1e9d22df87691c5475e6c9963760a2ccee4b64736f6c63430007060033",
							"opcodes": "PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD6 KECCAK256 0xB0 0xB1 GASLIMIT LOG0 RETURNDATASIZE 0xDF SWAP12 SWAP3 ADD 0xD2 0xBD DUP15 0x1E SWAP14 0x22 0xDF DUP8 PUSH10 0x1C5475E6C9963760A2CC 0xEE 0x4B PUSH5 0x736F6C6343 STOP SMOD MOD STOP CALLER ",
							"sourceMap": "306:8331:12:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220d620b0b145a03ddf9b9201d2bd8e1e9d22df87691c5475e6c9963760a2ccee4b64736f6c63430007060033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD6 KECCAK256 0xB0 0xB1 GASLIMIT LOG0 RETURNDATASIZE 0xDF SWAP12 SWAP3 ADD 0xD2 0xBD DUP15 0x1E SWAP14 0x22 0xDF DUP8 PUSH10 0x1C5475E6C9963760A2CC 0xEE 0x4B PUSH5 0x736F6C6343 STOP SMOD MOD STOP CALLER ",
							"sourceMap": "306:8331:12:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							},
							"internal": {
								"getSqrtRatioAtTick(int24)": "infinite",
								"getTickAtSqrtRatio(uint160)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 306,
									"end": 8637,
									"name": "PUSH #[$]",
									"source": 12,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 306,
									"end": 8637,
									"name": "PUSH [$]",
									"source": 12,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 306,
									"end": 8637,
									"name": "PUSH",
									"source": 12,
									"value": "B"
								},
								{
									"begin": 306,
									"end": 8637,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 306,
									"end": 8637,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 306,
									"end": 8637,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 306,
									"end": 8637,
									"name": "CODECOPY",
									"source": 12
								},
								{
									"begin": 306,
									"end": 8637,
									"name": "DUP1",
									"source": 12
								},
								{
									"begin": 306,
									"end": 8637,
									"name": "MLOAD",
									"source": 12
								},
								{
									"begin": 306,
									"end": 8637,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 306,
									"end": 8637,
									"name": "BYTE",
									"source": 12
								},
								{
									"begin": 306,
									"end": 8637,
									"name": "PUSH",
									"source": 12,
									"value": "73"
								},
								{
									"begin": 306,
									"end": 8637,
									"name": "EQ",
									"source": 12
								},
								{
									"begin": 306,
									"end": 8637,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "1"
								},
								{
									"begin": 306,
									"end": 8637,
									"name": "JUMPI",
									"source": 12
								},
								{
									"begin": 306,
									"end": 8637,
									"name": "INVALID",
									"source": 12
								},
								{
									"begin": 306,
									"end": 8637,
									"name": "tag",
									"source": 12,
									"value": "1"
								},
								{
									"begin": 306,
									"end": 8637,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 306,
									"end": 8637,
									"name": "ADDRESS",
									"source": 12
								},
								{
									"begin": 306,
									"end": 8637,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 306,
									"end": 8637,
									"name": "MSTORE",
									"source": 12
								},
								{
									"begin": 306,
									"end": 8637,
									"name": "PUSH",
									"source": 12,
									"value": "73"
								},
								{
									"begin": 306,
									"end": 8637,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 306,
									"end": 8637,
									"name": "MSTORE8",
									"source": 12
								},
								{
									"begin": 306,
									"end": 8637,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 306,
									"end": 8637,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 306,
									"end": 8637,
									"name": "RETURN",
									"source": 12
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220d620b0b145a03ddf9b9201d2bd8e1e9d22df87691c5475e6c9963760a2ccee4b64736f6c63430007060033",
									".code": [
										{
											"begin": 306,
											"end": 8637,
											"name": "PUSHDEPLOYADDRESS",
											"source": 12
										},
										{
											"begin": 306,
											"end": 8637,
											"name": "ADDRESS",
											"source": 12
										},
										{
											"begin": 306,
											"end": 8637,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 306,
											"end": 8637,
											"name": "PUSH",
											"source": 12,
											"value": "80"
										},
										{
											"begin": 306,
											"end": 8637,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 306,
											"end": 8637,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 306,
											"end": 8637,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 306,
											"end": 8637,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 306,
											"end": 8637,
											"name": "REVERT",
											"source": 12
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"MAX_SQRT_RATIO\":{\"details\":\"The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\"},\"MAX_TICK\":{\"details\":\"The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\"},\"MIN_SQRT_RATIO\":{\"details\":\"The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\"},\"MIN_TICK\":{\"details\":\"The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128\"}},\"title\":\"Math library for computing sqrt prices from ticks and vice versa\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports prices between 2**-128 and 2**128\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@uniswap/v3-core/contracts/libraries/TickMath.sol\":\"TickMath\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@uniswap/v3-core/contracts/libraries/TickMath.sol\":{\"keccak256\":\"0x1f864a2bf61ba05f3173eaf2e3f94c5e1da4bec0554757527b6d1ef1fe439e4e\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://5139b586df546a9d1c46804ca400b1cb9ce87236eaf212ebd64edee6747a172a\",\"dweb:/ipfs/QmVa2kcRw3VyuB6j1EVWXACKnkbQZgfXYXNi5voq3XkYG8\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"notice": "Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports prices between 2**-128 and 2**128",
						"version": 1
					}
				}
			},
			"contracts/SwapRouter.sol": {
				"SwapRouter": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_factory",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "_WETH9",
									"type": "address"
								}
							],
							"stateMutability": "nonpayable",
							"type": "constructor"
						},
						{
							"inputs": [],
							"name": "WETH9",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "bytes",
											"name": "path",
											"type": "bytes"
										},
										{
											"internalType": "address",
											"name": "recipient",
											"type": "address"
										},
										{
											"internalType": "uint256",
											"name": "deadline",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "amountIn",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "amountOutMinimum",
											"type": "uint256"
										}
									],
									"internalType": "struct ISwapRouter.ExactInputParams",
									"name": "params",
									"type": "tuple"
								}
							],
							"name": "exactInput",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amountOut",
									"type": "uint256"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "address",
											"name": "tokenIn",
											"type": "address"
										},
										{
											"internalType": "address",
											"name": "tokenOut",
											"type": "address"
										},
										{
											"internalType": "uint24",
											"name": "fee",
											"type": "uint24"
										},
										{
											"internalType": "address",
											"name": "recipient",
											"type": "address"
										},
										{
											"internalType": "uint256",
											"name": "deadline",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "amountIn",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "amountOutMinimum",
											"type": "uint256"
										},
										{
											"internalType": "uint160",
											"name": "sqrtPriceLimitX96",
											"type": "uint160"
										}
									],
									"internalType": "struct ISwapRouter.ExactInputSingleParams",
									"name": "params",
									"type": "tuple"
								}
							],
							"name": "exactInputSingle",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amountOut",
									"type": "uint256"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "bytes",
											"name": "path",
											"type": "bytes"
										},
										{
											"internalType": "address",
											"name": "recipient",
											"type": "address"
										},
										{
											"internalType": "uint256",
											"name": "deadline",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "amountOut",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "amountInMaximum",
											"type": "uint256"
										}
									],
									"internalType": "struct ISwapRouter.ExactOutputParams",
									"name": "params",
									"type": "tuple"
								}
							],
							"name": "exactOutput",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amountIn",
									"type": "uint256"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "address",
											"name": "tokenIn",
											"type": "address"
										},
										{
											"internalType": "address",
											"name": "tokenOut",
											"type": "address"
										},
										{
											"internalType": "uint24",
											"name": "fee",
											"type": "uint24"
										},
										{
											"internalType": "address",
											"name": "recipient",
											"type": "address"
										},
										{
											"internalType": "uint256",
											"name": "deadline",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "amountOut",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "amountInMaximum",
											"type": "uint256"
										},
										{
											"internalType": "uint160",
											"name": "sqrtPriceLimitX96",
											"type": "uint160"
										}
									],
									"internalType": "struct ISwapRouter.ExactOutputSingleParams",
									"name": "params",
									"type": "tuple"
								}
							],
							"name": "exactOutputSingle",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amountIn",
									"type": "uint256"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "factory",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes[]",
									"name": "data",
									"type": "bytes[]"
								}
							],
							"name": "multicall",
							"outputs": [
								{
									"internalType": "bytes[]",
									"name": "results",
									"type": "bytes[]"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "refundETH",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "deadline",
									"type": "uint256"
								},
								{
									"internalType": "uint8",
									"name": "v",
									"type": "uint8"
								},
								{
									"internalType": "bytes32",
									"name": "r",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "s",
									"type": "bytes32"
								}
							],
							"name": "selfPermit",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "nonce",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "expiry",
									"type": "uint256"
								},
								{
									"internalType": "uint8",
									"name": "v",
									"type": "uint8"
								},
								{
									"internalType": "bytes32",
									"name": "r",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "s",
									"type": "bytes32"
								}
							],
							"name": "selfPermitAllowed",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "nonce",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "expiry",
									"type": "uint256"
								},
								{
									"internalType": "uint8",
									"name": "v",
									"type": "uint8"
								},
								{
									"internalType": "bytes32",
									"name": "r",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "s",
									"type": "bytes32"
								}
							],
							"name": "selfPermitAllowedIfNecessary",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "deadline",
									"type": "uint256"
								},
								{
									"internalType": "uint8",
									"name": "v",
									"type": "uint8"
								},
								{
									"internalType": "bytes32",
									"name": "r",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "s",
									"type": "bytes32"
								}
							],
							"name": "selfPermitIfNecessary",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amountMinimum",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								}
							],
							"name": "sweepToken",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amountMinimum",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "feeBips",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "feeRecipient",
									"type": "address"
								}
							],
							"name": "sweepTokenWithFee",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "int256",
									"name": "amount0Delta",
									"type": "int256"
								},
								{
									"internalType": "int256",
									"name": "amount1Delta",
									"type": "int256"
								},
								{
									"internalType": "bytes",
									"name": "_data",
									"type": "bytes"
								}
							],
							"name": "uniswapV3SwapCallback",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "amountMinimum",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								}
							],
							"name": "unwrapWETH9",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "amountMinimum",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "feeBips",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "feeRecipient",
									"type": "address"
								}
							],
							"name": "unwrapWETH9WithFee",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"stateMutability": "payable",
							"type": "receive"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"exactInput((bytes,address,uint256,uint256,uint256))": {
								"params": {
									"params": "The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata"
								},
								"returns": {
									"amountOut": "The amount of the received token"
								}
							},
							"exactInputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))": {
								"params": {
									"params": "The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata"
								},
								"returns": {
									"amountOut": "The amount of the received token"
								}
							},
							"exactOutput((bytes,address,uint256,uint256,uint256))": {
								"params": {
									"params": "The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata"
								},
								"returns": {
									"amountIn": "The amount of the input token"
								}
							},
							"exactOutputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))": {
								"params": {
									"params": "The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata"
								},
								"returns": {
									"amountIn": "The amount of the input token"
								}
							},
							"multicall(bytes[])": {
								"details": "The `msg.value` should not be trusted for any method callable from multicall.",
								"params": {
									"data": "The encoded function data for each of the calls to make to this contract"
								},
								"returns": {
									"results": "The results from each of the calls passed in via data"
								}
							},
							"refundETH()": {
								"details": "Useful for bundling with mint or increase liquidity that uses ether, or exact output swaps that use ether for the input amount"
							},
							"selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)": {
								"details": "The `owner` is always msg.sender and the `spender` is always address(this).",
								"params": {
									"deadline": "A timestamp, the current blocktime must be less than or equal to this timestamp",
									"r": "Must produce valid secp256k1 signature from the holder along with `v` and `s`",
									"s": "Must produce valid secp256k1 signature from the holder along with `r` and `v`",
									"token": "The address of the token spent",
									"v": "Must produce valid secp256k1 signature from the holder along with `r` and `s`",
									"value": "The amount that can be spent of token"
								}
							},
							"selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)": {
								"details": "The `owner` is always msg.sender and the `spender` is always address(this)",
								"params": {
									"expiry": "The timestamp at which the permit is no longer valid",
									"nonce": "The current nonce of the owner",
									"r": "Must produce valid secp256k1 signature from the holder along with `v` and `s`",
									"s": "Must produce valid secp256k1 signature from the holder along with `r` and `v`",
									"token": "The address of the token spent",
									"v": "Must produce valid secp256k1 signature from the holder along with `r` and `s`"
								}
							},
							"selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)": {
								"details": "The `owner` is always msg.sender and the `spender` is always address(this) Can be used instead of #selfPermitAllowed to prevent calls from failing due to a frontrun of a call to #selfPermitAllowed.",
								"params": {
									"expiry": "The timestamp at which the permit is no longer valid",
									"nonce": "The current nonce of the owner",
									"r": "Must produce valid secp256k1 signature from the holder along with `v` and `s`",
									"s": "Must produce valid secp256k1 signature from the holder along with `r` and `v`",
									"token": "The address of the token spent",
									"v": "Must produce valid secp256k1 signature from the holder along with `r` and `s`"
								}
							},
							"selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)": {
								"details": "The `owner` is always msg.sender and the `spender` is always address(this). Can be used instead of #selfPermit to prevent calls from failing due to a frontrun of a call to #selfPermit",
								"params": {
									"deadline": "A timestamp, the current blocktime must be less than or equal to this timestamp",
									"r": "Must produce valid secp256k1 signature from the holder along with `v` and `s`",
									"s": "Must produce valid secp256k1 signature from the holder along with `r` and `v`",
									"token": "The address of the token spent",
									"v": "Must produce valid secp256k1 signature from the holder along with `r` and `s`",
									"value": "The amount that can be spent of token"
								}
							},
							"sweepToken(address,uint256,address)": {
								"details": "The amountMinimum parameter prevents malicious contracts from stealing the token from users",
								"params": {
									"amountMinimum": "The minimum amount of token required for a transfer",
									"recipient": "The destination address of the token",
									"token": "The contract address of the token which will be transferred to `recipient`"
								}
							},
							"sweepTokenWithFee(address,uint256,address,uint256,address)": {
								"details": "The amountMinimum parameter prevents malicious contracts from stealing the token from users"
							},
							"uniswapV3SwapCallback(int256,int256,bytes)": {
								"details": "In the implementation you must pay the pool tokens owed for the swap. The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory. amount0Delta and amount1Delta can both be 0 if no tokens were swapped.",
								"params": {
									"amount0Delta": "The amount of token0 that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token0 to the pool.",
									"amount1Delta": "The amount of token1 that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token1 to the pool.",
									"data": "Any data passed through by the caller via the IUniswapV3PoolActions#swap call"
								}
							},
							"unwrapWETH9(uint256,address)": {
								"details": "The amountMinimum parameter prevents malicious contracts from stealing WETH9 from users.",
								"params": {
									"amountMinimum": "The minimum amount of WETH9 to unwrap",
									"recipient": "The address receiving ETH"
								}
							},
							"unwrapWETH9WithFee(uint256,address,uint256,address)": {
								"details": "The amountMinimum parameter prevents malicious contracts from stealing WETH9 from users."
							}
						},
						"stateVariables": {
							"DEFAULT_AMOUNT_IN_CACHED": {
								"details": "Used as the placeholder value for amountInCached, because the computed amount in for an exact output swap can never actually be this value"
							},
							"amountInCached": {
								"details": "Transient storage variable used for returning the computed amount in for an exact output swap."
							}
						},
						"title": "Uniswap V3 Swap Router",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/SwapRouter.sol\":775:9115  contract SwapRouter is... */\n  mstore(0x40, 0xc0)\n  not(0x00)\n    /* \"contracts/SwapRouter.sol\":1338:1395  uint256 private amountInCached = DEFAULT_AMOUNT_IN_CACHED */\n  0x00\n  sstore\n    /* \"contracts/SwapRouter.sol\":1402:1492  constructor(address _factory, address _WETH9) PeripheryImmutableState(_factory, _WETH9) {} */\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n  mload(0x40)\n  sub(codesize, bytecodeSize)\n  dup1\n  bytecodeSize\n  dup4\n  codecopy\n  dup2\n  add\n  0x40\n  dup2\n  swap1\n  mstore\n  tag_2\n  swap2\n  tag_3\n  jump\t// in\ntag_2:\n  not(sub(shl(0x60, 0x01), 0x01))\n    /* \"contracts/base/PeripheryImmutableState.sol\":522:540  factory = _factory */\n  0x60\n  swap3\n  dup4\n  shl\n  dup2\n  and\n  0x80\n  mstore\n    /* \"contracts/base/PeripheryImmutableState.sol\":550:564  WETH9 = _WETH9 */\n  swap2\n  shl\n  and\n  0xa0\n  mstore\n    /* \"contracts/SwapRouter.sol\":775:9115  contract SwapRouter is... */\n  jump(tag_9)\n    /* \"#utility.yul\":14:193   */\ntag_10:\n    /* \"#utility.yul\":95:108   */\n  dup1\n  mload\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"#utility.yul\":137:168   */\n  dup2\n  and\n    /* \"#utility.yul\":127:169   */\n  dup2\n  eq\n    /* \"#utility.yul\":117:119   */\n  tag_12\n  jumpi\n    /* \"#utility.yul\":183:184   */\n  0x00\n    /* \"#utility.yul\":180:181   */\n  dup1\n    /* \"#utility.yul\":173:185   */\n  revert\n    /* \"#utility.yul\":117:119   */\ntag_12:\n    /* \"#utility.yul\":76:193   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":198:505   */\ntag_3:\n  0x00\n  dup1\n    /* \"#utility.yul\":338:340   */\n  0x40\n    /* \"#utility.yul\":326:335   */\n  dup4\n    /* \"#utility.yul\":317:324   */\n  dup6\n    /* \"#utility.yul\":313:336   */\n  sub\n    /* \"#utility.yul\":309:341   */\n  slt\n    /* \"#utility.yul\":306:308   */\n  iszero\n  tag_14\n  jumpi\n    /* \"#utility.yul\":359:365   */\n  dup2\n    /* \"#utility.yul\":351:357   */\n  dup3\n    /* \"#utility.yul\":344:366   */\n  revert\n    /* \"#utility.yul\":306:308   */\ntag_14:\n    /* \"#utility.yul\":387:429   */\n  tag_15\n    /* \"#utility.yul\":419:428   */\n  dup4\n    /* \"#utility.yul\":387:429   */\n  tag_10\n  jump\t// in\ntag_15:\n    /* \"#utility.yul\":377:429   */\n  swap2\n  pop\n    /* \"#utility.yul\":448:499   */\n  tag_16\n    /* \"#utility.yul\":495:497   */\n  0x20\n    /* \"#utility.yul\":484:493   */\n  dup5\n    /* \"#utility.yul\":480:498   */\n  add\n    /* \"#utility.yul\":448:499   */\n  tag_10\n  jump\t// in\ntag_16:\n    /* \"#utility.yul\":438:499   */\n  swap1\n  pop\n    /* \"#utility.yul\":296:505   */\n  swap3\n  pop\n  swap3\n  swap1\n  pop\n  jump\t// out\ntag_9:\n    /* \"contracts/SwapRouter.sol\":775:9115  contract SwapRouter is... */\n  shr(0x60, mload(0x80))\n  shr(0x60, mload(0xa0))\n  codecopy(0x00, dataOffset(sub_0), dataSize(sub_0))\n  assignImmutable(\"0x4f722aad0315bc3832e551ccf6da3e098baeb8ee055023fde26c377410bf01b8\")\n  assignImmutable(\"0x1dda9873baa24e5dc3a48371aa5a89ce85f19f9dd041db3ba184e623299b8433\")\n  return(0x00, dataSize(sub_0))\nstop\n\nsub_0: assembly {\n        /* \"contracts/SwapRouter.sol\":775:9115  contract SwapRouter is... */\n      mstore(0x40, 0x80)\n      jumpi(tag_1, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0xc04b8d59\n      gt\n      tag_20\n      jumpi\n      dup1\n      0xdf2ab5bb\n      gt\n      tag_21\n      jumpi\n      dup1\n      0xdf2ab5bb\n      eq\n      tag_15\n      jumpi\n      dup1\n      0xe0e189a0\n      eq\n      tag_16\n      jumpi\n      dup1\n      0xf28c0498\n      eq\n      tag_17\n      jumpi\n      dup1\n      0xf3995c67\n      eq\n      tag_18\n      jumpi\n      dup1\n      0xfa461e33\n      eq\n      tag_19\n      jumpi\n      jump(tag_2)\n    tag_21:\n      dup1\n      0xc04b8d59\n      eq\n      tag_11\n      jumpi\n      dup1\n      0xc2e3140a\n      eq\n      tag_12\n      jumpi\n      dup1\n      0xc45a0155\n      eq\n      tag_13\n      jumpi\n      dup1\n      0xdb3e2198\n      eq\n      tag_14\n      jumpi\n      jump(tag_2)\n    tag_20:\n      dup1\n      0x4aa4a4fc\n      gt\n      tag_22\n      jumpi\n      dup1\n      0x4aa4a4fc\n      eq\n      tag_7\n      jumpi\n      dup1\n      0x9b2c0a37\n      eq\n      tag_8\n      jumpi\n      dup1\n      0xa4a78f0c\n      eq\n      tag_9\n      jumpi\n      dup1\n      0xac9650d8\n      eq\n      tag_10\n      jumpi\n      jump(tag_2)\n    tag_22:\n      dup1\n      0x12210e8a\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x414bf389\n      eq\n      tag_4\n      jumpi\n      dup1\n      0x4659a494\n      eq\n      tag_5\n      jumpi\n      dup1\n      0x49404b7c\n      eq\n      tag_6\n      jumpi\n      jump(tag_2)\n    tag_1:\n      jumpi(tag_2, calldatasize)\n        /* \"contracts/base/PeripheryPayments.sol\":439:449  msg.sender */\n      caller\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/base/PeripheryPayments.sol\":453:458  WETH9 */\n      immutable(\"0x4f722aad0315bc3832e551ccf6da3e098baeb8ee055023fde26c377410bf01b8\")\n        /* \"contracts/base/PeripheryPayments.sol\":439:458  msg.sender == WETH9 */\n      and\n      eq\n        /* \"contracts/base/PeripheryPayments.sol\":431:472  require(msg.sender == WETH9, 'Not WETH9') */\n      tag_25\n      jumpi\n      0x40\n      dup1\n      mload\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      mstore\n      0x09\n      0x24\n      dup3\n      add\n      mstore\n      shl(0xb8, 0x4e6f74205745544839)\n      0x44\n      dup3\n      add\n      mstore\n      swap1\n      mload\n      swap1\n      dup2\n      swap1\n      sub\n      0x64\n      add\n      swap1\n      revert\n    tag_25:\n        /* \"contracts/SwapRouter.sol\":775:9115  contract SwapRouter is... */\n      stop\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"contracts/base/PeripheryPayments.sol\":1406:1566  function refundETH() external payable override {... */\n    tag_3:\n      tag_25\n      tag_27\n      jump\t// in\n        /* \"contracts/SwapRouter.sol\":4300:4847  function exactInputSingle(ExactInputSingleParams calldata params)... */\n    tag_4:\n      tag_28\n      tag_29\n      calldatasize\n      0x04\n      tag_30\n      jump\t// in\n    tag_29:\n      tag_31\n      jump\t// in\n    tag_28:\n      mload(0x40)\n      tag_32\n      swap2\n      swap1\n      tag_33\n      jump\t// in\n    tag_32:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/base/SelfPermit.sol\":1325:1614  function selfPermitAllowed(... */\n    tag_5:\n      tag_25\n      tag_35\n      calldatasize\n      0x04\n      tag_36\n      jump\t// in\n    tag_35:\n      tag_37\n      jump\t// in\n        /* \"contracts/base/PeripheryPayments.sol\":524:921  function unwrapWETH9(uint256 amountMinimum, address recipient) public payable override {... */\n    tag_6:\n      tag_25\n      tag_39\n      calldatasize\n      0x04\n      tag_40\n      jump\t// in\n    tag_39:\n      tag_41\n      jump\t// in\n        /* \"contracts/base/PeripheryImmutableState.sol\":420:459  address public immutable override WETH9 */\n    tag_7:\n      callvalue\n      dup1\n      iszero\n      tag_42\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_42:\n      pop\n      tag_43\n      tag_44\n      jump\t// in\n    tag_43:\n      mload(0x40)\n      tag_32\n      swap2\n      swap1\n      tag_46\n      jump\t// in\n        /* \"contracts/base/PeripheryPaymentsWithFee.sol\":553:1251  function unwrapWETH9WithFee(... */\n    tag_8:\n      tag_25\n      tag_48\n      calldatasize\n      0x04\n      tag_49\n      jump\t// in\n    tag_48:\n      tag_50\n      jump\t// in\n        /* \"contracts/base/SelfPermit.sol\":1652:2000  function selfPermitAllowedIfNecessary(... */\n    tag_9:\n      tag_25\n      tag_52\n      calldatasize\n      0x04\n      tag_36\n      jump\t// in\n    tag_52:\n      tag_53\n      jump\t// in\n        /* \"contracts/base/Multicall.sol\":308:961  function multicall(bytes[] calldata data) public payable override returns (bytes[] memory results) {... */\n    tag_10:\n      tag_54\n      tag_55\n      calldatasize\n      0x04\n      tag_56\n      jump\t// in\n    tag_55:\n      tag_57\n      jump\t// in\n    tag_54:\n      mload(0x40)\n      tag_32\n      swap2\n      swap1\n      tag_59\n      jump\t// in\n        /* \"contracts/SwapRouter.sol\":4885:6160  function exactInput(ExactInputParams memory params)... */\n    tag_11:\n      tag_28\n      tag_61\n      calldatasize\n      0x04\n      tag_62\n      jump\t// in\n    tag_61:\n      tag_63\n      jump\t// in\n        /* \"contracts/base/SelfPermit.sol\":973:1287  function selfPermitIfNecessary(... */\n    tag_12:\n      tag_25\n      tag_66\n      calldatasize\n      0x04\n      tag_36\n      jump\t// in\n    tag_66:\n      tag_67\n      jump\t// in\n        /* \"contracts/base/PeripheryImmutableState.sol\":328:369  address public immutable override factory */\n    tag_13:\n      callvalue\n      dup1\n      iszero\n      tag_68\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_68:\n      pop\n      tag_43\n      tag_70\n      jump\t// in\n        /* \"contracts/SwapRouter.sol\":7587:8319  function exactOutputSingle(ExactOutputSingleParams calldata params)... */\n    tag_14:\n      tag_28\n      tag_73\n      calldatasize\n      0x04\n      tag_30\n      jump\t// in\n    tag_73:\n      tag_75\n      jump\t// in\n        /* \"contracts/base/PeripheryPayments.sol\":966:1361  function sweepToken(... */\n    tag_15:\n      tag_25\n      tag_78\n      calldatasize\n      0x04\n      tag_79\n      jump\t// in\n    tag_78:\n      tag_80\n      jump\t// in\n        /* \"contracts/base/PeripheryPaymentsWithFee.sol\":1303:1981  function sweepTokenWithFee(... */\n    tag_16:\n      tag_25\n      tag_82\n      calldatasize\n      0x04\n      tag_83\n      jump\t// in\n    tag_82:\n      tag_84\n      jump\t// in\n        /* \"contracts/SwapRouter.sol\":8357:9113  function exactOutput(ExactOutputParams calldata params)... */\n    tag_17:\n      tag_28\n      tag_86\n      calldatasize\n      0x04\n      tag_87\n      jump\t// in\n    tag_86:\n      tag_88\n      jump\t// in\n        /* \"contracts/base/SelfPermit.sol\":662:935  function selfPermit(... */\n    tag_18:\n      tag_25\n      tag_91\n      calldatasize\n      0x04\n      tag_36\n      jump\t// in\n    tag_91:\n      tag_92\n      jump\t// in\n        /* \"contracts/SwapRouter.sol\":1980:3274  function uniswapV3SwapCallback(... */\n    tag_19:\n      callvalue\n      dup1\n      iszero\n      tag_93\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_93:\n      pop\n      tag_25\n      tag_95\n      calldatasize\n      0x04\n      tag_96\n      jump\t// in\n    tag_95:\n      tag_97\n      jump\t// in\n        /* \"contracts/base/PeripheryPayments.sol\":1406:1566  function refundETH() external payable override {... */\n    tag_27:\n        /* \"contracts/base/PeripheryPayments.sol\":1467:1488  address(this).balance */\n      selfbalance\n        /* \"contracts/base/PeripheryPayments.sol\":1467:1492  address(this).balance > 0 */\n      iszero\n        /* \"contracts/base/PeripheryPayments.sol\":1463:1559  if (address(this).balance > 0) TransferHelper.safeTransferETH(msg.sender, address(this).balance) */\n      tag_100\n      jumpi\n        /* \"contracts/base/PeripheryPayments.sol\":1494:1559  TransferHelper.safeTransferETH(msg.sender, address(this).balance) */\n      tag_100\n        /* \"contracts/base/PeripheryPayments.sol\":1525:1535  msg.sender */\n      caller\n        /* \"contracts/base/PeripheryPayments.sol\":1537:1558  address(this).balance */\n      selfbalance\n        /* \"contracts/base/PeripheryPayments.sol\":1494:1524  TransferHelper.safeTransferETH */\n      tag_101\n        /* \"contracts/base/PeripheryPayments.sol\":1494:1559  TransferHelper.safeTransferETH(msg.sender, address(this).balance) */\n      jump\t// in\n    tag_100:\n        /* \"contracts/base/PeripheryPayments.sol\":1406:1566  function refundETH() external payable override {... */\n      jump\t// out\n        /* \"contracts/SwapRouter.sol\":4300:4847  function exactInputSingle(ExactInputSingleParams calldata params)... */\n    tag_31:\n        /* \"contracts/SwapRouter.sol\":4472:4489  uint256 amountOut */\n      0x00\n        /* \"contracts/SwapRouter.sol\":4438:4444  params */\n      dup2\n        /* \"contracts/SwapRouter.sol\":4438:4453  params.deadline */\n      0x80\n      add\n      calldataload\n        /* \"contracts/base/PeripheryValidation.sol\":244:252  deadline */\n      dup1\n        /* \"contracts/base/PeripheryValidation.sol\":223:240  _blockTimestamp() */\n      tag_103\n        /* \"contracts/base/PeripheryValidation.sol\":223:238  _blockTimestamp */\n      tag_104\n        /* \"contracts/base/PeripheryValidation.sol\":223:240  _blockTimestamp() */\n      jump\t// in\n    tag_103:\n        /* \"contracts/base/PeripheryValidation.sol\":223:252  _blockTimestamp() <= deadline */\n      gt\n      iszero\n        /* \"contracts/base/PeripheryValidation.sol\":215:276  require(_blockTimestamp() <= deadline, 'Transaction too old') */\n      tag_105\n      jumpi\n      0x40\n      dup1\n      mload\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      mstore\n      0x13\n      0x24\n      dup3\n      add\n      mstore\n      shl(0x6a, 0x151c985b9cd858dd1a5bdb881d1bdbc81bdb19)\n      0x44\n      dup3\n      add\n      mstore\n      swap1\n      mload\n      swap1\n      dup2\n      swap1\n      sub\n      0x64\n      add\n      swap1\n      revert\n    tag_105:\n        /* \"contracts/SwapRouter.sol\":4517:4762  exactInputInternal(... */\n      tag_107\n        /* \"contracts/SwapRouter.sol\":4549:4564  params.amountIn */\n      0xa0\n      dup5\n      add\n      calldataload\n        /* \"contracts/SwapRouter.sol\":4578:4594  params.recipient */\n      tag_108\n      0x80\n      dup7\n      add\n      0x60\n      dup8\n      add\n      tag_109\n      jump\t// in\n    tag_108:\n        /* \"contracts/SwapRouter.sol\":4608:4632  params.sqrtPriceLimitX96 */\n      tag_110\n      0x0100\n      dup8\n      add\n      0xe0\n      dup9\n      add\n      tag_109\n      jump\t// in\n    tag_110:\n        /* \"contracts/SwapRouter.sol\":4646:4752  SwapCallbackData({path: abi.encodePacked(params.tokenIn, params.fee, params.tokenOut), payer: msg.sender}) */\n      0x40\n      dup1\n      mload\n      dup1\n      dup3\n      add\n      swap1\n      swap2\n      mstore\n      dup1\n        /* \"contracts/SwapRouter.sol\":4687:4701  params.tokenIn */\n      tag_112\n      0x20\n      dup11\n      add\n        /* \"contracts/SwapRouter.sol\":4687:4693  params */\n      dup11\n        /* \"contracts/SwapRouter.sol\":4687:4701  params.tokenIn */\n      tag_109\n      jump\t// in\n    tag_112:\n        /* \"contracts/SwapRouter.sol\":4703:4713  params.fee */\n      tag_113\n      0x60\n      dup12\n      add\n      0x40\n      dup13\n      add\n      tag_114\n      jump\t// in\n    tag_113:\n        /* \"contracts/SwapRouter.sol\":4715:4730  params.tokenOut */\n      tag_115\n      0x40\n      dup13\n      add\n      0x20\n      dup14\n      add\n      tag_109\n      jump\t// in\n    tag_115:\n        /* \"contracts/SwapRouter.sol\":4670:4731  abi.encodePacked(params.tokenIn, params.fee, params.tokenOut) */\n      add(0x20, mload(0x40))\n      tag_116\n      swap4\n      swap3\n      swap2\n      swap1\n      tag_117\n      jump\t// in\n    tag_116:\n      mload(0x40)\n      0x20\n      dup2\n      dup4\n      sub\n      sub\n      dup2\n      mstore\n      swap1\n      0x40\n      mstore\n        /* \"contracts/SwapRouter.sol\":4646:4752  SwapCallbackData({path: abi.encodePacked(params.tokenIn, params.fee, params.tokenOut), payer: msg.sender}) */\n      dup2\n      mstore\n      0x20\n      add\n        /* \"contracts/SwapRouter.sol\":4740:4750  msg.sender */\n      caller\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/SwapRouter.sol\":4646:4752  SwapCallbackData({path: abi.encodePacked(params.tokenIn, params.fee, params.tokenOut), payer: msg.sender}) */\n      and\n      dup2\n      mstore\n      pop\n        /* \"contracts/SwapRouter.sol\":4517:4535  exactInputInternal */\n      tag_118\n        /* \"contracts/SwapRouter.sol\":4517:4762  exactInputInternal(... */\n      jump\t// in\n    tag_107:\n        /* \"contracts/SwapRouter.sol\":4505:4762  amountOut = exactInputInternal(... */\n      swap2\n      pop\n        /* \"contracts/SwapRouter.sol\":4793:4799  params */\n      dup3\n        /* \"contracts/SwapRouter.sol\":4793:4816  params.amountOutMinimum */\n      0xc0\n      add\n      calldataload\n        /* \"contracts/SwapRouter.sol\":4780:4789  amountOut */\n      dup3\n        /* \"contracts/SwapRouter.sol\":4780:4816  amountOut >= params.amountOutMinimum */\n      lt\n      iszero\n        /* \"contracts/SwapRouter.sol\":4772:4840  require(amountOut >= params.amountOutMinimum, 'Too little received') */\n      tag_119\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_120\n      swap1\n      tag_121\n      jump\t// in\n    tag_120:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_119:\n        /* \"contracts/SwapRouter.sol\":4300:4847  function exactInputSingle(ExactInputSingleParams calldata params)... */\n      pop\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"contracts/base/SelfPermit.sol\":1325:1614  function selfPermitAllowed(... */\n    tag_37:\n        /* \"contracts/base/SelfPermit.sol\":1517:1607  IERC20PermitAllowed(token).permit(msg.sender, address(this), nonce, expiry, true, v, r, s) */\n      0x40\n      dup1\n      mload\n      shl(0xe2, 0x23f2ebc3)\n      dup2\n      mstore\n        /* \"contracts/base/SelfPermit.sol\":1551:1561  msg.sender */\n      caller\n        /* \"contracts/base/SelfPermit.sol\":1517:1607  IERC20PermitAllowed(token).permit(msg.sender, address(this), nonce, expiry, true, v, r, s) */\n      0x04\n      dup3\n      add\n      mstore\n        /* \"contracts/base/SelfPermit.sol\":1571:1575  this */\n      address\n        /* \"contracts/base/SelfPermit.sol\":1517:1607  IERC20PermitAllowed(token).permit(msg.sender, address(this), nonce, expiry, true, v, r, s) */\n      0x24\n      dup3\n      add\n      mstore\n      0x44\n      dup2\n      add\n      dup8\n      swap1\n      mstore\n      0x64\n      dup2\n      add\n      dup7\n      swap1\n      mstore\n        /* \"contracts/base/SelfPermit.sol\":1593:1597  true */\n      0x01\n        /* \"contracts/base/SelfPermit.sol\":1517:1607  IERC20PermitAllowed(token).permit(msg.sender, address(this), nonce, expiry, true, v, r, s) */\n      0x84\n      dup3\n      add\n      mstore\n      0xff\n      dup6\n      and\n      0xa4\n      dup3\n      add\n      mstore\n      0xc4\n      dup2\n      add\n      dup5\n      swap1\n      mstore\n      0xe4\n      dup2\n      add\n      dup4\n      swap1\n      mstore\n      swap1\n      mload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/base/SelfPermit.sol\":1517:1550  IERC20PermitAllowed(token).permit */\n      dup9\n      and\n      swap2\n      0x8fcbaf0c\n      swap2\n        /* \"contracts/base/SelfPermit.sol\":1517:1607  IERC20PermitAllowed(token).permit(msg.sender, address(this), nonce, expiry, true, v, r, s) */\n      0x0104\n      dup1\n      dup4\n      add\n      swap3\n      0x00\n      swap3\n      swap2\n      swap1\n      dup3\n      swap1\n      sub\n      add\n      dup2\n      dup4\n        /* \"contracts/base/SelfPermit.sol\":1517:1550  IERC20PermitAllowed(token).permit */\n      dup8\n        /* \"contracts/base/SelfPermit.sol\":1517:1607  IERC20PermitAllowed(token).permit(msg.sender, address(this), nonce, expiry, true, v, r, s) */\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_123\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_123:\n      pop\n      gas\n      call\n      iszero\n      dup1\n      iszero\n      tag_125\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_125:\n      pop\n      pop\n      pop\n      pop\n        /* \"contracts/base/SelfPermit.sol\":1325:1614  function selfPermitAllowed(... */\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/base/PeripheryPayments.sol\":524:921  function unwrapWETH9(uint256 amountMinimum, address recipient) public payable override {... */\n    tag_41:\n        /* \"contracts/base/PeripheryPayments.sol\":621:641  uint256 balanceWETH9 */\n      0x00\n        /* \"contracts/base/PeripheryPayments.sol\":651:656  WETH9 */\n      immutable(\"0x4f722aad0315bc3832e551ccf6da3e098baeb8ee055023fde26c377410bf01b8\")\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/base/PeripheryPayments.sol\":644:667  IWETH9(WETH9).balanceOf */\n      and\n      0x70a08231\n        /* \"contracts/base/PeripheryPayments.sol\":676:680  this */\n      address\n        /* \"contracts/base/PeripheryPayments.sol\":644:682  IWETH9(WETH9).balanceOf(address(this)) */\n      mload(0x40)\n      dup3\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup3\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup7\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_127\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_127:\n      pop\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_129\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_129:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      0x20\n      dup2\n      lt\n      iszero\n      tag_130\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_130:\n      pop\n      mload\n      swap1\n      pop\n        /* \"contracts/base/PeripheryPayments.sol\":700:729  balanceWETH9 >= amountMinimum */\n      dup3\n      dup2\n      lt\n      iszero\n        /* \"contracts/base/PeripheryPayments.sol\":692:752  require(balanceWETH9 >= amountMinimum, 'Insufficient WETH9') */\n      tag_131\n      jumpi\n      0x40\n      dup1\n      mload\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      mstore\n      0x12\n      0x24\n      dup3\n      add\n      mstore\n      shl(0x70, 0x496e73756666696369656e74205745544839)\n      0x44\n      dup3\n      add\n      mstore\n      swap1\n      mload\n      swap1\n      dup2\n      swap1\n      sub\n      0x64\n      add\n      swap1\n      revert\n    tag_131:\n        /* \"contracts/base/PeripheryPayments.sol\":767:783  balanceWETH9 > 0 */\n      dup1\n      iszero\n        /* \"contracts/base/PeripheryPayments.sol\":763:915  if (balanceWETH9 > 0) {... */\n      tag_136\n      jumpi\n        /* \"contracts/base/PeripheryPayments.sol\":806:811  WETH9 */\n      immutable(\"0x4f722aad0315bc3832e551ccf6da3e098baeb8ee055023fde26c377410bf01b8\")\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/base/PeripheryPayments.sol\":799:821  IWETH9(WETH9).withdraw */\n      and\n      0x2e1a7d4d\n        /* \"contracts/base/PeripheryPayments.sol\":822:834  balanceWETH9 */\n      dup3\n        /* \"contracts/base/PeripheryPayments.sol\":799:835  IWETH9(WETH9).withdraw(balanceWETH9) */\n      mload(0x40)\n      dup3\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup3\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      0x00\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_133\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_133:\n      pop\n      gas\n      call\n      iszero\n      dup1\n      iszero\n      tag_135\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_135:\n      pop\n      pop\n      pop\n      pop\n        /* \"contracts/base/PeripheryPayments.sol\":849:904  TransferHelper.safeTransferETH(recipient, balanceWETH9) */\n      tag_136\n        /* \"contracts/base/PeripheryPayments.sol\":880:889  recipient */\n      dup3\n        /* \"contracts/base/PeripheryPayments.sol\":891:903  balanceWETH9 */\n      dup3\n        /* \"contracts/base/PeripheryPayments.sol\":849:879  TransferHelper.safeTransferETH */\n      tag_101\n        /* \"contracts/base/PeripheryPayments.sol\":849:904  TransferHelper.safeTransferETH(recipient, balanceWETH9) */\n      jump\t// in\n    tag_136:\n        /* \"contracts/base/PeripheryPayments.sol\":524:921  function unwrapWETH9(uint256 amountMinimum, address recipient) public payable override {... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/base/PeripheryImmutableState.sol\":420:459  address public immutable override WETH9 */\n    tag_44:\n      immutable(\"0x4f722aad0315bc3832e551ccf6da3e098baeb8ee055023fde26c377410bf01b8\")\n      dup2\n      jump\t// out\n        /* \"contracts/base/PeripheryPaymentsWithFee.sol\":553:1251  function unwrapWETH9WithFee(... */\n    tag_50:\n        /* \"contracts/base/PeripheryPaymentsWithFee.sol\":752:753  0 */\n      0x00\n        /* \"contracts/base/PeripheryPaymentsWithFee.sol\":742:749  feeBips */\n      dup3\n        /* \"contracts/base/PeripheryPaymentsWithFee.sol\":742:753  feeBips > 0 */\n      gt\n        /* \"contracts/base/PeripheryPaymentsWithFee.sol\":742:771  feeBips > 0 && feeBips <= 100 */\n      dup1\n      iszero\n      tag_138\n      jumpi\n      pop\n        /* \"contracts/base/PeripheryPaymentsWithFee.sol\":768:771  100 */\n      0x64\n        /* \"contracts/base/PeripheryPaymentsWithFee.sol\":757:764  feeBips */\n      dup3\n        /* \"contracts/base/PeripheryPaymentsWithFee.sol\":757:771  feeBips <= 100 */\n      gt\n      iszero\n        /* \"contracts/base/PeripheryPaymentsWithFee.sol\":742:771  feeBips > 0 && feeBips <= 100 */\n    tag_138:\n        /* \"contracts/base/PeripheryPaymentsWithFee.sol\":734:772  require(feeBips > 0 && feeBips <= 100) */\n      tag_139\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_139:\n        /* \"contracts/base/PeripheryPaymentsWithFee.sol\":783:803  uint256 balanceWETH9 */\n      0x00\n        /* \"contracts/base/PeripheryPaymentsWithFee.sol\":813:818  WETH9 */\n      immutable(\"0x4f722aad0315bc3832e551ccf6da3e098baeb8ee055023fde26c377410bf01b8\")\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/base/PeripheryPaymentsWithFee.sol\":806:829  IWETH9(WETH9).balanceOf */\n      and\n      0x70a08231\n        /* \"contracts/base/PeripheryPaymentsWithFee.sol\":838:842  this */\n      address\n        /* \"contracts/base/PeripheryPaymentsWithFee.sol\":806:844  IWETH9(WETH9).balanceOf(address(this)) */\n      mload(0x40)\n      dup3\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup3\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup7\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_140\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_140:\n      pop\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_142\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_142:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      0x20\n      dup2\n      lt\n      iszero\n      tag_143\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_143:\n      pop\n      mload\n      swap1\n      pop\n        /* \"contracts/base/PeripheryPaymentsWithFee.sol\":862:891  balanceWETH9 >= amountMinimum */\n      dup5\n      dup2\n      lt\n      iszero\n        /* \"contracts/base/PeripheryPaymentsWithFee.sol\":854:914  require(balanceWETH9 >= amountMinimum, 'Insufficient WETH9') */\n      tag_144\n      jumpi\n      0x40\n      dup1\n      mload\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      mstore\n      0x12\n      0x24\n      dup3\n      add\n      mstore\n      shl(0x70, 0x496e73756666696369656e74205745544839)\n      0x44\n      dup3\n      add\n      mstore\n      swap1\n      mload\n      swap1\n      dup2\n      swap1\n      sub\n      0x64\n      add\n      swap1\n      revert\n    tag_144:\n        /* \"contracts/base/PeripheryPaymentsWithFee.sol\":929:945  balanceWETH9 > 0 */\n      dup1\n      iszero\n        /* \"contracts/base/PeripheryPaymentsWithFee.sol\":925:1245  if (balanceWETH9 > 0) {... */\n      tag_145\n      jumpi\n        /* \"contracts/base/PeripheryPaymentsWithFee.sol\":968:973  WETH9 */\n      immutable(\"0x4f722aad0315bc3832e551ccf6da3e098baeb8ee055023fde26c377410bf01b8\")\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/base/PeripheryPaymentsWithFee.sol\":961:983  IWETH9(WETH9).withdraw */\n      and\n      0x2e1a7d4d\n        /* \"contracts/base/PeripheryPaymentsWithFee.sol\":984:996  balanceWETH9 */\n      dup3\n        /* \"contracts/base/PeripheryPaymentsWithFee.sol\":961:997  IWETH9(WETH9).withdraw(balanceWETH9) */\n      mload(0x40)\n      dup3\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup3\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      0x00\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_146\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_146:\n      pop\n      gas\n      call\n      iszero\n      dup1\n      iszero\n      tag_148\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_148:\n      pop\n      pop\n      pop\n      pop\n        /* \"contracts/base/PeripheryPaymentsWithFee.sol\":1011:1028  uint256 feeAmount */\n      0x00\n        /* \"contracts/base/PeripheryPaymentsWithFee.sol\":1059:1065  10_000 */\n      0x2710\n        /* \"contracts/base/PeripheryPaymentsWithFee.sol\":1031:1056  balanceWETH9.mul(feeBips) */\n      tag_149\n        /* \"contracts/base/PeripheryPaymentsWithFee.sol\":1048:1055  feeBips */\n      dup6\n        /* \"contracts/base/PeripheryPaymentsWithFee.sol\":1031:1043  balanceWETH9 */\n      dup5\n        /* \"contracts/base/PeripheryPaymentsWithFee.sol\":1031:1047  balanceWETH9.mul */\n      tag_150\n      swap1\n        /* \"contracts/base/PeripheryPaymentsWithFee.sol\":1031:1056  balanceWETH9.mul(feeBips) */\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_149:\n        /* \"contracts/base/PeripheryPaymentsWithFee.sol\":1031:1065  balanceWETH9.mul(feeBips) / 10_000 */\n      dup2\n      tag_151\n      jumpi\n      invalid\n    tag_151:\n      div\n      swap1\n      pop\n        /* \"contracts/base/PeripheryPaymentsWithFee.sol\":1083:1096  feeAmount > 0 */\n      dup1\n      iszero\n        /* \"contracts/base/PeripheryPaymentsWithFee.sol\":1079:1153  if (feeAmount > 0) TransferHelper.safeTransferETH(feeRecipient, feeAmount) */\n      tag_153\n      jumpi\n        /* \"contracts/base/PeripheryPaymentsWithFee.sol\":1098:1153  TransferHelper.safeTransferETH(feeRecipient, feeAmount) */\n      tag_153\n        /* \"contracts/base/PeripheryPaymentsWithFee.sol\":1129:1141  feeRecipient */\n      dup4\n        /* \"contracts/base/PeripheryPaymentsWithFee.sol\":1143:1152  feeAmount */\n      dup3\n        /* \"contracts/base/PeripheryPaymentsWithFee.sol\":1098:1128  TransferHelper.safeTransferETH */\n      tag_101\n        /* \"contracts/base/PeripheryPaymentsWithFee.sol\":1098:1153  TransferHelper.safeTransferETH(feeRecipient, feeAmount) */\n      jump\t// in\n    tag_153:\n        /* \"contracts/base/PeripheryPaymentsWithFee.sol\":1167:1234  TransferHelper.safeTransferETH(recipient, balanceWETH9 - feeAmount) */\n      tag_154\n        /* \"contracts/base/PeripheryPaymentsWithFee.sol\":1198:1207  recipient */\n      dup6\n        /* \"contracts/base/PeripheryPaymentsWithFee.sol\":1224:1233  feeAmount */\n      dup3\n        /* \"contracts/base/PeripheryPaymentsWithFee.sol\":1209:1221  balanceWETH9 */\n      dup5\n        /* \"contracts/base/PeripheryPaymentsWithFee.sol\":1209:1233  balanceWETH9 - feeAmount */\n      sub\n        /* \"contracts/base/PeripheryPaymentsWithFee.sol\":1167:1197  TransferHelper.safeTransferETH */\n      tag_101\n        /* \"contracts/base/PeripheryPaymentsWithFee.sol\":1167:1234  TransferHelper.safeTransferETH(recipient, balanceWETH9 - feeAmount) */\n      jump\t// in\n    tag_154:\n        /* \"contracts/base/PeripheryPaymentsWithFee.sol\":925:1245  if (balanceWETH9 > 0) {... */\n      pop\n    tag_145:\n        /* \"contracts/base/PeripheryPaymentsWithFee.sol\":553:1251  function unwrapWETH9WithFee(... */\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/base/SelfPermit.sol\":1652:2000  function selfPermitAllowedIfNecessary(... */\n    tag_53:\n        /* \"contracts/base/SelfPermit.sol\":1861:1911  IERC20(token).allowance(msg.sender, address(this)) */\n      0x40\n      dup1\n      mload\n      shl(0xe1, 0x6eb1769f)\n      dup2\n      mstore\n        /* \"contracts/base/SelfPermit.sol\":1885:1895  msg.sender */\n      caller\n        /* \"contracts/base/SelfPermit.sol\":1861:1911  IERC20(token).allowance(msg.sender, address(this)) */\n      0x04\n      dup3\n      add\n      mstore\n        /* \"contracts/base/SelfPermit.sol\":1905:1909  this */\n      address\n        /* \"contracts/base/SelfPermit.sol\":1861:1911  IERC20(token).allowance(msg.sender, address(this)) */\n      0x24\n      dup3\n      add\n      mstore\n      swap1\n      mload\n      not(0x00)\n        /* \"contracts/base/SelfPermit.sol\":1914:1931  type(uint256).max */\n      swap2\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/base/SelfPermit.sol\":1861:1884  IERC20(token).allowance */\n      dup10\n      and\n      swap2\n      0xdd62ed3e\n      swap2\n        /* \"contracts/base/SelfPermit.sol\":1861:1911  IERC20(token).allowance(msg.sender, address(this)) */\n      0x44\n      dup1\n      dup3\n      add\n      swap3\n      0x20\n      swap3\n      swap1\n      swap2\n      swap1\n      dup3\n      swap1\n      sub\n      add\n      dup2\n        /* \"contracts/base/SelfPermit.sol\":1861:1884  IERC20(token).allowance */\n      dup7\n        /* \"contracts/base/SelfPermit.sol\":1861:1911  IERC20(token).allowance(msg.sender, address(this)) */\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_156\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_156:\n      pop\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_158\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_158:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      0x20\n      dup2\n      lt\n      iszero\n      tag_159\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_159:\n      pop\n      mload\n        /* \"contracts/base/SelfPermit.sol\":1861:1931  IERC20(token).allowance(msg.sender, address(this)) < type(uint256).max */\n      lt\n        /* \"contracts/base/SelfPermit.sol\":1857:1993  if (IERC20(token).allowance(msg.sender, address(this)) < type(uint256).max)... */\n      iszero\n      tag_154\n      jumpi\n        /* \"contracts/base/SelfPermit.sol\":1945:1993  selfPermitAllowed(token, nonce, expiry, v, r, s) */\n      tag_154\n        /* \"contracts/base/SelfPermit.sol\":1963:1968  token */\n      dup7\n        /* \"contracts/base/SelfPermit.sol\":1970:1975  nonce */\n      dup7\n        /* \"contracts/base/SelfPermit.sol\":1977:1983  expiry */\n      dup7\n        /* \"contracts/base/SelfPermit.sol\":1985:1986  v */\n      dup7\n        /* \"contracts/base/SelfPermit.sol\":1988:1989  r */\n      dup7\n        /* \"contracts/base/SelfPermit.sol\":1991:1992  s */\n      dup7\n        /* \"contracts/base/SelfPermit.sol\":1945:1962  selfPermitAllowed */\n      tag_37\n        /* \"contracts/base/SelfPermit.sol\":1945:1993  selfPermitAllowed(token, nonce, expiry, v, r, s) */\n      jump\t// in\n        /* \"contracts/base/Multicall.sol\":308:961  function multicall(bytes[] calldata data) public payable override returns (bytes[] memory results) {... */\n    tag_57:\n        /* \"contracts/base/Multicall.sol\":383:405  bytes[] memory results */\n      0x60\n        /* \"contracts/base/Multicall.sol\":439:443  data */\n      dup2\n        /* \"contracts/base/Multicall.sol\":427:451  new bytes[](data.length) */\n      0xffffffffffffffff\n      dup2\n      gt\n      dup1\n      iszero\n      tag_163\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_163:\n      pop\n      mload(0x40)\n      swap1\n      dup1\n      dup3\n      mstore\n      dup1\n      0x20\n      mul\n      0x20\n      add\n      dup3\n      add\n      0x40\n      mstore\n      dup1\n      iszero\n      tag_164\n      jumpi\n      dup2\n      0x20\n      add\n    tag_165:\n      0x60\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      0x01\n      swap1\n      sub\n      swap1\n      dup2\n      tag_165\n      jumpi\n      swap1\n      pop\n    tag_164:\n      pop\n        /* \"contracts/base/Multicall.sol\":417:451  results = new bytes[](data.length) */\n      swap1\n      pop\n        /* \"contracts/base/Multicall.sol\":466:475  uint256 i */\n      0x00\n        /* \"contracts/base/Multicall.sol\":461:955  for (uint256 i = 0; i < data.length; i++) {... */\n    tag_166:\n        /* \"contracts/base/Multicall.sol\":481:496  i < data.length */\n      dup3\n      dup2\n      lt\n        /* \"contracts/base/Multicall.sol\":461:955  for (uint256 i = 0; i < data.length; i++) {... */\n      iszero\n      tag_167\n      jumpi\n        /* \"contracts/base/Multicall.sol\":518:530  bool success */\n      0x00\n      dup1\n        /* \"contracts/base/Multicall.sol\":563:567  this */\n      address\n        /* \"contracts/base/Multicall.sol\":582:586  data */\n      dup7\n      dup7\n        /* \"contracts/base/Multicall.sol\":587:588  i */\n      dup6\n        /* \"contracts/base/Multicall.sol\":582:589  data[i] */\n      dup2\n      dup2\n      lt\n      tag_169\n      jumpi\n      invalid\n    tag_169:\n      swap1\n      pop\n      0x20\n      mul\n      dup2\n      add\n      swap1\n      tag_170\n      swap2\n      swap1\n      tag_171\n      jump\t// in\n    tag_170:\n        /* \"contracts/base/Multicall.sol\":555:590  address(this).delegatecall(data[i]) */\n      mload(0x40)\n      tag_172\n      swap3\n      swap2\n      swap1\n      tag_173\n      jump\t// in\n    tag_172:\n      0x00\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup6\n      gas\n      delegatecall\n      swap2\n      pop\n      pop\n      returndatasize\n      dup1\n      0x00\n      dup2\n      eq\n      tag_176\n      jumpi\n      mload(0x40)\n      swap2\n      pop\n      and(add(returndatasize, 0x3f), not(0x1f))\n      dup3\n      add\n      0x40\n      mstore\n      returndatasize\n      dup3\n      mstore\n      returndatasize\n      0x00\n      0x20\n      dup5\n      add\n      returndatacopy\n      jump(tag_175)\n    tag_176:\n      0x60\n      swap2\n      pop\n    tag_175:\n      pop\n        /* \"contracts/base/Multicall.sol\":517:590  (bool success, bytes memory result) = address(this).delegatecall(data[i]) */\n      swap2\n      pop\n      swap2\n      pop\n        /* \"contracts/base/Multicall.sol\":610:617  success */\n      dup2\n        /* \"contracts/base/Multicall.sol\":605:911  if (!success) {... */\n      tag_177\n      jumpi\n        /* \"contracts/base/Multicall.sol\":737:739  68 */\n      0x44\n        /* \"contracts/base/Multicall.sol\":721:727  result */\n      dup2\n        /* \"contracts/base/Multicall.sol\":721:734  result.length */\n      mload\n        /* \"contracts/base/Multicall.sol\":721:739  result.length < 68 */\n      lt\n        /* \"contracts/base/Multicall.sol\":717:749  if (result.length < 68) revert() */\n      iszero\n      tag_178\n      jumpi\n        /* \"contracts/base/Multicall.sol\":741:749  revert() */\n      0x00\n      dup1\n      revert\n        /* \"contracts/base/Multicall.sol\":717:749  if (result.length < 68) revert() */\n    tag_178:\n        /* \"contracts/base/Multicall.sol\":820:824  0x04 */\n      0x04\n        /* \"contracts/base/Multicall.sol\":812:818  result */\n      dup2\n        /* \"contracts/base/Multicall.sol\":808:825  add(result, 0x04) */\n      add\n        /* \"contracts/base/Multicall.sol\":798:825  result := add(result, 0x04) */\n      swap1\n      pop\n        /* \"contracts/base/Multicall.sol\":878:884  result */\n      dup1\n        /* \"contracts/base/Multicall.sol\":867:895  abi.decode(result, (string)) */\n      dup1\n      0x20\n      add\n      swap1\n      mload\n      dup2\n      add\n      swap1\n      tag_179\n      swap2\n      swap1\n      tag_180\n      jump\t// in\n    tag_179:\n        /* \"contracts/base/Multicall.sol\":860:896  revert(abi.decode(result, (string))) */\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_120\n      swap2\n      swap1\n      tag_182\n      jump\t// in\n        /* \"contracts/base/Multicall.sol\":605:911  if (!success) {... */\n    tag_177:\n        /* \"contracts/base/Multicall.sol\":938:944  result */\n      dup1\n        /* \"contracts/base/Multicall.sol\":925:932  results */\n      dup5\n        /* \"contracts/base/Multicall.sol\":933:934  i */\n      dup5\n        /* \"contracts/base/Multicall.sol\":925:935  results[i] */\n      dup2\n      mload\n      dup2\n      lt\n      tag_183\n      jumpi\n      invalid\n    tag_183:\n      0x20\n      swap1\n      dup2\n      mul\n      swap2\n      swap1\n      swap2\n      add\n      add\n        /* \"contracts/base/Multicall.sol\":925:944  results[i] = result */\n      mstore\n      pop\n      pop\n        /* \"contracts/base/Multicall.sol\":498:501  i++ */\n      0x01\n      add\n        /* \"contracts/base/Multicall.sol\":461:955  for (uint256 i = 0; i < data.length; i++) {... */\n      jump(tag_166)\n    tag_167:\n      pop\n        /* \"contracts/base/Multicall.sol\":308:961  function multicall(bytes[] calldata data) public payable override returns (bytes[] memory results) {... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/SwapRouter.sol\":4885:6160  function exactInput(ExactInputParams memory params)... */\n    tag_63:\n        /* \"contracts/SwapRouter.sol\":5043:5060  uint256 amountOut */\n      0x00\n        /* \"contracts/SwapRouter.sol\":5009:5015  params */\n      dup2\n        /* \"contracts/SwapRouter.sol\":5009:5024  params.deadline */\n      0x40\n      add\n      mload\n        /* \"contracts/base/PeripheryValidation.sol\":244:252  deadline */\n      dup1\n        /* \"contracts/base/PeripheryValidation.sol\":223:240  _blockTimestamp() */\n      tag_185\n        /* \"contracts/base/PeripheryValidation.sol\":223:238  _blockTimestamp */\n      tag_104\n        /* \"contracts/base/PeripheryValidation.sol\":223:240  _blockTimestamp() */\n      jump\t// in\n    tag_185:\n        /* \"contracts/base/PeripheryValidation.sol\":223:252  _blockTimestamp() <= deadline */\n      gt\n      iszero\n        /* \"contracts/base/PeripheryValidation.sol\":215:276  require(_blockTimestamp() <= deadline, 'Transaction too old') */\n      tag_186\n      jumpi\n      0x40\n      dup1\n      mload\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      mstore\n      0x13\n      0x24\n      dup3\n      add\n      mstore\n      shl(0x6a, 0x151c985b9cd858dd1a5bdb881d1bdbc81bdb19)\n      0x44\n      dup3\n      add\n      mstore\n      swap1\n      mload\n      swap1\n      dup2\n      swap1\n      sub\n      0x64\n      add\n      swap1\n      revert\n    tag_186:\n        /* \"contracts/SwapRouter.sol\":5092:5102  msg.sender */\n      caller\n        /* \"contracts/SwapRouter.sol\":5150:6075  while (true) {... */\n    tag_188:\n        /* \"contracts/SwapRouter.sol\":5177:5198  bool hasMultiplePools */\n      0x00\n        /* \"contracts/SwapRouter.sol\":5201:5231  params.path.hasMultiplePools() */\n      tag_190\n        /* \"contracts/SwapRouter.sol\":5201:5207  params */\n      dup6\n        /* \"contracts/SwapRouter.sol\":5201:5212  params.path */\n      0x00\n      add\n      mload\n        /* \"contracts/SwapRouter.sol\":5201:5229  params.path.hasMultiplePools */\n      tag_191\n        /* \"contracts/SwapRouter.sol\":5201:5231  params.path.hasMultiplePools() */\n      jump\t// in\n    tag_190:\n        /* \"contracts/SwapRouter.sol\":5177:5231  bool hasMultiplePools = params.path.hasMultiplePools() */\n      swap1\n      pop\n        /* \"contracts/SwapRouter.sol\":5343:5737  exactInputInternal(... */\n      tag_192\n        /* \"contracts/SwapRouter.sol\":5379:5385  params */\n      dup6\n        /* \"contracts/SwapRouter.sol\":5379:5394  params.amountIn */\n      0x60\n      add\n      mload\n        /* \"contracts/SwapRouter.sol\":5412:5428  hasMultiplePools */\n      dup3\n        /* \"contracts/SwapRouter.sol\":5412:5463  hasMultiplePools ? address(this) : params.recipient */\n      tag_193\n      jumpi\n        /* \"contracts/SwapRouter.sol\":5447:5453  params */\n      dup7\n        /* \"contracts/SwapRouter.sol\":5447:5463  params.recipient */\n      0x20\n      add\n      mload\n        /* \"contracts/SwapRouter.sol\":5412:5463  hasMultiplePools ? address(this) : params.recipient */\n      jump(tag_194)\n    tag_193:\n        /* \"contracts/SwapRouter.sol\":5439:5443  this */\n      address\n        /* \"contracts/SwapRouter.sol\":5412:5463  hasMultiplePools ? address(this) : params.recipient */\n    tag_194:\n        /* \"contracts/SwapRouter.sol\":5532:5533  0 */\n      0x00\n        /* \"contracts/SwapRouter.sol\":5551:5723  SwapCallbackData({... */\n      mload(0x40)\n      dup1\n      0x40\n      add\n      0x40\n      mstore\n      dup1\n        /* \"contracts/SwapRouter.sol\":5596:5622  params.path.getFirstPool() */\n      tag_195\n        /* \"contracts/SwapRouter.sol\":5596:5602  params */\n      dup12\n        /* \"contracts/SwapRouter.sol\":5596:5607  params.path */\n      0x00\n      add\n      mload\n        /* \"contracts/SwapRouter.sol\":5596:5620  params.path.getFirstPool */\n      tag_196\n        /* \"contracts/SwapRouter.sol\":5596:5622  params.path.getFirstPool() */\n      jump\t// in\n    tag_195:\n        /* \"contracts/SwapRouter.sol\":5551:5723  SwapCallbackData({... */\n      dup2\n      mstore\n      0x20\n      add\n        /* \"contracts/SwapRouter.sol\":5699:5704  payer */\n      dup8\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/SwapRouter.sol\":5551:5723  SwapCallbackData({... */\n      and\n      dup2\n      mstore\n      pop\n        /* \"contracts/SwapRouter.sol\":5343:5361  exactInputInternal */\n      tag_118\n        /* \"contracts/SwapRouter.sol\":5343:5737  exactInputInternal(... */\n      jump\t// in\n    tag_192:\n        /* \"contracts/SwapRouter.sol\":5325:5340  params.amountIn */\n      0x60\n      dup7\n      add\n        /* \"contracts/SwapRouter.sol\":5325:5737  params.amountIn = exactInputInternal(... */\n      mstore\n        /* \"contracts/SwapRouter.sol\":5807:6065  if (hasMultiplePools) {... */\n      dup1\n      iszero\n      tag_197\n      jumpi\n        /* \"contracts/SwapRouter.sol\":5938:5949  params.path */\n      dup5\n      mload\n        /* \"contracts/SwapRouter.sol\":5863:5867  this */\n      address\n      swap3\n      pop\n        /* \"contracts/SwapRouter.sol\":5938:5961  params.path.skipToken() */\n      tag_198\n      swap1\n        /* \"contracts/SwapRouter.sol\":5938:5959  params.path.skipToken */\n      tag_199\n        /* \"contracts/SwapRouter.sol\":5938:5961  params.path.skipToken() */\n      jump\t// in\n    tag_198:\n        /* \"contracts/SwapRouter.sol\":5924:5961  params.path = params.path.skipToken() */\n      dup6\n      mstore\n        /* \"contracts/SwapRouter.sol\":5807:6065  if (hasMultiplePools) {... */\n      jump(tag_200)\n    tag_197:\n        /* \"contracts/SwapRouter.sol\":6012:6018  params */\n      dup5\n        /* \"contracts/SwapRouter.sol\":6012:6027  params.amountIn */\n      0x60\n      add\n      mload\n        /* \"contracts/SwapRouter.sol\":6000:6027  amountOut = params.amountIn */\n      swap4\n      pop\n        /* \"contracts/SwapRouter.sol\":6045:6050  break */\n      pop\n      jump(tag_189)\n        /* \"contracts/SwapRouter.sol\":5807:6065  if (hasMultiplePools) {... */\n    tag_200:\n        /* \"contracts/SwapRouter.sol\":5150:6075  while (true) {... */\n      pop\n      jump(tag_188)\n    tag_189:\n        /* \"contracts/SwapRouter.sol\":6106:6112  params */\n      dup4\n        /* \"contracts/SwapRouter.sol\":6106:6129  params.amountOutMinimum */\n      0x80\n      add\n      mload\n        /* \"contracts/SwapRouter.sol\":6093:6102  amountOut */\n      dup4\n        /* \"contracts/SwapRouter.sol\":6093:6129  amountOut >= params.amountOutMinimum */\n      lt\n      iszero\n        /* \"contracts/SwapRouter.sol\":6085:6153  require(amountOut >= params.amountOutMinimum, 'Too little received') */\n      tag_201\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_120\n      swap1\n      tag_121\n      jump\t// in\n    tag_201:\n        /* \"contracts/base/PeripheryValidation.sol\":286:287  _ */\n      pop\n        /* \"contracts/SwapRouter.sol\":4885:6160  function exactInput(ExactInputParams memory params)... */\n      pop\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"contracts/base/SelfPermit.sol\":973:1287  function selfPermitIfNecessary(... */\n    tag_67:\n        /* \"contracts/base/SelfPermit.sol\":1177:1227  IERC20(token).allowance(msg.sender, address(this)) */\n      0x40\n      dup1\n      mload\n      shl(0xe1, 0x6eb1769f)\n      dup2\n      mstore\n        /* \"contracts/base/SelfPermit.sol\":1201:1211  msg.sender */\n      caller\n        /* \"contracts/base/SelfPermit.sol\":1177:1227  IERC20(token).allowance(msg.sender, address(this)) */\n      0x04\n      dup3\n      add\n      mstore\n        /* \"contracts/base/SelfPermit.sol\":1221:1225  this */\n      address\n        /* \"contracts/base/SelfPermit.sol\":1177:1227  IERC20(token).allowance(msg.sender, address(this)) */\n      0x24\n      dup3\n      add\n      mstore\n      swap1\n      mload\n        /* \"contracts/base/SelfPermit.sol\":1230:1235  value */\n      dup7\n      swap2\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/base/SelfPermit.sol\":1177:1200  IERC20(token).allowance */\n      dup10\n      and\n      swap2\n      0xdd62ed3e\n      swap2\n        /* \"contracts/base/SelfPermit.sol\":1177:1227  IERC20(token).allowance(msg.sender, address(this)) */\n      0x44\n      dup1\n      dup3\n      add\n      swap3\n      0x20\n      swap3\n      swap1\n      swap2\n      swap1\n      dup3\n      swap1\n      sub\n      add\n      dup2\n        /* \"contracts/base/SelfPermit.sol\":1177:1200  IERC20(token).allowance */\n      dup7\n        /* \"contracts/base/SelfPermit.sol\":1177:1227  IERC20(token).allowance(msg.sender, address(this)) */\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_204\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_204:\n      pop\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_206\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_206:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      0x20\n      dup2\n      lt\n      iszero\n      tag_207\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_207:\n      pop\n      mload\n        /* \"contracts/base/SelfPermit.sol\":1177:1235  IERC20(token).allowance(msg.sender, address(this)) < value */\n      lt\n        /* \"contracts/base/SelfPermit.sol\":1173:1280  if (IERC20(token).allowance(msg.sender, address(this)) < value) selfPermit(token, value, deadline, v, r, s) */\n      iszero\n      tag_154\n      jumpi\n        /* \"contracts/base/SelfPermit.sol\":1237:1280  selfPermit(token, value, deadline, v, r, s) */\n      tag_154\n        /* \"contracts/base/SelfPermit.sol\":1248:1253  token */\n      dup7\n        /* \"contracts/base/SelfPermit.sol\":1255:1260  value */\n      dup7\n        /* \"contracts/base/SelfPermit.sol\":1262:1270  deadline */\n      dup7\n        /* \"contracts/base/SelfPermit.sol\":1272:1273  v */\n      dup7\n        /* \"contracts/base/SelfPermit.sol\":1275:1276  r */\n      dup7\n        /* \"contracts/base/SelfPermit.sol\":1278:1279  s */\n      dup7\n        /* \"contracts/base/SelfPermit.sol\":1237:1247  selfPermit */\n      tag_92\n        /* \"contracts/base/SelfPermit.sol\":1237:1280  selfPermit(token, value, deadline, v, r, s) */\n      jump\t// in\n        /* \"contracts/base/PeripheryImmutableState.sol\":328:369  address public immutable override factory */\n    tag_70:\n      immutable(\"0x1dda9873baa24e5dc3a48371aa5a89ce85f19f9dd041db3ba184e623299b8433\")\n      dup2\n      jump\t// out\n        /* \"contracts/SwapRouter.sol\":7587:8319  function exactOutputSingle(ExactOutputSingleParams calldata params)... */\n    tag_75:\n        /* \"contracts/SwapRouter.sol\":7761:7777  uint256 amountIn */\n      0x00\n        /* \"contracts/SwapRouter.sol\":7727:7733  params */\n      dup2\n        /* \"contracts/SwapRouter.sol\":7727:7742  params.deadline */\n      0x80\n      add\n      calldataload\n        /* \"contracts/base/PeripheryValidation.sol\":244:252  deadline */\n      dup1\n        /* \"contracts/base/PeripheryValidation.sol\":223:240  _blockTimestamp() */\n      tag_211\n        /* \"contracts/base/PeripheryValidation.sol\":223:238  _blockTimestamp */\n      tag_104\n        /* \"contracts/base/PeripheryValidation.sol\":223:240  _blockTimestamp() */\n      jump\t// in\n    tag_211:\n        /* \"contracts/base/PeripheryValidation.sol\":223:252  _blockTimestamp() <= deadline */\n      gt\n      iszero\n        /* \"contracts/base/PeripheryValidation.sol\":215:276  require(_blockTimestamp() <= deadline, 'Transaction too old') */\n      tag_212\n      jumpi\n      0x40\n      dup1\n      mload\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      mstore\n      0x13\n      0x24\n      dup3\n      add\n      mstore\n      shl(0x6a, 0x151c985b9cd858dd1a5bdb881d1bdbc81bdb19)\n      0x44\n      dup3\n      add\n      mstore\n      swap1\n      mload\n      swap1\n      dup2\n      swap1\n      sub\n      0x64\n      add\n      swap1\n      revert\n    tag_212:\n        /* \"contracts/SwapRouter.sol\":7860:8107  exactOutputInternal(... */\n      tag_214\n        /* \"contracts/SwapRouter.sol\":7893:7909  params.amountOut */\n      0xa0\n      dup5\n      add\n      calldataload\n        /* \"contracts/SwapRouter.sol\":7923:7939  params.recipient */\n      tag_215\n      0x80\n      dup7\n      add\n      0x60\n      dup8\n      add\n      tag_109\n      jump\t// in\n    tag_215:\n        /* \"contracts/SwapRouter.sol\":7953:7977  params.sqrtPriceLimitX96 */\n      tag_216\n      0x0100\n      dup8\n      add\n      0xe0\n      dup9\n      add\n      tag_109\n      jump\t// in\n    tag_216:\n        /* \"contracts/SwapRouter.sol\":7991:8097  SwapCallbackData({path: abi.encodePacked(params.tokenOut, params.fee, params.tokenIn), payer: msg.sender}) */\n      mload(0x40)\n      dup1\n      0x40\n      add\n      0x40\n      mstore\n      dup1\n        /* \"contracts/SwapRouter.sol\":8032:8038  params */\n      dup9\n        /* \"contracts/SwapRouter.sol\":8032:8047  params.tokenOut */\n      0x20\n      add\n      0x20\n      dup2\n      add\n      swap1\n      tag_217\n      swap2\n      swap1\n      tag_109\n      jump\t// in\n    tag_217:\n        /* \"contracts/SwapRouter.sol\":8049:8059  params.fee */\n      tag_218\n      0x60\n      dup12\n      add\n      0x40\n      dup13\n      add\n      tag_114\n      jump\t// in\n    tag_218:\n        /* \"contracts/SwapRouter.sol\":8061:8075  params.tokenIn */\n      tag_219\n      0x20\n      dup13\n      add\n        /* \"contracts/SwapRouter.sol\":8061:8067  params */\n      dup13\n        /* \"contracts/SwapRouter.sol\":8061:8075  params.tokenIn */\n      tag_109\n      jump\t// in\n    tag_219:\n        /* \"contracts/SwapRouter.sol\":8015:8076  abi.encodePacked(params.tokenOut, params.fee, params.tokenIn) */\n      add(0x20, mload(0x40))\n      tag_220\n      swap4\n      swap3\n      swap2\n      swap1\n      tag_117\n      jump\t// in\n    tag_220:\n      mload(0x40)\n      0x20\n      dup2\n      dup4\n      sub\n      sub\n      dup2\n      mstore\n      swap1\n      0x40\n      mstore\n        /* \"contracts/SwapRouter.sol\":7991:8097  SwapCallbackData({path: abi.encodePacked(params.tokenOut, params.fee, params.tokenIn), payer: msg.sender}) */\n      dup2\n      mstore\n      0x20\n      add\n        /* \"contracts/SwapRouter.sol\":8085:8095  msg.sender */\n      caller\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/SwapRouter.sol\":7991:8097  SwapCallbackData({path: abi.encodePacked(params.tokenOut, params.fee, params.tokenIn), payer: msg.sender}) */\n      and\n      dup2\n      mstore\n      pop\n        /* \"contracts/SwapRouter.sol\":7860:7879  exactOutputInternal */\n      tag_221\n        /* \"contracts/SwapRouter.sol\":7860:8107  exactOutputInternal(... */\n      jump\t// in\n    tag_214:\n        /* \"contracts/SwapRouter.sol\":7849:8107  amountIn = exactOutputInternal(... */\n      swap2\n      pop\n        /* \"contracts/SwapRouter.sol\":8138:8144  params */\n      dup3\n        /* \"contracts/SwapRouter.sol\":8138:8160  params.amountInMaximum */\n      0xc0\n      add\n      calldataload\n        /* \"contracts/SwapRouter.sol\":8126:8134  amountIn */\n      dup3\n        /* \"contracts/SwapRouter.sol\":8126:8160  amountIn <= params.amountInMaximum */\n      gt\n      iszero\n        /* \"contracts/SwapRouter.sol\":8118:8183  require(amountIn <= params.amountInMaximum, 'Too much requested') */\n      tag_222\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_120\n      swap1\n      tag_224\n      jump\t// in\n    tag_222:\n      pop\n      not(0x00)\n        /* \"contracts/SwapRouter.sol\":8271:8285  amountInCached */\n      0x00\n        /* \"contracts/SwapRouter.sol\":8271:8312  amountInCached = DEFAULT_AMOUNT_IN_CACHED */\n      sstore\n        /* \"contracts/SwapRouter.sol\":7587:8319  function exactOutputSingle(ExactOutputSingleParams calldata params)... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"contracts/base/PeripheryPayments.sol\":966:1361  function sweepToken(... */\n    tag_80:\n        /* \"contracts/base/PeripheryPayments.sol\":1107:1127  uint256 balanceToken */\n      0x00\n        /* \"contracts/base/PeripheryPayments.sol\":1137:1142  token */\n      dup4\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/base/PeripheryPayments.sol\":1130:1153  IERC20(token).balanceOf */\n      and\n      0x70a08231\n        /* \"contracts/base/PeripheryPayments.sol\":1162:1166  this */\n      address\n        /* \"contracts/base/PeripheryPayments.sol\":1130:1168  IERC20(token).balanceOf(address(this)) */\n      mload(0x40)\n      dup3\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup3\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup7\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_226\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_226:\n      pop\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_228\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_228:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      0x20\n      dup2\n      lt\n      iszero\n      tag_229\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_229:\n      pop\n      mload\n      swap1\n      pop\n        /* \"contracts/base/PeripheryPayments.sol\":1186:1215  balanceToken >= amountMinimum */\n      dup3\n      dup2\n      lt\n      iszero\n        /* \"contracts/base/PeripheryPayments.sol\":1178:1238  require(balanceToken >= amountMinimum, 'Insufficient token') */\n      tag_230\n      jumpi\n      0x40\n      dup1\n      mload\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      mstore\n      0x12\n      0x24\n      dup3\n      add\n      mstore\n      shl(0x71, 0x24b739bab33334b1b4b2b73a103a37b5b2b7)\n      0x44\n      dup3\n      add\n      mstore\n      swap1\n      mload\n      swap1\n      dup2\n      swap1\n      sub\n      0x64\n      add\n      swap1\n      revert\n    tag_230:\n        /* \"contracts/base/PeripheryPayments.sol\":1253:1269  balanceToken > 0 */\n      dup1\n      iszero\n        /* \"contracts/base/PeripheryPayments.sol\":1249:1355  if (balanceToken > 0) {... */\n      tag_232\n      jumpi\n        /* \"contracts/base/PeripheryPayments.sol\":1285:1344  TransferHelper.safeTransfer(token, recipient, balanceToken) */\n      tag_232\n        /* \"contracts/base/PeripheryPayments.sol\":1313:1318  token */\n      dup5\n        /* \"contracts/base/PeripheryPayments.sol\":1320:1329  recipient */\n      dup4\n        /* \"contracts/base/PeripheryPayments.sol\":1331:1343  balanceToken */\n      dup4\n        /* \"contracts/base/PeripheryPayments.sol\":1285:1312  TransferHelper.safeTransfer */\n      tag_233\n        /* \"contracts/base/PeripheryPayments.sol\":1285:1344  TransferHelper.safeTransfer(token, recipient, balanceToken) */\n      jump\t// in\n    tag_232:\n        /* \"contracts/base/PeripheryPayments.sol\":966:1361  function sweepToken(... */\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/base/PeripheryPaymentsWithFee.sol\":1303:1981  function sweepTokenWithFee(... */\n    tag_84:\n        /* \"contracts/base/PeripheryPaymentsWithFee.sol\":1524:1525  0 */\n      0x00\n        /* \"contracts/base/PeripheryPaymentsWithFee.sol\":1514:1521  feeBips */\n      dup3\n        /* \"contracts/base/PeripheryPaymentsWithFee.sol\":1514:1525  feeBips > 0 */\n      gt\n        /* \"contracts/base/PeripheryPaymentsWithFee.sol\":1514:1543  feeBips > 0 && feeBips <= 100 */\n      dup1\n      iszero\n      tag_235\n      jumpi\n      pop\n        /* \"contracts/base/PeripheryPaymentsWithFee.sol\":1540:1543  100 */\n      0x64\n        /* \"contracts/base/PeripheryPaymentsWithFee.sol\":1529:1536  feeBips */\n      dup3\n        /* \"contracts/base/PeripheryPaymentsWithFee.sol\":1529:1543  feeBips <= 100 */\n      gt\n      iszero\n        /* \"contracts/base/PeripheryPaymentsWithFee.sol\":1514:1543  feeBips > 0 && feeBips <= 100 */\n    tag_235:\n        /* \"contracts/base/PeripheryPaymentsWithFee.sol\":1506:1544  require(feeBips > 0 && feeBips <= 100) */\n      tag_236\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_236:\n        /* \"contracts/base/PeripheryPaymentsWithFee.sol\":1555:1575  uint256 balanceToken */\n      0x00\n        /* \"contracts/base/PeripheryPaymentsWithFee.sol\":1585:1590  token */\n      dup6\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/base/PeripheryPaymentsWithFee.sol\":1578:1601  IERC20(token).balanceOf */\n      and\n      0x70a08231\n        /* \"contracts/base/PeripheryPaymentsWithFee.sol\":1610:1614  this */\n      address\n        /* \"contracts/base/PeripheryPaymentsWithFee.sol\":1578:1616  IERC20(token).balanceOf(address(this)) */\n      mload(0x40)\n      dup3\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup3\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup7\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_237\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_237:\n      pop\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_239\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_239:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      0x20\n      dup2\n      lt\n      iszero\n      tag_240\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_240:\n      pop\n      mload\n      swap1\n      pop\n        /* \"contracts/base/PeripheryPaymentsWithFee.sol\":1634:1663  balanceToken >= amountMinimum */\n      dup5\n      dup2\n      lt\n      iszero\n        /* \"contracts/base/PeripheryPaymentsWithFee.sol\":1626:1686  require(balanceToken >= amountMinimum, 'Insufficient token') */\n      tag_241\n      jumpi\n      0x40\n      dup1\n      mload\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      mstore\n      0x12\n      0x24\n      dup3\n      add\n      mstore\n      shl(0x71, 0x24b739bab33334b1b4b2b73a103a37b5b2b7)\n      0x44\n      dup3\n      add\n      mstore\n      swap1\n      mload\n      swap1\n      dup2\n      swap1\n      sub\n      0x64\n      add\n      swap1\n      revert\n    tag_241:\n        /* \"contracts/base/PeripheryPaymentsWithFee.sol\":1701:1717  balanceToken > 0 */\n      dup1\n      iszero\n        /* \"contracts/base/PeripheryPaymentsWithFee.sol\":1697:1975  if (balanceToken > 0) {... */\n      tag_154\n      jumpi\n        /* \"contracts/base/PeripheryPaymentsWithFee.sol\":1733:1750  uint256 feeAmount */\n      0x00\n        /* \"contracts/base/PeripheryPaymentsWithFee.sol\":1781:1787  10_000 */\n      0x2710\n        /* \"contracts/base/PeripheryPaymentsWithFee.sol\":1753:1778  balanceToken.mul(feeBips) */\n      tag_243\n        /* \"contracts/base/PeripheryPaymentsWithFee.sol\":1753:1765  balanceToken */\n      dup4\n        /* \"contracts/base/PeripheryPaymentsWithFee.sol\":1770:1777  feeBips */\n      dup7\n        /* \"contracts/base/PeripheryPaymentsWithFee.sol\":1753:1769  balanceToken.mul */\n      tag_150\n        /* \"contracts/base/PeripheryPaymentsWithFee.sol\":1753:1778  balanceToken.mul(feeBips) */\n      jump\t// in\n    tag_243:\n        /* \"contracts/base/PeripheryPaymentsWithFee.sol\":1753:1787  balanceToken.mul(feeBips) / 10_000 */\n      dup2\n      tag_244\n      jumpi\n      invalid\n    tag_244:\n      div\n      swap1\n      pop\n        /* \"contracts/base/PeripheryPaymentsWithFee.sol\":1805:1818  feeAmount > 0 */\n      dup1\n      iszero\n        /* \"contracts/base/PeripheryPaymentsWithFee.sol\":1801:1879  if (feeAmount > 0) TransferHelper.safeTransfer(token, feeRecipient, feeAmount) */\n      tag_246\n      jumpi\n        /* \"contracts/base/PeripheryPaymentsWithFee.sol\":1820:1879  TransferHelper.safeTransfer(token, feeRecipient, feeAmount) */\n      tag_246\n        /* \"contracts/base/PeripheryPaymentsWithFee.sol\":1848:1853  token */\n      dup8\n        /* \"contracts/base/PeripheryPaymentsWithFee.sol\":1855:1867  feeRecipient */\n      dup5\n        /* \"contracts/base/PeripheryPaymentsWithFee.sol\":1869:1878  feeAmount */\n      dup4\n        /* \"contracts/base/PeripheryPaymentsWithFee.sol\":1820:1847  TransferHelper.safeTransfer */\n      tag_233\n        /* \"contracts/base/PeripheryPaymentsWithFee.sol\":1820:1879  TransferHelper.safeTransfer(token, feeRecipient, feeAmount) */\n      jump\t// in\n    tag_246:\n        /* \"contracts/base/PeripheryPaymentsWithFee.sol\":1893:1964  TransferHelper.safeTransfer(token, recipient, balanceToken - feeAmount) */\n      tag_247\n        /* \"contracts/base/PeripheryPaymentsWithFee.sol\":1921:1926  token */\n      dup8\n        /* \"contracts/base/PeripheryPaymentsWithFee.sol\":1928:1937  recipient */\n      dup7\n        /* \"contracts/base/PeripheryPaymentsWithFee.sol\":1954:1963  feeAmount */\n      dup4\n        /* \"contracts/base/PeripheryPaymentsWithFee.sol\":1939:1951  balanceToken */\n      dup6\n        /* \"contracts/base/PeripheryPaymentsWithFee.sol\":1939:1963  balanceToken - feeAmount */\n      sub\n        /* \"contracts/base/PeripheryPaymentsWithFee.sol\":1893:1920  TransferHelper.safeTransfer */\n      tag_233\n        /* \"contracts/base/PeripheryPaymentsWithFee.sol\":1893:1964  TransferHelper.safeTransfer(token, recipient, balanceToken - feeAmount) */\n      jump\t// in\n    tag_247:\n        /* \"contracts/base/PeripheryPaymentsWithFee.sol\":1697:1975  if (balanceToken > 0) {... */\n      pop\n        /* \"contracts/base/PeripheryPaymentsWithFee.sol\":1303:1981  function sweepTokenWithFee(... */\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/SwapRouter.sol\":8357:9113  function exactOutput(ExactOutputParams calldata params)... */\n    tag_88:\n        /* \"contracts/SwapRouter.sol\":8519:8535  uint256 amountIn */\n      0x00\n        /* \"contracts/SwapRouter.sol\":8485:8491  params */\n      dup2\n        /* \"contracts/SwapRouter.sol\":8485:8500  params.deadline */\n      0x40\n      add\n      calldataload\n        /* \"contracts/base/PeripheryValidation.sol\":244:252  deadline */\n      dup1\n        /* \"contracts/base/PeripheryValidation.sol\":223:240  _blockTimestamp() */\n      tag_249\n        /* \"contracts/base/PeripheryValidation.sol\":223:238  _blockTimestamp */\n      tag_104\n        /* \"contracts/base/PeripheryValidation.sol\":223:240  _blockTimestamp() */\n      jump\t// in\n    tag_249:\n        /* \"contracts/base/PeripheryValidation.sol\":223:252  _blockTimestamp() <= deadline */\n      gt\n      iszero\n        /* \"contracts/base/PeripheryValidation.sol\":215:276  require(_blockTimestamp() <= deadline, 'Transaction too old') */\n      tag_250\n      jumpi\n      0x40\n      dup1\n      mload\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      mstore\n      0x13\n      0x24\n      dup3\n      add\n      mstore\n      shl(0x6a, 0x151c985b9cd858dd1a5bdb881d1bdbc81bdb19)\n      0x44\n      dup3\n      add\n      mstore\n      swap1\n      mload\n      swap1\n      dup2\n      swap1\n      sub\n      0x64\n      add\n      swap1\n      revert\n    tag_250:\n        /* \"contracts/SwapRouter.sol\":8770:8944  exactOutputInternal(... */\n      tag_252\n        /* \"contracts/SwapRouter.sol\":8803:8819  params.amountOut */\n      0x60\n      dup5\n      add\n      calldataload\n        /* \"contracts/SwapRouter.sol\":8833:8849  params.recipient */\n      tag_253\n      0x40\n      dup7\n      add\n      0x20\n      dup8\n      add\n      tag_109\n      jump\t// in\n    tag_253:\n        /* \"contracts/SwapRouter.sol\":8878:8934  SwapCallbackData({path: params.path, payer: msg.sender}) */\n      0x40\n      dup1\n      mload\n      dup1\n      dup3\n      add\n      swap1\n      swap2\n      mstore\n        /* \"contracts/SwapRouter.sol\":8863:8864  0 */\n      0x00\n      swap1\n        /* \"contracts/SwapRouter.sol\":8878:8934  SwapCallbackData({path: params.path, payer: msg.sender}) */\n      dup1\n        /* \"contracts/SwapRouter.sol\":8902:8913  params.path */\n      tag_254\n        /* \"contracts/SwapRouter.sol\":8902:8908  params */\n      dup10\n      dup1\n        /* \"contracts/SwapRouter.sol\":8902:8913  params.path */\n      tag_171\n      jump\t// in\n    tag_254:\n        /* \"contracts/SwapRouter.sol\":8878:8934  SwapCallbackData({path: params.path, payer: msg.sender}) */\n      dup1\n      dup1\n      0x1f\n      add\n      0x20\n      dup1\n      swap2\n      div\n      mul\n      0x20\n      add\n      mload(0x40)\n      swap1\n      dup2\n      add\n      0x40\n      mstore\n      dup1\n      swap4\n      swap3\n      swap2\n      swap1\n      dup2\n      dup2\n      mstore\n      0x20\n      add\n      dup4\n      dup4\n      dup1\n      dup3\n      dup5\n      calldatacopy\n      0x00\n      swap3\n      add\n      swap2\n      swap1\n      swap2\n      mstore\n      pop\n      pop\n      pop\n      swap1\n      dup3\n      mstore\n      pop\n        /* \"contracts/SwapRouter.sol\":8922:8932  msg.sender */\n      caller\n        /* \"contracts/SwapRouter.sol\":8878:8934  SwapCallbackData({path: params.path, payer: msg.sender}) */\n      0x20\n      swap1\n      swap2\n      add\n      mstore\n        /* \"contracts/SwapRouter.sol\":8770:8789  exactOutputInternal */\n      tag_221\n        /* \"contracts/SwapRouter.sol\":8770:8944  exactOutputInternal(... */\n      jump\t// in\n    tag_252:\n      pop\n        /* \"contracts/SwapRouter.sol\":8966:8980  amountInCached */\n      sload(0x00)\n        /* \"contracts/SwapRouter.sol\":8955:8980  amountIn = amountInCached */\n      swap2\n      pop\n        /* \"contracts/SwapRouter.sol\":9010:9016  params */\n      dup3\n        /* \"contracts/SwapRouter.sol\":9010:9032  params.amountInMaximum */\n      0x80\n      add\n      calldataload\n        /* \"contracts/SwapRouter.sol\":8998:9006  amountIn */\n      dup3\n        /* \"contracts/SwapRouter.sol\":8998:9032  amountIn <= params.amountInMaximum */\n      gt\n      iszero\n        /* \"contracts/SwapRouter.sol\":8990:9055  require(amountIn <= params.amountInMaximum, 'Too much requested') */\n      tag_222\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_120\n      swap1\n      tag_224\n      jump\t// in\n        /* \"contracts/base/SelfPermit.sol\":662:935  function selfPermit(... */\n    tag_92:\n        /* \"contracts/base/SelfPermit.sol\":849:928  IERC20Permit(token).permit(msg.sender, address(this), value, deadline, v, r, s) */\n      0x40\n      dup1\n      mload\n      shl(0xe0, 0xd505accf)\n      dup2\n      mstore\n        /* \"contracts/base/SelfPermit.sol\":876:886  msg.sender */\n      caller\n        /* \"contracts/base/SelfPermit.sol\":849:928  IERC20Permit(token).permit(msg.sender, address(this), value, deadline, v, r, s) */\n      0x04\n      dup3\n      add\n      mstore\n        /* \"contracts/base/SelfPermit.sol\":896:900  this */\n      address\n        /* \"contracts/base/SelfPermit.sol\":849:928  IERC20Permit(token).permit(msg.sender, address(this), value, deadline, v, r, s) */\n      0x24\n      dup3\n      add\n      mstore\n      0x44\n      dup2\n      add\n      dup8\n      swap1\n      mstore\n      0x64\n      dup2\n      add\n      dup7\n      swap1\n      mstore\n      0xff\n      dup6\n      and\n      0x84\n      dup3\n      add\n      mstore\n      0xa4\n      dup2\n      add\n      dup5\n      swap1\n      mstore\n      0xc4\n      dup2\n      add\n      dup4\n      swap1\n      mstore\n      swap1\n      mload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/base/SelfPermit.sol\":849:875  IERC20Permit(token).permit */\n      dup9\n      and\n      swap2\n      0xd505accf\n      swap2\n        /* \"contracts/base/SelfPermit.sol\":849:928  IERC20Permit(token).permit(msg.sender, address(this), value, deadline, v, r, s) */\n      0xe4\n      dup1\n      dup4\n      add\n      swap3\n      0x00\n      swap3\n      swap2\n      swap1\n      dup3\n      swap1\n      sub\n      add\n      dup2\n      dup4\n        /* \"contracts/base/SelfPermit.sol\":849:875  IERC20Permit(token).permit */\n      dup8\n        /* \"contracts/base/SelfPermit.sol\":849:928  IERC20Permit(token).permit(msg.sender, address(this), value, deadline, v, r, s) */\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_123\n      jumpi\n      0x00\n      dup1\n      revert\n        /* \"contracts/SwapRouter.sol\":1980:3274  function uniswapV3SwapCallback(... */\n    tag_97:\n        /* \"contracts/SwapRouter.sol\":2156:2157  0 */\n      0x00\n        /* \"contracts/SwapRouter.sol\":2141:2153  amount0Delta */\n      dup5\n        /* \"contracts/SwapRouter.sol\":2141:2157  amount0Delta > 0 */\n      sgt\n        /* \"contracts/SwapRouter.sol\":2141:2177  amount0Delta > 0 || amount1Delta > 0 */\n      dup1\n      tag_262\n      jumpi\n      pop\n        /* \"contracts/SwapRouter.sol\":2176:2177  0 */\n      0x00\n        /* \"contracts/SwapRouter.sol\":2161:2173  amount1Delta */\n      dup4\n        /* \"contracts/SwapRouter.sol\":2161:2177  amount1Delta > 0 */\n      sgt\n        /* \"contracts/SwapRouter.sol\":2141:2177  amount0Delta > 0 || amount1Delta > 0 */\n    tag_262:\n        /* \"contracts/SwapRouter.sol\":2133:2178  require(amount0Delta > 0 || amount1Delta > 0) */\n      tag_263\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_263:\n        /* \"contracts/SwapRouter.sol\":2251:2279  SwapCallbackData memory data */\n      0x00\n        /* \"contracts/SwapRouter.sol\":2282:2319  abi.decode(_data, (SwapCallbackData)) */\n      tag_264\n      dup3\n      dup5\n      add\n        /* \"contracts/SwapRouter.sol\":2293:2298  _data */\n      dup5\n        /* \"contracts/SwapRouter.sol\":2282:2319  abi.decode(_data, (SwapCallbackData)) */\n      tag_265\n      jump\t// in\n    tag_264:\n        /* \"contracts/SwapRouter.sol\":2251:2319  SwapCallbackData memory data = abi.decode(_data, (SwapCallbackData)) */\n      swap1\n      pop\n        /* \"contracts/SwapRouter.sol\":2330:2345  address tokenIn */\n      0x00\n        /* \"contracts/SwapRouter.sol\":2347:2363  address tokenOut */\n      dup1\n        /* \"contracts/SwapRouter.sol\":2365:2375  uint24 fee */\n      0x00\n        /* \"contracts/SwapRouter.sol\":2379:2406  data.path.decodeFirstPool() */\n      tag_266\n        /* \"contracts/SwapRouter.sol\":2379:2383  data */\n      dup5\n        /* \"contracts/SwapRouter.sol\":2379:2388  data.path */\n      0x00\n      add\n      mload\n        /* \"contracts/SwapRouter.sol\":2379:2404  data.path.decodeFirstPool */\n      tag_267\n        /* \"contracts/SwapRouter.sol\":2379:2406  data.path.decodeFirstPool() */\n      jump\t// in\n    tag_266:\n        /* \"contracts/SwapRouter.sol\":2329:2406  (address tokenIn, address tokenOut, uint24 fee) = data.path.decodeFirstPool() */\n      swap3\n      pop\n      swap3\n      pop\n      swap3\n      pop\n        /* \"contracts/SwapRouter.sol\":2416:2482  CallbackValidation.verifyCallback(factory, tokenIn, tokenOut, fee) */\n      tag_268\n        /* \"contracts/SwapRouter.sol\":2450:2457  factory */\n      immutable(\"0x1dda9873baa24e5dc3a48371aa5a89ce85f19f9dd041db3ba184e623299b8433\")\n        /* \"contracts/SwapRouter.sol\":2459:2466  tokenIn */\n      dup5\n        /* \"contracts/SwapRouter.sol\":2468:2476  tokenOut */\n      dup5\n        /* \"contracts/SwapRouter.sol\":2478:2481  fee */\n      dup5\n        /* \"contracts/SwapRouter.sol\":2416:2449  CallbackValidation.verifyCallback */\n      tag_269\n        /* \"contracts/SwapRouter.sol\":2416:2482  CallbackValidation.verifyCallback(factory, tokenIn, tokenOut, fee) */\n      jump\t// in\n    tag_268:\n      pop\n        /* \"contracts/SwapRouter.sol\":2494:2511  bool isExactInput */\n      0x00\n        /* \"contracts/SwapRouter.sol\":2513:2532  uint256 amountToPay */\n      dup1\n        /* \"contracts/SwapRouter.sol\":2563:2564  0 */\n      0x00\n        /* \"contracts/SwapRouter.sol\":2548:2560  amount0Delta */\n      dup11\n        /* \"contracts/SwapRouter.sol\":2548:2564  amount0Delta > 0 */\n      sgt\n        /* \"contracts/SwapRouter.sol\":2548:2688  amount0Delta > 0... */\n      tag_270\n      jumpi\n        /* \"contracts/SwapRouter.sol\":2657:2664  tokenIn */\n      dup5\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/SwapRouter.sol\":2646:2664  tokenOut < tokenIn */\n      and\n        /* \"contracts/SwapRouter.sol\":2646:2654  tokenOut */\n      dup5\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/SwapRouter.sol\":2646:2664  tokenOut < tokenIn */\n      and\n      lt\n        /* \"contracts/SwapRouter.sol\":2674:2686  amount1Delta */\n      dup10\n        /* \"contracts/SwapRouter.sol\":2548:2688  amount0Delta > 0... */\n      jump(tag_271)\n    tag_270:\n        /* \"contracts/SwapRouter.sol\":2594:2602  tokenOut */\n      dup4\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/SwapRouter.sol\":2584:2602  tokenIn < tokenOut */\n      and\n        /* \"contracts/SwapRouter.sol\":2584:2591  tokenIn */\n      dup6\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/SwapRouter.sol\":2584:2602  tokenIn < tokenOut */\n      and\n      lt\n        /* \"contracts/SwapRouter.sol\":2612:2624  amount0Delta */\n      dup11\n        /* \"contracts/SwapRouter.sol\":2548:2688  amount0Delta > 0... */\n    tag_271:\n        /* \"contracts/SwapRouter.sol\":2493:2688  (bool isExactInput, uint256 amountToPay) =... */\n      swap2\n      pop\n      swap2\n      pop\n        /* \"contracts/SwapRouter.sol\":2702:2714  isExactInput */\n      dup2\n        /* \"contracts/SwapRouter.sol\":2698:3268  if (isExactInput) {... */\n      iszero\n      tag_272\n      jumpi\n        /* \"contracts/SwapRouter.sol\":2730:2779  pay(tokenIn, data.payer, msg.sender, amountToPay) */\n      tag_273\n        /* \"contracts/SwapRouter.sol\":2734:2741  tokenIn */\n      dup6\n        /* \"contracts/SwapRouter.sol\":2743:2747  data */\n      dup8\n        /* \"contracts/SwapRouter.sol\":2743:2753  data.payer */\n      0x20\n      add\n      mload\n        /* \"contracts/SwapRouter.sol\":2755:2765  msg.sender */\n      caller\n        /* \"contracts/SwapRouter.sol\":2767:2778  amountToPay */\n      dup5\n        /* \"contracts/SwapRouter.sol\":2730:2733  pay */\n      tag_274\n        /* \"contracts/SwapRouter.sol\":2730:2779  pay(tokenIn, data.payer, msg.sender, amountToPay) */\n      jump\t// in\n    tag_273:\n        /* \"contracts/SwapRouter.sol\":2698:3268  if (isExactInput) {... */\n      jump(tag_125)\n    tag_272:\n        /* \"contracts/SwapRouter.sol\":2866:2875  data.path */\n      dup6\n      mload\n        /* \"contracts/SwapRouter.sol\":2866:2894  data.path.hasMultiplePools() */\n      tag_276\n      swap1\n        /* \"contracts/SwapRouter.sol\":2866:2892  data.path.hasMultiplePools */\n      tag_191\n        /* \"contracts/SwapRouter.sol\":2866:2894  data.path.hasMultiplePools() */\n      jump\t// in\n    tag_276:\n        /* \"contracts/SwapRouter.sol\":2862:3258  if (data.path.hasMultiplePools()) {... */\n      iszero\n      tag_277\n      jumpi\n        /* \"contracts/SwapRouter.sol\":2926:2935  data.path */\n      dup6\n      mload\n        /* \"contracts/SwapRouter.sol\":2926:2947  data.path.skipToken() */\n      tag_278\n      swap1\n        /* \"contracts/SwapRouter.sol\":2926:2945  data.path.skipToken */\n      tag_199\n        /* \"contracts/SwapRouter.sol\":2926:2947  data.path.skipToken() */\n      jump\t// in\n    tag_278:\n        /* \"contracts/SwapRouter.sol\":2914:2947  data.path = data.path.skipToken() */\n      dup7\n      mstore\n        /* \"contracts/SwapRouter.sol\":2965:3018  exactOutputInternal(amountToPay, msg.sender, 0, data) */\n      tag_279\n        /* \"contracts/SwapRouter.sol\":2985:2996  amountToPay */\n      dup2\n        /* \"contracts/SwapRouter.sol\":2998:3008  msg.sender */\n      caller\n        /* \"contracts/SwapRouter.sol\":2914:2923  data.path */\n      0x00\n        /* \"contracts/SwapRouter.sol\":2914:2918  data */\n      dup10\n        /* \"contracts/SwapRouter.sol\":2965:2984  exactOutputInternal */\n      tag_221\n        /* \"contracts/SwapRouter.sol\":2965:3018  exactOutputInternal(amountToPay, msg.sender, 0, data) */\n      jump\t// in\n    tag_279:\n      pop\n        /* \"contracts/SwapRouter.sol\":2862:3258  if (data.path.hasMultiplePools()) {... */\n      jump(tag_125)\n    tag_277:\n        /* \"contracts/SwapRouter.sol\":3074:3085  amountToPay */\n      dup1\n        /* \"contracts/SwapRouter.sol\":3057:3071  amountInCached */\n      0x00\n        /* \"contracts/SwapRouter.sol\":3057:3085  amountInCached = amountToPay */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"contracts/SwapRouter.sol\":3113:3121  tokenOut */\n      dup4\n        /* \"contracts/SwapRouter.sol\":3103:3121  tokenIn = tokenOut */\n      swap5\n      pop\n        /* \"contracts/SwapRouter.sol\":3194:3243  pay(tokenIn, data.payer, msg.sender, amountToPay) */\n      tag_125\n        /* \"contracts/SwapRouter.sol\":3198:3205  tokenIn */\n      dup6\n        /* \"contracts/SwapRouter.sol\":3207:3211  data */\n      dup8\n        /* \"contracts/SwapRouter.sol\":3207:3217  data.payer */\n      0x20\n      add\n      mload\n        /* \"contracts/SwapRouter.sol\":3219:3229  msg.sender */\n      caller\n        /* \"contracts/SwapRouter.sol\":3231:3242  amountToPay */\n      dup5\n        /* \"contracts/SwapRouter.sol\":3194:3197  pay */\n      tag_274\n        /* \"contracts/SwapRouter.sol\":3194:3243  pay(tokenIn, data.payer, msg.sender, amountToPay) */\n      jump\t// in\n        /* \"contracts/libraries/TransferHelper.sol\":2370:2535  function safeTransferETH(address to, uint256 value) internal {... */\n    tag_101:\n        /* \"contracts/libraries/TransferHelper.sol\":2482:2494  new bytes(0) */\n      0x40\n      dup1\n      mload\n        /* \"contracts/libraries/TransferHelper.sol\":2442:2454  bool success */\n      0x00\n        /* \"contracts/libraries/TransferHelper.sol\":2482:2494  new bytes(0) */\n      dup1\n      dup3\n      mstore\n      0x20\n      dup3\n      add\n      swap1\n      swap3\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/libraries/TransferHelper.sol\":2460:2467  to.call */\n      dup5\n      and\n      swap1\n        /* \"contracts/libraries/TransferHelper.sol\":2475:2480  value */\n      dup4\n      swap1\n        /* \"contracts/libraries/TransferHelper.sol\":2460:2495  to.call{value: value}(new bytes(0)) */\n      mload(0x40)\n      dup1\n      dup3\n      dup1\n      mload\n      swap1\n      0x20\n      add\n      swap1\n      dup1\n      dup4\n      dup4\n    tag_285:\n      0x20\n      dup4\n      lt\n      tag_287\n      jumpi\n      dup1\n      mload\n      dup3\n      mstore\n      not(0x1f)\n      swap1\n      swap3\n      add\n      swap2\n      0x20\n      swap2\n      dup3\n      add\n      swap2\n      add\n      jump(tag_285)\n    tag_287:\n      0x01\n      dup4\n      0x20\n      sub\n      0x0100\n      exp\n      sub\n      dup1\n      not\n      dup3\n      mload\n      and\n      dup2\n      dup5\n      mload\n      and\n      dup1\n      dup3\n      or\n      dup6\n      mstore\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      swap1\n      pop\n      add\n      swap2\n      pop\n      pop\n      0x00\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup6\n      dup8\n      gas\n      call\n      swap3\n      pop\n      pop\n      pop\n      returndatasize\n      dup1\n      0x00\n      dup2\n      eq\n      tag_290\n      jumpi\n      mload(0x40)\n      swap2\n      pop\n      and(add(returndatasize, 0x3f), not(0x1f))\n      dup3\n      add\n      0x40\n      mstore\n      returndatasize\n      dup3\n      mstore\n      returndatasize\n      0x00\n      0x20\n      dup5\n      add\n      returndatacopy\n      jump(tag_289)\n    tag_290:\n      0x60\n      swap2\n      pop\n    tag_289:\n      pop\n        /* \"contracts/libraries/TransferHelper.sol\":2441:2495  (bool success, ) = to.call{value: value}(new bytes(0)) */\n      pop\n      swap1\n      pop\n        /* \"contracts/libraries/TransferHelper.sol\":2513:2520  success */\n      dup1\n        /* \"contracts/libraries/TransferHelper.sol\":2505:2528  require(success, 'STE') */\n      tag_136\n      jumpi\n      0x40\n      dup1\n      mload\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      mstore\n      0x03\n      0x24\n      dup3\n      add\n      mstore\n      shl(0xe8, 0x535445)\n      0x44\n      dup3\n      add\n      mstore\n      swap1\n      mload\n      swap1\n      dup2\n      swap1\n      sub\n      0x64\n      add\n      swap1\n      revert\n        /* \"contracts/base/BlockTimestamp.sol\":319:425  function _blockTimestamp() internal view virtual returns (uint256) {... */\n    tag_104:\n        /* \"contracts/base/BlockTimestamp.sol\":403:418  block.timestamp */\n      timestamp\n        /* \"contracts/base/BlockTimestamp.sol\":319:425  function _blockTimestamp() internal view virtual returns (uint256) {... */\n      swap1\n      jump\t// out\n        /* \"contracts/SwapRouter.sol\":3328:4262  function exactInputInternal(... */\n    tag_118:\n        /* \"contracts/SwapRouter.sol\":3505:3522  uint256 amountOut */\n      0x00\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/SwapRouter.sol\":3601:3624  recipient == address(0) */\n      dup5\n      and\n        /* \"contracts/SwapRouter.sol\":3597:3651  if (recipient == address(0)) recipient = address(this) */\n      tag_294\n      jumpi\n        /* \"contracts/SwapRouter.sol\":3646:3650  this */\n      address\n        /* \"contracts/SwapRouter.sol\":3626:3651  recipient = address(this) */\n      swap4\n      pop\n        /* \"contracts/SwapRouter.sol\":3597:3651  if (recipient == address(0)) recipient = address(this) */\n    tag_294:\n        /* \"contracts/SwapRouter.sol\":3663:3678  address tokenIn */\n      0x00\n        /* \"contracts/SwapRouter.sol\":3680:3696  address tokenOut */\n      dup1\n        /* \"contracts/SwapRouter.sol\":3698:3708  uint24 fee */\n      0x00\n        /* \"contracts/SwapRouter.sol\":3712:3739  data.path.decodeFirstPool() */\n      tag_295\n        /* \"contracts/SwapRouter.sol\":3712:3716  data */\n      dup6\n        /* \"contracts/SwapRouter.sol\":3712:3721  data.path */\n      0x00\n      add\n      mload\n        /* \"contracts/SwapRouter.sol\":3712:3737  data.path.decodeFirstPool */\n      tag_267\n        /* \"contracts/SwapRouter.sol\":3712:3739  data.path.decodeFirstPool() */\n      jump\t// in\n    tag_295:\n        /* \"contracts/SwapRouter.sol\":3662:3739  (address tokenIn, address tokenOut, uint24 fee) = data.path.decodeFirstPool() */\n      swap2\n      swap5\n      pop\n      swap3\n      pop\n      swap1\n      pop\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/SwapRouter.sol\":3768:3786  tokenIn < tokenOut */\n      dup1\n      dup4\n      and\n      swap1\n      dup5\n      and\n      lt\n        /* \"contracts/SwapRouter.sol\":3750:3765  bool zeroForOne */\n      0x00\n      dup1\n        /* \"contracts/SwapRouter.sol\":3844:3875  getPool(tokenIn, tokenOut, fee) */\n      tag_296\n        /* \"contracts/SwapRouter.sol\":3662:3739  (address tokenIn, address tokenOut, uint24 fee) = data.path.decodeFirstPool() */\n      dup7\n      dup7\n      dup7\n        /* \"contracts/SwapRouter.sol\":3844:3851  getPool */\n      tag_297\n        /* \"contracts/SwapRouter.sol\":3844:3875  getPool(tokenIn, tokenOut, fee) */\n      jump\t// in\n    tag_296:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/SwapRouter.sol\":3844:3880  getPool(tokenIn, tokenOut, fee).swap */\n      and\n      0x128acb08\n        /* \"contracts/SwapRouter.sol\":3898:3907  recipient */\n      dup12\n        /* \"contracts/SwapRouter.sol\":3925:3935  zeroForOne */\n      dup6\n        /* \"contracts/SwapRouter.sol\":3953:3972  amountIn.toInt256() */\n      tag_298\n        /* \"contracts/SwapRouter.sol\":3953:3961  amountIn */\n      dup16\n        /* \"contracts/SwapRouter.sol\":3953:3970  amountIn.toInt256 */\n      tag_299\n        /* \"contracts/SwapRouter.sol\":3953:3972  amountIn.toInt256() */\n      jump\t// in\n    tag_298:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/SwapRouter.sol\":3990:4012  sqrtPriceLimitX96 == 0 */\n      dup15\n      and\n      iszero\n        /* \"contracts/SwapRouter.sol\":3990:4147  sqrtPriceLimitX96 == 0... */\n      tag_300\n      jumpi\n        /* \"contracts/SwapRouter.sol\":4130:4147  sqrtPriceLimitX96 */\n      dup14\n        /* \"contracts/SwapRouter.sol\":3990:4147  sqrtPriceLimitX96 == 0... */\n      jump(tag_303)\n    tag_300:\n        /* \"contracts/SwapRouter.sol\":4036:4046  zeroForOne */\n      dup8\n        /* \"contracts/SwapRouter.sol\":4036:4106  zeroForOne ? TickMath.MIN_SQRT_RATIO + 1 : TickMath.MAX_SQRT_RATIO - 1 */\n      tag_302\n      jumpi\n        /* \"contracts/SwapRouter.sol\":4079:4106  TickMath.MAX_SQRT_RATIO - 1 */\n      0xfffd8963efd1fc6a506488495d951d5263988d25\n        /* \"contracts/SwapRouter.sol\":4036:4106  zeroForOne ? TickMath.MIN_SQRT_RATIO + 1 : TickMath.MAX_SQRT_RATIO - 1 */\n      jump(tag_303)\n    tag_302:\n        /* \"contracts/SwapRouter.sol\":4049:4076  TickMath.MIN_SQRT_RATIO + 1 */\n      0x01000276a4\n        /* \"contracts/SwapRouter.sol\":4036:4106  zeroForOne ? TickMath.MIN_SQRT_RATIO + 1 : TickMath.MAX_SQRT_RATIO - 1 */\n    tag_303:\n        /* \"contracts/SwapRouter.sol\":4176:4180  data */\n      dup14\n        /* \"contracts/SwapRouter.sol\":4165:4181  abi.encode(data) */\n      add(0x20, mload(0x40))\n      tag_304\n      swap2\n      swap1\n      tag_305\n      jump\t// in\n    tag_304:\n      mload(0x40)\n      0x20\n      dup2\n      dup4\n      sub\n      sub\n      dup2\n      mstore\n      swap1\n      0x40\n      mstore\n        /* \"contracts/SwapRouter.sol\":3844:4195  getPool(tokenIn, tokenOut, fee).swap(... */\n      mload(0x40)\n      dup7\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      tag_306\n      swap6\n      swap5\n      swap4\n      swap3\n      swap2\n      swap1\n      tag_307\n      jump\t// in\n    tag_306:\n      0x40\n      dup1\n      mload\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_308\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_308:\n      pop\n      gas\n      call\n      iszero\n      dup1\n      iszero\n      tag_310\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_310:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_311\n      swap2\n      swap1\n      tag_312\n      jump\t// in\n    tag_311:\n        /* \"contracts/SwapRouter.sol\":3797:4195  (int256 amount0, int256 amount1) =... */\n      swap2\n      pop\n      swap2\n      pop\n        /* \"contracts/SwapRouter.sol\":4223:4233  zeroForOne */\n      dup3\n        /* \"contracts/SwapRouter.sol\":4223:4253  zeroForOne ? amount1 : amount0 */\n      tag_313\n      jumpi\n        /* \"contracts/SwapRouter.sol\":4246:4253  amount0 */\n      dup2\n        /* \"contracts/SwapRouter.sol\":4223:4253  zeroForOne ? amount1 : amount0 */\n      jump(tag_314)\n    tag_313:\n        /* \"contracts/SwapRouter.sol\":4236:4243  amount1 */\n      dup1\n        /* \"contracts/SwapRouter.sol\":4223:4253  zeroForOne ? amount1 : amount0 */\n    tag_314:\n        /* \"contracts/SwapRouter.sol\":4221:4254  -(zeroForOne ? amount1 : amount0) */\n      0x00\n      sub\n      swap12\n        /* \"contracts/SwapRouter.sol\":3328:4262  function exactInputInternal(... */\n      swap11\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@uniswap/v3-core/contracts/libraries/LowGasSafeMath.sol\":986:1111  function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {... */\n    tag_150:\n        /* \"@uniswap/v3-core/contracts/libraries/LowGasSafeMath.sol\":1044:1053  uint256 z */\n      0x00\n        /* \"@uniswap/v3-core/contracts/libraries/LowGasSafeMath.sol\":1073:1079  x == 0 */\n      dup3\n      iszero\n      dup1\n        /* \"@uniswap/v3-core/contracts/libraries/LowGasSafeMath.sol\":1073:1103  x == 0 || (z = x * y) / x == y */\n      tag_316\n      jumpi\n      pop\n      pop\n        /* \"@uniswap/v3-core/contracts/libraries/LowGasSafeMath.sol\":1088:1093  x * y */\n      dup2\n      dup2\n      mul\n        /* \"@uniswap/v3-core/contracts/libraries/LowGasSafeMath.sol\":1102:1103  y */\n      dup2\n        /* \"@uniswap/v3-core/contracts/libraries/LowGasSafeMath.sol\":1097:1098  x */\n      dup4\n        /* \"@uniswap/v3-core/contracts/libraries/LowGasSafeMath.sol\":1088:1093  x * y */\n      dup3\n        /* \"@uniswap/v3-core/contracts/libraries/LowGasSafeMath.sol\":1097:1098  x */\n      dup2\n        /* \"@uniswap/v3-core/contracts/libraries/LowGasSafeMath.sol\":1083:1098  (z = x * y) / x */\n      tag_317\n      jumpi\n      invalid\n    tag_317:\n      div\n        /* \"@uniswap/v3-core/contracts/libraries/LowGasSafeMath.sol\":1083:1103  (z = x * y) / x == y */\n      eq\n        /* \"@uniswap/v3-core/contracts/libraries/LowGasSafeMath.sol\":1073:1103  x == 0 || (z = x * y) / x == y */\n    tag_316:\n        /* \"@uniswap/v3-core/contracts/libraries/LowGasSafeMath.sol\":1065:1104  require(x == 0 || (z = x * y) / x == y) */\n      tag_318\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_318:\n        /* \"@uniswap/v3-core/contracts/libraries/LowGasSafeMath.sol\":986:1111  function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/libraries/Path.sol\":992:1130  function hasMultiplePools(bytes memory path) internal pure returns (bool) {... */\n    tag_191:\n        /* \"contracts/libraries/Path.sol\":1083:1094  path.length */\n      dup1\n      mload\n        /* \"contracts/libraries/Path.sol\":777:801  POP_OFFSET + NEXT_OFFSET */\n      0x42\n      gt\n        /* \"contracts/libraries/Path.sol\":1083:1123  path.length >= MULTIPLE_POOLS_MIN_LENGTH */\n      iszero\n        /* \"contracts/libraries/Path.sol\":992:1130  function hasMultiplePools(bytes memory path) internal pure returns (bool) {... */\n    tag_319:\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"contracts/libraries/Path.sol\":2319:2446  function getFirstPool(bytes memory path) internal pure returns (bytes memory) {... */\n    tag_196:\n        /* \"contracts/libraries/Path.sol\":2383:2395  bytes memory */\n      0x60\n        /* \"contracts/libraries/Path.sol\":2414:2439  path.slice(0, POP_OFFSET) */\n      tag_318\n        /* \"contracts/libraries/Path.sol\":2414:2418  path */\n      dup3\n        /* \"contracts/libraries/Path.sol\":2425:2426  0 */\n      0x00\n        /* \"contracts/libraries/Path.sol\":618:641  NEXT_OFFSET + ADDR_SIZE */\n      0x2b\n        /* \"contracts/libraries/Path.sol\":2414:2424  path.slice */\n      tag_322\n        /* \"contracts/libraries/Path.sol\":2414:2439  path.slice(0, POP_OFFSET) */\n      jump\t// in\n        /* \"contracts/libraries/Path.sol\":2635:2784  function skipToken(bytes memory path) internal pure returns (bytes memory) {... */\n    tag_199:\n        /* \"contracts/libraries/Path.sol\":2751:2762  path.length */\n      dup1\n      mload\n        /* \"contracts/libraries/Path.sol\":2696:2708  bytes memory */\n      0x60\n      swap1\n        /* \"contracts/libraries/Path.sol\":2727:2777  path.slice(NEXT_OFFSET, path.length - NEXT_OFFSET) */\n      tag_318\n      swap1\n        /* \"contracts/libraries/Path.sol\":2751:2755  path */\n      dup4\n      swap1\n        /* \"contracts/libraries/Path.sol\":507:527  ADDR_SIZE + FEE_SIZE */\n      0x17\n      swap1\n      not(0x16)\n        /* \"contracts/libraries/Path.sol\":2751:2776  path.length - NEXT_OFFSET */\n      add\n        /* \"contracts/libraries/Path.sol\":2727:2737  path.slice */\n      tag_322\n        /* \"contracts/libraries/Path.sol\":2727:2777  path.slice(NEXT_OFFSET, path.length - NEXT_OFFSET) */\n      jump\t// in\n        /* \"contracts/SwapRouter.sol\":6215:7549  function exactOutputInternal(... */\n    tag_221:\n        /* \"contracts/SwapRouter.sol\":6394:6410  uint256 amountIn */\n      0x00\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/SwapRouter.sol\":6489:6512  recipient == address(0) */\n      dup5\n      and\n        /* \"contracts/SwapRouter.sol\":6485:6539  if (recipient == address(0)) recipient = address(this) */\n      tag_326\n      jumpi\n        /* \"contracts/SwapRouter.sol\":6534:6538  this */\n      address\n        /* \"contracts/SwapRouter.sol\":6514:6539  recipient = address(this) */\n      swap4\n      pop\n        /* \"contracts/SwapRouter.sol\":6485:6539  if (recipient == address(0)) recipient = address(this) */\n    tag_326:\n        /* \"contracts/SwapRouter.sol\":6551:6567  address tokenOut */\n      0x00\n        /* \"contracts/SwapRouter.sol\":6569:6584  address tokenIn */\n      dup1\n        /* \"contracts/SwapRouter.sol\":6586:6596  uint24 fee */\n      0x00\n        /* \"contracts/SwapRouter.sol\":6600:6627  data.path.decodeFirstPool() */\n      tag_327\n        /* \"contracts/SwapRouter.sol\":6600:6604  data */\n      dup6\n        /* \"contracts/SwapRouter.sol\":6600:6609  data.path */\n      0x00\n      add\n      mload\n        /* \"contracts/SwapRouter.sol\":6600:6625  data.path.decodeFirstPool */\n      tag_267\n        /* \"contracts/SwapRouter.sol\":6600:6627  data.path.decodeFirstPool() */\n      jump\t// in\n    tag_327:\n        /* \"contracts/SwapRouter.sol\":6550:6627  (address tokenOut, address tokenIn, uint24 fee) = data.path.decodeFirstPool() */\n      swap2\n      swap5\n      pop\n      swap3\n      pop\n      swap1\n      pop\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/SwapRouter.sol\":6656:6674  tokenIn < tokenOut */\n      dup1\n      dup5\n      and\n      swap1\n      dup4\n      and\n      lt\n        /* \"contracts/SwapRouter.sol\":6638:6653  bool zeroForOne */\n      0x00\n      dup1\n        /* \"contracts/SwapRouter.sol\":6742:6773  getPool(tokenIn, tokenOut, fee) */\n      tag_328\n        /* \"contracts/SwapRouter.sol\":6550:6627  (address tokenOut, address tokenIn, uint24 fee) = data.path.decodeFirstPool() */\n      dup6\n      dup8\n      dup7\n        /* \"contracts/SwapRouter.sol\":6742:6749  getPool */\n      tag_297\n        /* \"contracts/SwapRouter.sol\":6742:6773  getPool(tokenIn, tokenOut, fee) */\n      jump\t// in\n    tag_328:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/SwapRouter.sol\":6742:6778  getPool(tokenIn, tokenOut, fee).swap */\n      and\n      0x128acb08\n        /* \"contracts/SwapRouter.sol\":6796:6805  recipient */\n      dup12\n        /* \"contracts/SwapRouter.sol\":6823:6833  zeroForOne */\n      dup6\n        /* \"contracts/SwapRouter.sol\":6852:6872  amountOut.toInt256() */\n      tag_329\n        /* \"contracts/SwapRouter.sol\":6852:6861  amountOut */\n      dup16\n        /* \"contracts/SwapRouter.sol\":6852:6870  amountOut.toInt256 */\n      tag_299\n        /* \"contracts/SwapRouter.sol\":6852:6872  amountOut.toInt256() */\n      jump\t// in\n    tag_329:\n        /* \"contracts/SwapRouter.sol\":6851:6872  -amountOut.toInt256() */\n      0x00\n      sub\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/SwapRouter.sol\":6890:6912  sqrtPriceLimitX96 == 0 */\n      dup15\n      and\n      iszero\n        /* \"contracts/SwapRouter.sol\":6890:7047  sqrtPriceLimitX96 == 0... */\n      tag_330\n      jumpi\n        /* \"contracts/SwapRouter.sol\":7030:7047  sqrtPriceLimitX96 */\n      dup14\n        /* \"contracts/SwapRouter.sol\":6890:7047  sqrtPriceLimitX96 == 0... */\n      jump(tag_333)\n    tag_330:\n        /* \"contracts/SwapRouter.sol\":6936:6946  zeroForOne */\n      dup8\n        /* \"contracts/SwapRouter.sol\":6936:7006  zeroForOne ? TickMath.MIN_SQRT_RATIO + 1 : TickMath.MAX_SQRT_RATIO - 1 */\n      tag_332\n      jumpi\n        /* \"contracts/SwapRouter.sol\":6979:7006  TickMath.MAX_SQRT_RATIO - 1 */\n      0xfffd8963efd1fc6a506488495d951d5263988d25\n        /* \"contracts/SwapRouter.sol\":6936:7006  zeroForOne ? TickMath.MIN_SQRT_RATIO + 1 : TickMath.MAX_SQRT_RATIO - 1 */\n      jump(tag_333)\n    tag_332:\n        /* \"contracts/SwapRouter.sol\":6949:6976  TickMath.MIN_SQRT_RATIO + 1 */\n      0x01000276a4\n        /* \"contracts/SwapRouter.sol\":6936:7006  zeroForOne ? TickMath.MIN_SQRT_RATIO + 1 : TickMath.MAX_SQRT_RATIO - 1 */\n    tag_333:\n        /* \"contracts/SwapRouter.sol\":7076:7080  data */\n      dup14\n        /* \"contracts/SwapRouter.sol\":7065:7081  abi.encode(data) */\n      add(0x20, mload(0x40))\n      tag_334\n      swap2\n      swap1\n      tag_305\n      jump\t// in\n    tag_334:\n      mload(0x40)\n      0x20\n      dup2\n      dup4\n      sub\n      sub\n      dup2\n      mstore\n      swap1\n      0x40\n      mstore\n        /* \"contracts/SwapRouter.sol\":6742:7095  getPool(tokenIn, tokenOut, fee).swap(... */\n      mload(0x40)\n      dup7\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      tag_335\n      swap6\n      swap5\n      swap4\n      swap3\n      swap2\n      swap1\n      tag_307\n      jump\t// in\n    tag_335:\n      0x40\n      dup1\n      mload\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_336\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_336:\n      pop\n      gas\n      call\n      iszero\n      dup1\n      iszero\n      tag_338\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_338:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_339\n      swap2\n      swap1\n      tag_312\n      jump\t// in\n    tag_339:\n        /* \"contracts/SwapRouter.sol\":6685:7095  (int256 amount0Delta, int256 amount1Delta) =... */\n      swap2\n      pop\n      swap2\n      pop\n        /* \"contracts/SwapRouter.sol\":7106:7131  uint256 amountOutReceived */\n      0x00\n        /* \"contracts/SwapRouter.sol\":7173:7183  zeroForOne */\n      dup4\n        /* \"contracts/SwapRouter.sol\":7173:7307  zeroForOne... */\n      tag_340\n      jumpi\n        /* \"contracts/SwapRouter.sol\":7269:7281  amount1Delta */\n      dup2\n        /* \"contracts/SwapRouter.sol\":7293:7305  amount0Delta */\n      dup4\n        /* \"contracts/SwapRouter.sol\":7292:7305  -amount0Delta */\n      0x00\n      sub\n        /* \"contracts/SwapRouter.sol\":7173:7307  zeroForOne... */\n      jump(tag_341)\n    tag_340:\n        /* \"contracts/SwapRouter.sol\":7207:7219  amount0Delta */\n      dup3\n        /* \"contracts/SwapRouter.sol\":7231:7243  amount1Delta */\n      dup3\n        /* \"contracts/SwapRouter.sol\":7230:7243  -amount1Delta */\n      0x00\n      sub\n        /* \"contracts/SwapRouter.sol\":7173:7307  zeroForOne... */\n    tag_341:\n        /* \"contracts/SwapRouter.sol\":7141:7307  (amountIn, amountOutReceived) = zeroForOne... */\n      swap1\n      swap9\n      pop\n      swap1\n      pop\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/SwapRouter.sol\":7479:7501  sqrtPriceLimitX96 == 0 */\n      dup11\n      and\n        /* \"contracts/SwapRouter.sol\":7475:7542  if (sqrtPriceLimitX96 == 0) require(amountOutReceived == amountOut) */\n      tag_343\n      jumpi\n        /* \"contracts/SwapRouter.sol\":7532:7541  amountOut */\n      dup12\n        /* \"contracts/SwapRouter.sol\":7511:7528  amountOutReceived */\n      dup2\n        /* \"contracts/SwapRouter.sol\":7511:7541  amountOutReceived == amountOut */\n      eq\n        /* \"contracts/SwapRouter.sol\":7503:7542  require(amountOutReceived == amountOut) */\n      tag_343\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_343:\n        /* \"contracts/SwapRouter.sol\":6215:7549  function exactOutputInternal(... */\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      swap5\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/libraries/TransferHelper.sol\":1211:1520  function safeTransfer(... */\n    tag_233:\n        /* \"contracts/libraries/TransferHelper.sol\":1371:1430  abi.encodeWithSelector(IERC20.transfer.selector, to, value) */\n      0x40\n      dup1\n      mload\n      sub(shl(0xa0, 0x01), 0x01)\n      dup5\n      dup2\n      and\n      0x24\n      dup4\n      add\n      mstore\n      0x44\n      dup1\n      dup4\n      add\n      dup6\n      swap1\n      mstore\n      dup4\n      mload\n      dup1\n      dup5\n      sub\n      swap1\n      swap2\n      add\n      dup2\n      mstore\n      0x64\n      swap1\n      swap3\n      add\n      dup4\n      mstore\n      0x20\n      dup3\n      add\n      dup1\n      mload\n      sub(shl(0xe0, 0x01), 0x01)\n      and\n      shl(0xe0, 0xa9059cbb)\n      or\n      dup2\n      mstore\n        /* \"contracts/libraries/TransferHelper.sol\":1360:1431  token.call(abi.encodeWithSelector(IERC20.transfer.selector, to, value)) */\n      swap3\n      mload\n      dup3\n      mload\n        /* \"contracts/libraries/TransferHelper.sol\":1325:1337  bool success */\n      0x00\n      swap5\n      dup6\n      swap5\n        /* \"contracts/libraries/TransferHelper.sol\":1360:1370  token.call */\n      swap4\n      dup10\n      and\n      swap4\n        /* \"contracts/libraries/TransferHelper.sol\":1371:1430  abi.encodeWithSelector(IERC20.transfer.selector, to, value) */\n      swap3\n        /* \"contracts/libraries/TransferHelper.sol\":1360:1431  token.call(abi.encodeWithSelector(IERC20.transfer.selector, to, value)) */\n      swap2\n      dup3\n      swap2\n        /* \"contracts/libraries/TransferHelper.sol\":1371:1430  abi.encodeWithSelector(IERC20.transfer.selector, to, value) */\n      swap1\n        /* \"contracts/libraries/TransferHelper.sol\":1360:1431  token.call(abi.encodeWithSelector(IERC20.transfer.selector, to, value)) */\n      dup1\n      dup4\n        /* \"contracts/libraries/TransferHelper.sol\":1371:1430  abi.encodeWithSelector(IERC20.transfer.selector, to, value) */\n      dup4\n        /* \"contracts/libraries/TransferHelper.sol\":1360:1431  token.call(abi.encodeWithSelector(IERC20.transfer.selector, to, value)) */\n    tag_345:\n      0x20\n      dup4\n      lt\n      tag_347\n      jumpi\n      dup1\n      mload\n      dup3\n      mstore\n      not(0x1f)\n      swap1\n      swap3\n      add\n      swap2\n      0x20\n      swap2\n      dup3\n      add\n      swap2\n      add\n      jump(tag_345)\n    tag_347:\n      0x01\n      dup4\n      0x20\n      sub\n      0x0100\n      exp\n      sub\n      dup1\n      not\n      dup3\n      mload\n      and\n      dup2\n      dup5\n      mload\n      and\n      dup1\n      dup3\n      or\n      dup6\n      mstore\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      swap1\n      pop\n      add\n      swap2\n      pop\n      pop\n      0x00\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup7\n      gas\n      call\n      swap2\n      pop\n      pop\n      returndatasize\n      dup1\n      0x00\n      dup2\n      eq\n      tag_350\n      jumpi\n      mload(0x40)\n      swap2\n      pop\n      and(add(returndatasize, 0x3f), not(0x1f))\n      dup3\n      add\n      0x40\n      mstore\n      returndatasize\n      dup3\n      mstore\n      returndatasize\n      0x00\n      0x20\n      dup5\n      add\n      returndatacopy\n      jump(tag_349)\n    tag_350:\n      0x60\n      swap2\n      pop\n    tag_349:\n      pop\n        /* \"contracts/libraries/TransferHelper.sol\":1324:1431  (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.transfer.selector, to, value)) */\n      swap2\n      pop\n      swap2\n      pop\n        /* \"contracts/libraries/TransferHelper.sol\":1449:1456  success */\n      dup2\n        /* \"contracts/libraries/TransferHelper.sol\":1449:1506  success && (data.length == 0 || abi.decode(data, (bool))) */\n      dup1\n      iszero\n      tag_352\n      jumpi\n      pop\n        /* \"contracts/libraries/TransferHelper.sol\":1461:1472  data.length */\n      dup1\n      mload\n        /* \"contracts/libraries/TransferHelper.sol\":1461:1477  data.length == 0 */\n      iszero\n      dup1\n        /* \"contracts/libraries/TransferHelper.sol\":1461:1505  data.length == 0 || abi.decode(data, (bool)) */\n      tag_352\n      jumpi\n      pop\n        /* \"contracts/libraries/TransferHelper.sol\":1492:1496  data */\n      dup1\n        /* \"contracts/libraries/TransferHelper.sol\":1481:1505  abi.decode(data, (bool)) */\n      dup1\n      0x20\n      add\n      swap1\n      mload\n      0x20\n      dup2\n      lt\n      iszero\n      tag_353\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_353:\n      pop\n      mload\n        /* \"contracts/libraries/TransferHelper.sol\":1461:1505  data.length == 0 || abi.decode(data, (bool)) */\n    tag_352:\n        /* \"contracts/libraries/TransferHelper.sol\":1441:1513  require(success && (data.length == 0 || abi.decode(data, (bool))), 'ST') */\n      tag_145\n      jumpi\n      0x40\n      dup1\n      mload\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      mstore\n      0x02\n      0x24\n      dup3\n      add\n      mstore\n      shl(0xf2, 0x14d5)\n      0x44\n      dup3\n      add\n      mstore\n      swap1\n      mload\n      swap1\n      dup2\n      swap1\n      sub\n      0x64\n      add\n      swap1\n      revert\n        /* \"contracts/libraries/Path.sol\":1779:2093  function decodeFirstPool(bytes memory path)... */\n    tag_267:\n        /* \"contracts/libraries/Path.sol\":1883:1897  address tokenA */\n      0x00\n      dup1\n      dup1\n        /* \"contracts/libraries/Path.sol\":1983:2000  path.toAddress(0) */\n      tag_356\n        /* \"contracts/libraries/Path.sol\":1983:1987  path */\n      dup5\n        /* \"contracts/libraries/Path.sol\":1883:1897  address tokenA */\n      dup3\n        /* \"contracts/libraries/Path.sol\":1983:1997  path.toAddress */\n      tag_357\n        /* \"contracts/libraries/Path.sol\":1983:2000  path.toAddress(0) */\n      jump\t// in\n    tag_356:\n        /* \"contracts/libraries/Path.sol\":1974:2000  tokenA = path.toAddress(0) */\n      swap3\n      pop\n        /* \"contracts/libraries/Path.sol\":2016:2040  path.toUint24(ADDR_SIZE) */\n      tag_358\n        /* \"contracts/libraries/Path.sol\":2016:2020  path */\n      dup5\n        /* \"contracts/libraries/Path.sol\":304:306  20 */\n      0x14\n        /* \"contracts/libraries/Path.sol\":2016:2029  path.toUint24 */\n      tag_359\n        /* \"contracts/libraries/Path.sol\":2016:2040  path.toUint24(ADDR_SIZE) */\n      jump\t// in\n    tag_358:\n        /* \"contracts/libraries/Path.sol\":2010:2040  fee = path.toUint24(ADDR_SIZE) */\n      swap1\n      pop\n        /* \"contracts/libraries/Path.sol\":2059:2086  path.toAddress(NEXT_OFFSET) */\n      tag_360\n        /* \"contracts/libraries/Path.sol\":2059:2063  path */\n      dup5\n        /* \"contracts/libraries/Path.sol\":507:527  ADDR_SIZE + FEE_SIZE */\n      0x17\n        /* \"contracts/libraries/Path.sol\":2059:2073  path.toAddress */\n      tag_357\n        /* \"contracts/libraries/Path.sol\":2059:2086  path.toAddress(NEXT_OFFSET) */\n      jump\t// in\n    tag_360:\n        /* \"contracts/libraries/Path.sol\":2050:2086  tokenB = path.toAddress(NEXT_OFFSET) */\n      swap2\n      pop\n        /* \"contracts/libraries/Path.sol\":1779:2093  function decodeFirstPool(bytes memory path)... */\n      swap2\n      swap4\n      swap1\n      swap3\n      pop\n      jump\t// out\n        /* \"contracts/libraries/CallbackValidation.sol\":683:942  function verifyCallback(... */\n    tag_269:\n        /* \"contracts/libraries/CallbackValidation.sol\":829:848  IUniswapV3Pool pool */\n      0x00\n        /* \"contracts/libraries/CallbackValidation.sol\":867:935  verifyCallback(factory, PoolAddress.getPoolKey(tokenA, tokenB, fee)) */\n      tag_362\n        /* \"contracts/libraries/CallbackValidation.sol\":882:889  factory */\n      dup6\n        /* \"contracts/libraries/CallbackValidation.sol\":891:934  PoolAddress.getPoolKey(tokenA, tokenB, fee) */\n      tag_363\n        /* \"contracts/libraries/CallbackValidation.sol\":914:920  tokenA */\n      dup7\n        /* \"contracts/libraries/CallbackValidation.sol\":922:928  tokenB */\n      dup7\n        /* \"contracts/libraries/CallbackValidation.sol\":930:933  fee */\n      dup7\n        /* \"contracts/libraries/CallbackValidation.sol\":891:913  PoolAddress.getPoolKey */\n      tag_364\n        /* \"contracts/libraries/CallbackValidation.sol\":891:934  PoolAddress.getPoolKey(tokenA, tokenB, fee) */\n      jump\t// in\n    tag_363:\n        /* \"contracts/libraries/CallbackValidation.sol\":867:881  verifyCallback */\n      tag_365\n        /* \"contracts/libraries/CallbackValidation.sol\":867:935  verifyCallback(factory, PoolAddress.getPoolKey(tokenA, tokenB, fee)) */\n      jump\t// in\n    tag_362:\n        /* \"contracts/libraries/CallbackValidation.sol\":860:935  return verifyCallback(factory, PoolAddress.getPoolKey(tokenA, tokenB, fee)) */\n      swap6\n        /* \"contracts/libraries/CallbackValidation.sol\":683:942  function verifyCallback(... */\n      swap5\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/base/PeripheryPayments.sol\":1757:2456  function pay(... */\n    tag_274:\n        /* \"contracts/base/PeripheryPayments.sol\":1904:1909  WETH9 */\n      immutable(\"0x4f722aad0315bc3832e551ccf6da3e098baeb8ee055023fde26c377410bf01b8\")\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/base/PeripheryPayments.sol\":1895:1909  token == WETH9 */\n      and\n        /* \"contracts/base/PeripheryPayments.sol\":1895:1900  token */\n      dup5\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/base/PeripheryPayments.sol\":1895:1909  token == WETH9 */\n      and\n      eq\n        /* \"contracts/base/PeripheryPayments.sol\":1895:1943  token == WETH9 && address(this).balance >= value */\n      dup1\n      iszero\n      tag_367\n      jumpi\n      pop\n        /* \"contracts/base/PeripheryPayments.sol\":1938:1943  value */\n      dup1\n        /* \"contracts/base/PeripheryPayments.sol\":1913:1934  address(this).balance */\n      selfbalance\n        /* \"contracts/base/PeripheryPayments.sol\":1913:1943  address(this).balance >= value */\n      lt\n      iszero\n        /* \"contracts/base/PeripheryPayments.sol\":1895:1943  token == WETH9 && address(this).balance >= value */\n    tag_367:\n        /* \"contracts/base/PeripheryPayments.sol\":1891:2450  if (token == WETH9 && address(this).balance >= value) {... */\n      iszero\n      tag_368\n      jumpi\n        /* \"contracts/base/PeripheryPayments.sol\":1996:2001  WETH9 */\n      immutable(\"0x4f722aad0315bc3832e551ccf6da3e098baeb8ee055023fde26c377410bf01b8\")\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/base/PeripheryPayments.sol\":1989:2010  IWETH9(WETH9).deposit */\n      and\n      0xd0e30db0\n        /* \"contracts/base/PeripheryPayments.sol\":2018:2023  value */\n      dup3\n        /* \"contracts/base/PeripheryPayments.sol\":1989:2026  IWETH9(WETH9).deposit{value: value}() */\n      mload(0x40)\n      dup3\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      0x00\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup6\n      dup9\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_369\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_369:\n      pop\n      gas\n      call\n      iszero\n      dup1\n      iszero\n      tag_371\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_371:\n      pop\n      pop\n      pop\n      pop\n      pop\n        /* \"contracts/base/PeripheryPayments.sol\":2082:2087  WETH9 */\n      immutable(\"0x4f722aad0315bc3832e551ccf6da3e098baeb8ee055023fde26c377410bf01b8\")\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/base/PeripheryPayments.sol\":2075:2097  IWETH9(WETH9).transfer */\n      and\n      0xa9059cbb\n        /* \"contracts/base/PeripheryPayments.sol\":2098:2107  recipient */\n      dup4\n        /* \"contracts/base/PeripheryPayments.sol\":2109:2114  value */\n      dup4\n        /* \"contracts/base/PeripheryPayments.sol\":2075:2115  IWETH9(WETH9).transfer(recipient, value) */\n      mload(0x40)\n      dup4\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup4\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      dup2\n      mstore\n      0x20\n      add\n      dup3\n      dup2\n      mstore\n      0x20\n      add\n      swap3\n      pop\n      pop\n      pop\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_372\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_372:\n      pop\n      gas\n      call\n      iszero\n      dup1\n      iszero\n      tag_374\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_374:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      0x20\n      dup2\n      lt\n      iszero\n      tag_375\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_375:\n      pop\n        /* \"contracts/base/PeripheryPayments.sol\":1891:2450  if (token == WETH9 && address(this).balance >= value) {... */\n      tag_232\n      swap1\n      pop\n      jump\n    tag_368:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/base/PeripheryPayments.sol\":2136:2158  payer == address(this) */\n      dup4\n      and\n        /* \"contracts/base/PeripheryPayments.sol\":2153:2157  this */\n      address\n        /* \"contracts/base/PeripheryPayments.sol\":2136:2158  payer == address(this) */\n      eq\n        /* \"contracts/base/PeripheryPayments.sol\":2132:2450  if (payer == address(this)) {... */\n      iszero\n      tag_377\n      jumpi\n        /* \"contracts/base/PeripheryPayments.sol\":2265:2317  TransferHelper.safeTransfer(token, recipient, value) */\n      tag_378\n        /* \"contracts/base/PeripheryPayments.sol\":2293:2298  token */\n      dup5\n        /* \"contracts/base/PeripheryPayments.sol\":2300:2309  recipient */\n      dup4\n        /* \"contracts/base/PeripheryPayments.sol\":2311:2316  value */\n      dup4\n        /* \"contracts/base/PeripheryPayments.sol\":2265:2292  TransferHelper.safeTransfer */\n      tag_233\n        /* \"contracts/base/PeripheryPayments.sol\":2265:2317  TransferHelper.safeTransfer(token, recipient, value) */\n      jump\t// in\n    tag_378:\n        /* \"contracts/base/PeripheryPayments.sol\":2132:2450  if (payer == address(this)) {... */\n      jump(tag_232)\n    tag_377:\n        /* \"contracts/base/PeripheryPayments.sol\":2376:2439  TransferHelper.safeTransferFrom(token, payer, recipient, value) */\n      tag_232\n        /* \"contracts/base/PeripheryPayments.sol\":2408:2413  token */\n      dup5\n        /* \"contracts/base/PeripheryPayments.sol\":2415:2420  payer */\n      dup5\n        /* \"contracts/base/PeripheryPayments.sol\":2422:2431  recipient */\n      dup5\n        /* \"contracts/base/PeripheryPayments.sol\":2433:2438  value */\n      dup5\n        /* \"contracts/base/PeripheryPayments.sol\":2376:2407  TransferHelper.safeTransferFrom */\n      tag_381\n        /* \"contracts/base/PeripheryPayments.sol\":2376:2439  TransferHelper.safeTransferFrom(token, payer, recipient, value) */\n      jump\t// in\n        /* \"contracts/SwapRouter.sol\":1602:1851  function getPool(... */\n    tag_297:\n        /* \"contracts/SwapRouter.sol\":1715:1729  IUniswapV3Pool */\n      0x00\n        /* \"contracts/SwapRouter.sol\":1763:1843  PoolAddress.computeAddress(factory, PoolAddress.getPoolKey(tokenA, tokenB, fee)) */\n      tag_383\n        /* \"contracts/SwapRouter.sol\":1790:1797  factory */\n      immutable(\"0x1dda9873baa24e5dc3a48371aa5a89ce85f19f9dd041db3ba184e623299b8433\")\n        /* \"contracts/SwapRouter.sol\":1799:1842  PoolAddress.getPoolKey(tokenA, tokenB, fee) */\n      tag_384\n        /* \"contracts/SwapRouter.sol\":1822:1828  tokenA */\n      dup7\n        /* \"contracts/SwapRouter.sol\":1830:1836  tokenB */\n      dup7\n        /* \"contracts/SwapRouter.sol\":1838:1841  fee */\n      dup7\n        /* \"contracts/SwapRouter.sol\":1799:1821  PoolAddress.getPoolKey */\n      tag_364\n        /* \"contracts/SwapRouter.sol\":1799:1842  PoolAddress.getPoolKey(tokenA, tokenB, fee) */\n      jump\t// in\n    tag_384:\n        /* \"contracts/SwapRouter.sol\":1763:1789  PoolAddress.computeAddress */\n      tag_385\n        /* \"contracts/SwapRouter.sol\":1763:1843  PoolAddress.computeAddress(factory, PoolAddress.getPoolKey(tokenA, tokenB, fee)) */\n      jump\t// in\n    tag_383:\n        /* \"contracts/SwapRouter.sol\":1741:1844  return IUniswapV3Pool(PoolAddress.computeAddress(factory, PoolAddress.getPoolKey(tokenA, tokenB, fee))) */\n      swap5\n        /* \"contracts/SwapRouter.sol\":1602:1851  function getPool(... */\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@uniswap/v3-core/contracts/libraries/SafeCast.sol\":924:1045  function toInt256(uint256 y) internal pure returns (int256 z) {... */\n    tag_299:\n        /* \"@uniswap/v3-core/contracts/libraries/SafeCast.sol\":976:984  int256 z */\n      0x00\n      shl(0xff, 0x01)\n        /* \"@uniswap/v3-core/contracts/libraries/SafeCast.sol\":1004:1005  y */\n      dup3\n        /* \"@uniswap/v3-core/contracts/libraries/SafeCast.sol\":1004:1014  y < 2**255 */\n      lt\n        /* \"@uniswap/v3-core/contracts/libraries/SafeCast.sol\":996:1015  require(y < 2**255) */\n      tag_387\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_387:\n      pop\n        /* \"@uniswap/v3-core/contracts/libraries/SafeCast.sol\":1036:1037  y */\n      swap1\n        /* \"@uniswap/v3-core/contracts/libraries/SafeCast.sol\":924:1045  function toInt256(uint256 y) internal pure returns (int256 z) {... */\n      jump\t// out\n        /* \"contracts/libraries/BytesLib.sol\":399:3406  function slice(... */\n    tag_322:\n        /* \"contracts/libraries/BytesLib.sol\":521:533  bytes memory */\n      0x60\n        /* \"contracts/libraries/BytesLib.sol\":569:576  _length */\n      dup2\n        /* \"contracts/libraries/BytesLib.sol\":553:560  _length */\n      dup3\n        /* \"contracts/libraries/BytesLib.sol\":563:565  31 */\n      0x1f\n        /* \"contracts/libraries/BytesLib.sol\":553:565  _length + 31 */\n      add\n        /* \"contracts/libraries/BytesLib.sol\":553:576  _length + 31 >= _length */\n      lt\n      iszero\n        /* \"contracts/libraries/BytesLib.sol\":545:595  require(_length + 31 >= _length, 'slice_overflow') */\n      tag_389\n      jumpi\n      0x40\n      dup1\n      mload\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      mstore\n      0x0e\n      0x24\n      dup3\n      add\n      mstore\n      shl(0x90, 0x736c6963655f6f766572666c6f77)\n      0x44\n      dup3\n      add\n      mstore\n      swap1\n      mload\n      swap1\n      dup2\n      swap1\n      sub\n      0x64\n      add\n      swap1\n      revert\n    tag_389:\n        /* \"contracts/libraries/BytesLib.sol\":633:639  _start */\n      dup3\n        /* \"contracts/libraries/BytesLib.sol\":622:629  _length */\n      dup3\n        /* \"contracts/libraries/BytesLib.sol\":613:619  _start */\n      dup5\n        /* \"contracts/libraries/BytesLib.sol\":613:629  _start + _length */\n      add\n        /* \"contracts/libraries/BytesLib.sol\":613:639  _start + _length >= _start */\n      lt\n      iszero\n        /* \"contracts/libraries/BytesLib.sol\":605:658  require(_start + _length >= _start, 'slice_overflow') */\n      tag_390\n      jumpi\n      0x40\n      dup1\n      mload\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      mstore\n      0x0e\n      0x24\n      dup3\n      add\n      mstore\n      shl(0x90, 0x736c6963655f6f766572666c6f77)\n      0x44\n      dup3\n      add\n      mstore\n      swap1\n      mload\n      swap1\n      dup2\n      swap1\n      sub\n      0x64\n      add\n      swap1\n      revert\n    tag_390:\n        /* \"contracts/libraries/BytesLib.sol\":702:709  _length */\n      dup2\n        /* \"contracts/libraries/BytesLib.sol\":693:699  _start */\n      dup4\n        /* \"contracts/libraries/BytesLib.sol\":693:709  _start + _length */\n      add\n        /* \"contracts/libraries/BytesLib.sol\":676:682  _bytes */\n      dup5\n        /* \"contracts/libraries/BytesLib.sol\":676:689  _bytes.length */\n      mload\n        /* \"contracts/libraries/BytesLib.sol\":676:709  _bytes.length >= _start + _length */\n      lt\n      iszero\n        /* \"contracts/libraries/BytesLib.sol\":668:731  require(_bytes.length >= _start + _length, 'slice_outOfBounds') */\n      tag_391\n      jumpi\n      0x40\n      dup1\n      mload\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      mstore\n      0x11\n      0x24\n      dup3\n      add\n      mstore\n      shl(0x78, 0x736c6963655f6f75744f66426f756e6473)\n      0x44\n      dup3\n      add\n      mstore\n      swap1\n      mload\n      swap1\n      dup2\n      swap1\n      sub\n      0x64\n      add\n      swap1\n      revert\n    tag_391:\n        /* \"contracts/libraries/BytesLib.sol\":742:764  bytes memory tempBytes */\n      0x60\n        /* \"contracts/libraries/BytesLib.sol\":805:820  iszero(_length) */\n      dup3\n      iszero\n        /* \"contracts/libraries/BytesLib.sol\":837:2936  case 0 {... */\n      dup1\n      iszero\n      tag_393\n      jumpi\n        /* \"contracts/libraries/BytesLib.sol\":3089:3093  0x40 */\n      0x40\n        /* \"contracts/libraries/BytesLib.sol\":3083:3094  mload(0x40) */\n      mload\n        /* \"contracts/libraries/BytesLib.sol\":3070:3094  tempBytes := mload(0x40) */\n      swap2\n      pop\n        /* \"contracts/libraries/BytesLib.sol\":3287:3288  0 */\n      0x00\n        /* \"contracts/libraries/BytesLib.sol\":3276:3285  tempBytes */\n      dup3\n        /* \"contracts/libraries/BytesLib.sol\":3269:3289  mstore(tempBytes, 0) */\n      mstore\n        /* \"contracts/libraries/BytesLib.sol\":3339:3343  0x20 */\n      0x20\n        /* \"contracts/libraries/BytesLib.sol\":3328:3337  tempBytes */\n      dup3\n        /* \"contracts/libraries/BytesLib.sol\":3324:3344  add(tempBytes, 0x20) */\n      add\n        /* \"contracts/libraries/BytesLib.sol\":3318:3322  0x40 */\n      0x40\n        /* \"contracts/libraries/BytesLib.sol\":3311:3345  mstore(0x40, add(tempBytes, 0x20)) */\n      mstore\n        /* \"contracts/libraries/BytesLib.sol\":798:3363  switch iszero(_length)... */\n      jump(tag_392)\n        /* \"contracts/libraries/BytesLib.sol\":837:2936  case 0 {... */\n    tag_393:\n        /* \"contracts/libraries/BytesLib.sol\":1031:1035  0x40 */\n      0x40\n        /* \"contracts/libraries/BytesLib.sol\":1025:1036  mload(0x40) */\n      mload\n        /* \"contracts/libraries/BytesLib.sol\":1012:1036  tempBytes := mload(0x40) */\n      swap2\n      pop\n        /* \"contracts/libraries/BytesLib.sol\":1726:1728  31 */\n      0x1f\n        /* \"contracts/libraries/BytesLib.sol\":1717:1724  _length */\n      dup5\n        /* \"contracts/libraries/BytesLib.sol\":1713:1729  and(_length, 31) */\n      and\n        /* \"contracts/libraries/BytesLib.sol\":2128:2137  lengthmod */\n      dup1\n        /* \"contracts/libraries/BytesLib.sol\":2121:2138  iszero(lengthmod) */\n      iszero\n        /* \"contracts/libraries/BytesLib.sol\":2115:2119  0x20 */\n      0x20\n        /* \"contracts/libraries/BytesLib.sol\":2111:2139  mul(0x20, iszero(lengthmod)) */\n      mul\n        /* \"contracts/libraries/BytesLib.sol\":2099:2108  lengthmod */\n      dup2\n        /* \"contracts/libraries/BytesLib.sol\":2088:2097  tempBytes */\n      dup5\n        /* \"contracts/libraries/BytesLib.sol\":2084:2109  add(tempBytes, lengthmod) */\n      add\n        /* \"contracts/libraries/BytesLib.sol\":2080:2140  add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod))) */\n      add\n        /* \"contracts/libraries/BytesLib.sol\":2180:2187  _length */\n      dup6\n        /* \"contracts/libraries/BytesLib.sol\":2176:2178  mc */\n      dup2\n        /* \"contracts/libraries/BytesLib.sol\":2172:2188  add(mc, _length) */\n      add\n        /* \"contracts/libraries/BytesLib.sol\":2448:2454  _start */\n      dup8\n        /* \"contracts/libraries/BytesLib.sol\":2434:2443  lengthmod */\n      dup4\n        /* \"contracts/libraries/BytesLib.sol\":2427:2444  iszero(lengthmod) */\n      iszero\n        /* \"contracts/libraries/BytesLib.sol\":2421:2425  0x20 */\n      0x20\n        /* \"contracts/libraries/BytesLib.sol\":2417:2445  mul(0x20, iszero(lengthmod)) */\n      mul\n        /* \"contracts/libraries/BytesLib.sol\":2405:2414  lengthmod */\n      dup5\n        /* \"contracts/libraries/BytesLib.sol\":2397:2403  _bytes */\n      dup12\n        /* \"contracts/libraries/BytesLib.sol\":2393:2415  add(_bytes, lengthmod) */\n      add\n        /* \"contracts/libraries/BytesLib.sol\":2389:2446  add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))) */\n      add\n        /* \"contracts/libraries/BytesLib.sol\":2385:2455  add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start) */\n      add\n        /* \"contracts/libraries/BytesLib.sol\":2210:2671  for {... */\n    tag_394:\n        /* \"contracts/libraries/BytesLib.sol\":2485:2488  end */\n      dup2\n        /* \"contracts/libraries/BytesLib.sol\":2481:2483  mc */\n      dup4\n        /* \"contracts/libraries/BytesLib.sol\":2478:2489  lt(mc, end) */\n      lt\n        /* \"contracts/libraries/BytesLib.sol\":2210:2671  for {... */\n      iszero\n      tag_396\n      jumpi\n        /* \"contracts/libraries/BytesLib.sol\":2639:2648  mload(cc) */\n      dup1\n      mload\n        /* \"contracts/libraries/BytesLib.sol\":2628:2649  mstore(mc, mload(cc)) */\n      dup4\n      mstore\n        /* \"contracts/libraries/BytesLib.sol\":2530:2534  0x20 */\n      0x20\n        /* \"contracts/libraries/BytesLib.sol\":2522:2535  add(mc, 0x20) */\n      swap3\n      dup4\n      add\n      swap3\n        /* \"contracts/libraries/BytesLib.sol\":2566:2579  add(cc, 0x20) */\n      add\n        /* \"contracts/libraries/BytesLib.sol\":2210:2671  for {... */\n      jump(tag_394)\n    tag_396:\n      pop\n      pop\n        /* \"contracts/libraries/BytesLib.sol\":2693:2719  mstore(tempBytes, _length) */\n      dup6\n      dup5\n      mstore\n        /* \"contracts/libraries/BytesLib.sol\":2913:2915  31 */\n      0x1f\n        /* \"contracts/libraries/BytesLib.sol\":2896:2907  add(mc, 31) */\n      add\n      not(0x1f)\n        /* \"contracts/libraries/BytesLib.sol\":2892:2917  and(add(mc, 31), not(31)) */\n      and\n        /* \"contracts/libraries/BytesLib.sol\":2886:2890  0x40 */\n      0x40\n        /* \"contracts/libraries/BytesLib.sol\":2879:2918  mstore(0x40, and(add(mc, 31), not(31))) */\n      mstore\n      pop\n        /* \"contracts/libraries/BytesLib.sol\":798:3363  switch iszero(_length)... */\n    tag_392:\n      pop\n        /* \"contracts/libraries/BytesLib.sol\":3390:3399  tempBytes */\n      swap5\n        /* \"contracts/libraries/BytesLib.sol\":399:3406  function slice(... */\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/libraries/BytesLib.sol\":3412:3828  function toAddress(bytes memory _bytes, uint256 _start) internal pure returns (address) {... */\n    tag_357:\n        /* \"contracts/libraries/BytesLib.sol\":3491:3498  address */\n      0x00\n        /* \"contracts/libraries/BytesLib.sol\":3533:3539  _start */\n      dup2\n        /* \"contracts/libraries/BytesLib.sol\":3518:3524  _start */\n      dup3\n        /* \"contracts/libraries/BytesLib.sol\":3527:3529  20 */\n      0x14\n        /* \"contracts/libraries/BytesLib.sol\":3518:3529  _start + 20 */\n      add\n        /* \"contracts/libraries/BytesLib.sol\":3518:3539  _start + 20 >= _start */\n      lt\n      iszero\n        /* \"contracts/libraries/BytesLib.sol\":3510:3562  require(_start + 20 >= _start, 'toAddress_overflow') */\n      tag_398\n      jumpi\n      0x40\n      dup1\n      mload\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      mstore\n      0x12\n      0x24\n      dup3\n      add\n      mstore\n      shl(0x70, 0x746f416464726573735f6f766572666c6f77)\n      0x44\n      dup3\n      add\n      mstore\n      swap1\n      mload\n      swap1\n      dup2\n      swap1\n      sub\n      0x64\n      add\n      swap1\n      revert\n    tag_398:\n        /* \"contracts/libraries/BytesLib.sol\":3597:3603  _start */\n      dup2\n        /* \"contracts/libraries/BytesLib.sol\":3606:3608  20 */\n      0x14\n        /* \"contracts/libraries/BytesLib.sol\":3597:3608  _start + 20 */\n      add\n        /* \"contracts/libraries/BytesLib.sol\":3580:3586  _bytes */\n      dup4\n        /* \"contracts/libraries/BytesLib.sol\":3580:3593  _bytes.length */\n      mload\n        /* \"contracts/libraries/BytesLib.sol\":3580:3608  _bytes.length >= _start + 20 */\n      lt\n      iszero\n        /* \"contracts/libraries/BytesLib.sol\":3572:3634  require(_bytes.length >= _start + 20, 'toAddress_outOfBounds') */\n      tag_399\n      jumpi\n      0x40\n      dup1\n      mload\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      mstore\n      0x15\n      0x24\n      dup3\n      add\n      mstore\n      shl(0x58, 0x746f416464726573735f6f75744f66426f756e6473)\n      0x44\n      dup3\n      add\n      mstore\n      swap1\n      mload\n      swap1\n      dup2\n      swap1\n      sub\n      0x64\n      add\n      swap1\n      revert\n    tag_399:\n      pop\n        /* \"contracts/libraries/BytesLib.sol\":3722:3752  add(add(_bytes, 0x20), _start) */\n      add\n        /* \"contracts/libraries/BytesLib.sol\":3738:3742  0x20 */\n      0x20\n        /* \"contracts/libraries/BytesLib.sol\":3722:3752  add(add(_bytes, 0x20), _start) */\n      add\n        /* \"contracts/libraries/BytesLib.sol\":3716:3753  mload(add(add(_bytes, 0x20), _start)) */\n      mload\n      shl(0x60, 0x01)\n        /* \"contracts/libraries/BytesLib.sol\":3712:3783  div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000) */\n      swap1\n      div\n      swap1\n        /* \"contracts/libraries/BytesLib.sol\":3412:3828  function toAddress(bytes memory _bytes, uint256 _start) internal pure returns (address) {... */\n      jump\t// out\n        /* \"contracts/libraries/BytesLib.sol\":3834:4199  function toUint24(bytes memory _bytes, uint256 _start) internal pure returns (uint24) {... */\n    tag_359:\n        /* \"contracts/libraries/BytesLib.sol\":3912:3918  uint24 */\n      0x00\n        /* \"contracts/libraries/BytesLib.sol\":3952:3958  _start */\n      dup2\n        /* \"contracts/libraries/BytesLib.sol\":3938:3944  _start */\n      dup3\n        /* \"contracts/libraries/BytesLib.sol\":3947:3948  3 */\n      0x03\n        /* \"contracts/libraries/BytesLib.sol\":3938:3948  _start + 3 */\n      add\n        /* \"contracts/libraries/BytesLib.sol\":3938:3958  _start + 3 >= _start */\n      lt\n      iszero\n        /* \"contracts/libraries/BytesLib.sol\":3930:3980  require(_start + 3 >= _start, 'toUint24_overflow') */\n      tag_401\n      jumpi\n      0x40\n      dup1\n      mload\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      mstore\n      0x11\n      0x24\n      dup3\n      add\n      mstore\n      shl(0x78, 0x746f55696e7432345f6f766572666c6f77)\n      0x44\n      dup3\n      add\n      mstore\n      swap1\n      mload\n      swap1\n      dup2\n      swap1\n      sub\n      0x64\n      add\n      swap1\n      revert\n    tag_401:\n        /* \"contracts/libraries/BytesLib.sol\":4015:4021  _start */\n      dup2\n        /* \"contracts/libraries/BytesLib.sol\":4024:4025  3 */\n      0x03\n        /* \"contracts/libraries/BytesLib.sol\":4015:4025  _start + 3 */\n      add\n        /* \"contracts/libraries/BytesLib.sol\":3998:4004  _bytes */\n      dup4\n        /* \"contracts/libraries/BytesLib.sol\":3998:4011  _bytes.length */\n      mload\n        /* \"contracts/libraries/BytesLib.sol\":3998:4025  _bytes.length >= _start + 3 */\n      lt\n      iszero\n        /* \"contracts/libraries/BytesLib.sol\":3990:4050  require(_bytes.length >= _start + 3, 'toUint24_outOfBounds') */\n      tag_402\n      jumpi\n      0x40\n      dup1\n      mload\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      mstore\n      0x14\n      0x24\n      dup3\n      add\n      mstore\n      shl(0x60, 0x746f55696e7432345f6f75744f66426f756e6473)\n      0x44\n      dup3\n      add\n      mstore\n      swap1\n      mload\n      swap1\n      dup2\n      swap1\n      sub\n      0x64\n      add\n      swap1\n      revert\n    tag_402:\n      pop\n        /* \"contracts/libraries/BytesLib.sol\":4127:4156  add(add(_bytes, 0x3), _start) */\n      add\n        /* \"contracts/libraries/BytesLib.sol\":4143:4146  0x3 */\n      0x03\n        /* \"contracts/libraries/BytesLib.sol\":4127:4156  add(add(_bytes, 0x3), _start) */\n      add\n        /* \"contracts/libraries/BytesLib.sol\":4121:4157  mload(add(add(_bytes, 0x3), _start)) */\n      mload\n      swap1\n        /* \"contracts/libraries/BytesLib.sol\":3834:4199  function toUint24(bytes memory _bytes, uint256 _start) internal pure returns (uint24) {... */\n      jump\t// out\n        /* \"contracts/libraries/PoolAddress.sol\":784:1058  function getPoolKey(... */\n    tag_364:\n        /* \"contracts/libraries/PoolAddress.sol\":901:915  PoolKey memory */\n      tag_403\n      tag_404\n      jump\t// in\n    tag_403:\n        /* \"contracts/libraries/PoolAddress.sol\":940:946  tokenB */\n      dup3\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/libraries/PoolAddress.sol\":931:946  tokenA > tokenB */\n      and\n        /* \"contracts/libraries/PoolAddress.sol\":931:937  tokenA */\n      dup5\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/libraries/PoolAddress.sol\":931:946  tokenA > tokenB */\n      and\n      gt\n        /* \"contracts/libraries/PoolAddress.sol\":927:983  if (tokenA > tokenB) (tokenA, tokenB) = (tokenB, tokenA) */\n      iszero\n      tag_406\n      jumpi\n        /* \"contracts/libraries/PoolAddress.sol\":968:974  tokenB */\n      swap2\n      swap3\n        /* \"contracts/libraries/PoolAddress.sol\":976:982  tokenA */\n      swap2\n        /* \"contracts/libraries/PoolAddress.sol\":927:983  if (tokenA > tokenB) (tokenA, tokenB) = (tokenB, tokenA) */\n    tag_406:\n      pop\n        /* \"contracts/libraries/PoolAddress.sol\":1000:1051  PoolKey({token0: tokenA, token1: tokenB, fee: fee}) */\n      0x40\n      dup1\n      mload\n      0x60\n      dup2\n      add\n      dup3\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n      swap5\n      dup6\n      and\n      dup2\n      mstore\n      swap3\n      swap1\n      swap4\n      and\n      0x20\n      dup4\n      add\n      mstore\n      0xffffff\n      and\n      swap2\n      dup2\n      add\n      swap2\n      swap1\n      swap2\n      mstore\n      swap1\n        /* \"contracts/libraries/PoolAddress.sol\":784:1058  function getPoolKey(... */\n      jump\t// out\n        /* \"contracts/libraries/CallbackValidation.sol\":1189:1468  function verifyCallback(address factory, PoolAddress.PoolKey memory poolKey)... */\n    tag_365:\n        /* \"contracts/libraries/CallbackValidation.sol\":1313:1332  IUniswapV3Pool pool */\n      0x00\n        /* \"contracts/libraries/CallbackValidation.sol\":1370:1414  PoolAddress.computeAddress(factory, poolKey) */\n      tag_408\n        /* \"contracts/libraries/CallbackValidation.sol\":1397:1404  factory */\n      dup4\n        /* \"contracts/libraries/CallbackValidation.sol\":1406:1413  poolKey */\n      dup4\n        /* \"contracts/libraries/CallbackValidation.sol\":1370:1396  PoolAddress.computeAddress */\n      tag_385\n        /* \"contracts/libraries/CallbackValidation.sol\":1370:1414  PoolAddress.computeAddress(factory, poolKey) */\n      jump\t// in\n    tag_408:\n        /* \"contracts/libraries/CallbackValidation.sol\":1348:1415  pool = IUniswapV3Pool(PoolAddress.computeAddress(factory, poolKey)) */\n      swap1\n      pop\n        /* \"contracts/libraries/CallbackValidation.sol\":1433:1443  msg.sender */\n      caller\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/libraries/CallbackValidation.sol\":1433:1460  msg.sender == address(pool) */\n      dup3\n      and\n      eq\n        /* \"contracts/libraries/CallbackValidation.sol\":1425:1461  require(msg.sender == address(pool)) */\n      tag_318\n      jumpi\n      0x00\n      dup1\n      revert\n        /* \"contracts/libraries/TransferHelper.sol\":561:919  function safeTransferFrom(... */\n    tag_381:\n        /* \"contracts/libraries/TransferHelper.sol\":759:828  abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value) */\n      0x40\n      dup1\n      mload\n      sub(shl(0xa0, 0x01), 0x01)\n      dup6\n      dup2\n      and\n      0x24\n      dup4\n      add\n      mstore\n      dup5\n      dup2\n      and\n      0x44\n      dup4\n      add\n      mstore\n      0x64\n      dup1\n      dup4\n      add\n      dup6\n      swap1\n      mstore\n      dup4\n      mload\n      dup1\n      dup5\n      sub\n      swap1\n      swap2\n      add\n      dup2\n      mstore\n      0x84\n      swap1\n      swap3\n      add\n      dup4\n      mstore\n      0x20\n      dup3\n      add\n      dup1\n      mload\n      sub(shl(0xe0, 0x01), 0x01)\n      and\n      shl(0xe0, 0x23b872dd)\n      or\n      dup2\n      mstore\n        /* \"contracts/libraries/TransferHelper.sol\":748:829  token.call(abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value)) */\n      swap3\n      mload\n      dup3\n      mload\n        /* \"contracts/libraries/TransferHelper.sol\":701:713  bool success */\n      0x00\n      swap5\n      dup6\n      swap5\n        /* \"contracts/libraries/TransferHelper.sol\":748:758  token.call */\n      swap4\n      dup11\n      and\n      swap4\n        /* \"contracts/libraries/TransferHelper.sol\":759:828  abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value) */\n      swap3\n        /* \"contracts/libraries/TransferHelper.sol\":748:829  token.call(abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value)) */\n      swap2\n      dup3\n      swap2\n        /* \"contracts/libraries/TransferHelper.sol\":759:828  abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value) */\n      swap1\n        /* \"contracts/libraries/TransferHelper.sol\":748:829  token.call(abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value)) */\n      dup1\n      dup4\n        /* \"contracts/libraries/TransferHelper.sol\":759:828  abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value) */\n      dup4\n        /* \"contracts/libraries/TransferHelper.sol\":748:829  token.call(abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value)) */\n    tag_411:\n      0x20\n      dup4\n      lt\n      tag_413\n      jumpi\n      dup1\n      mload\n      dup3\n      mstore\n      not(0x1f)\n      swap1\n      swap3\n      add\n      swap2\n      0x20\n      swap2\n      dup3\n      add\n      swap2\n      add\n      jump(tag_411)\n    tag_413:\n      0x01\n      dup4\n      0x20\n      sub\n      0x0100\n      exp\n      sub\n      dup1\n      not\n      dup3\n      mload\n      and\n      dup2\n      dup5\n      mload\n      and\n      dup1\n      dup3\n      or\n      dup6\n      mstore\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      swap1\n      pop\n      add\n      swap2\n      pop\n      pop\n      0x00\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup7\n      gas\n      call\n      swap2\n      pop\n      pop\n      returndatasize\n      dup1\n      0x00\n      dup2\n      eq\n      tag_416\n      jumpi\n      mload(0x40)\n      swap2\n      pop\n      and(add(returndatasize, 0x3f), not(0x1f))\n      dup3\n      add\n      0x40\n      mstore\n      returndatasize\n      dup3\n      mstore\n      returndatasize\n      0x00\n      0x20\n      dup5\n      add\n      returndatacopy\n      jump(tag_415)\n    tag_416:\n      0x60\n      swap2\n      pop\n    tag_415:\n      pop\n        /* \"contracts/libraries/TransferHelper.sol\":700:829  (bool success, bytes memory data) =... */\n      swap2\n      pop\n      swap2\n      pop\n        /* \"contracts/libraries/TransferHelper.sol\":847:854  success */\n      dup2\n        /* \"contracts/libraries/TransferHelper.sol\":847:904  success && (data.length == 0 || abi.decode(data, (bool))) */\n      dup1\n      iszero\n      tag_418\n      jumpi\n      pop\n        /* \"contracts/libraries/TransferHelper.sol\":859:870  data.length */\n      dup1\n      mload\n        /* \"contracts/libraries/TransferHelper.sol\":859:875  data.length == 0 */\n      iszero\n      dup1\n        /* \"contracts/libraries/TransferHelper.sol\":859:903  data.length == 0 || abi.decode(data, (bool)) */\n      tag_418\n      jumpi\n      pop\n        /* \"contracts/libraries/TransferHelper.sol\":890:894  data */\n      dup1\n        /* \"contracts/libraries/TransferHelper.sol\":879:903  abi.decode(data, (bool)) */\n      dup1\n      0x20\n      add\n      swap1\n      mload\n      0x20\n      dup2\n      lt\n      iszero\n      tag_419\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_419:\n      pop\n      mload\n        /* \"contracts/libraries/TransferHelper.sol\":859:903  data.length == 0 || abi.decode(data, (bool)) */\n    tag_418:\n        /* \"contracts/libraries/TransferHelper.sol\":839:912  require(success && (data.length == 0 || abi.decode(data, (bool))), 'STF') */\n      tag_154\n      jumpi\n      0x40\n      dup1\n      mload\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      mstore\n      0x03\n      0x24\n      dup3\n      add\n      mstore\n      shl(0xe9, 0x29aa23)\n      0x44\n      dup3\n      add\n      mstore\n      swap1\n      mload\n      swap1\n      dup2\n      swap1\n      sub\n      0x64\n      add\n      swap1\n      revert\n        /* \"contracts/libraries/PoolAddress.sol\":1305:1817  function computeAddress(address factory, PoolKey memory key) internal pure returns (address pool) {... */\n    tag_385:\n        /* \"contracts/libraries/PoolAddress.sol\":1389:1401  address pool */\n      0x00\n        /* \"contracts/libraries/PoolAddress.sol\":1434:1437  key */\n      dup2\n        /* \"contracts/libraries/PoolAddress.sol\":1434:1444  key.token1 */\n      0x20\n      add\n      mload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/libraries/PoolAddress.sol\":1421:1444  key.token0 < key.token1 */\n      and\n        /* \"contracts/libraries/PoolAddress.sol\":1421:1424  key */\n      dup3\n        /* \"contracts/libraries/PoolAddress.sol\":1421:1431  key.token0 */\n      0x00\n      add\n      mload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/libraries/PoolAddress.sol\":1421:1444  key.token0 < key.token1 */\n      and\n      lt\n        /* \"contracts/libraries/PoolAddress.sol\":1413:1445  require(key.token0 < key.token1) */\n      tag_422\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_422:\n      pop\n        /* \"contracts/libraries/PoolAddress.sol\":1668:1678  key.token0 */\n      dup1\n      mload\n        /* \"contracts/libraries/PoolAddress.sol\":1680:1690  key.token1 */\n      0x20\n      dup1\n      dup4\n      add\n      mload\n        /* \"contracts/libraries/PoolAddress.sol\":1692:1699  key.fee */\n      0x40\n      swap4\n      dup5\n      add\n      mload\n        /* \"contracts/libraries/PoolAddress.sol\":1657:1700  abi.encode(key.token0, key.token1, key.fee) */\n      dup5\n      mload\n      sub(shl(0xa0, 0x01), 0x01)\n      swap5\n      dup6\n      and\n      dup2\n      dup6\n      add\n      mstore\n      swap4\n      swap1\n      swap2\n      and\n      dup4\n      dup6\n      add\n      mstore\n      0xffffff\n      and\n      0x60\n      dup1\n      dup5\n      add\n      swap2\n      swap1\n      swap2\n      mstore\n      dup4\n      mload\n      dup1\n      dup5\n      sub\n      dup3\n      add\n      dup2\n      mstore\n      0x80\n      dup5\n      add\n      dup6\n      mstore\n        /* \"contracts/libraries/PoolAddress.sol\":1647:1701  keccak256(abi.encode(key.token0, key.token1, key.fee)) */\n      dup1\n      mload\n      swap1\n      dup4\n      add\n      keccak256\n      not(sub(shl(0xf8, 0x01), 0x01))\n        /* \"contracts/libraries/PoolAddress.sol\":1539:1768  abi.encodePacked(... */\n      0xa0\n      dup6\n      add\n      mstore\n      swap5\n      swap1\n      shl\n      not(0xffffffffffffffffffffffff)\n      and\n      0xa1\n      dup4\n      add\n      mstore\n      0xb5\n      dup3\n      add\n      swap4\n      swap1\n      swap4\n      mstore\n        /* \"contracts/libraries/PoolAddress.sol\":241:307  0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54 */\n      0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54\n        /* \"contracts/libraries/PoolAddress.sol\":1539:1768  abi.encodePacked(... */\n      0xd5\n      dup1\n      dup4\n      add\n      swap2\n      swap1\n      swap2\n      mstore\n      dup3\n      mload\n      dup1\n      dup4\n      sub\n      swap1\n      swap2\n      add\n      dup2\n      mstore\n      0xf5\n      swap1\n      swap2\n      add\n      swap1\n      swap2\n      mstore\n        /* \"contracts/libraries/PoolAddress.sol\":1508:1786  keccak256(... */\n      dup1\n      mload\n      swap2\n      add\n      keccak256\n      swap1\n        /* \"contracts/libraries/PoolAddress.sol\":1305:1817  function computeAddress(address factory, PoolKey memory key) internal pure returns (address pool) {... */\n      jump\t// out\n    tag_404:\n      0x40\n      dup1\n      mload\n      0x60\n      dup2\n      add\n      dup3\n      mstore\n      0x00\n      dup1\n      dup3\n      mstore\n      0x20\n      dup3\n      add\n      dup2\n      swap1\n      mstore\n      swap2\n      dup2\n      add\n      swap2\n      swap1\n      swap2\n      mstore\n      swap1\n      jump\t// out\n        /* \"#utility.yul\":14:152   */\n    tag_424:\n        /* \"#utility.yul\":84:104   */\n      dup1\n      calldataload\n        /* \"#utility.yul\":113:146   */\n      tag_319\n        /* \"#utility.yul\":84:104   */\n      dup2\n        /* \"#utility.yul\":113:146   */\n      tag_427\n      jump\t// in\n        /* \"#utility.yul\":157:642   */\n    tag_428:\n      0x00\n        /* \"#utility.yul\":254:257   */\n      dup3\n        /* \"#utility.yul\":247:251   */\n      0x1f\n        /* \"#utility.yul\":239:245   */\n      dup4\n        /* \"#utility.yul\":235:252   */\n      add\n        /* \"#utility.yul\":231:258   */\n      slt\n        /* \"#utility.yul\":221:223   */\n      tag_430\n      jumpi\n        /* \"#utility.yul\":276:281   */\n      dup1\n        /* \"#utility.yul\":269:274   */\n      dup2\n        /* \"#utility.yul\":262:282   */\n      revert\n        /* \"#utility.yul\":221:223   */\n    tag_430:\n        /* \"#utility.yul\":316:322   */\n      dup2\n        /* \"#utility.yul\":303:323   */\n      calldataload\n        /* \"#utility.yul\":347:396   */\n      tag_431\n        /* \"#utility.yul\":362:395   */\n      tag_432\n        /* \"#utility.yul\":392:394   */\n      dup3\n        /* \"#utility.yul\":362:395   */\n      tag_433\n      jump\t// in\n    tag_432:\n        /* \"#utility.yul\":347:396   */\n      tag_434\n      jump\t// in\n    tag_431:\n        /* \"#utility.yul\":421:423   */\n      dup2\n        /* \"#utility.yul\":412:419   */\n      dup2\n        /* \"#utility.yul\":405:424   */\n      mstore\n        /* \"#utility.yul\":467:470   */\n      dup5\n        /* \"#utility.yul\":460:464   */\n      0x20\n        /* \"#utility.yul\":455:457   */\n      dup4\n        /* \"#utility.yul\":447:453   */\n      dup7\n        /* \"#utility.yul\":443:458   */\n      add\n        /* \"#utility.yul\":439:465   */\n      add\n        /* \"#utility.yul\":436:471   */\n      gt\n        /* \"#utility.yul\":433:435   */\n      iszero\n      tag_435\n      jumpi\n        /* \"#utility.yul\":488:493   */\n      dup3\n        /* \"#utility.yul\":481:486   */\n      dup4\n        /* \"#utility.yul\":474:494   */\n      revert\n        /* \"#utility.yul\":433:435   */\n    tag_435:\n        /* \"#utility.yul\":557:559   */\n      dup2\n        /* \"#utility.yul\":550:554   */\n      0x20\n        /* \"#utility.yul\":542:548   */\n      dup6\n        /* \"#utility.yul\":538:555   */\n      add\n        /* \"#utility.yul\":531:535   */\n      0x20\n        /* \"#utility.yul\":522:529   */\n      dup4\n        /* \"#utility.yul\":518:536   */\n      add\n        /* \"#utility.yul\":505:560   */\n      calldatacopy\n        /* \"#utility.yul\":580:596   */\n      swap1\n      dup2\n      add\n        /* \"#utility.yul\":598:602   */\n      0x20\n        /* \"#utility.yul\":576:603   */\n      add\n        /* \"#utility.yul\":569:611   */\n      swap2\n      swap1\n      swap2\n      mstore\n        /* \"#utility.yul\":584:591   */\n      swap3\n        /* \"#utility.yul\":211:642   */\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":647:829   */\n    tag_436:\n      0x00\n        /* \"#utility.yul\":770:773   */\n      0x0100\n        /* \"#utility.yul\":761:767   */\n      dup3\n        /* \"#utility.yul\":756:759   */\n      dup5\n        /* \"#utility.yul\":752:768   */\n      sub\n        /* \"#utility.yul\":748:774   */\n      slt\n        /* \"#utility.yul\":745:747   */\n      iszero\n      tag_119\n      jumpi\n        /* \"#utility.yul\":791:796   */\n      dup1\n        /* \"#utility.yul\":784:789   */\n      dup2\n        /* \"#utility.yul\":777:797   */\n      revert\n        /* \"#utility.yul\":834:1093   */\n    tag_109:\n      0x00\n        /* \"#utility.yul\":946:948   */\n      0x20\n        /* \"#utility.yul\":934:943   */\n      dup3\n        /* \"#utility.yul\":925:932   */\n      dup5\n        /* \"#utility.yul\":921:944   */\n      sub\n        /* \"#utility.yul\":917:949   */\n      slt\n        /* \"#utility.yul\":914:916   */\n      iszero\n      tag_440\n      jumpi\n        /* \"#utility.yul\":967:973   */\n      dup1\n        /* \"#utility.yul\":959:965   */\n      dup2\n        /* \"#utility.yul\":952:974   */\n      revert\n        /* \"#utility.yul\":914:916   */\n    tag_440:\n        /* \"#utility.yul\":1011:1020   */\n      dup2\n        /* \"#utility.yul\":998:1021   */\n      calldataload\n        /* \"#utility.yul\":1030:1063   */\n      tag_441\n        /* \"#utility.yul\":1057:1062   */\n      dup2\n        /* \"#utility.yul\":1030:1063   */\n      tag_427\n      jump\t// in\n    tag_441:\n        /* \"#utility.yul\":1082:1087   */\n      swap4\n        /* \"#utility.yul\":904:1093   */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1098:1568   */\n    tag_79:\n      0x00\n      dup1\n      0x00\n        /* \"#utility.yul\":1244:1246   */\n      0x60\n        /* \"#utility.yul\":1232:1241   */\n      dup5\n        /* \"#utility.yul\":1223:1230   */\n      dup7\n        /* \"#utility.yul\":1219:1242   */\n      sub\n        /* \"#utility.yul\":1215:1247   */\n      slt\n        /* \"#utility.yul\":1212:1214   */\n      iszero\n      tag_443\n      jumpi\n        /* \"#utility.yul\":1265:1271   */\n      dup2\n        /* \"#utility.yul\":1257:1263   */\n      dup3\n        /* \"#utility.yul\":1250:1272   */\n      revert\n        /* \"#utility.yul\":1212:1214   */\n    tag_443:\n        /* \"#utility.yul\":1309:1318   */\n      dup4\n        /* \"#utility.yul\":1296:1319   */\n      calldataload\n        /* \"#utility.yul\":1328:1361   */\n      tag_444\n        /* \"#utility.yul\":1355:1360   */\n      dup2\n        /* \"#utility.yul\":1328:1361   */\n      tag_427\n      jump\t// in\n    tag_444:\n        /* \"#utility.yul\":1380:1385   */\n      swap3\n      pop\n        /* \"#utility.yul\":1432:1434   */\n      0x20\n        /* \"#utility.yul\":1417:1435   */\n      dup5\n      add\n        /* \"#utility.yul\":1404:1436   */\n      calldataload\n      swap2\n      pop\n        /* \"#utility.yul\":1488:1490   */\n      0x40\n        /* \"#utility.yul\":1473:1491   */\n      dup5\n      add\n        /* \"#utility.yul\":1460:1492   */\n      calldataload\n        /* \"#utility.yul\":1501:1536   */\n      tag_445\n        /* \"#utility.yul\":1460:1492   */\n      dup2\n        /* \"#utility.yul\":1501:1536   */\n      tag_427\n      jump\t// in\n    tag_445:\n        /* \"#utility.yul\":1555:1562   */\n      dup1\n        /* \"#utility.yul\":1545:1562   */\n      swap2\n      pop\n      pop\n        /* \"#utility.yul\":1202:1568   */\n      swap3\n      pop\n      swap3\n      pop\n      swap3\n      jump\t// out\n        /* \"#utility.yul\":1573:2256   */\n    tag_83:\n      0x00\n      dup1\n      0x00\n      dup1\n      0x00\n        /* \"#utility.yul\":1753:1756   */\n      0xa0\n        /* \"#utility.yul\":1741:1750   */\n      dup7\n        /* \"#utility.yul\":1732:1739   */\n      dup9\n        /* \"#utility.yul\":1728:1751   */\n      sub\n        /* \"#utility.yul\":1724:1757   */\n      slt\n        /* \"#utility.yul\":1721:1723   */\n      iszero\n      tag_447\n      jumpi\n        /* \"#utility.yul\":1775:1781   */\n      dup1\n        /* \"#utility.yul\":1767:1773   */\n      dup2\n        /* \"#utility.yul\":1760:1782   */\n      revert\n        /* \"#utility.yul\":1721:1723   */\n    tag_447:\n        /* \"#utility.yul\":1819:1828   */\n      dup6\n        /* \"#utility.yul\":1806:1829   */\n      calldataload\n        /* \"#utility.yul\":1838:1871   */\n      tag_448\n        /* \"#utility.yul\":1865:1870   */\n      dup2\n        /* \"#utility.yul\":1838:1871   */\n      tag_427\n      jump\t// in\n    tag_448:\n        /* \"#utility.yul\":1890:1895   */\n      swap5\n      pop\n        /* \"#utility.yul\":1942:1944   */\n      0x20\n        /* \"#utility.yul\":1927:1945   */\n      dup7\n      add\n        /* \"#utility.yul\":1914:1946   */\n      calldataload\n      swap4\n      pop\n        /* \"#utility.yul\":1998:2000   */\n      0x40\n        /* \"#utility.yul\":1983:2001   */\n      dup7\n      add\n        /* \"#utility.yul\":1970:2002   */\n      calldataload\n        /* \"#utility.yul\":2011:2046   */\n      tag_449\n        /* \"#utility.yul\":1970:2002   */\n      dup2\n        /* \"#utility.yul\":2011:2046   */\n      tag_427\n      jump\t// in\n    tag_449:\n        /* \"#utility.yul\":2065:2072   */\n      swap3\n      pop\n        /* \"#utility.yul\":2119:2121   */\n      0x60\n        /* \"#utility.yul\":2104:2122   */\n      dup7\n      add\n        /* \"#utility.yul\":2091:2123   */\n      calldataload\n      swap2\n      pop\n        /* \"#utility.yul\":2175:2178   */\n      0x80\n        /* \"#utility.yul\":2160:2179   */\n      dup7\n      add\n        /* \"#utility.yul\":2147:2180   */\n      calldataload\n        /* \"#utility.yul\":2189:2224   */\n      tag_450\n        /* \"#utility.yul\":2147:2180   */\n      dup2\n        /* \"#utility.yul\":2189:2224   */\n      tag_427\n      jump\t// in\n    tag_450:\n        /* \"#utility.yul\":2243:2250   */\n      dup1\n        /* \"#utility.yul\":2233:2250   */\n      swap2\n      pop\n      pop\n        /* \"#utility.yul\":1711:2256   */\n      swap3\n      swap6\n      pop\n      swap3\n      swap6\n      swap1\n      swap4\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2261:2970   */\n    tag_36:\n      0x00\n      dup1\n      0x00\n      dup1\n      0x00\n      dup1\n        /* \"#utility.yul\":2456:2459   */\n      0xc0\n        /* \"#utility.yul\":2444:2453   */\n      dup8\n        /* \"#utility.yul\":2435:2442   */\n      dup10\n        /* \"#utility.yul\":2431:2454   */\n      sub\n        /* \"#utility.yul\":2427:2460   */\n      slt\n        /* \"#utility.yul\":2424:2426   */\n      iszero\n      tag_452\n      jumpi\n        /* \"#utility.yul\":2478:2484   */\n      dup1\n        /* \"#utility.yul\":2470:2476   */\n      dup2\n        /* \"#utility.yul\":2463:2485   */\n      revert\n        /* \"#utility.yul\":2424:2426   */\n    tag_452:\n        /* \"#utility.yul\":2522:2531   */\n      dup7\n        /* \"#utility.yul\":2509:2532   */\n      calldataload\n        /* \"#utility.yul\":2541:2574   */\n      tag_453\n        /* \"#utility.yul\":2568:2573   */\n      dup2\n        /* \"#utility.yul\":2541:2574   */\n      tag_427\n      jump\t// in\n    tag_453:\n        /* \"#utility.yul\":2593:2598   */\n      swap6\n      pop\n        /* \"#utility.yul\":2645:2647   */\n      0x20\n        /* \"#utility.yul\":2630:2648   */\n      dup8\n      add\n        /* \"#utility.yul\":2617:2649   */\n      calldataload\n      swap5\n      pop\n        /* \"#utility.yul\":2696:2698   */\n      0x40\n        /* \"#utility.yul\":2681:2699   */\n      dup8\n      add\n        /* \"#utility.yul\":2668:2700   */\n      calldataload\n      swap4\n      pop\n        /* \"#utility.yul\":2752:2754   */\n      0x60\n        /* \"#utility.yul\":2737:2755   */\n      dup8\n      add\n        /* \"#utility.yul\":2724:2756   */\n      calldataload\n        /* \"#utility.yul\":2800:2804   */\n      0xff\n        /* \"#utility.yul\":2787:2805   */\n      dup2\n      and\n        /* \"#utility.yul\":2775:2806   */\n      dup2\n      eq\n        /* \"#utility.yul\":2765:2767   */\n      tag_454\n      jumpi\n        /* \"#utility.yul\":2825:2831   */\n      dup2\n        /* \"#utility.yul\":2817:2823   */\n      dup3\n        /* \"#utility.yul\":2810:2832   */\n      revert\n        /* \"#utility.yul\":2765:2767   */\n    tag_454:\n        /* \"#utility.yul\":2414:2970   */\n      swap6\n      swap9\n      swap5\n      swap8\n      pop\n      swap3\n      swap6\n        /* \"#utility.yul\":2907:2910   */\n      0x80\n        /* \"#utility.yul\":2892:2911   */\n      dup2\n      add\n        /* \"#utility.yul\":2879:2912   */\n      calldataload\n      swap5\n        /* \"#utility.yul\":2959:2962   */\n      0xa0\n        /* \"#utility.yul\":2944:2963   */\n      swap1\n      swap2\n      add\n        /* \"#utility.yul\":2931:2964   */\n      calldataload\n      swap4\n      pop\n        /* \"#utility.yul\":2414:2970   */\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2975:3652   */\n    tag_56:\n      0x00\n      dup1\n        /* \"#utility.yul\":3133:3135   */\n      0x20\n        /* \"#utility.yul\":3121:3130   */\n      dup4\n        /* \"#utility.yul\":3112:3119   */\n      dup6\n        /* \"#utility.yul\":3108:3131   */\n      sub\n        /* \"#utility.yul\":3104:3136   */\n      slt\n        /* \"#utility.yul\":3101:3103   */\n      iszero\n      tag_456\n      jumpi\n        /* \"#utility.yul\":3154:3160   */\n      dup2\n        /* \"#utility.yul\":3146:3152   */\n      dup3\n        /* \"#utility.yul\":3139:3161   */\n      revert\n        /* \"#utility.yul\":3101:3103   */\n    tag_456:\n        /* \"#utility.yul\":3199:3208   */\n      dup3\n        /* \"#utility.yul\":3186:3209   */\n      calldataload\n        /* \"#utility.yul\":3228:3246   */\n      0xffffffffffffffff\n        /* \"#utility.yul\":3269:3271   */\n      dup1\n        /* \"#utility.yul\":3261:3267   */\n      dup3\n        /* \"#utility.yul\":3258:3272   */\n      gt\n        /* \"#utility.yul\":3255:3257   */\n      iszero\n      tag_457\n      jumpi\n        /* \"#utility.yul\":3290:3296   */\n      dup4\n        /* \"#utility.yul\":3282:3288   */\n      dup5\n        /* \"#utility.yul\":3275:3297   */\n      revert\n        /* \"#utility.yul\":3255:3257   */\n    tag_457:\n        /* \"#utility.yul\":3333:3339   */\n      dup2\n        /* \"#utility.yul\":3322:3331   */\n      dup6\n        /* \"#utility.yul\":3318:3340   */\n      add\n        /* \"#utility.yul\":3308:3340   */\n      swap2\n      pop\n        /* \"#utility.yul\":3378:3385   */\n      dup6\n        /* \"#utility.yul\":3371:3375   */\n      0x1f\n        /* \"#utility.yul\":3367:3369   */\n      dup4\n        /* \"#utility.yul\":3363:3376   */\n      add\n        /* \"#utility.yul\":3359:3386   */\n      slt\n        /* \"#utility.yul\":3349:3351   */\n      tag_458\n      jumpi\n        /* \"#utility.yul\":3405:3411   */\n      dup4\n        /* \"#utility.yul\":3397:3403   */\n      dup5\n        /* \"#utility.yul\":3390:3412   */\n      revert\n        /* \"#utility.yul\":3349:3351   */\n    tag_458:\n        /* \"#utility.yul\":3450:3452   */\n      dup2\n        /* \"#utility.yul\":3437:3453   */\n      calldataload\n        /* \"#utility.yul\":3476:3478   */\n      dup2\n        /* \"#utility.yul\":3468:3474   */\n      dup2\n        /* \"#utility.yul\":3465:3479   */\n      gt\n        /* \"#utility.yul\":3462:3464   */\n      iszero\n      tag_459\n      jumpi\n        /* \"#utility.yul\":3497:3503   */\n      dup5\n        /* \"#utility.yul\":3489:3495   */\n      dup6\n        /* \"#utility.yul\":3482:3504   */\n      revert\n        /* \"#utility.yul\":3462:3464   */\n    tag_459:\n        /* \"#utility.yul\":3556:3563   */\n      dup7\n        /* \"#utility.yul\":3551:3553   */\n      0x20\n        /* \"#utility.yul\":3545:3547   */\n      dup1\n        /* \"#utility.yul\":3537:3543   */\n      dup4\n        /* \"#utility.yul\":3533:3548   */\n      mul\n        /* \"#utility.yul\":3529:3531   */\n      dup6\n        /* \"#utility.yul\":3525:3549   */\n      add\n        /* \"#utility.yul\":3521:3554   */\n      add\n        /* \"#utility.yul\":3518:3564   */\n      gt\n        /* \"#utility.yul\":3515:3517   */\n      iszero\n      tag_460\n      jumpi\n        /* \"#utility.yul\":3582:3588   */\n      dup5\n        /* \"#utility.yul\":3574:3580   */\n      dup6\n        /* \"#utility.yul\":3567:3589   */\n      revert\n        /* \"#utility.yul\":3515:3517   */\n    tag_460:\n        /* \"#utility.yul\":3618:3620   */\n      0x20\n        /* \"#utility.yul\":3610:3621   */\n      swap3\n      swap1\n      swap3\n      add\n      swap7\n        /* \"#utility.yul\":3640:3646   */\n      swap2\n      swap6\n      pop\n        /* \"#utility.yul\":3091:3652   */\n      swap1\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3657:3910   */\n    tag_312:\n      0x00\n      dup1\n        /* \"#utility.yul\":3795:3797   */\n      0x40\n        /* \"#utility.yul\":3783:3792   */\n      dup4\n        /* \"#utility.yul\":3774:3781   */\n      dup6\n        /* \"#utility.yul\":3770:3793   */\n      sub\n        /* \"#utility.yul\":3766:3798   */\n      slt\n        /* \"#utility.yul\":3763:3765   */\n      iszero\n      tag_462\n      jumpi\n        /* \"#utility.yul\":3816:3822   */\n      dup2\n        /* \"#utility.yul\":3808:3814   */\n      dup3\n        /* \"#utility.yul\":3801:3823   */\n      revert\n        /* \"#utility.yul\":3763:3765   */\n    tag_462:\n      pop\n      pop\n        /* \"#utility.yul\":3844:3860   */\n      dup1\n      mload\n        /* \"#utility.yul\":3900:3902   */\n      0x20\n        /* \"#utility.yul\":3885:3903   */\n      swap1\n      swap2\n      add\n        /* \"#utility.yul\":3879:3904   */\n      mload\n        /* \"#utility.yul\":3844:3860   */\n      swap1\n      swap3\n        /* \"#utility.yul\":3879:3904   */\n      swap1\n      swap2\n      pop\n        /* \"#utility.yul\":3753:3910   */\n      jump\t// out\n        /* \"#utility.yul\":3915:4690   */\n    tag_96:\n      0x00\n      dup1\n      0x00\n      dup1\n        /* \"#utility.yul\":4078:4080   */\n      0x60\n        /* \"#utility.yul\":4066:4075   */\n      dup6\n        /* \"#utility.yul\":4057:4064   */\n      dup8\n        /* \"#utility.yul\":4053:4076   */\n      sub\n        /* \"#utility.yul\":4049:4081   */\n      slt\n        /* \"#utility.yul\":4046:4048   */\n      iszero\n      tag_464\n      jumpi\n        /* \"#utility.yul\":4099:4105   */\n      dup2\n        /* \"#utility.yul\":4091:4097   */\n      dup3\n        /* \"#utility.yul\":4084:4106   */\n      revert\n        /* \"#utility.yul\":4046:4048   */\n    tag_464:\n        /* \"#utility.yul\":4140:4149   */\n      dup5\n        /* \"#utility.yul\":4127:4150   */\n      calldataload\n        /* \"#utility.yul\":4117:4150   */\n      swap4\n      pop\n        /* \"#utility.yul\":4197:4199   */\n      0x20\n        /* \"#utility.yul\":4186:4195   */\n      dup6\n        /* \"#utility.yul\":4182:4200   */\n      add\n        /* \"#utility.yul\":4169:4201   */\n      calldataload\n        /* \"#utility.yul\":4159:4201   */\n      swap3\n      pop\n        /* \"#utility.yul\":4252:4254   */\n      0x40\n        /* \"#utility.yul\":4241:4250   */\n      dup6\n        /* \"#utility.yul\":4237:4255   */\n      add\n        /* \"#utility.yul\":4224:4256   */\n      calldataload\n        /* \"#utility.yul\":4275:4293   */\n      0xffffffffffffffff\n        /* \"#utility.yul\":4316:4318   */\n      dup1\n        /* \"#utility.yul\":4308:4314   */\n      dup3\n        /* \"#utility.yul\":4305:4319   */\n      gt\n        /* \"#utility.yul\":4302:4304   */\n      iszero\n      tag_465\n      jumpi\n        /* \"#utility.yul\":4337:4343   */\n      dup4\n        /* \"#utility.yul\":4329:4335   */\n      dup5\n        /* \"#utility.yul\":4322:4344   */\n      revert\n        /* \"#utility.yul\":4302:4304   */\n    tag_465:\n        /* \"#utility.yul\":4380:4386   */\n      dup2\n        /* \"#utility.yul\":4369:4378   */\n      dup8\n        /* \"#utility.yul\":4365:4387   */\n      add\n        /* \"#utility.yul\":4355:4387   */\n      swap2\n      pop\n        /* \"#utility.yul\":4425:4432   */\n      dup8\n        /* \"#utility.yul\":4418:4422   */\n      0x1f\n        /* \"#utility.yul\":4414:4416   */\n      dup4\n        /* \"#utility.yul\":4410:4423   */\n      add\n        /* \"#utility.yul\":4406:4433   */\n      slt\n        /* \"#utility.yul\":4396:4398   */\n      tag_466\n      jumpi\n        /* \"#utility.yul\":4452:4458   */\n      dup4\n        /* \"#utility.yul\":4444:4450   */\n      dup5\n        /* \"#utility.yul\":4437:4459   */\n      revert\n        /* \"#utility.yul\":4396:4398   */\n    tag_466:\n        /* \"#utility.yul\":4497:4499   */\n      dup2\n        /* \"#utility.yul\":4484:4500   */\n      calldataload\n        /* \"#utility.yul\":4523:4525   */\n      dup2\n        /* \"#utility.yul\":4515:4521   */\n      dup2\n        /* \"#utility.yul\":4512:4526   */\n      gt\n        /* \"#utility.yul\":4509:4511   */\n      iszero\n      tag_467\n      jumpi\n        /* \"#utility.yul\":4544:4550   */\n      dup5\n        /* \"#utility.yul\":4536:4542   */\n      dup6\n        /* \"#utility.yul\":4529:4551   */\n      revert\n        /* \"#utility.yul\":4509:4511   */\n    tag_467:\n        /* \"#utility.yul\":4594:4601   */\n      dup9\n        /* \"#utility.yul\":4589:4591   */\n      0x20\n        /* \"#utility.yul\":4580:4586   */\n      dup3\n        /* \"#utility.yul\":4576:4578   */\n      dup6\n        /* \"#utility.yul\":4572:4587   */\n      add\n        /* \"#utility.yul\":4568:4592   */\n      add\n        /* \"#utility.yul\":4565:4602   */\n      gt\n        /* \"#utility.yul\":4562:4564   */\n      iszero\n      tag_468\n      jumpi\n        /* \"#utility.yul\":4620:4626   */\n      dup5\n        /* \"#utility.yul\":4612:4618   */\n      dup6\n        /* \"#utility.yul\":4605:4627   */\n      revert\n        /* \"#utility.yul\":4562:4564   */\n    tag_468:\n        /* \"#utility.yul\":4036:4690   */\n      swap6\n      swap9\n      swap5\n      swap8\n      pop\n      pop\n        /* \"#utility.yul\":4656:4658   */\n      0x20\n        /* \"#utility.yul\":4648:4659   */\n      add\n      swap5\n      pop\n      pop\n      pop\n        /* \"#utility.yul\":4036:4690   */\n      jump\t// out\n        /* \"#utility.yul\":4695:5371   */\n    tag_180:\n      0x00\n        /* \"#utility.yul\":4828:4830   */\n      0x20\n        /* \"#utility.yul\":4816:4825   */\n      dup3\n        /* \"#utility.yul\":4807:4814   */\n      dup5\n        /* \"#utility.yul\":4803:4826   */\n      sub\n        /* \"#utility.yul\":4799:4831   */\n      slt\n        /* \"#utility.yul\":4796:4798   */\n      iszero\n      tag_470\n      jumpi\n        /* \"#utility.yul\":4849:4855   */\n      dup1\n        /* \"#utility.yul\":4841:4847   */\n      dup2\n        /* \"#utility.yul\":4834:4856   */\n      revert\n        /* \"#utility.yul\":4796:4798   */\n    tag_470:\n        /* \"#utility.yul\":4887:4896   */\n      dup2\n        /* \"#utility.yul\":4881:4897   */\n      mload\n        /* \"#utility.yul\":4920:4938   */\n      0xffffffffffffffff\n        /* \"#utility.yul\":4912:4918   */\n      dup2\n        /* \"#utility.yul\":4909:4939   */\n      gt\n        /* \"#utility.yul\":4906:4908   */\n      iszero\n      tag_471\n      jumpi\n        /* \"#utility.yul\":4957:4963   */\n      dup2\n        /* \"#utility.yul\":4949:4955   */\n      dup3\n        /* \"#utility.yul\":4942:4964   */\n      revert\n        /* \"#utility.yul\":4906:4908   */\n    tag_471:\n        /* \"#utility.yul\":4985:5007   */\n      dup3\n      add\n        /* \"#utility.yul\":5038:5042   */\n      0x1f\n        /* \"#utility.yul\":5030:5043   */\n      dup2\n      add\n        /* \"#utility.yul\":5026:5053   */\n      dup5\n      sgt\n        /* \"#utility.yul\":5016:5018   */\n      tag_472\n      jumpi\n        /* \"#utility.yul\":5072:5078   */\n      dup2\n        /* \"#utility.yul\":5064:5070   */\n      dup3\n        /* \"#utility.yul\":5057:5079   */\n      revert\n        /* \"#utility.yul\":5016:5018   */\n    tag_472:\n        /* \"#utility.yul\":5106:5108   */\n      dup1\n        /* \"#utility.yul\":5100:5109   */\n      mload\n        /* \"#utility.yul\":5131:5180   */\n      tag_473\n        /* \"#utility.yul\":5146:5179   */\n      tag_432\n        /* \"#utility.yul\":5176:5178   */\n      dup3\n        /* \"#utility.yul\":5146:5179   */\n      tag_433\n      jump\t// in\n        /* \"#utility.yul\":5131:5180   */\n    tag_473:\n        /* \"#utility.yul\":5203:5205   */\n      dup2\n        /* \"#utility.yul\":5196:5201   */\n      dup2\n        /* \"#utility.yul\":5189:5206   */\n      mstore\n        /* \"#utility.yul\":5243:5250   */\n      dup6\n        /* \"#utility.yul\":5238:5240   */\n      0x20\n        /* \"#utility.yul\":5233:5235   */\n      dup4\n        /* \"#utility.yul\":5229:5231   */\n      dup6\n        /* \"#utility.yul\":5225:5236   */\n      add\n        /* \"#utility.yul\":5221:5241   */\n      add\n        /* \"#utility.yul\":5218:5251   */\n      gt\n        /* \"#utility.yul\":5215:5217   */\n      iszero\n      tag_475\n      jumpi\n        /* \"#utility.yul\":5269:5275   */\n      dup4\n        /* \"#utility.yul\":5261:5267   */\n      dup5\n        /* \"#utility.yul\":5254:5276   */\n      revert\n        /* \"#utility.yul\":5215:5217   */\n    tag_475:\n        /* \"#utility.yul\":5287:5341   */\n      tag_362\n        /* \"#utility.yul\":5338:5340   */\n      dup3\n        /* \"#utility.yul\":5333:5335   */\n      0x20\n        /* \"#utility.yul\":5326:5331   */\n      dup4\n        /* \"#utility.yul\":5322:5336   */\n      add\n        /* \"#utility.yul\":5317:5319   */\n      0x20\n        /* \"#utility.yul\":5313:5315   */\n      dup7\n        /* \"#utility.yul\":5309:5320   */\n      add\n        /* \"#utility.yul\":5287:5341   */\n      tag_477\n      jump\t// in\n        /* \"#utility.yul\":5376:6418   */\n    tag_62:\n      0x00\n        /* \"#utility.yul\":5522:5524   */\n      0x20\n        /* \"#utility.yul\":5510:5519   */\n      dup3\n        /* \"#utility.yul\":5501:5508   */\n      dup5\n        /* \"#utility.yul\":5497:5520   */\n      sub\n        /* \"#utility.yul\":5493:5525   */\n      slt\n        /* \"#utility.yul\":5490:5492   */\n      iszero\n      tag_479\n      jumpi\n        /* \"#utility.yul\":5543:5549   */\n      dup1\n        /* \"#utility.yul\":5535:5541   */\n      dup2\n        /* \"#utility.yul\":5528:5550   */\n      revert\n        /* \"#utility.yul\":5490:5492   */\n    tag_479:\n        /* \"#utility.yul\":5588:5597   */\n      dup2\n        /* \"#utility.yul\":5575:5598   */\n      calldataload\n        /* \"#utility.yul\":5617:5635   */\n      0xffffffffffffffff\n        /* \"#utility.yul\":5658:5660   */\n      dup1\n        /* \"#utility.yul\":5650:5656   */\n      dup3\n        /* \"#utility.yul\":5647:5661   */\n      gt\n        /* \"#utility.yul\":5644:5646   */\n      iszero\n      tag_480\n      jumpi\n        /* \"#utility.yul\":5679:5685   */\n      dup3\n        /* \"#utility.yul\":5671:5677   */\n      dup4\n        /* \"#utility.yul\":5664:5686   */\n      revert\n        /* \"#utility.yul\":5644:5646   */\n    tag_480:\n        /* \"#utility.yul\":5707:5729   */\n      swap1\n      dup4\n      add\n      swap1\n        /* \"#utility.yul\":5763:5767   */\n      0xa0\n        /* \"#utility.yul\":5745:5761   */\n      dup3\n      dup7\n      sub\n        /* \"#utility.yul\":5741:5768   */\n      slt\n        /* \"#utility.yul\":5738:5740   */\n      iszero\n      tag_481\n      jumpi\n        /* \"#utility.yul\":5786:5792   */\n      dup3\n        /* \"#utility.yul\":5778:5784   */\n      dup4\n        /* \"#utility.yul\":5771:5793   */\n      revert\n        /* \"#utility.yul\":5738:5740   */\n    tag_481:\n        /* \"#utility.yul\":5824:5826   */\n      0x40\n        /* \"#utility.yul\":5818:5827   */\n      mload\n        /* \"#utility.yul\":5866:5870   */\n      0xa0\n        /* \"#utility.yul\":5858:5864   */\n      dup2\n        /* \"#utility.yul\":5854:5871   */\n      add\n        /* \"#utility.yul\":5921:5927   */\n      dup2\n        /* \"#utility.yul\":5909:5919   */\n      dup2\n        /* \"#utility.yul\":5906:5928   */\n      lt\n        /* \"#utility.yul\":5901:5903   */\n      dup4\n        /* \"#utility.yul\":5889:5899   */\n      dup3\n        /* \"#utility.yul\":5886:5904   */\n      gt\n        /* \"#utility.yul\":5883:5929   */\n      or\n        /* \"#utility.yul\":5880:5882   */\n      iszero\n      tag_482\n      jumpi\n        /* \"#utility.yul\":5932:5941   */\n      invalid\n        /* \"#utility.yul\":5880:5882   */\n    tag_482:\n        /* \"#utility.yul\":5959:5961   */\n      0x40\n        /* \"#utility.yul\":5952:5974   */\n      mstore\n        /* \"#utility.yul\":5999:6015   */\n      dup3\n      calldataload\n        /* \"#utility.yul\":6027:6043   */\n      dup3\n      dup2\n      gt\n        /* \"#utility.yul\":6024:6026   */\n      iszero\n      tag_483\n      jumpi\n        /* \"#utility.yul\":6061:6067   */\n      dup5\n        /* \"#utility.yul\":6053:6059   */\n      dup6\n        /* \"#utility.yul\":6046:6068   */\n      revert\n        /* \"#utility.yul\":6024:6026   */\n    tag_483:\n        /* \"#utility.yul\":6094:6140   */\n      tag_484\n        /* \"#utility.yul\":6132:6139   */\n      dup8\n        /* \"#utility.yul\":6121:6129   */\n      dup3\n        /* \"#utility.yul\":6117:6119   */\n      dup7\n        /* \"#utility.yul\":6113:6130   */\n      add\n        /* \"#utility.yul\":6094:6140   */\n      tag_428\n      jump\t// in\n    tag_484:\n        /* \"#utility.yul\":6086:6092   */\n      dup3\n        /* \"#utility.yul\":6079:6141   */\n      mstore\n      pop\n        /* \"#utility.yul\":6174:6207   */\n      tag_485\n        /* \"#utility.yul\":6203:6205   */\n      0x20\n        /* \"#utility.yul\":6199:6201   */\n      dup5\n        /* \"#utility.yul\":6195:6206   */\n      add\n        /* \"#utility.yul\":6174:6207   */\n      tag_424\n      jump\t// in\n    tag_485:\n        /* \"#utility.yul\":6169:6171   */\n      0x20\n        /* \"#utility.yul\":6161:6167   */\n      dup3\n        /* \"#utility.yul\":6157:6172   */\n      add\n        /* \"#utility.yul\":6150:6208   */\n      mstore\n        /* \"#utility.yul\":6262:6264   */\n      0x40\n        /* \"#utility.yul\":6258:6260   */\n      dup4\n        /* \"#utility.yul\":6254:6265   */\n      add\n        /* \"#utility.yul\":6241:6266   */\n      calldataload\n        /* \"#utility.yul\":6236:6238   */\n      0x40\n        /* \"#utility.yul\":6228:6234   */\n      dup3\n        /* \"#utility.yul\":6224:6239   */\n      add\n        /* \"#utility.yul\":6217:6267   */\n      mstore\n        /* \"#utility.yul\":6321:6323   */\n      0x60\n        /* \"#utility.yul\":6317:6319   */\n      dup4\n        /* \"#utility.yul\":6313:6324   */\n      add\n        /* \"#utility.yul\":6300:6325   */\n      calldataload\n        /* \"#utility.yul\":6295:6297   */\n      0x60\n        /* \"#utility.yul\":6287:6293   */\n      dup3\n        /* \"#utility.yul\":6283:6298   */\n      add\n        /* \"#utility.yul\":6276:6326   */\n      mstore\n        /* \"#utility.yul\":6381:6384   */\n      0x80\n        /* \"#utility.yul\":6377:6379   */\n      dup4\n        /* \"#utility.yul\":6373:6385   */\n      add\n        /* \"#utility.yul\":6360:6386   */\n      calldataload\n        /* \"#utility.yul\":6354:6357   */\n      0x80\n        /* \"#utility.yul\":6346:6352   */\n      dup3\n        /* \"#utility.yul\":6342:6358   */\n      add\n        /* \"#utility.yul\":6335:6387   */\n      mstore\n        /* \"#utility.yul\":6406:6412   */\n      dup1\n        /* \"#utility.yul\":6396:6412   */\n      swap4\n      pop\n      pop\n      pop\n      pop\n        /* \"#utility.yul\":5480:6418   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6423:6705   */\n    tag_30:\n      0x00\n        /* \"#utility.yul\":6577:6580   */\n      0x0100\n        /* \"#utility.yul\":6565:6574   */\n      dup3\n        /* \"#utility.yul\":6556:6563   */\n      dup5\n        /* \"#utility.yul\":6552:6575   */\n      sub\n        /* \"#utility.yul\":6548:6581   */\n      slt\n        /* \"#utility.yul\":6545:6547   */\n      iszero\n      tag_487\n      jumpi\n        /* \"#utility.yul\":6599:6605   */\n      dup1\n        /* \"#utility.yul\":6591:6597   */\n      dup2\n        /* \"#utility.yul\":6584:6606   */\n      revert\n        /* \"#utility.yul\":6545:6547   */\n    tag_487:\n        /* \"#utility.yul\":6627:6699   */\n      tag_441\n        /* \"#utility.yul\":6691:6698   */\n      dup4\n        /* \"#utility.yul\":6680:6689   */\n      dup4\n        /* \"#utility.yul\":6627:6699   */\n      tag_436\n      jump\t// in\n        /* \"#utility.yul\":6710:7137   */\n    tag_87:\n      0x00\n        /* \"#utility.yul\":6859:6861   */\n      0x20\n        /* \"#utility.yul\":6847:6856   */\n      dup3\n        /* \"#utility.yul\":6838:6845   */\n      dup5\n        /* \"#utility.yul\":6834:6857   */\n      sub\n        /* \"#utility.yul\":6830:6862   */\n      slt\n        /* \"#utility.yul\":6827:6829   */\n      iszero\n      tag_490\n      jumpi\n        /* \"#utility.yul\":6880:6886   */\n      dup1\n        /* \"#utility.yul\":6872:6878   */\n      dup2\n        /* \"#utility.yul\":6865:6887   */\n      revert\n        /* \"#utility.yul\":6827:6829   */\n    tag_490:\n        /* \"#utility.yul\":6925:6934   */\n      dup2\n        /* \"#utility.yul\":6912:6935   */\n      calldataload\n        /* \"#utility.yul\":6958:6976   */\n      0xffffffffffffffff\n        /* \"#utility.yul\":6950:6956   */\n      dup2\n        /* \"#utility.yul\":6947:6977   */\n      gt\n        /* \"#utility.yul\":6944:6946   */\n      iszero\n      tag_491\n      jumpi\n        /* \"#utility.yul\":6995:7001   */\n      dup2\n        /* \"#utility.yul\":6987:6993   */\n      dup3\n        /* \"#utility.yul\":6980:7002   */\n      revert\n        /* \"#utility.yul\":6944:6946   */\n    tag_491:\n        /* \"#utility.yul\":7023:7045   */\n      dup3\n      add\n        /* \"#utility.yul\":7079:7082   */\n      0xa0\n        /* \"#utility.yul\":7061:7077   */\n      dup2\n      dup6\n      sub\n        /* \"#utility.yul\":7057:7083   */\n      slt\n        /* \"#utility.yul\":7054:7056   */\n      iszero\n      tag_441\n      jumpi\n        /* \"#utility.yul\":7101:7107   */\n      dup2\n        /* \"#utility.yul\":7093:7099   */\n      dup3\n        /* \"#utility.yul\":7086:7108   */\n      revert\n        /* \"#utility.yul\":7430:8358   */\n    tag_265:\n      0x00\n        /* \"#utility.yul\":7576:7578   */\n      0x20\n        /* \"#utility.yul\":7564:7573   */\n      dup3\n        /* \"#utility.yul\":7555:7562   */\n      dup5\n        /* \"#utility.yul\":7551:7574   */\n      sub\n        /* \"#utility.yul\":7547:7579   */\n      slt\n        /* \"#utility.yul\":7544:7546   */\n      iszero\n      tag_497\n      jumpi\n        /* \"#utility.yul\":7597:7603   */\n      dup1\n        /* \"#utility.yul\":7589:7595   */\n      dup2\n        /* \"#utility.yul\":7582:7604   */\n      revert\n        /* \"#utility.yul\":7544:7546   */\n    tag_497:\n        /* \"#utility.yul\":7642:7651   */\n      dup2\n        /* \"#utility.yul\":7629:7652   */\n      calldataload\n        /* \"#utility.yul\":7671:7689   */\n      0xffffffffffffffff\n        /* \"#utility.yul\":7712:7714   */\n      dup1\n        /* \"#utility.yul\":7704:7710   */\n      dup3\n        /* \"#utility.yul\":7701:7715   */\n      gt\n        /* \"#utility.yul\":7698:7700   */\n      iszero\n      tag_498\n      jumpi\n        /* \"#utility.yul\":7733:7739   */\n      dup3\n        /* \"#utility.yul\":7725:7731   */\n      dup4\n        /* \"#utility.yul\":7718:7740   */\n      revert\n        /* \"#utility.yul\":7698:7700   */\n    tag_498:\n        /* \"#utility.yul\":7761:7783   */\n      swap1\n      dup4\n      add\n      swap1\n        /* \"#utility.yul\":7817:7821   */\n      0x40\n        /* \"#utility.yul\":7799:7815   */\n      dup3\n      dup7\n      sub\n        /* \"#utility.yul\":7795:7822   */\n      slt\n        /* \"#utility.yul\":7792:7794   */\n      iszero\n      tag_499\n      jumpi\n        /* \"#utility.yul\":7840:7846   */\n      dup3\n        /* \"#utility.yul\":7832:7838   */\n      dup4\n        /* \"#utility.yul\":7825:7847   */\n      revert\n        /* \"#utility.yul\":7792:7794   */\n    tag_499:\n        /* \"#utility.yul\":7878:7882   */\n      0x40\n        /* \"#utility.yul\":7872:7883   */\n      mload\n        /* \"#utility.yul\":7922:7926   */\n      0x40\n        /* \"#utility.yul\":7914:7920   */\n      dup2\n        /* \"#utility.yul\":7910:7927   */\n      add\n        /* \"#utility.yul\":7977:7983   */\n      dup2\n        /* \"#utility.yul\":7965:7975   */\n      dup2\n        /* \"#utility.yul\":7962:7984   */\n      lt\n        /* \"#utility.yul\":7957:7959   */\n      dup4\n        /* \"#utility.yul\":7945:7955   */\n      dup3\n        /* \"#utility.yul\":7942:7960   */\n      gt\n        /* \"#utility.yul\":7939:7985   */\n      or\n        /* \"#utility.yul\":7936:7938   */\n      iszero\n      tag_500\n      jumpi\n        /* \"#utility.yul\":7988:7997   */\n      invalid\n        /* \"#utility.yul\":7936:7938   */\n    tag_500:\n        /* \"#utility.yul\":8015:8019   */\n      0x40\n        /* \"#utility.yul\":8008:8032   */\n      mstore\n        /* \"#utility.yul\":8057:8073   */\n      dup3\n      calldataload\n        /* \"#utility.yul\":8085:8101   */\n      dup3\n      dup2\n      gt\n        /* \"#utility.yul\":8082:8084   */\n      iszero\n      tag_501\n      jumpi\n        /* \"#utility.yul\":8119:8125   */\n      dup5\n        /* \"#utility.yul\":8111:8117   */\n      dup6\n        /* \"#utility.yul\":8104:8126   */\n      revert\n        /* \"#utility.yul\":8082:8084   */\n    tag_501:\n        /* \"#utility.yul\":8152:8198   */\n      tag_502\n        /* \"#utility.yul\":8190:8197   */\n      dup8\n        /* \"#utility.yul\":8179:8187   */\n      dup3\n        /* \"#utility.yul\":8175:8177   */\n      dup7\n        /* \"#utility.yul\":8171:8188   */\n      add\n        /* \"#utility.yul\":8152:8198   */\n      tag_428\n      jump\t// in\n    tag_502:\n        /* \"#utility.yul\":8144:8150   */\n      dup3\n        /* \"#utility.yul\":8137:8199   */\n      mstore\n      pop\n        /* \"#utility.yul\":8242:8244   */\n      0x20\n        /* \"#utility.yul\":8238:8240   */\n      dup4\n        /* \"#utility.yul\":8234:8245   */\n      add\n        /* \"#utility.yul\":8221:8246   */\n      calldataload\n        /* \"#utility.yul\":8208:8246   */\n      swap3\n      pop\n        /* \"#utility.yul\":8255:8288   */\n      tag_503\n        /* \"#utility.yul\":8282:8287   */\n      dup4\n        /* \"#utility.yul\":8255:8288   */\n      tag_427\n      jump\t// in\n    tag_503:\n        /* \"#utility.yul\":8316:8318   */\n      0x20\n        /* \"#utility.yul\":8304:8319   */\n      dup2\n      add\n        /* \"#utility.yul\":8297:8327   */\n      swap3\n      swap1\n      swap3\n      mstore\n      pop\n        /* \"#utility.yul\":8308:8314   */\n      swap4\n        /* \"#utility.yul\":7534:8358   */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":8627:8921   */\n    tag_114:\n      0x00\n        /* \"#utility.yul\":8738:8740   */\n      0x20\n        /* \"#utility.yul\":8726:8735   */\n      dup3\n        /* \"#utility.yul\":8717:8724   */\n      dup5\n        /* \"#utility.yul\":8713:8736   */\n      sub\n        /* \"#utility.yul\":8709:8741   */\n      slt\n        /* \"#utility.yul\":8706:8708   */\n      iszero\n      tag_508\n      jumpi\n        /* \"#utility.yul\":8759:8765   */\n      dup1\n        /* \"#utility.yul\":8751:8757   */\n      dup2\n        /* \"#utility.yul\":8744:8766   */\n      revert\n        /* \"#utility.yul\":8706:8708   */\n    tag_508:\n        /* \"#utility.yul\":8803:8812   */\n      dup2\n        /* \"#utility.yul\":8790:8813   */\n      calldataload\n        /* \"#utility.yul\":8853:8861   */\n      0xffffff\n        /* \"#utility.yul\":8846:8851   */\n      dup2\n        /* \"#utility.yul\":8842:8862   */\n      and\n        /* \"#utility.yul\":8835:8840   */\n      dup2\n        /* \"#utility.yul\":8832:8863   */\n      eq\n        /* \"#utility.yul\":8822:8824   */\n      tag_441\n      jumpi\n        /* \"#utility.yul\":8882:8888   */\n      dup2\n        /* \"#utility.yul\":8874:8880   */\n      dup3\n        /* \"#utility.yul\":8867:8889   */\n      revert\n        /* \"#utility.yul\":8926:9253   */\n    tag_40:\n      0x00\n      dup1\n        /* \"#utility.yul\":9055:9057   */\n      0x40\n        /* \"#utility.yul\":9043:9052   */\n      dup4\n        /* \"#utility.yul\":9034:9041   */\n      dup6\n        /* \"#utility.yul\":9030:9053   */\n      sub\n        /* \"#utility.yul\":9026:9058   */\n      slt\n        /* \"#utility.yul\":9023:9025   */\n      iszero\n      tag_511\n      jumpi\n        /* \"#utility.yul\":9076:9082   */\n      dup2\n        /* \"#utility.yul\":9068:9074   */\n      dup3\n        /* \"#utility.yul\":9061:9083   */\n      revert\n        /* \"#utility.yul\":9023:9025   */\n    tag_511:\n        /* \"#utility.yul\":9117:9126   */\n      dup3\n        /* \"#utility.yul\":9104:9127   */\n      calldataload\n        /* \"#utility.yul\":9094:9127   */\n      swap2\n      pop\n        /* \"#utility.yul\":9177:9179   */\n      0x20\n        /* \"#utility.yul\":9166:9175   */\n      dup4\n        /* \"#utility.yul\":9162:9180   */\n      add\n        /* \"#utility.yul\":9149:9181   */\n      calldataload\n        /* \"#utility.yul\":9190:9223   */\n      tag_512\n        /* \"#utility.yul\":9217:9222   */\n      dup2\n        /* \"#utility.yul\":9190:9223   */\n      tag_427\n      jump\t// in\n    tag_512:\n        /* \"#utility.yul\":9242:9247   */\n      dup1\n        /* \"#utility.yul\":9232:9247   */\n      swap2\n      pop\n      pop\n        /* \"#utility.yul\":9013:9253   */\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":9258:9797   */\n    tag_49:\n      0x00\n      dup1\n      0x00\n      dup1\n        /* \"#utility.yul\":9421:9424   */\n      0x80\n        /* \"#utility.yul\":9409:9418   */\n      dup6\n        /* \"#utility.yul\":9400:9407   */\n      dup8\n        /* \"#utility.yul\":9396:9419   */\n      sub\n        /* \"#utility.yul\":9392:9425   */\n      slt\n        /* \"#utility.yul\":9389:9391   */\n      iszero\n      tag_514\n      jumpi\n        /* \"#utility.yul\":9443:9449   */\n      dup2\n        /* \"#utility.yul\":9435:9441   */\n      dup3\n        /* \"#utility.yul\":9428:9450   */\n      revert\n        /* \"#utility.yul\":9389:9391   */\n    tag_514:\n        /* \"#utility.yul\":9484:9493   */\n      dup5\n        /* \"#utility.yul\":9471:9494   */\n      calldataload\n        /* \"#utility.yul\":9461:9494   */\n      swap4\n      pop\n        /* \"#utility.yul\":9544:9546   */\n      0x20\n        /* \"#utility.yul\":9533:9542   */\n      dup6\n        /* \"#utility.yul\":9529:9547   */\n      add\n        /* \"#utility.yul\":9516:9548   */\n      calldataload\n        /* \"#utility.yul\":9557:9590   */\n      tag_515\n        /* \"#utility.yul\":9584:9589   */\n      dup2\n        /* \"#utility.yul\":9557:9590   */\n      tag_427\n      jump\t// in\n    tag_515:\n        /* \"#utility.yul\":9609:9614   */\n      swap3\n      pop\n        /* \"#utility.yul\":9661:9663   */\n      0x40\n        /* \"#utility.yul\":9646:9664   */\n      dup6\n      add\n        /* \"#utility.yul\":9633:9665   */\n      calldataload\n      swap2\n      pop\n        /* \"#utility.yul\":9717:9719   */\n      0x60\n        /* \"#utility.yul\":9702:9720   */\n      dup6\n      add\n        /* \"#utility.yul\":9689:9721   */\n      calldataload\n        /* \"#utility.yul\":9730:9765   */\n      tag_516\n        /* \"#utility.yul\":9689:9721   */\n      dup2\n        /* \"#utility.yul\":9730:9765   */\n      tag_427\n      jump\t// in\n    tag_516:\n        /* \"#utility.yul\":9379:9797   */\n      swap4\n      swap7\n      swap3\n      swap6\n      pop\n      swap1\n      swap4\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":9802:10061   */\n    tag_517:\n      0x00\n        /* \"#utility.yul\":9883:9888   */\n      dup2\n        /* \"#utility.yul\":9877:9889   */\n      mload\n        /* \"#utility.yul\":9910:9916   */\n      dup1\n        /* \"#utility.yul\":9905:9908   */\n      dup5\n        /* \"#utility.yul\":9898:9917   */\n      mstore\n        /* \"#utility.yul\":9926:9989   */\n      tag_519\n        /* \"#utility.yul\":9982:9988   */\n      dup2\n        /* \"#utility.yul\":9975:9979   */\n      0x20\n        /* \"#utility.yul\":9970:9973   */\n      dup7\n        /* \"#utility.yul\":9966:9980   */\n      add\n        /* \"#utility.yul\":9959:9963   */\n      0x20\n        /* \"#utility.yul\":9952:9957   */\n      dup7\n        /* \"#utility.yul\":9948:9964   */\n      add\n        /* \"#utility.yul\":9926:9989   */\n      tag_477\n      jump\t// in\n    tag_519:\n        /* \"#utility.yul\":10043:10045   */\n      0x1f\n        /* \"#utility.yul\":10022:10037   */\n      add\n      not(0x1f)\n        /* \"#utility.yul\":10018:10047   */\n      and\n        /* \"#utility.yul\":10009:10048   */\n      swap3\n      swap1\n      swap3\n      add\n        /* \"#utility.yul\":10050:10054   */\n      0x20\n        /* \"#utility.yul\":10005:10055   */\n      add\n      swap3\n        /* \"#utility.yul\":9853:10061   */\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":10066:10497   */\n    tag_117:\n        /* \"#utility.yul\":10319:10321   */\n      0x60\n        /* \"#utility.yul\":10315:10330   */\n      swap4\n      dup5\n      shl\n      not(0xffffffffffffffffffffffff)\n        /* \"#utility.yul\":10311:10335   */\n      swap1\n      dup2\n      and\n        /* \"#utility.yul\":10299:10336   */\n      dup3\n      mstore\n        /* \"#utility.yul\":10392:10395   */\n      0xe8\n        /* \"#utility.yul\":10370:10386   */\n      swap4\n      swap1\n      swap4\n      shl\n      not(sub(shl(0xe8, 0x01), 0x01))\n        /* \"#utility.yul\":10366:10407   */\n      and\n        /* \"#utility.yul\":10361:10363   */\n      0x14\n        /* \"#utility.yul\":10352:10364   */\n      dup3\n      add\n        /* \"#utility.yul\":10345:10408   */\n      mstore\n        /* \"#utility.yul\":10442:10457   */\n      swap3\n      shl\n        /* \"#utility.yul\":10438:10462   */\n      and\n        /* \"#utility.yul\":10433:10435   */\n      0x17\n        /* \"#utility.yul\":10424:10436   */\n      dup3\n      add\n        /* \"#utility.yul\":10417:10463   */\n      mstore\n        /* \"#utility.yul\":10488:10490   */\n      0x2b\n        /* \"#utility.yul\":10479:10491   */\n      add\n      swap1\n        /* \"#utility.yul\":10239:10497   */\n      jump\t// out\n        /* \"#utility.yul\":10502:10775   */\n    tag_173:\n      0x00\n        /* \"#utility.yul\":10685:10691   */\n      dup3\n        /* \"#utility.yul\":10677:10683   */\n      dup5\n        /* \"#utility.yul\":10672:10675   */\n      dup4\n        /* \"#utility.yul\":10659:10692   */\n      calldatacopy\n        /* \"#utility.yul\":10711:10727   */\n      swap2\n      add\n        /* \"#utility.yul\":10736:10751   */\n      swap1\n      dup2\n      mstore\n        /* \"#utility.yul\":10711:10727   */\n      swap2\n        /* \"#utility.yul\":10649:10775   */\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":10780:10983   */\n    tag_46:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":10944:10976   */\n      swap2\n      swap1\n      swap2\n      and\n        /* \"#utility.yul\":10926:10977   */\n      dup2\n      mstore\n        /* \"#utility.yul\":10914:10916   */\n      0x20\n        /* \"#utility.yul\":10899:10917   */\n      add\n      swap1\n        /* \"#utility.yul\":10881:10983   */\n      jump\t// out\n        /* \"#utility.yul\":10988:11558   */\n    tag_307:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":11277:11292   */\n      dup7\n      dup2\n      and\n        /* \"#utility.yul\":11259:11293   */\n      dup3\n      mstore\n        /* \"#utility.yul\":11336:11350   */\n      dup6\n      iszero\n        /* \"#utility.yul\":11329:11351   */\n      iszero\n        /* \"#utility.yul\":11324:11326   */\n      0x20\n        /* \"#utility.yul\":11309:11327   */\n      dup4\n      add\n        /* \"#utility.yul\":11302:11352   */\n      mstore\n        /* \"#utility.yul\":11383:11385   */\n      0x40\n        /* \"#utility.yul\":11368:11386   */\n      dup3\n      add\n        /* \"#utility.yul\":11361:11395   */\n      dup6\n      swap1\n      mstore\n        /* \"#utility.yul\":11431:11446   */\n      dup4\n      and\n        /* \"#utility.yul\":11426:11428   */\n      0x60\n        /* \"#utility.yul\":11411:11429   */\n      dup3\n      add\n        /* \"#utility.yul\":11404:11447   */\n      mstore\n        /* \"#utility.yul\":11239:11242   */\n      0xa0\n        /* \"#utility.yul\":11478:11481   */\n      0x80\n        /* \"#utility.yul\":11463:11482   */\n      dup3\n      add\n        /* \"#utility.yul\":11456:11488   */\n      dup2\n      swap1\n      mstore\n        /* \"#utility.yul\":10988:11558   */\n      0x00\n      swap1\n        /* \"#utility.yul\":11505:11552   */\n      tag_524\n      swap1\n        /* \"#utility.yul\":11532:11551   */\n      dup4\n      add\n        /* \"#utility.yul\":11524:11530   */\n      dup5\n        /* \"#utility.yul\":11505:11552   */\n      tag_517\n      jump\t// in\n    tag_524:\n        /* \"#utility.yul\":11497:11552   */\n      swap8\n        /* \"#utility.yul\":11211:11558   */\n      swap7\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":11563:12369   */\n    tag_59:\n      0x00\n        /* \"#utility.yul\":11752:11754   */\n      0x20\n        /* \"#utility.yul\":11792:11794   */\n      dup1\n        /* \"#utility.yul\":11781:11790   */\n      dup4\n        /* \"#utility.yul\":11777:11795   */\n      add\n        /* \"#utility.yul\":11822:11824   */\n      dup2\n        /* \"#utility.yul\":11811:11820   */\n      dup5\n        /* \"#utility.yul\":11804:11825   */\n      mstore\n        /* \"#utility.yul\":11845:11851   */\n      dup1\n        /* \"#utility.yul\":11880:11886   */\n      dup6\n        /* \"#utility.yul\":11874:11887   */\n      mload\n        /* \"#utility.yul\":11911:11917   */\n      dup1\n        /* \"#utility.yul\":11903:11909   */\n      dup4\n        /* \"#utility.yul\":11896:11918   */\n      mstore\n        /* \"#utility.yul\":11949:11951   */\n      0x40\n        /* \"#utility.yul\":11938:11947   */\n      dup7\n        /* \"#utility.yul\":11934:11952   */\n      add\n        /* \"#utility.yul\":11927:11952   */\n      swap2\n      pop\n        /* \"#utility.yul\":12012:12014   */\n      0x40\n        /* \"#utility.yul\":12006:12008   */\n      dup5\n        /* \"#utility.yul\":11998:12004   */\n      dup3\n        /* \"#utility.yul\":11994:12009   */\n      mul\n        /* \"#utility.yul\":11983:11992   */\n      dup8\n        /* \"#utility.yul\":11979:12010   */\n      add\n        /* \"#utility.yul\":11975:12015   */\n      add\n        /* \"#utility.yul\":11961:12015   */\n      swap3\n      pop\n        /* \"#utility.yul\":12050:12052   */\n      dup4\n        /* \"#utility.yul\":12042:12048   */\n      dup8\n        /* \"#utility.yul\":12038:12053   */\n      add\n        /* \"#utility.yul\":12071:12075   */\n      dup6\n        /* \"#utility.yul\":12084:12340   */\n    tag_526:\n        /* \"#utility.yul\":12098:12104   */\n      dup3\n        /* \"#utility.yul\":12095:12096   */\n      dup2\n        /* \"#utility.yul\":12092:12105   */\n      lt\n        /* \"#utility.yul\":12084:12340   */\n      iszero\n      tag_528\n      jumpi\n        /* \"#utility.yul\":12191:12193   */\n      0x3f\n        /* \"#utility.yul\":12187:12194   */\n      not\n        /* \"#utility.yul\":12175:12184   */\n      dup9\n        /* \"#utility.yul\":12167:12173   */\n      dup7\n        /* \"#utility.yul\":12163:12185   */\n      sub\n        /* \"#utility.yul\":12159:12195   */\n      add\n        /* \"#utility.yul\":12154:12157   */\n      dup5\n        /* \"#utility.yul\":12147:12196   */\n      mstore\n        /* \"#utility.yul\":12219:12260   */\n      tag_529\n        /* \"#utility.yul\":12253:12259   */\n      dup6\n        /* \"#utility.yul\":12244:12250   */\n      dup4\n        /* \"#utility.yul\":12238:12251   */\n      mload\n        /* \"#utility.yul\":12219:12260   */\n      tag_517\n      jump\t// in\n    tag_529:\n        /* \"#utility.yul\":12209:12260   */\n      swap5\n      pop\n        /* \"#utility.yul\":12318:12330   */\n      swap3\n      dup6\n      add\n      swap3\n        /* \"#utility.yul\":12283:12298   */\n      swap1\n      dup6\n      add\n      swap1\n        /* \"#utility.yul\":12120:12121   */\n      0x01\n        /* \"#utility.yul\":12113:12122   */\n      add\n        /* \"#utility.yul\":12084:12340   */\n      jump(tag_526)\n    tag_528:\n      pop\n        /* \"#utility.yul\":12357:12363   */\n      swap3\n      swap8\n        /* \"#utility.yul\":11732:12369   */\n      swap7\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":12374:12595   */\n    tag_182:\n      0x00\n        /* \"#utility.yul\":12523:12525   */\n      0x20\n        /* \"#utility.yul\":12512:12521   */\n      dup3\n        /* \"#utility.yul\":12505:12526   */\n      mstore\n        /* \"#utility.yul\":12543:12589   */\n      tag_441\n        /* \"#utility.yul\":12585:12587   */\n      0x20\n        /* \"#utility.yul\":12574:12583   */\n      dup4\n        /* \"#utility.yul\":12570:12588   */\n      add\n        /* \"#utility.yul\":12562:12568   */\n      dup5\n        /* \"#utility.yul\":12543:12589   */\n      tag_517\n      jump\t// in\n        /* \"#utility.yul\":12600:12942   */\n    tag_224:\n        /* \"#utility.yul\":12802:12804   */\n      0x20\n        /* \"#utility.yul\":12784:12805   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":12841:12843   */\n      0x12\n        /* \"#utility.yul\":12821:12839   */\n      swap1\n      dup3\n      add\n        /* \"#utility.yul\":12814:12844   */\n      mstore\n      shl(0x72, 0x151bdbc81b5d58da081c995c5d595cdd1959)\n        /* \"#utility.yul\":12875:12877   */\n      0x40\n        /* \"#utility.yul\":12860:12878   */\n      dup3\n      add\n        /* \"#utility.yul\":12853:12901   */\n      mstore\n        /* \"#utility.yul\":12933:12935   */\n      0x60\n        /* \"#utility.yul\":12918:12936   */\n      add\n      swap1\n        /* \"#utility.yul\":12774:12942   */\n      jump\t// out\n        /* \"#utility.yul\":12947:13290   */\n    tag_121:\n        /* \"#utility.yul\":13149:13151   */\n      0x20\n        /* \"#utility.yul\":13131:13152   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":13188:13190   */\n      0x13\n        /* \"#utility.yul\":13168:13186   */\n      swap1\n      dup3\n      add\n        /* \"#utility.yul\":13161:13191   */\n      mstore\n      shl(0x6a, 0x151bdbc81b1a5d1d1b19481c9958d95a5d9959)\n        /* \"#utility.yul\":13222:13224   */\n      0x40\n        /* \"#utility.yul\":13207:13225   */\n      dup3\n      add\n        /* \"#utility.yul\":13200:13249   */\n      mstore\n        /* \"#utility.yul\":13281:13283   */\n      0x60\n        /* \"#utility.yul\":13266:13284   */\n      add\n      swap1\n        /* \"#utility.yul\":13121:13290   */\n      jump\t// out\n        /* \"#utility.yul\":13295:13769   */\n    tag_305:\n      0x00\n        /* \"#utility.yul\":13492:13494   */\n      0x20\n        /* \"#utility.yul\":13481:13490   */\n      dup3\n        /* \"#utility.yul\":13474:13495   */\n      mstore\n        /* \"#utility.yul\":13530:13536   */\n      dup3\n        /* \"#utility.yul\":13524:13537   */\n      mload\n        /* \"#utility.yul\":13573:13577   */\n      0x40\n        /* \"#utility.yul\":13568:13570   */\n      0x20\n        /* \"#utility.yul\":13557:13566   */\n      dup5\n        /* \"#utility.yul\":13553:13571   */\n      add\n        /* \"#utility.yul\":13546:13578   */\n      mstore\n        /* \"#utility.yul\":13601:13653   */\n      tag_535\n        /* \"#utility.yul\":13649:13651   */\n      0x60\n        /* \"#utility.yul\":13638:13647   */\n      dup5\n        /* \"#utility.yul\":13634:13652   */\n      add\n        /* \"#utility.yul\":13620:13632   */\n      dup3\n        /* \"#utility.yul\":13601:13653   */\n      tag_517\n      jump\t// in\n    tag_535:\n        /* \"#utility.yul\":13713:13715   */\n      0x20\n        /* \"#utility.yul\":13701:13716   */\n      swap5\n      swap1\n      swap5\n      add\n        /* \"#utility.yul\":13695:13717   */\n      mload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":13691:13739   */\n      and\n        /* \"#utility.yul\":13684:13688   */\n      0x40\n        /* \"#utility.yul\":13669:13689   */\n      swap4\n      swap1\n      swap4\n      add\n        /* \"#utility.yul\":13662:13740   */\n      swap3\n      swap1\n      swap3\n      mstore\n      pop\n        /* \"#utility.yul\":13587:13653   */\n      swap1\n      swap2\n        /* \"#utility.yul\":13464:13769   */\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":13774:13951   */\n    tag_33:\n        /* \"#utility.yul\":13920:13945   */\n      swap1\n      dup2\n      mstore\n        /* \"#utility.yul\":13908:13910   */\n      0x20\n        /* \"#utility.yul\":13893:13911   */\n      add\n      swap1\n        /* \"#utility.yul\":13875:13951   */\n      jump\t// out\n        /* \"#utility.yul\":13956:14489   */\n    tag_171:\n      0x00\n      dup1\n        /* \"#utility.yul\":14099:14110   */\n      dup4\n        /* \"#utility.yul\":14086:14111   */\n      calldataload\n        /* \"#utility.yul\":14193:14195   */\n      0x1e\n        /* \"#utility.yul\":14189:14196   */\n      not\n        /* \"#utility.yul\":14178:14186   */\n      dup5\n        /* \"#utility.yul\":14162:14176   */\n      calldatasize\n        /* \"#utility.yul\":14158:14187   */\n      sub\n        /* \"#utility.yul\":14154:14197   */\n      add\n        /* \"#utility.yul\":14134:14152   */\n      dup2\n        /* \"#utility.yul\":14130:14198   */\n      slt\n        /* \"#utility.yul\":14120:14122   */\n      tag_538\n      jumpi\n        /* \"#utility.yul\":14215:14219   */\n      dup3\n        /* \"#utility.yul\":14209:14213   */\n      dup4\n        /* \"#utility.yul\":14202:14220   */\n      revert\n        /* \"#utility.yul\":14120:14122   */\n    tag_538:\n        /* \"#utility.yul\":14245:14278   */\n      dup4\n      add\n        /* \"#utility.yul\":14297:14317   */\n      dup1\n      calldataload\n      swap2\n      pop\n        /* \"#utility.yul\":14340:14358   */\n      0xffffffffffffffff\n        /* \"#utility.yul\":14329:14359   */\n      dup3\n      gt\n        /* \"#utility.yul\":14326:14328   */\n      iszero\n      tag_539\n      jumpi\n        /* \"#utility.yul\":14375:14379   */\n      dup3\n        /* \"#utility.yul\":14369:14373   */\n      dup4\n        /* \"#utility.yul\":14362:14380   */\n      revert\n        /* \"#utility.yul\":14326:14328   */\n    tag_539:\n        /* \"#utility.yul\":14411:14415   */\n      0x20\n        /* \"#utility.yul\":14399:14416   */\n      add\n      swap2\n      pop\n        /* \"#utility.yul\":14442:14456   */\n      calldatasize\n        /* \"#utility.yul\":14438:14465   */\n      dup2\n      swap1\n      sub\n        /* \"#utility.yul\":14428:14466   */\n      dup3\n      sgt\n        /* \"#utility.yul\":14425:14427   */\n      iszero\n      tag_540\n      jumpi\n        /* \"#utility.yul\":14479:14480   */\n      0x00\n        /* \"#utility.yul\":14476:14477   */\n      dup1\n        /* \"#utility.yul\":14469:14481   */\n      revert\n        /* \"#utility.yul\":14425:14427   */\n    tag_540:\n        /* \"#utility.yul\":14050:14489   */\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":14494:14736   */\n    tag_434:\n        /* \"#utility.yul\":14564:14566   */\n      0x40\n        /* \"#utility.yul\":14558:14567   */\n      mload\n        /* \"#utility.yul\":14594:14611   */\n      dup2\n      dup2\n      add\n        /* \"#utility.yul\":14641:14659   */\n      0xffffffffffffffff\n        /* \"#utility.yul\":14626:14660   */\n      dup2\n      gt\n        /* \"#utility.yul\":14662:14684   */\n      dup3\n      dup3\n      lt\n        /* \"#utility.yul\":14623:14685   */\n      or\n        /* \"#utility.yul\":14620:14622   */\n      iszero\n      tag_542\n      jumpi\n        /* \"#utility.yul\":14688:14697   */\n      invalid\n        /* \"#utility.yul\":14620:14622   */\n    tag_542:\n        /* \"#utility.yul\":14715:14717   */\n      0x40\n        /* \"#utility.yul\":14708:14730   */\n      mstore\n        /* \"#utility.yul\":14538:14736   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":14741:14922   */\n    tag_433:\n      0x00\n        /* \"#utility.yul\":14824:14842   */\n      0xffffffffffffffff\n        /* \"#utility.yul\":14816:14822   */\n      dup3\n        /* \"#utility.yul\":14813:14843   */\n      gt\n        /* \"#utility.yul\":14810:14812   */\n      iszero\n      tag_544\n      jumpi\n        /* \"#utility.yul\":14846:14855   */\n      invalid\n        /* \"#utility.yul\":14810:14812   */\n    tag_544:\n      pop\n        /* \"#utility.yul\":14905:14907   */\n      0x1f\n        /* \"#utility.yul\":14882:14899   */\n      add\n      not(0x1f)\n        /* \"#utility.yul\":14878:14909   */\n      and\n        /* \"#utility.yul\":14911:14915   */\n      0x20\n        /* \"#utility.yul\":14874:14916   */\n      add\n      swap1\n        /* \"#utility.yul\":14800:14922   */\n      jump\t// out\n        /* \"#utility.yul\":14927:15185   */\n    tag_477:\n        /* \"#utility.yul\":14999:15000   */\n      0x00\n        /* \"#utility.yul\":15009:15122   */\n    tag_546:\n        /* \"#utility.yul\":15023:15029   */\n      dup4\n        /* \"#utility.yul\":15020:15021   */\n      dup2\n        /* \"#utility.yul\":15017:15030   */\n      lt\n        /* \"#utility.yul\":15009:15122   */\n      iszero\n      tag_548\n      jumpi\n        /* \"#utility.yul\":15099:15110   */\n      dup2\n      dup2\n      add\n        /* \"#utility.yul\":15093:15111   */\n      mload\n        /* \"#utility.yul\":15080:15091   */\n      dup4\n      dup3\n      add\n        /* \"#utility.yul\":15073:15112   */\n      mstore\n        /* \"#utility.yul\":15045:15047   */\n      0x20\n        /* \"#utility.yul\":15038:15048   */\n      add\n        /* \"#utility.yul\":15009:15122   */\n      jump(tag_546)\n    tag_548:\n        /* \"#utility.yul\":15140:15146   */\n      dup4\n        /* \"#utility.yul\":15137:15138   */\n      dup2\n        /* \"#utility.yul\":15134:15147   */\n      gt\n        /* \"#utility.yul\":15131:15133   */\n      iszero\n      tag_232\n      jumpi\n      pop\n      pop\n        /* \"#utility.yul\":15175:15176   */\n      0x00\n        /* \"#utility.yul\":15157:15173   */\n      swap2\n      add\n        /* \"#utility.yul\":15150:15177   */\n      mstore\n        /* \"#utility.yul\":14980:15185   */\n      jump\t// out\n        /* \"#utility.yul\":15190:15323   */\n    tag_427:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":15267:15298   */\n      dup2\n      and\n        /* \"#utility.yul\":15257:15299   */\n      dup2\n      eq\n        /* \"#utility.yul\":15247:15249   */\n      tag_551\n      jumpi\n        /* \"#utility.yul\":15313:15314   */\n      0x00\n        /* \"#utility.yul\":15310:15311   */\n      dup1\n        /* \"#utility.yul\":15303:15315   */\n      revert\n        /* \"#utility.yul\":15247:15249   */\n    tag_551:\n        /* \"#utility.yul\":15237:15323   */\n      pop\n      jump\t// out\n\n    auxdata: 0xa2646970667358221220e228c23d2b1f025053b91a41fde7f769ec7c402ac322a1f3e84e77e836d0cc2464736f6c63430007060033\n}\n",
						"bytecode": {
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:507:34",
										"statements": [
											{
												"nodeType": "YulBlock",
												"src": "6:3:34",
												"statements": []
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "76:117:34",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "86:22:34",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "101:6:34"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "95:5:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "95:13:34"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "86:5:34"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "171:16:34",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "180:1:34",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "183:1:34",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "173:6:34"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "173:12:34"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "173:12:34"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "130:5:34"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "141:5:34"
																					},
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "156:3:34",
																										"type": "",
																										"value": "160"
																									},
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "161:1:34",
																										"type": "",
																										"value": "1"
																									}
																								],
																								"functionName": {
																									"name": "shl",
																									"nodeType": "YulIdentifier",
																									"src": "152:3:34"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "152:11:34"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "165:1:34",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "sub",
																							"nodeType": "YulIdentifier",
																							"src": "148:3:34"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "148:19:34"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "137:3:34"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "137:31:34"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "127:2:34"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "127:42:34"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "120:6:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "120:50:34"
															},
															"nodeType": "YulIf",
															"src": "117:2:34"
														}
													]
												},
												"name": "abi_decode_t_address_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "55:6:34",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "66:5:34",
														"type": ""
													}
												],
												"src": "14:179:34"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "296:209:34",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "342:26:34",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "351:6:34"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "359:6:34"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "344:6:34"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "344:22:34"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "344:22:34"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "317:7:34"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "326:9:34"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "313:3:34"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "313:23:34"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "338:2:34",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "309:3:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "309:32:34"
															},
															"nodeType": "YulIf",
															"src": "306:2:34"
														},
														{
															"nodeType": "YulAssignment",
															"src": "377:52:34",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "419:9:34"
																	}
																],
																"functionName": {
																	"name": "abi_decode_t_address_fromMemory",
																	"nodeType": "YulIdentifier",
																	"src": "387:31:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "387:42:34"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "377:6:34"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "438:61:34",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "484:9:34"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "495:2:34",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "480:3:34"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "480:18:34"
																	}
																],
																"functionName": {
																	"name": "abi_decode_t_address_fromMemory",
																	"nodeType": "YulIdentifier",
																	"src": "448:31:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "448:51:34"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "438:6:34"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_address_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "254:9:34",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "265:7:34",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "277:6:34",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "285:6:34",
														"type": ""
													}
												],
												"src": "198:307:34"
											}
										]
									},
									"contents": "{\n    { }\n    function abi_decode_t_address_fromMemory(offset) -> value\n    {\n        value := mload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_address_fromMemory(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(value0, value0) }\n        value0 := abi_decode_t_address_fromMemory(headStart)\n        value1 := abi_decode_t_address_fromMemory(add(headStart, 32))\n    }\n}",
									"id": 34,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"linkReferences": {},
							"object": "60c06040526000196000553480156200001757600080fd5b50604051620027a1380380620027a18339810160408190526200003a9162000076565b6001600160601b0319606092831b8116608052911b1660a052620000ad565b80516001600160a01b03811681146200007157600080fd5b919050565b6000806040838503121562000089578182fd5b620000948362000059565b9150620000a46020840162000059565b90509250929050565b60805160601c60a05160601c612698620001096000398061011252806104c752806105b2528061063f528061067f528061076a5280611721528061176752806117db525080610ba3528061109e52806118b652506126986000f3fe6080604052600436106101025760003560e01c8063c04b8d5911610095578063df2ab5bb11610064578063df2ab5bb14610284578063e0e189a014610297578063f28c0498146102aa578063f3995c67146102bd578063fa461e33146102d057610172565b8063c04b8d5914610236578063c2e3140a14610249578063c45a01551461025c578063db3e21981461027157610172565b80634aa4a4fc116100d15780634aa4a4fc146101ce5780639b2c0a37146101f0578063a4a78f0c14610203578063ac9650d81461021657610172565b806312210e8a14610177578063414bf3891461017f5780634659a494146101a857806349404b7c146101bb57610172565b3661017257336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610170576040805162461bcd60e51b81526020600482015260096024820152684e6f7420574554483960b81b604482015290519081900360640190fd5b005b600080fd5b6101706102f0565b61019261018d36600461222a565b610302565b60405161019f9190612583565b60405180910390f35b6101706101b6366004611fa8565b610429565b6101706101c9366004612331565b6104c3565b3480156101da57600080fd5b506101e361063d565b60405161019f9190612420565b6101706101fe366004612360565b610661565b610170610211366004611fa8565b61082d565b610229610224366004612008565b6108be565b60405161019f919061247a565b61019261024436600461217f565b6109fe565b610170610257366004611fa8565b610b12565b34801561026857600080fd5b506101e3610ba1565b61019261027f36600461222a565b610bc5565b610170610292366004611f09565b610cec565b6101706102a5366004611f4a565b610dca565b6101926102b8366004612246565b610ef1565b6101706102cb366004611fa8565b610fe7565b3480156102dc57600080fd5b506101706102eb36600461209a565b611059565b471561030057610300334761116c565b565b600081608001358061031261125b565b111561035b576040805162461bcd60e51b8152602060048201526013602482015272151c985b9cd858dd1a5bdb881d1bdbc81bdb19606a1b604482015290519081900360640190fd5b6103f460a08401356103736080860160608701611ee6565b610384610100870160e08801611ee6565b604080518082019091528061039c60208a018a611ee6565b6103ac60608b0160408c0161230e565b6103bc60408c0160208d01611ee6565b6040516020016103ce939291906123d5565b6040516020818303038152906040528152602001336001600160a01b031681525061125f565b91508260c001358210156104235760405162461bcd60e51b815260040161041a90612519565b60405180910390fd5b50919050565b604080516323f2ebc360e21b815233600482015230602482015260448101879052606481018690526001608482015260ff851660a482015260c4810184905260e4810183905290516001600160a01b03881691638fcbaf0c9161010480830192600092919082900301818387803b1580156104a357600080fd5b505af11580156104b7573d6000803e3d6000fd5b50505050505050505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561053257600080fd5b505afa158015610546573d6000803e3d6000fd5b505050506040513d602081101561055c57600080fd5b50519050828110156105aa576040805162461bcd60e51b8152602060048201526012602482015271496e73756666696369656e7420574554483960701b604482015290519081900360640190fd5b8015610638577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316632e1a7d4d826040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b15801561061657600080fd5b505af115801561062a573d6000803e3d6000fd5b50505050610638828261116c565b505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b600082118015610672575060648211155b61067b57600080fd5b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156106ea57600080fd5b505afa1580156106fe573d6000803e3d6000fd5b505050506040513d602081101561071457600080fd5b5051905084811015610762576040805162461bcd60e51b8152602060048201526012602482015271496e73756666696369656e7420574554483960701b604482015290519081900360640190fd5b8015610826577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316632e1a7d4d826040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b1580156107ce57600080fd5b505af11580156107e2573d6000803e3d6000fd5b5050505060006127106107fe85846113b190919063ffffffff16565b8161080557fe5b049050801561081857610818838261116c565b6108248582840361116c565b505b5050505050565b60408051636eb1769f60e11b81523360048201523060248201529051600019916001600160a01b0389169163dd62ed3e91604480820192602092909190829003018186803b15801561087e57600080fd5b505afa158015610892573d6000803e3d6000fd5b505050506040513d60208110156108a857600080fd5b5051101561082457610824868686868686610429565b60608167ffffffffffffffff811180156108d757600080fd5b5060405190808252806020026020018201604052801561090b57816020015b60608152602001906001900390816108f65790505b50905060005b828110156109f7576000803086868581811061092957fe5b905060200281019061093b919061258c565b604051610949929190612410565b600060405180830381855af49150503d8060008114610984576040519150601f19603f3d011682016040523d82523d6000602084013e610989565b606091505b5091509150816109d5576044815110156109a257600080fd5b600481019050808060200190518101906109bc9190612115565b60405162461bcd60e51b815260040161041a91906124da565b808484815181106109e257fe5b60209081029190910101525050600101610911565b5092915050565b6000816040015180610a0e61125b565b1115610a57576040805162461bcd60e51b8152602060048201526013602482015272151c985b9cd858dd1a5bdb881d1bdbc81bdb19606a1b604482015290519081900360640190fd5b335b6000610a6885600001516113db565b9050610ab4856060015182610a81578660200151610a83565b305b60006040518060400160405280610a9d8b600001516113e7565b8152602001876001600160a01b031681525061125f565b60608601528015610ad4578451309250610acd906113f6565b8552610ae1565b8460600151935050610ae7565b50610a59565b8360800151831015610b0b5760405162461bcd60e51b815260040161041a90612519565b5050919050565b60408051636eb1769f60e11b8152336004820152306024820152905186916001600160a01b0389169163dd62ed3e91604480820192602092909190829003018186803b158015610b6157600080fd5b505afa158015610b75573d6000803e3d6000fd5b505050506040513d6020811015610b8b57600080fd5b5051101561082457610824868686868686610fe7565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000816080013580610bd561125b565b1115610c1e576040805162461bcd60e51b8152602060048201526013602482015272151c985b9cd858dd1a5bdb881d1bdbc81bdb19606a1b604482015290519081900360640190fd5b610cba60a0840135610c366080860160608701611ee6565b610c47610100870160e08801611ee6565b6040518060400160405280886020016020810190610c659190611ee6565b610c7560608b0160408c0161230e565b610c8260208c018c611ee6565b604051602001610c94939291906123d5565b6040516020818303038152906040528152602001336001600160a01b031681525061140d565b91508260c00135821115610ce05760405162461bcd60e51b815260040161041a906124ed565b50600019600055919050565b6000836001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015610d3b57600080fd5b505afa158015610d4f573d6000803e3d6000fd5b505050506040513d6020811015610d6557600080fd5b5051905082811015610db3576040805162461bcd60e51b815260206004820152601260248201527124b739bab33334b1b4b2b73a103a37b5b2b760711b604482015290519081900360640190fd5b8015610dc457610dc4848383611588565b50505050565b600082118015610ddb575060648211155b610de457600080fd5b6000856001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015610e3357600080fd5b505afa158015610e47573d6000803e3d6000fd5b505050506040513d6020811015610e5d57600080fd5b5051905084811015610eab576040805162461bcd60e51b815260206004820152601260248201527124b739bab33334b1b4b2b73a103a37b5b2b760711b604482015290519081900360640190fd5b8015610824576000612710610ec083866113b1565b81610ec757fe5b0490508015610edb57610edb878483611588565b610ee88786838503611588565b50505050505050565b6000816040013580610f0161125b565b1115610f4a576040805162461bcd60e51b8152602060048201526013602482015272151c985b9cd858dd1a5bdb881d1bdbc81bdb19606a1b604482015290519081900360640190fd5b610fbd6060840135610f626040860160208701611ee6565b6040805180820190915260009080610f7a898061258c565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505050908252503360209091015261140d565b5060005491508260800135821115610ce05760405162461bcd60e51b815260040161041a906124ed565b6040805163d505accf60e01b8152336004820152306024820152604481018790526064810186905260ff8516608482015260a4810184905260c4810183905290516001600160a01b0388169163d505accf9160e480830192600092919082900301818387803b1580156104a357600080fd5b60008413806110685750600083135b61107157600080fd5b600061107f8284018461227e565b9050600080600061109384600001516116cf565b9250925092506110c57f0000000000000000000000000000000000000000000000000000000000000000848484611700565b5060008060008a136110ec57846001600160a01b0316846001600160a01b03161089611103565b836001600160a01b0316856001600160a01b0316108a5b9150915081156111225761111d858760200151338461171f565b6104b7565b855161112d906113db565b1561115257855161113d906113f6565b865261114c813360008961140d565b506104b7565b806000819055508394506104b7858760200151338461171f565b604080516000808252602082019092526001600160a01b0384169083906040518082805190602001908083835b602083106111b85780518252601f199092019160209182019101611199565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d806000811461121a576040519150601f19603f3d011682016040523d82523d6000602084013e61121f565b606091505b5050905080610638576040805162461bcd60e51b815260206004820152600360248201526253544560e81b604482015290519081900360640190fd5b4290565b60006001600160a01b038416611273573093505b600080600061128585600001516116cf565b919450925090506001600160a01b03808316908416106000806112a98686866118af565b6001600160a01b031663128acb088b856112c28f6118ed565b6001600160a01b038e16156112d7578d6112fd565b876112f65773fffd8963efd1fc6a506488495d951d5263988d256112fd565b6401000276a45b8d60405160200161130e9190612546565b6040516020818303038152906040526040518663ffffffff1660e01b815260040161133d959493929190612434565b6040805180830381600087803b15801561135657600080fd5b505af115801561136a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061138e9190612077565b915091508261139d578161139f565b805b6000039b9a5050505050505050505050565b60008215806113cc575050818102818382816113c957fe5b04145b6113d557600080fd5b92915050565b8051604211155b919050565b60606113d5826000602b611903565b80516060906113d590839060179060161901611903565b60006001600160a01b038416611421573093505b600080600061143385600001516116cf565b919450925090506001600160a01b03808416908316106000806114578587866118af565b6001600160a01b031663128acb088b856114708f6118ed565b6000036001600160a01b038e1615611488578d6114ae565b876114a75773fffd8963efd1fc6a506488495d951d5263988d256114ae565b6401000276a45b8d6040516020016114bf9190612546565b6040516020818303038152906040526040518663ffffffff1660e01b81526004016114ee959493929190612434565b6040805180830381600087803b15801561150757600080fd5b505af115801561151b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061153f9190612077565b9150915060008361155457818360000361155a565b82826000035b90985090506001600160a01b038a16611579578b811461157957600080fd5b50505050505050949350505050565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663a9059cbb60e01b1781529251825160009485949389169392918291908083835b602083106116045780518252601f1990920191602091820191016115e5565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114611666576040519150601f19603f3d011682016040523d82523d6000602084013e61166b565b606091505b5091509150818015611699575080511580611699575080806020019051602081101561169657600080fd5b50515b610826576040805162461bcd60e51b815260206004820152600260248201526114d560f21b604482015290519081900360640190fd5b600080806116dd8482611a54565b92506116ea846014611b04565b90506116f7846017611a54565b91509193909250565b600061171685611711868686611bab565b611c01565b95945050505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316846001600160a01b03161480156117605750804710155b15611882577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b1580156117c057600080fd5b505af11580156117d4573d6000803e3d6000fd5b50505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a9059cbb83836040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050602060405180830381600087803b15801561185057600080fd5b505af1158015611864573d6000803e3d6000fd5b505050506040513d602081101561187a57600080fd5b50610dc49050565b6001600160a01b0383163014156118a35761189e848383611588565b610dc4565b610dc484848484611c24565b60006118e57f00000000000000000000000000000000000000000000000000000000000000006118e0868686611bab565b611d74565b949350505050565b6000600160ff1b82106118ff57600080fd5b5090565b60608182601f01101561194e576040805162461bcd60e51b815260206004820152600e60248201526d736c6963655f6f766572666c6f7760901b604482015290519081900360640190fd5b828284011015611996576040805162461bcd60e51b815260206004820152600e60248201526d736c6963655f6f766572666c6f7760901b604482015290519081900360640190fd5b818301845110156119e2576040805162461bcd60e51b8152602060048201526011602482015270736c6963655f6f75744f66426f756e647360781b604482015290519081900360640190fd5b606082158015611a015760405191506000825260208201604052611a4b565b6040519150601f8416801560200281840101858101878315602002848b0101015b81831015611a3a578051835260209283019201611a22565b5050858452601f01601f1916604052505b50949350505050565b600081826014011015611aa3576040805162461bcd60e51b8152602060048201526012602482015271746f416464726573735f6f766572666c6f7760701b604482015290519081900360640190fd5b8160140183511015611af4576040805162461bcd60e51b8152602060048201526015602482015274746f416464726573735f6f75744f66426f756e647360581b604482015290519081900360640190fd5b500160200151600160601b900490565b600081826003011015611b52576040805162461bcd60e51b8152602060048201526011602482015270746f55696e7432345f6f766572666c6f7760781b604482015290519081900360640190fd5b8160030183511015611ba2576040805162461bcd60e51b8152602060048201526014602482015273746f55696e7432345f6f75744f66426f756e647360601b604482015290519081900360640190fd5b50016003015190565b611bb3611e58565b826001600160a01b0316846001600160a01b03161115611bd1579192915b50604080516060810182526001600160a01b03948516815292909316602083015262ffffff169181019190915290565b6000611c0d8383611d74565b9050336001600160a01b038216146113d557600080fd5b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180516001600160e01b03166323b872dd60e01b178152925182516000948594938a169392918291908083835b60208310611ca85780518252601f199092019160209182019101611c89565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114611d0a576040519150601f19603f3d011682016040523d82523d6000602084013e611d0f565b606091505b5091509150818015611d3d575080511580611d3d5750808060200190516020811015611d3a57600080fd5b50515b610824576040805162461bcd60e51b815260206004820152600360248201526229aa2360e91b604482015290519081900360640190fd5b600081602001516001600160a01b031682600001516001600160a01b031610611d9c57600080fd5b50805160208083015160409384015184516001600160a01b0394851681850152939091168385015262ffffff166060808401919091528351808403820181526080840185528051908301206001600160f81b031960a085015294901b6bffffffffffffffffffffffff191660a183015260b58201939093527fe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b5460d5808301919091528251808303909101815260f5909101909152805191012090565b604080516060810182526000808252602082018190529181019190915290565b80356113e28161264a565b600082601f830112611e93578081fd5b8135611ea6611ea1826125fc565b6125d8565b818152846020838601011115611eba578283fd5b816020850160208301379081016020019190915292915050565b60006101008284031215610423578081fd5b600060208284031215611ef7578081fd5b8135611f028161264a565b9392505050565b600080600060608486031215611f1d578182fd5b8335611f288161264a565b9250602084013591506040840135611f3f8161264a565b809150509250925092565b600080600080600060a08688031215611f61578081fd5b8535611f6c8161264a565b9450602086013593506040860135611f838161264a565b9250606086013591506080860135611f9a8161264a565b809150509295509295909350565b60008060008060008060c08789031215611fc0578081fd5b8635611fcb8161264a565b95506020870135945060408701359350606087013560ff81168114611fee578182fd5b9598949750929560808101359460a0909101359350915050565b6000806020838503121561201a578182fd5b823567ffffffffffffffff80821115612031578384fd5b818501915085601f830112612044578384fd5b813581811115612052578485fd5b8660208083028501011115612065578485fd5b60209290920196919550909350505050565b60008060408385031215612089578182fd5b505080516020909101519092909150565b600080600080606085870312156120af578182fd5b8435935060208501359250604085013567ffffffffffffffff808211156120d4578384fd5b818701915087601f8301126120e7578384fd5b8135818111156120f5578485fd5b886020828501011115612106578485fd5b95989497505060200194505050565b600060208284031215612126578081fd5b815167ffffffffffffffff81111561213c578182fd5b8201601f8101841361214c578182fd5b805161215a611ea1826125fc565b81815285602083850101111561216e578384fd5b61171682602083016020860161261e565b600060208284031215612190578081fd5b813567ffffffffffffffff808211156121a7578283fd5b9083019060a082860312156121ba578283fd5b60405160a0810181811083821117156121cf57fe5b6040528235828111156121e0578485fd5b6121ec87828601611e83565b8252506121fb60208401611e78565b602082015260408301356040820152606083013560608201526080830135608082015280935050505092915050565b6000610100828403121561223c578081fd5b611f028383611ed4565b600060208284031215612257578081fd5b813567ffffffffffffffff81111561226d578182fd5b820160a08185031215611f02578182fd5b60006020828403121561228f578081fd5b813567ffffffffffffffff808211156122a6578283fd5b90830190604082860312156122b9578283fd5b6040516040810181811083821117156122ce57fe5b6040528235828111156122df578485fd5b6122eb87828601611e83565b825250602083013592506122fe8361264a565b6020810192909252509392505050565b60006020828403121561231f578081fd5b813562ffffff81168114611f02578182fd5b60008060408385031215612343578182fd5b8235915060208301356123558161264a565b809150509250929050565b60008060008060808587031215612375578182fd5b8435935060208501356123878161264a565b925060408501359150606085013561239e8161264a565b939692955090935050565b600081518084526123c181602086016020860161261e565b601f01601f19169290920160200192915050565b606093841b6bffffffffffffffffffffffff19908116825260e89390931b6001600160e81b0319166014820152921b166017820152602b0190565b6000828483379101908152919050565b6001600160a01b0391909116815260200190565b6001600160a01b0386811682528515156020830152604082018590528316606082015260a06080820181905260009061246f908301846123a9565b979650505050505050565b6000602080830181845280855180835260408601915060408482028701019250838701855b828110156124cd57603f198886030184526124bb8583516123a9565b9450928501929085019060010161249f565b5092979650505050505050565b600060208252611f0260208301846123a9565b602080825260129082015271151bdbc81b5d58da081c995c5d595cdd195960721b604082015260600190565b602080825260139082015272151bdbc81b1a5d1d1b19481c9958d95a5d9959606a1b604082015260600190565b60006020825282516040602084015261256260608401826123a9565b602094909401516001600160a01b0316604093909301929092525090919050565b90815260200190565b6000808335601e198436030181126125a2578283fd5b83018035915067ffffffffffffffff8211156125bc578283fd5b6020019150368190038213156125d157600080fd5b9250929050565b60405181810167ffffffffffffffff811182821017156125f457fe5b604052919050565b600067ffffffffffffffff82111561261057fe5b50601f01601f191660200190565b60005b83811015612639578181015183820152602001612621565b83811115610dc45750506000910152565b6001600160a01b038116811461265f57600080fd5b5056fea2646970667358221220e228c23d2b1f025053b91a41fde7f769ec7c402ac322a1f3e84e77e836d0cc2464736f6c63430007060033",
							"opcodes": "PUSH1 0xC0 PUSH1 0x40 MSTORE PUSH1 0x0 NOT PUSH1 0x0 SSTORE CALLVALUE DUP1 ISZERO PUSH3 0x17 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x27A1 CODESIZE SUB DUP1 PUSH3 0x27A1 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x3A SWAP2 PUSH3 0x76 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB NOT PUSH1 0x60 SWAP3 DUP4 SHL DUP2 AND PUSH1 0x80 MSTORE SWAP2 SHL AND PUSH1 0xA0 MSTORE PUSH3 0xAD JUMP JUMPDEST DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH3 0x71 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH3 0x89 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH3 0x94 DUP4 PUSH3 0x59 JUMP JUMPDEST SWAP2 POP PUSH3 0xA4 PUSH1 0x20 DUP5 ADD PUSH3 0x59 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x80 MLOAD PUSH1 0x60 SHR PUSH1 0xA0 MLOAD PUSH1 0x60 SHR PUSH2 0x2698 PUSH3 0x109 PUSH1 0x0 CODECOPY DUP1 PUSH2 0x112 MSTORE DUP1 PUSH2 0x4C7 MSTORE DUP1 PUSH2 0x5B2 MSTORE DUP1 PUSH2 0x63F MSTORE DUP1 PUSH2 0x67F MSTORE DUP1 PUSH2 0x76A MSTORE DUP1 PUSH2 0x1721 MSTORE DUP1 PUSH2 0x1767 MSTORE DUP1 PUSH2 0x17DB MSTORE POP DUP1 PUSH2 0xBA3 MSTORE DUP1 PUSH2 0x109E MSTORE DUP1 PUSH2 0x18B6 MSTORE POP PUSH2 0x2698 PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x102 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xC04B8D59 GT PUSH2 0x95 JUMPI DUP1 PUSH4 0xDF2AB5BB GT PUSH2 0x64 JUMPI DUP1 PUSH4 0xDF2AB5BB EQ PUSH2 0x284 JUMPI DUP1 PUSH4 0xE0E189A0 EQ PUSH2 0x297 JUMPI DUP1 PUSH4 0xF28C0498 EQ PUSH2 0x2AA JUMPI DUP1 PUSH4 0xF3995C67 EQ PUSH2 0x2BD JUMPI DUP1 PUSH4 0xFA461E33 EQ PUSH2 0x2D0 JUMPI PUSH2 0x172 JUMP JUMPDEST DUP1 PUSH4 0xC04B8D59 EQ PUSH2 0x236 JUMPI DUP1 PUSH4 0xC2E3140A EQ PUSH2 0x249 JUMPI DUP1 PUSH4 0xC45A0155 EQ PUSH2 0x25C JUMPI DUP1 PUSH4 0xDB3E2198 EQ PUSH2 0x271 JUMPI PUSH2 0x172 JUMP JUMPDEST DUP1 PUSH4 0x4AA4A4FC GT PUSH2 0xD1 JUMPI DUP1 PUSH4 0x4AA4A4FC EQ PUSH2 0x1CE JUMPI DUP1 PUSH4 0x9B2C0A37 EQ PUSH2 0x1F0 JUMPI DUP1 PUSH4 0xA4A78F0C EQ PUSH2 0x203 JUMPI DUP1 PUSH4 0xAC9650D8 EQ PUSH2 0x216 JUMPI PUSH2 0x172 JUMP JUMPDEST DUP1 PUSH4 0x12210E8A EQ PUSH2 0x177 JUMPI DUP1 PUSH4 0x414BF389 EQ PUSH2 0x17F JUMPI DUP1 PUSH4 0x4659A494 EQ PUSH2 0x1A8 JUMPI DUP1 PUSH4 0x49404B7C EQ PUSH2 0x1BB JUMPI PUSH2 0x172 JUMP JUMPDEST CALLDATASIZE PUSH2 0x172 JUMPI CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND EQ PUSH2 0x170 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x9 PUSH1 0x24 DUP3 ADD MSTORE PUSH9 0x4E6F74205745544839 PUSH1 0xB8 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST STOP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x170 PUSH2 0x2F0 JUMP JUMPDEST PUSH2 0x192 PUSH2 0x18D CALLDATASIZE PUSH1 0x4 PUSH2 0x222A JUMP JUMPDEST PUSH2 0x302 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x19F SWAP2 SWAP1 PUSH2 0x2583 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x170 PUSH2 0x1B6 CALLDATASIZE PUSH1 0x4 PUSH2 0x1FA8 JUMP JUMPDEST PUSH2 0x429 JUMP JUMPDEST PUSH2 0x170 PUSH2 0x1C9 CALLDATASIZE PUSH1 0x4 PUSH2 0x2331 JUMP JUMPDEST PUSH2 0x4C3 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1DA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1E3 PUSH2 0x63D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x19F SWAP2 SWAP1 PUSH2 0x2420 JUMP JUMPDEST PUSH2 0x170 PUSH2 0x1FE CALLDATASIZE PUSH1 0x4 PUSH2 0x2360 JUMP JUMPDEST PUSH2 0x661 JUMP JUMPDEST PUSH2 0x170 PUSH2 0x211 CALLDATASIZE PUSH1 0x4 PUSH2 0x1FA8 JUMP JUMPDEST PUSH2 0x82D JUMP JUMPDEST PUSH2 0x229 PUSH2 0x224 CALLDATASIZE PUSH1 0x4 PUSH2 0x2008 JUMP JUMPDEST PUSH2 0x8BE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x19F SWAP2 SWAP1 PUSH2 0x247A JUMP JUMPDEST PUSH2 0x192 PUSH2 0x244 CALLDATASIZE PUSH1 0x4 PUSH2 0x217F JUMP JUMPDEST PUSH2 0x9FE JUMP JUMPDEST PUSH2 0x170 PUSH2 0x257 CALLDATASIZE PUSH1 0x4 PUSH2 0x1FA8 JUMP JUMPDEST PUSH2 0xB12 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x268 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1E3 PUSH2 0xBA1 JUMP JUMPDEST PUSH2 0x192 PUSH2 0x27F CALLDATASIZE PUSH1 0x4 PUSH2 0x222A JUMP JUMPDEST PUSH2 0xBC5 JUMP JUMPDEST PUSH2 0x170 PUSH2 0x292 CALLDATASIZE PUSH1 0x4 PUSH2 0x1F09 JUMP JUMPDEST PUSH2 0xCEC JUMP JUMPDEST PUSH2 0x170 PUSH2 0x2A5 CALLDATASIZE PUSH1 0x4 PUSH2 0x1F4A JUMP JUMPDEST PUSH2 0xDCA JUMP JUMPDEST PUSH2 0x192 PUSH2 0x2B8 CALLDATASIZE PUSH1 0x4 PUSH2 0x2246 JUMP JUMPDEST PUSH2 0xEF1 JUMP JUMPDEST PUSH2 0x170 PUSH2 0x2CB CALLDATASIZE PUSH1 0x4 PUSH2 0x1FA8 JUMP JUMPDEST PUSH2 0xFE7 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2DC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x170 PUSH2 0x2EB CALLDATASIZE PUSH1 0x4 PUSH2 0x209A JUMP JUMPDEST PUSH2 0x1059 JUMP JUMPDEST SELFBALANCE ISZERO PUSH2 0x300 JUMPI PUSH2 0x300 CALLER SELFBALANCE PUSH2 0x116C JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x80 ADD CALLDATALOAD DUP1 PUSH2 0x312 PUSH2 0x125B JUMP JUMPDEST GT ISZERO PUSH2 0x35B JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH19 0x151C985B9CD858DD1A5BDB881D1BDBC81BDB19 PUSH1 0x6A SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH2 0x3F4 PUSH1 0xA0 DUP5 ADD CALLDATALOAD PUSH2 0x373 PUSH1 0x80 DUP7 ADD PUSH1 0x60 DUP8 ADD PUSH2 0x1EE6 JUMP JUMPDEST PUSH2 0x384 PUSH2 0x100 DUP8 ADD PUSH1 0xE0 DUP9 ADD PUSH2 0x1EE6 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE DUP1 PUSH2 0x39C PUSH1 0x20 DUP11 ADD DUP11 PUSH2 0x1EE6 JUMP JUMPDEST PUSH2 0x3AC PUSH1 0x60 DUP12 ADD PUSH1 0x40 DUP13 ADD PUSH2 0x230E JUMP JUMPDEST PUSH2 0x3BC PUSH1 0x40 DUP13 ADD PUSH1 0x20 DUP14 ADD PUSH2 0x1EE6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x3CE SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x23D5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP PUSH2 0x125F JUMP JUMPDEST SWAP2 POP DUP3 PUSH1 0xC0 ADD CALLDATALOAD DUP3 LT ISZERO PUSH2 0x423 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x41A SWAP1 PUSH2 0x2519 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH4 0x23F2EBC3 PUSH1 0xE2 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE ADDRESS PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP8 SWAP1 MSTORE PUSH1 0x64 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x84 DUP3 ADD MSTORE PUSH1 0xFF DUP6 AND PUSH1 0xA4 DUP3 ADD MSTORE PUSH1 0xC4 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0xE4 DUP2 ADD DUP4 SWAP1 MSTORE SWAP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND SWAP2 PUSH4 0x8FCBAF0C SWAP2 PUSH2 0x104 DUP1 DUP4 ADD SWAP3 PUSH1 0x0 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP4 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4A3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x4B7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x70A08231 ADDRESS PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x532 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x546 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x55C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP1 POP DUP3 DUP2 LT ISZERO PUSH2 0x5AA JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x12 PUSH1 0x24 DUP3 ADD MSTORE PUSH18 0x496E73756666696369656E74205745544839 PUSH1 0x70 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST DUP1 ISZERO PUSH2 0x638 JUMPI PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x2E1A7D4D DUP3 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x616 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x62A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH2 0x638 DUP3 DUP3 PUSH2 0x116C JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x0 DUP3 GT DUP1 ISZERO PUSH2 0x672 JUMPI POP PUSH1 0x64 DUP3 GT ISZERO JUMPDEST PUSH2 0x67B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x70A08231 ADDRESS PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x6EA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x6FE JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x714 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP1 POP DUP5 DUP2 LT ISZERO PUSH2 0x762 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x12 PUSH1 0x24 DUP3 ADD MSTORE PUSH18 0x496E73756666696369656E74205745544839 PUSH1 0x70 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST DUP1 ISZERO PUSH2 0x826 JUMPI PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x2E1A7D4D DUP3 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x7CE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x7E2 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x0 PUSH2 0x2710 PUSH2 0x7FE DUP6 DUP5 PUSH2 0x13B1 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP2 PUSH2 0x805 JUMPI INVALID JUMPDEST DIV SWAP1 POP DUP1 ISZERO PUSH2 0x818 JUMPI PUSH2 0x818 DUP4 DUP3 PUSH2 0x116C JUMP JUMPDEST PUSH2 0x824 DUP6 DUP3 DUP5 SUB PUSH2 0x116C JUMP JUMPDEST POP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH4 0x6EB1769F PUSH1 0xE1 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE ADDRESS PUSH1 0x24 DUP3 ADD MSTORE SWAP1 MLOAD PUSH1 0x0 NOT SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND SWAP2 PUSH4 0xDD62ED3E SWAP2 PUSH1 0x44 DUP1 DUP3 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x87E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x892 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x8A8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD LT ISZERO PUSH2 0x824 JUMPI PUSH2 0x824 DUP7 DUP7 DUP7 DUP7 DUP7 DUP7 PUSH2 0x429 JUMP JUMPDEST PUSH1 0x60 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x8D7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x90B JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x8F6 JUMPI SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x9F7 JUMPI PUSH1 0x0 DUP1 ADDRESS DUP7 DUP7 DUP6 DUP2 DUP2 LT PUSH2 0x929 JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x93B SWAP2 SWAP1 PUSH2 0x258C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x949 SWAP3 SWAP2 SWAP1 PUSH2 0x2410 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS DELEGATECALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x984 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x989 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 PUSH2 0x9D5 JUMPI PUSH1 0x44 DUP2 MLOAD LT ISZERO PUSH2 0x9A2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x4 DUP2 ADD SWAP1 POP DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x9BC SWAP2 SWAP1 PUSH2 0x2115 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x41A SWAP2 SWAP1 PUSH2 0x24DA JUMP JUMPDEST DUP1 DUP5 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x9E2 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP POP PUSH1 0x1 ADD PUSH2 0x911 JUMP JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x40 ADD MLOAD DUP1 PUSH2 0xA0E PUSH2 0x125B JUMP JUMPDEST GT ISZERO PUSH2 0xA57 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH19 0x151C985B9CD858DD1A5BDB881D1BDBC81BDB19 PUSH1 0x6A SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST CALLER JUMPDEST PUSH1 0x0 PUSH2 0xA68 DUP6 PUSH1 0x0 ADD MLOAD PUSH2 0x13DB JUMP JUMPDEST SWAP1 POP PUSH2 0xAB4 DUP6 PUSH1 0x60 ADD MLOAD DUP3 PUSH2 0xA81 JUMPI DUP7 PUSH1 0x20 ADD MLOAD PUSH2 0xA83 JUMP JUMPDEST ADDRESS JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH2 0xA9D DUP12 PUSH1 0x0 ADD MLOAD PUSH2 0x13E7 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP PUSH2 0x125F JUMP JUMPDEST PUSH1 0x60 DUP7 ADD MSTORE DUP1 ISZERO PUSH2 0xAD4 JUMPI DUP5 MLOAD ADDRESS SWAP3 POP PUSH2 0xACD SWAP1 PUSH2 0x13F6 JUMP JUMPDEST DUP6 MSTORE PUSH2 0xAE1 JUMP JUMPDEST DUP5 PUSH1 0x60 ADD MLOAD SWAP4 POP POP PUSH2 0xAE7 JUMP JUMPDEST POP PUSH2 0xA59 JUMP JUMPDEST DUP4 PUSH1 0x80 ADD MLOAD DUP4 LT ISZERO PUSH2 0xB0B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x41A SWAP1 PUSH2 0x2519 JUMP JUMPDEST POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH4 0x6EB1769F PUSH1 0xE1 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE ADDRESS PUSH1 0x24 DUP3 ADD MSTORE SWAP1 MLOAD DUP7 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND SWAP2 PUSH4 0xDD62ED3E SWAP2 PUSH1 0x44 DUP1 DUP3 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xB61 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xB75 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xB8B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD LT ISZERO PUSH2 0x824 JUMPI PUSH2 0x824 DUP7 DUP7 DUP7 DUP7 DUP7 DUP7 PUSH2 0xFE7 JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x80 ADD CALLDATALOAD DUP1 PUSH2 0xBD5 PUSH2 0x125B JUMP JUMPDEST GT ISZERO PUSH2 0xC1E JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH19 0x151C985B9CD858DD1A5BDB881D1BDBC81BDB19 PUSH1 0x6A SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH2 0xCBA PUSH1 0xA0 DUP5 ADD CALLDATALOAD PUSH2 0xC36 PUSH1 0x80 DUP7 ADD PUSH1 0x60 DUP8 ADD PUSH2 0x1EE6 JUMP JUMPDEST PUSH2 0xC47 PUSH2 0x100 DUP8 ADD PUSH1 0xE0 DUP9 ADD PUSH2 0x1EE6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 DUP9 PUSH1 0x20 ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0xC65 SWAP2 SWAP1 PUSH2 0x1EE6 JUMP JUMPDEST PUSH2 0xC75 PUSH1 0x60 DUP12 ADD PUSH1 0x40 DUP13 ADD PUSH2 0x230E JUMP JUMPDEST PUSH2 0xC82 PUSH1 0x20 DUP13 ADD DUP13 PUSH2 0x1EE6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xC94 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x23D5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP PUSH2 0x140D JUMP JUMPDEST SWAP2 POP DUP3 PUSH1 0xC0 ADD CALLDATALOAD DUP3 GT ISZERO PUSH2 0xCE0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x41A SWAP1 PUSH2 0x24ED JUMP JUMPDEST POP PUSH1 0x0 NOT PUSH1 0x0 SSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x70A08231 ADDRESS PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xD3B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xD4F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xD65 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP1 POP DUP3 DUP2 LT ISZERO PUSH2 0xDB3 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x12 PUSH1 0x24 DUP3 ADD MSTORE PUSH18 0x24B739BAB33334B1B4B2B73A103A37B5B2B7 PUSH1 0x71 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST DUP1 ISZERO PUSH2 0xDC4 JUMPI PUSH2 0xDC4 DUP5 DUP4 DUP4 PUSH2 0x1588 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 GT DUP1 ISZERO PUSH2 0xDDB JUMPI POP PUSH1 0x64 DUP3 GT ISZERO JUMPDEST PUSH2 0xDE4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x70A08231 ADDRESS PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xE33 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xE47 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xE5D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP1 POP DUP5 DUP2 LT ISZERO PUSH2 0xEAB JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x12 PUSH1 0x24 DUP3 ADD MSTORE PUSH18 0x24B739BAB33334B1B4B2B73A103A37B5B2B7 PUSH1 0x71 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST DUP1 ISZERO PUSH2 0x824 JUMPI PUSH1 0x0 PUSH2 0x2710 PUSH2 0xEC0 DUP4 DUP7 PUSH2 0x13B1 JUMP JUMPDEST DUP2 PUSH2 0xEC7 JUMPI INVALID JUMPDEST DIV SWAP1 POP DUP1 ISZERO PUSH2 0xEDB JUMPI PUSH2 0xEDB DUP8 DUP5 DUP4 PUSH2 0x1588 JUMP JUMPDEST PUSH2 0xEE8 DUP8 DUP7 DUP4 DUP6 SUB PUSH2 0x1588 JUMP JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x40 ADD CALLDATALOAD DUP1 PUSH2 0xF01 PUSH2 0x125B JUMP JUMPDEST GT ISZERO PUSH2 0xF4A JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH19 0x151C985B9CD858DD1A5BDB881D1BDBC81BDB19 PUSH1 0x6A SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH2 0xFBD PUSH1 0x60 DUP5 ADD CALLDATALOAD PUSH2 0xF62 PUSH1 0x40 DUP7 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x1EE6 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 SWAP1 DUP1 PUSH2 0xF7A DUP10 DUP1 PUSH2 0x258C JUMP JUMPDEST DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP POP POP SWAP1 DUP3 MSTORE POP CALLER PUSH1 0x20 SWAP1 SWAP2 ADD MSTORE PUSH2 0x140D JUMP JUMPDEST POP PUSH1 0x0 SLOAD SWAP2 POP DUP3 PUSH1 0x80 ADD CALLDATALOAD DUP3 GT ISZERO PUSH2 0xCE0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x41A SWAP1 PUSH2 0x24ED JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH4 0xD505ACCF PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE ADDRESS PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP8 SWAP1 MSTORE PUSH1 0x64 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0xFF DUP6 AND PUSH1 0x84 DUP3 ADD MSTORE PUSH1 0xA4 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0xC4 DUP2 ADD DUP4 SWAP1 MSTORE SWAP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND SWAP2 PUSH4 0xD505ACCF SWAP2 PUSH1 0xE4 DUP1 DUP4 ADD SWAP3 PUSH1 0x0 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP4 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4A3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP5 SGT DUP1 PUSH2 0x1068 JUMPI POP PUSH1 0x0 DUP4 SGT JUMPDEST PUSH2 0x1071 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x107F DUP3 DUP5 ADD DUP5 PUSH2 0x227E JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x1093 DUP5 PUSH1 0x0 ADD MLOAD PUSH2 0x16CF JUMP JUMPDEST SWAP3 POP SWAP3 POP SWAP3 POP PUSH2 0x10C5 PUSH32 0x0 DUP5 DUP5 DUP5 PUSH2 0x1700 JUMP JUMPDEST POP PUSH1 0x0 DUP1 PUSH1 0x0 DUP11 SGT PUSH2 0x10EC JUMPI DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND LT DUP10 PUSH2 0x1103 JUMP JUMPDEST DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND LT DUP11 JUMPDEST SWAP2 POP SWAP2 POP DUP2 ISZERO PUSH2 0x1122 JUMPI PUSH2 0x111D DUP6 DUP8 PUSH1 0x20 ADD MLOAD CALLER DUP5 PUSH2 0x171F JUMP JUMPDEST PUSH2 0x4B7 JUMP JUMPDEST DUP6 MLOAD PUSH2 0x112D SWAP1 PUSH2 0x13DB JUMP JUMPDEST ISZERO PUSH2 0x1152 JUMPI DUP6 MLOAD PUSH2 0x113D SWAP1 PUSH2 0x13F6 JUMP JUMPDEST DUP7 MSTORE PUSH2 0x114C DUP2 CALLER PUSH1 0x0 DUP10 PUSH2 0x140D JUMP JUMPDEST POP PUSH2 0x4B7 JUMP JUMPDEST DUP1 PUSH1 0x0 DUP2 SWAP1 SSTORE POP DUP4 SWAP5 POP PUSH2 0x4B7 DUP6 DUP8 PUSH1 0x20 ADD MLOAD CALLER DUP5 PUSH2 0x171F JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 SWAP3 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 DUP4 SWAP1 PUSH1 0x40 MLOAD DUP1 DUP3 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x11B8 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x1F NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0x1199 JUMP JUMPDEST PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB DUP1 NOT DUP3 MLOAD AND DUP2 DUP5 MLOAD AND DUP1 DUP3 OR DUP6 MSTORE POP POP POP POP POP POP SWAP1 POP ADD SWAP2 POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x121A JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x121F JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x638 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3 PUSH1 0x24 DUP3 ADD MSTORE PUSH3 0x535445 PUSH1 0xE8 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST TIMESTAMP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x1273 JUMPI ADDRESS SWAP4 POP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x1285 DUP6 PUSH1 0x0 ADD MLOAD PUSH2 0x16CF JUMP JUMPDEST SWAP2 SWAP5 POP SWAP3 POP SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP4 AND SWAP1 DUP5 AND LT PUSH1 0x0 DUP1 PUSH2 0x12A9 DUP7 DUP7 DUP7 PUSH2 0x18AF JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x128ACB08 DUP12 DUP6 PUSH2 0x12C2 DUP16 PUSH2 0x18ED JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP15 AND ISZERO PUSH2 0x12D7 JUMPI DUP14 PUSH2 0x12FD JUMP JUMPDEST DUP8 PUSH2 0x12F6 JUMPI PUSH20 0xFFFD8963EFD1FC6A506488495D951D5263988D25 PUSH2 0x12FD JUMP JUMPDEST PUSH5 0x1000276A4 JUMPDEST DUP14 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x130E SWAP2 SWAP1 PUSH2 0x2546 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD DUP7 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x133D SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2434 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1356 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x136A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x138E SWAP2 SWAP1 PUSH2 0x2077 JUMP JUMPDEST SWAP2 POP SWAP2 POP DUP3 PUSH2 0x139D JUMPI DUP2 PUSH2 0x139F JUMP JUMPDEST DUP1 JUMPDEST PUSH1 0x0 SUB SWAP12 SWAP11 POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 ISZERO DUP1 PUSH2 0x13CC JUMPI POP POP DUP2 DUP2 MUL DUP2 DUP4 DUP3 DUP2 PUSH2 0x13C9 JUMPI INVALID JUMPDEST DIV EQ JUMPDEST PUSH2 0x13D5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x42 GT ISZERO JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x13D5 DUP3 PUSH1 0x0 PUSH1 0x2B PUSH2 0x1903 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 PUSH2 0x13D5 SWAP1 DUP4 SWAP1 PUSH1 0x17 SWAP1 PUSH1 0x16 NOT ADD PUSH2 0x1903 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x1421 JUMPI ADDRESS SWAP4 POP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x1433 DUP6 PUSH1 0x0 ADD MLOAD PUSH2 0x16CF JUMP JUMPDEST SWAP2 SWAP5 POP SWAP3 POP SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP5 AND SWAP1 DUP4 AND LT PUSH1 0x0 DUP1 PUSH2 0x1457 DUP6 DUP8 DUP7 PUSH2 0x18AF JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x128ACB08 DUP12 DUP6 PUSH2 0x1470 DUP16 PUSH2 0x18ED JUMP JUMPDEST PUSH1 0x0 SUB PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP15 AND ISZERO PUSH2 0x1488 JUMPI DUP14 PUSH2 0x14AE JUMP JUMPDEST DUP8 PUSH2 0x14A7 JUMPI PUSH20 0xFFFD8963EFD1FC6A506488495D951D5263988D25 PUSH2 0x14AE JUMP JUMPDEST PUSH5 0x1000276A4 JUMPDEST DUP14 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x14BF SWAP2 SWAP1 PUSH2 0x2546 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD DUP7 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x14EE SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2434 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1507 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x151B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x153F SWAP2 SWAP1 PUSH2 0x2077 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 DUP4 PUSH2 0x1554 JUMPI DUP2 DUP4 PUSH1 0x0 SUB PUSH2 0x155A JUMP JUMPDEST DUP3 DUP3 PUSH1 0x0 SUB JUMPDEST SWAP1 SWAP9 POP SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 AND PUSH2 0x1579 JUMPI DUP12 DUP2 EQ PUSH2 0x1579 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP POP POP POP POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND PUSH1 0x24 DUP4 ADD MSTORE PUSH1 0x44 DUP1 DUP4 ADD DUP6 SWAP1 MSTORE DUP4 MLOAD DUP1 DUP5 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x64 SWAP1 SWAP3 ADD DUP4 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH4 0xA9059CBB PUSH1 0xE0 SHL OR DUP2 MSTORE SWAP3 MLOAD DUP3 MLOAD PUSH1 0x0 SWAP5 DUP6 SWAP5 SWAP4 DUP10 AND SWAP4 SWAP3 SWAP2 DUP3 SWAP2 SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x1604 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x1F NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0x15E5 JUMP JUMPDEST PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB DUP1 NOT DUP3 MLOAD AND DUP2 DUP5 MLOAD AND DUP1 DUP3 OR DUP6 MSTORE POP POP POP POP POP POP SWAP1 POP ADD SWAP2 POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1666 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x166B JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0x1699 JUMPI POP DUP1 MLOAD ISZERO DUP1 PUSH2 0x1699 JUMPI POP DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x1696 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD JUMPDEST PUSH2 0x826 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2 PUSH1 0x24 DUP3 ADD MSTORE PUSH2 0x14D5 PUSH1 0xF2 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP1 PUSH2 0x16DD DUP5 DUP3 PUSH2 0x1A54 JUMP JUMPDEST SWAP3 POP PUSH2 0x16EA DUP5 PUSH1 0x14 PUSH2 0x1B04 JUMP JUMPDEST SWAP1 POP PUSH2 0x16F7 DUP5 PUSH1 0x17 PUSH2 0x1A54 JUMP JUMPDEST SWAP2 POP SWAP2 SWAP4 SWAP1 SWAP3 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1716 DUP6 PUSH2 0x1711 DUP7 DUP7 DUP7 PUSH2 0x1BAB JUMP JUMPDEST PUSH2 0x1C01 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ DUP1 ISZERO PUSH2 0x1760 JUMPI POP DUP1 SELFBALANCE LT ISZERO JUMPDEST ISZERO PUSH2 0x1882 JUMPI PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD0E30DB0 DUP3 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x17C0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x17D4 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xA9059CBB DUP4 DUP4 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1850 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1864 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x187A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xDC4 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND ADDRESS EQ ISZERO PUSH2 0x18A3 JUMPI PUSH2 0x189E DUP5 DUP4 DUP4 PUSH2 0x1588 JUMP JUMPDEST PUSH2 0xDC4 JUMP JUMPDEST PUSH2 0xDC4 DUP5 DUP5 DUP5 DUP5 PUSH2 0x1C24 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x18E5 PUSH32 0x0 PUSH2 0x18E0 DUP7 DUP7 DUP7 PUSH2 0x1BAB JUMP JUMPDEST PUSH2 0x1D74 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0xFF SHL DUP3 LT PUSH2 0x18FF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP2 DUP3 PUSH1 0x1F ADD LT ISZERO PUSH2 0x194E JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xE PUSH1 0x24 DUP3 ADD MSTORE PUSH14 0x736C6963655F6F766572666C6F77 PUSH1 0x90 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST DUP3 DUP3 DUP5 ADD LT ISZERO PUSH2 0x1996 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xE PUSH1 0x24 DUP3 ADD MSTORE PUSH14 0x736C6963655F6F766572666C6F77 PUSH1 0x90 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST DUP2 DUP4 ADD DUP5 MLOAD LT ISZERO PUSH2 0x19E2 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x11 PUSH1 0x24 DUP3 ADD MSTORE PUSH17 0x736C6963655F6F75744F66426F756E6473 PUSH1 0x78 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x60 DUP3 ISZERO DUP1 ISZERO PUSH2 0x1A01 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x0 DUP3 MSTORE PUSH1 0x20 DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x1A4B JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F DUP5 AND DUP1 ISZERO PUSH1 0x20 MUL DUP2 DUP5 ADD ADD DUP6 DUP2 ADD DUP8 DUP4 ISZERO PUSH1 0x20 MUL DUP5 DUP12 ADD ADD ADD JUMPDEST DUP2 DUP4 LT ISZERO PUSH2 0x1A3A JUMPI DUP1 MLOAD DUP4 MSTORE PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 ADD PUSH2 0x1A22 JUMP JUMPDEST POP POP DUP6 DUP5 MSTORE PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x40 MSTORE POP JUMPDEST POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP3 PUSH1 0x14 ADD LT ISZERO PUSH2 0x1AA3 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x12 PUSH1 0x24 DUP3 ADD MSTORE PUSH18 0x746F416464726573735F6F766572666C6F77 PUSH1 0x70 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST DUP2 PUSH1 0x14 ADD DUP4 MLOAD LT ISZERO PUSH2 0x1AF4 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH21 0x746F416464726573735F6F75744F66426F756E6473 PUSH1 0x58 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST POP ADD PUSH1 0x20 ADD MLOAD PUSH1 0x1 PUSH1 0x60 SHL SWAP1 DIV SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP3 PUSH1 0x3 ADD LT ISZERO PUSH2 0x1B52 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x11 PUSH1 0x24 DUP3 ADD MSTORE PUSH17 0x746F55696E7432345F6F766572666C6F77 PUSH1 0x78 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST DUP2 PUSH1 0x3 ADD DUP4 MLOAD LT ISZERO PUSH2 0x1BA2 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x746F55696E7432345F6F75744F66426F756E6473 PUSH1 0x60 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST POP ADD PUSH1 0x3 ADD MLOAD SWAP1 JUMP JUMPDEST PUSH2 0x1BB3 PUSH2 0x1E58 JUMP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GT ISZERO PUSH2 0x1BD1 JUMPI SWAP2 SWAP3 SWAP2 JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 DUP6 AND DUP2 MSTORE SWAP3 SWAP1 SWAP4 AND PUSH1 0x20 DUP4 ADD MSTORE PUSH3 0xFFFFFF AND SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1C0D DUP4 DUP4 PUSH2 0x1D74 JUMP JUMPDEST SWAP1 POP CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND EQ PUSH2 0x13D5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND PUSH1 0x24 DUP4 ADD MSTORE DUP5 DUP2 AND PUSH1 0x44 DUP4 ADD MSTORE PUSH1 0x64 DUP1 DUP4 ADD DUP6 SWAP1 MSTORE DUP4 MLOAD DUP1 DUP5 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x84 SWAP1 SWAP3 ADD DUP4 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH4 0x23B872DD PUSH1 0xE0 SHL OR DUP2 MSTORE SWAP3 MLOAD DUP3 MLOAD PUSH1 0x0 SWAP5 DUP6 SWAP5 SWAP4 DUP11 AND SWAP4 SWAP3 SWAP2 DUP3 SWAP2 SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x1CA8 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x1F NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0x1C89 JUMP JUMPDEST PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB DUP1 NOT DUP3 MLOAD AND DUP2 DUP5 MLOAD AND DUP1 DUP3 OR DUP6 MSTORE POP POP POP POP POP POP SWAP1 POP ADD SWAP2 POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1D0A JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1D0F JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0x1D3D JUMPI POP DUP1 MLOAD ISZERO DUP1 PUSH2 0x1D3D JUMPI POP DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x1D3A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD JUMPDEST PUSH2 0x824 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3 PUSH1 0x24 DUP3 ADD MSTORE PUSH3 0x29AA23 PUSH1 0xE9 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x20 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND LT PUSH2 0x1D9C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 MLOAD PUSH1 0x20 DUP1 DUP4 ADD MLOAD PUSH1 0x40 SWAP4 DUP5 ADD MLOAD DUP5 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 DUP6 AND DUP2 DUP6 ADD MSTORE SWAP4 SWAP1 SWAP2 AND DUP4 DUP6 ADD MSTORE PUSH3 0xFFFFFF AND PUSH1 0x60 DUP1 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP4 MLOAD DUP1 DUP5 SUB DUP3 ADD DUP2 MSTORE PUSH1 0x80 DUP5 ADD DUP6 MSTORE DUP1 MLOAD SWAP1 DUP4 ADD KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT PUSH1 0xA0 DUP6 ADD MSTORE SWAP5 SWAP1 SHL PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0xA1 DUP4 ADD MSTORE PUSH1 0xB5 DUP3 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH32 0xE34F199B19B2B4F47F68442619D555527D244F78A3297EA89325F843F87B8B54 PUSH1 0xD5 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP3 MLOAD DUP1 DUP4 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0xF5 SWAP1 SWAP2 ADD SWAP1 SWAP2 MSTORE DUP1 MLOAD SWAP2 ADD KECCAK256 SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH2 0x13E2 DUP2 PUSH2 0x264A JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1E93 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1EA6 PUSH2 0x1EA1 DUP3 PUSH2 0x25FC JUMP JUMPDEST PUSH2 0x25D8 JUMP JUMPDEST DUP2 DUP2 MSTORE DUP5 PUSH1 0x20 DUP4 DUP7 ADD ADD GT ISZERO PUSH2 0x1EBA JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 PUSH1 0x20 DUP6 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY SWAP1 DUP2 ADD PUSH1 0x20 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x100 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x423 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1EF7 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1F02 DUP2 PUSH2 0x264A JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1F1D JUMPI DUP2 DUP3 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x1F28 DUP2 PUSH2 0x264A JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH2 0x1F3F DUP2 PUSH2 0x264A JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x1F61 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH2 0x1F6C DUP2 PUSH2 0x264A JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH2 0x1F83 DUP2 PUSH2 0x264A JUMP JUMPDEST SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD SWAP2 POP PUSH1 0x80 DUP7 ADD CALLDATALOAD PUSH2 0x1F9A DUP2 PUSH2 0x264A JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xC0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x1FC0 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP7 CALLDATALOAD PUSH2 0x1FCB DUP2 PUSH2 0x264A JUMP JUMPDEST SWAP6 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD SWAP5 POP PUSH1 0x40 DUP8 ADD CALLDATALOAD SWAP4 POP PUSH1 0x60 DUP8 ADD CALLDATALOAD PUSH1 0xFF DUP2 AND DUP2 EQ PUSH2 0x1FEE JUMPI DUP2 DUP3 REVERT JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP SWAP3 SWAP6 PUSH1 0x80 DUP2 ADD CALLDATALOAD SWAP5 PUSH1 0xA0 SWAP1 SWAP2 ADD CALLDATALOAD SWAP4 POP SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x201A JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x2031 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x2044 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x2052 JUMPI DUP5 DUP6 REVERT JUMPDEST DUP7 PUSH1 0x20 DUP1 DUP4 MUL DUP6 ADD ADD GT ISZERO PUSH2 0x2065 JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH1 0x20 SWAP3 SWAP1 SWAP3 ADD SWAP7 SWAP2 SWAP6 POP SWAP1 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2089 JUMPI DUP2 DUP3 REVERT JUMPDEST POP POP DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD MLOAD SWAP1 SWAP3 SWAP1 SWAP2 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x20AF JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 CALLDATALOAD SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x20D4 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 DUP8 ADD SWAP2 POP DUP8 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x20E7 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x20F5 JUMPI DUP5 DUP6 REVERT JUMPDEST DUP9 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x2106 JUMPI DUP5 DUP6 REVERT JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP POP PUSH1 0x20 ADD SWAP5 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2126 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x213C JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 ADD PUSH1 0x1F DUP2 ADD DUP5 SGT PUSH2 0x214C JUMPI DUP2 DUP3 REVERT JUMPDEST DUP1 MLOAD PUSH2 0x215A PUSH2 0x1EA1 DUP3 PUSH2 0x25FC JUMP JUMPDEST DUP2 DUP2 MSTORE DUP6 PUSH1 0x20 DUP4 DUP6 ADD ADD GT ISZERO PUSH2 0x216E JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x1716 DUP3 PUSH1 0x20 DUP4 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x261E JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2190 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x21A7 JUMPI DUP3 DUP4 REVERT JUMPDEST SWAP1 DUP4 ADD SWAP1 PUSH1 0xA0 DUP3 DUP7 SUB SLT ISZERO PUSH2 0x21BA JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0xA0 DUP2 ADD DUP2 DUP2 LT DUP4 DUP3 GT OR ISZERO PUSH2 0x21CF JUMPI INVALID JUMPDEST PUSH1 0x40 MSTORE DUP3 CALLDATALOAD DUP3 DUP2 GT ISZERO PUSH2 0x21E0 JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH2 0x21EC DUP8 DUP3 DUP7 ADD PUSH2 0x1E83 JUMP JUMPDEST DUP3 MSTORE POP PUSH2 0x21FB PUSH1 0x20 DUP5 ADD PUSH2 0x1E78 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP4 ADD CALLDATALOAD PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP4 ADD CALLDATALOAD PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 DUP4 ADD CALLDATALOAD PUSH1 0x80 DUP3 ADD MSTORE DUP1 SWAP4 POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x100 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x223C JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x1F02 DUP4 DUP4 PUSH2 0x1ED4 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2257 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x226D JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 ADD PUSH1 0xA0 DUP2 DUP6 SUB SLT ISZERO PUSH2 0x1F02 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x228F JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x22A6 JUMPI DUP3 DUP4 REVERT JUMPDEST SWAP1 DUP4 ADD SWAP1 PUSH1 0x40 DUP3 DUP7 SUB SLT ISZERO PUSH2 0x22B9 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x40 DUP2 ADD DUP2 DUP2 LT DUP4 DUP3 GT OR ISZERO PUSH2 0x22CE JUMPI INVALID JUMPDEST PUSH1 0x40 MSTORE DUP3 CALLDATALOAD DUP3 DUP2 GT ISZERO PUSH2 0x22DF JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH2 0x22EB DUP8 DUP3 DUP7 ADD PUSH2 0x1E83 JUMP JUMPDEST DUP3 MSTORE POP PUSH1 0x20 DUP4 ADD CALLDATALOAD SWAP3 POP PUSH2 0x22FE DUP4 PUSH2 0x264A JUMP JUMPDEST PUSH1 0x20 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x231F JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH3 0xFFFFFF DUP2 AND DUP2 EQ PUSH2 0x1F02 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2343 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x2355 DUP2 PUSH2 0x264A JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x2375 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 CALLDATALOAD SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH2 0x2387 DUP2 PUSH2 0x264A JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH2 0x239E DUP2 PUSH2 0x264A JUMP JUMPDEST SWAP4 SWAP7 SWAP3 SWAP6 POP SWAP1 SWAP4 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x23C1 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x261E JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 SWAP4 DUP5 SHL PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF NOT SWAP1 DUP2 AND DUP3 MSTORE PUSH1 0xE8 SWAP4 SWAP1 SWAP4 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE8 SHL SUB NOT AND PUSH1 0x14 DUP3 ADD MSTORE SWAP3 SHL AND PUSH1 0x17 DUP3 ADD MSTORE PUSH1 0x2B ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP5 DUP4 CALLDATACOPY SWAP2 ADD SWAP1 DUP2 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 DUP2 AND DUP3 MSTORE DUP6 ISZERO ISZERO PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP3 ADD DUP6 SWAP1 MSTORE DUP4 AND PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0xA0 PUSH1 0x80 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x246F SWAP1 DUP4 ADD DUP5 PUSH2 0x23A9 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 ADD DUP2 DUP5 MSTORE DUP1 DUP6 MLOAD DUP1 DUP4 MSTORE PUSH1 0x40 DUP7 ADD SWAP2 POP PUSH1 0x40 DUP5 DUP3 MUL DUP8 ADD ADD SWAP3 POP DUP4 DUP8 ADD DUP6 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x24CD JUMPI PUSH1 0x3F NOT DUP9 DUP7 SUB ADD DUP5 MSTORE PUSH2 0x24BB DUP6 DUP4 MLOAD PUSH2 0x23A9 JUMP JUMPDEST SWAP5 POP SWAP3 DUP6 ADD SWAP3 SWAP1 DUP6 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x249F JUMP JUMPDEST POP SWAP3 SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE PUSH2 0x1F02 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x23A9 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x12 SWAP1 DUP3 ADD MSTORE PUSH18 0x151BDBC81B5D58DA081C995C5D595CDD1959 PUSH1 0x72 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x13 SWAP1 DUP3 ADD MSTORE PUSH19 0x151BDBC81B1A5D1D1B19481C9958D95A5D9959 PUSH1 0x6A SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE DUP3 MLOAD PUSH1 0x40 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x2562 PUSH1 0x60 DUP5 ADD DUP3 PUSH2 0x23A9 JUMP JUMPDEST PUSH1 0x20 SWAP5 SWAP1 SWAP5 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x40 SWAP4 SWAP1 SWAP4 ADD SWAP3 SWAP1 SWAP3 MSTORE POP SWAP1 SWAP2 SWAP1 POP JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 CALLDATALOAD PUSH1 0x1E NOT DUP5 CALLDATASIZE SUB ADD DUP2 SLT PUSH2 0x25A2 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP4 ADD DUP1 CALLDATALOAD SWAP2 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x25BC JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH1 0x20 ADD SWAP2 POP CALLDATASIZE DUP2 SWAP1 SUB DUP3 SGT ISZERO PUSH2 0x25D1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x25F4 JUMPI INVALID JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x2610 JUMPI INVALID JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x2639 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x2621 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0xDC4 JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x265F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE2 0x28 0xC2 RETURNDATASIZE 0x2B 0x1F MUL POP MSTORE8 0xB9 BYTE COINBASE REVERT 0xE7 0xF7 PUSH10 0xEC7C402AC322A1F3E84E PUSH24 0xE836D0CC2464736F6C634300070600330000000000000000 ",
							"sourceMap": "775:8340:13:-:0;;;-1:-1:-1;;1338:57:13;;1402:90;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;;522:18:16;;;;;;;;550:14;;;;;775:8340:13;;14:179:34;95:13;;-1:-1:-1;;;;;137:31:34;;127:42;;117:2;;183:1;180;173:12;117:2;76:117;;;:::o;198:307::-;;;338:2;326:9;317:7;313:23;309:32;306:2;;;359:6;351;344:22;306:2;387:42;419:9;387:42;:::i;:::-;377:52;;448:51;495:2;484:9;480:18;448:51;:::i;:::-;438:61;;296:209;;;;;:::o;:::-;775:8340:13;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:15325:34",
										"statements": [
											{
												"nodeType": "YulBlock",
												"src": "6:3:34",
												"statements": []
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "65:87:34",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "75:29:34",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "97:6:34"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "84:12:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "84:20:34"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "75:5:34"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "140:5:34"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "113:26:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "113:33:34"
															},
															"nodeType": "YulExpressionStatement",
															"src": "113:33:34"
														}
													]
												},
												"name": "abi_decode_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "44:6:34",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "55:5:34",
														"type": ""
													}
												],
												"src": "14:138:34"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "211:431:34",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "260:24:34",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "array",
																					"nodeType": "YulIdentifier",
																					"src": "269:5:34"
																				},
																				{
																					"name": "array",
																					"nodeType": "YulIdentifier",
																					"src": "276:5:34"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "262:6:34"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "262:20:34"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "262:20:34"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "239:6:34"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "247:4:34",
																						"type": "",
																						"value": "0x1f"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "235:3:34"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "235:17:34"
																			},
																			{
																				"name": "end",
																				"nodeType": "YulIdentifier",
																				"src": "254:3:34"
																			}
																		],
																		"functionName": {
																			"name": "slt",
																			"nodeType": "YulIdentifier",
																			"src": "231:3:34"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "231:27:34"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "224:6:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "224:35:34"
															},
															"nodeType": "YulIf",
															"src": "221:2:34"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "293:30:34",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "316:6:34"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "303:12:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "303:20:34"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "297:2:34",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "332:64:34",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "392:2:34"
																			}
																		],
																		"functionName": {
																			"name": "array_allocation_size_t_bytes",
																			"nodeType": "YulIdentifier",
																			"src": "362:29:34"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "362:33:34"
																	}
																],
																"functionName": {
																	"name": "allocateMemory",
																	"nodeType": "YulIdentifier",
																	"src": "347:14:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "347:49:34"
															},
															"variables": [
																{
																	"name": "array_1",
																	"nodeType": "YulTypedName",
																	"src": "336:7:34",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "array_1",
																		"nodeType": "YulIdentifier",
																		"src": "412:7:34"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "421:2:34"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "405:6:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "405:19:34"
															},
															"nodeType": "YulExpressionStatement",
															"src": "405:19:34"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "472:24:34",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "array",
																					"nodeType": "YulIdentifier",
																					"src": "481:5:34"
																				},
																				{
																					"name": "array",
																					"nodeType": "YulIdentifier",
																					"src": "488:5:34"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "474:6:34"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "474:20:34"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "474:20:34"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "447:6:34"
																					},
																					{
																						"name": "_1",
																						"nodeType": "YulIdentifier",
																						"src": "455:2:34"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "443:3:34"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "443:15:34"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "460:4:34",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "439:3:34"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "439:26:34"
																	},
																	{
																		"name": "end",
																		"nodeType": "YulIdentifier",
																		"src": "467:3:34"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "436:2:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "436:35:34"
															},
															"nodeType": "YulIf",
															"src": "433:2:34"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "array_1",
																				"nodeType": "YulIdentifier",
																				"src": "522:7:34"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "531:4:34",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "518:3:34"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "518:18:34"
																	},
																	{
																		"arguments": [
																			{
																				"name": "offset",
																				"nodeType": "YulIdentifier",
																				"src": "542:6:34"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "550:4:34",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "538:3:34"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "538:17:34"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "557:2:34"
																	}
																],
																"functionName": {
																	"name": "calldatacopy",
																	"nodeType": "YulIdentifier",
																	"src": "505:12:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "505:55:34"
															},
															"nodeType": "YulExpressionStatement",
															"src": "505:55:34"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "array_1",
																						"nodeType": "YulIdentifier",
																						"src": "584:7:34"
																					},
																					{
																						"name": "_1",
																						"nodeType": "YulIdentifier",
																						"src": "593:2:34"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "580:3:34"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "580:16:34"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "598:4:34",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "576:3:34"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "576:27:34"
																	},
																	{
																		"name": "array",
																		"nodeType": "YulIdentifier",
																		"src": "605:5:34"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "569:6:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "569:42:34"
															},
															"nodeType": "YulExpressionStatement",
															"src": "569:42:34"
														},
														{
															"nodeType": "YulAssignment",
															"src": "620:16:34",
															"value": {
																"name": "array_1",
																"nodeType": "YulIdentifier",
																"src": "629:7:34"
															},
															"variableNames": [
																{
																	"name": "array",
																	"nodeType": "YulIdentifier",
																	"src": "620:5:34"
																}
															]
														}
													]
												},
												"name": "abi_decode_t_bytes",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "185:6:34",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "193:3:34",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "array",
														"nodeType": "YulTypedName",
														"src": "201:5:34",
														"type": ""
													}
												],
												"src": "157:485:34"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "735:94:34",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "775:24:34",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value",
																					"nodeType": "YulIdentifier",
																					"src": "784:5:34"
																				},
																				{
																					"name": "value",
																					"nodeType": "YulIdentifier",
																					"src": "791:5:34"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "777:6:34"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "777:20:34"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "777:20:34"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "end",
																				"nodeType": "YulIdentifier",
																				"src": "756:3:34"
																			},
																			{
																				"name": "offset",
																				"nodeType": "YulIdentifier",
																				"src": "761:6:34"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "752:3:34"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "752:16:34"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "770:3:34",
																		"type": "",
																		"value": "256"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "748:3:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "748:26:34"
															},
															"nodeType": "YulIf",
															"src": "745:2:34"
														},
														{
															"nodeType": "YulAssignment",
															"src": "808:15:34",
															"value": {
																"name": "offset",
																"nodeType": "YulIdentifier",
																"src": "817:6:34"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "808:5:34"
																}
															]
														}
													]
												},
												"name": "abi_decode_t_struct$_ExactInputSingleParams_calldata",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "709:6:34",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "717:3:34",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "725:5:34",
														"type": ""
													}
												],
												"src": "647:182:34"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "904:189:34",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "950:26:34",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "959:6:34"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "967:6:34"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "952:6:34"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "952:22:34"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "952:22:34"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "925:7:34"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "934:9:34"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "921:3:34"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "921:23:34"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "946:2:34",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "917:3:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "917:32:34"
															},
															"nodeType": "YulIf",
															"src": "914:2:34"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "985:36:34",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1011:9:34"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "998:12:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "998:23:34"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "989:5:34",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "1057:5:34"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "1030:26:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "1030:33:34"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1030:33:34"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1072:15:34",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "1082:5:34"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "1072:6:34"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "870:9:34",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "881:7:34",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "893:6:34",
														"type": ""
													}
												],
												"src": "834:259:34"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1202:366:34",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1248:26:34",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value1",
																					"nodeType": "YulIdentifier",
																					"src": "1257:6:34"
																				},
																				{
																					"name": "value1",
																					"nodeType": "YulIdentifier",
																					"src": "1265:6:34"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1250:6:34"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1250:22:34"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1250:22:34"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1223:7:34"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1232:9:34"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1219:3:34"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1219:23:34"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1244:2:34",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1215:3:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "1215:32:34"
															},
															"nodeType": "YulIf",
															"src": "1212:2:34"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1283:36:34",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1309:9:34"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1296:12:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "1296:23:34"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "1287:5:34",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "1355:5:34"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "1328:26:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "1328:33:34"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1328:33:34"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1370:15:34",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "1380:5:34"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "1370:6:34"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "1394:42:34",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1421:9:34"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1432:2:34",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1417:3:34"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1417:18:34"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1404:12:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "1404:32:34"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "1394:6:34"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1445:47:34",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1477:9:34"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1488:2:34",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1473:3:34"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1473:18:34"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1460:12:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "1460:32:34"
															},
															"variables": [
																{
																	"name": "value_1",
																	"nodeType": "YulTypedName",
																	"src": "1449:7:34",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value_1",
																		"nodeType": "YulIdentifier",
																		"src": "1528:7:34"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "1501:26:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "1501:35:34"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1501:35:34"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1545:17:34",
															"value": {
																"name": "value_1",
																"nodeType": "YulIdentifier",
																"src": "1555:7:34"
															},
															"variableNames": [
																{
																	"name": "value2",
																	"nodeType": "YulIdentifier",
																	"src": "1545:6:34"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_uint256t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1152:9:34",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1163:7:34",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1175:6:34",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "1183:6:34",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "1191:6:34",
														"type": ""
													}
												],
												"src": "1098:470:34"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1711:545:34",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1758:26:34",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value4",
																					"nodeType": "YulIdentifier",
																					"src": "1767:6:34"
																				},
																				{
																					"name": "value4",
																					"nodeType": "YulIdentifier",
																					"src": "1775:6:34"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1760:6:34"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1760:22:34"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1760:22:34"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1732:7:34"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1741:9:34"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1728:3:34"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1728:23:34"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1753:3:34",
																		"type": "",
																		"value": "160"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1724:3:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "1724:33:34"
															},
															"nodeType": "YulIf",
															"src": "1721:2:34"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1793:36:34",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1819:9:34"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1806:12:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "1806:23:34"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "1797:5:34",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "1865:5:34"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "1838:26:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "1838:33:34"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1838:33:34"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1880:15:34",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "1890:5:34"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "1880:6:34"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "1904:42:34",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1931:9:34"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1942:2:34",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1927:3:34"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1927:18:34"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1914:12:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "1914:32:34"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "1904:6:34"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1955:47:34",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1987:9:34"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1998:2:34",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1983:3:34"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1983:18:34"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1970:12:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "1970:32:34"
															},
															"variables": [
																{
																	"name": "value_1",
																	"nodeType": "YulTypedName",
																	"src": "1959:7:34",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value_1",
																		"nodeType": "YulIdentifier",
																		"src": "2038:7:34"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "2011:26:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "2011:35:34"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2011:35:34"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2055:17:34",
															"value": {
																"name": "value_1",
																"nodeType": "YulIdentifier",
																"src": "2065:7:34"
															},
															"variableNames": [
																{
																	"name": "value2",
																	"nodeType": "YulIdentifier",
																	"src": "2055:6:34"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "2081:42:34",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2108:9:34"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2119:2:34",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2104:3:34"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2104:18:34"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "2091:12:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "2091:32:34"
															},
															"variableNames": [
																{
																	"name": "value3",
																	"nodeType": "YulIdentifier",
																	"src": "2081:6:34"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "2132:48:34",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2164:9:34"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2175:3:34",
																				"type": "",
																				"value": "128"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2160:3:34"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2160:19:34"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "2147:12:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "2147:33:34"
															},
															"variables": [
																{
																	"name": "value_2",
																	"nodeType": "YulTypedName",
																	"src": "2136:7:34",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value_2",
																		"nodeType": "YulIdentifier",
																		"src": "2216:7:34"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "2189:26:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "2189:35:34"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2189:35:34"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2233:17:34",
															"value": {
																"name": "value_2",
																"nodeType": "YulIdentifier",
																"src": "2243:7:34"
															},
															"variableNames": [
																{
																	"name": "value4",
																	"nodeType": "YulIdentifier",
																	"src": "2233:6:34"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_uint256t_addresst_uint256t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1645:9:34",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1656:7:34",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1668:6:34",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "1676:6:34",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "1684:6:34",
														"type": ""
													},
													{
														"name": "value3",
														"nodeType": "YulTypedName",
														"src": "1692:6:34",
														"type": ""
													},
													{
														"name": "value4",
														"nodeType": "YulTypedName",
														"src": "1700:6:34",
														"type": ""
													}
												],
												"src": "1573:683:34"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2414:556:34",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2461:26:34",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value5",
																					"nodeType": "YulIdentifier",
																					"src": "2470:6:34"
																				},
																				{
																					"name": "value5",
																					"nodeType": "YulIdentifier",
																					"src": "2478:6:34"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2463:6:34"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2463:22:34"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2463:22:34"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2435:7:34"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2444:9:34"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "2431:3:34"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2431:23:34"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2456:3:34",
																		"type": "",
																		"value": "192"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "2427:3:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "2427:33:34"
															},
															"nodeType": "YulIf",
															"src": "2424:2:34"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "2496:36:34",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2522:9:34"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "2509:12:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "2509:23:34"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "2500:5:34",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "2568:5:34"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "2541:26:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "2541:33:34"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2541:33:34"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2583:15:34",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "2593:5:34"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "2583:6:34"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "2607:42:34",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2634:9:34"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2645:2:34",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2630:3:34"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2630:18:34"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "2617:12:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "2617:32:34"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "2607:6:34"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "2658:42:34",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2685:9:34"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2696:2:34",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2681:3:34"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2681:18:34"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "2668:12:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "2668:32:34"
															},
															"variableNames": [
																{
																	"name": "value2",
																	"nodeType": "YulIdentifier",
																	"src": "2658:6:34"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "2709:47:34",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2741:9:34"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2752:2:34",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2737:3:34"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2737:18:34"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "2724:12:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "2724:32:34"
															},
															"variables": [
																{
																	"name": "value_1",
																	"nodeType": "YulTypedName",
																	"src": "2713:7:34",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2808:26:34",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value5",
																					"nodeType": "YulIdentifier",
																					"src": "2817:6:34"
																				},
																				{
																					"name": "value5",
																					"nodeType": "YulIdentifier",
																					"src": "2825:6:34"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2810:6:34"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2810:22:34"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2810:22:34"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value_1",
																				"nodeType": "YulIdentifier",
																				"src": "2778:7:34"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value_1",
																						"nodeType": "YulIdentifier",
																						"src": "2791:7:34"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "2800:4:34",
																						"type": "",
																						"value": "0xff"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "2787:3:34"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2787:18:34"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "2775:2:34"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2775:31:34"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "2768:6:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "2768:39:34"
															},
															"nodeType": "YulIf",
															"src": "2765:2:34"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2843:17:34",
															"value": {
																"name": "value_1",
																"nodeType": "YulIdentifier",
																"src": "2853:7:34"
															},
															"variableNames": [
																{
																	"name": "value3",
																	"nodeType": "YulIdentifier",
																	"src": "2843:6:34"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "2869:43:34",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2896:9:34"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2907:3:34",
																				"type": "",
																				"value": "128"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2892:3:34"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2892:19:34"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "2879:12:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "2879:33:34"
															},
															"variableNames": [
																{
																	"name": "value4",
																	"nodeType": "YulIdentifier",
																	"src": "2869:6:34"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "2921:43:34",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2948:9:34"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2959:3:34",
																				"type": "",
																				"value": "160"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2944:3:34"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2944:19:34"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "2931:12:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "2931:33:34"
															},
															"variableNames": [
																{
																	"name": "value5",
																	"nodeType": "YulIdentifier",
																	"src": "2921:6:34"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_uint256t_uint256t_uint8t_bytes32t_bytes32",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2340:9:34",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "2351:7:34",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2363:6:34",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "2371:6:34",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "2379:6:34",
														"type": ""
													},
													{
														"name": "value3",
														"nodeType": "YulTypedName",
														"src": "2387:6:34",
														"type": ""
													},
													{
														"name": "value4",
														"nodeType": "YulTypedName",
														"src": "2395:6:34",
														"type": ""
													},
													{
														"name": "value5",
														"nodeType": "YulTypedName",
														"src": "2403:6:34",
														"type": ""
													}
												],
												"src": "2261:709:34"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3091:561:34",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3137:26:34",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "3146:6:34"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "3154:6:34"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "3139:6:34"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3139:22:34"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3139:22:34"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "3112:7:34"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3121:9:34"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "3108:3:34"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3108:23:34"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3133:2:34",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "3104:3:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "3104:32:34"
															},
															"nodeType": "YulIf",
															"src": "3101:2:34"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "3172:37:34",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3199:9:34"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "3186:12:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "3186:23:34"
															},
															"variables": [
																{
																	"name": "offset",
																	"nodeType": "YulTypedName",
																	"src": "3176:6:34",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "3218:28:34",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "3228:18:34",
																"type": "",
																"value": "0xffffffffffffffff"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "3222:2:34",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3273:26:34",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "3282:6:34"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "3290:6:34"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "3275:6:34"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3275:22:34"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3275:22:34"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "3261:6:34"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "3269:2:34"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "3258:2:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "3258:14:34"
															},
															"nodeType": "YulIf",
															"src": "3255:2:34"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "3308:32:34",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3322:9:34"
																	},
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "3333:6:34"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3318:3:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "3318:22:34"
															},
															"variables": [
																{
																	"name": "_2",
																	"nodeType": "YulTypedName",
																	"src": "3312:2:34",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3388:26:34",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "3397:6:34"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "3405:6:34"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "3390:6:34"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3390:22:34"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3390:22:34"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "_2",
																						"nodeType": "YulIdentifier",
																						"src": "3367:2:34"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "3371:4:34",
																						"type": "",
																						"value": "0x1f"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "3363:3:34"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3363:13:34"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "3378:7:34"
																			}
																		],
																		"functionName": {
																			"name": "slt",
																			"nodeType": "YulIdentifier",
																			"src": "3359:3:34"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3359:27:34"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "3352:6:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "3352:35:34"
															},
															"nodeType": "YulIf",
															"src": "3349:2:34"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "3423:30:34",
															"value": {
																"arguments": [
																	{
																		"name": "_2",
																		"nodeType": "YulIdentifier",
																		"src": "3450:2:34"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "3437:12:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "3437:16:34"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "3427:6:34",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3480:26:34",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "3489:6:34"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "3497:6:34"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "3482:6:34"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3482:22:34"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3482:22:34"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "3468:6:34"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "3476:2:34"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "3465:2:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "3465:14:34"
															},
															"nodeType": "YulIf",
															"src": "3462:2:34"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3565:26:34",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "3574:6:34"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "3582:6:34"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "3567:6:34"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3567:22:34"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3567:22:34"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "_2",
																						"nodeType": "YulIdentifier",
																						"src": "3529:2:34"
																					},
																					{
																						"arguments": [
																							{
																								"name": "length",
																								"nodeType": "YulIdentifier",
																								"src": "3537:6:34"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "3545:2:34",
																								"type": "",
																								"value": "32"
																							}
																						],
																						"functionName": {
																							"name": "mul",
																							"nodeType": "YulIdentifier",
																							"src": "3533:3:34"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "3533:15:34"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "3525:3:34"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3525:24:34"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3551:2:34",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3521:3:34"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3521:33:34"
																	},
																	{
																		"name": "dataEnd",
																		"nodeType": "YulIdentifier",
																		"src": "3556:7:34"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "3518:2:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "3518:46:34"
															},
															"nodeType": "YulIf",
															"src": "3515:2:34"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3600:21:34",
															"value": {
																"arguments": [
																	{
																		"name": "_2",
																		"nodeType": "YulIdentifier",
																		"src": "3614:2:34"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3618:2:34",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3610:3:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "3610:11:34"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "3600:6:34"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "3630:16:34",
															"value": {
																"name": "length",
																"nodeType": "YulIdentifier",
																"src": "3640:6:34"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "3630:6:34"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3049:9:34",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "3060:7:34",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "3072:6:34",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "3080:6:34",
														"type": ""
													}
												],
												"src": "2975:677:34"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3753:157:34",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3799:26:34",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "3808:6:34"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "3816:6:34"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "3801:6:34"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3801:22:34"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3801:22:34"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "3774:7:34"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3783:9:34"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "3770:3:34"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3770:23:34"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3795:2:34",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "3766:3:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "3766:32:34"
															},
															"nodeType": "YulIf",
															"src": "3763:2:34"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3834:26:34",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3850:9:34"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "3844:5:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "3844:16:34"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "3834:6:34"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "3869:35:34",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3889:9:34"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3900:2:34",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3885:3:34"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3885:18:34"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "3879:5:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "3879:25:34"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "3869:6:34"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_int256t_int256_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3711:9:34",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "3722:7:34",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "3734:6:34",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "3742:6:34",
														"type": ""
													}
												],
												"src": "3657:253:34"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4036:654:34",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4082:26:34",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value2",
																					"nodeType": "YulIdentifier",
																					"src": "4091:6:34"
																				},
																				{
																					"name": "value2",
																					"nodeType": "YulIdentifier",
																					"src": "4099:6:34"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "4084:6:34"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4084:22:34"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4084:22:34"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "4057:7:34"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4066:9:34"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "4053:3:34"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4053:23:34"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4078:2:34",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "4049:3:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "4049:32:34"
															},
															"nodeType": "YulIf",
															"src": "4046:2:34"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4117:33:34",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4140:9:34"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "4127:12:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "4127:23:34"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "4117:6:34"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "4159:42:34",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4186:9:34"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4197:2:34",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4182:3:34"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4182:18:34"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "4169:12:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "4169:32:34"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "4159:6:34"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "4210:46:34",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4241:9:34"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4252:2:34",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4237:3:34"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4237:18:34"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "4224:12:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "4224:32:34"
															},
															"variables": [
																{
																	"name": "offset",
																	"nodeType": "YulTypedName",
																	"src": "4214:6:34",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "4265:28:34",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "4275:18:34",
																"type": "",
																"value": "0xffffffffffffffff"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "4269:2:34",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4320:26:34",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value2",
																					"nodeType": "YulIdentifier",
																					"src": "4329:6:34"
																				},
																				{
																					"name": "value2",
																					"nodeType": "YulIdentifier",
																					"src": "4337:6:34"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "4322:6:34"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4322:22:34"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4322:22:34"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "4308:6:34"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "4316:2:34"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "4305:2:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "4305:14:34"
															},
															"nodeType": "YulIf",
															"src": "4302:2:34"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "4355:32:34",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4369:9:34"
																	},
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "4380:6:34"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4365:3:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "4365:22:34"
															},
															"variables": [
																{
																	"name": "_2",
																	"nodeType": "YulTypedName",
																	"src": "4359:2:34",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4435:26:34",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value2",
																					"nodeType": "YulIdentifier",
																					"src": "4444:6:34"
																				},
																				{
																					"name": "value2",
																					"nodeType": "YulIdentifier",
																					"src": "4452:6:34"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "4437:6:34"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4437:22:34"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4437:22:34"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "_2",
																						"nodeType": "YulIdentifier",
																						"src": "4414:2:34"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "4418:4:34",
																						"type": "",
																						"value": "0x1f"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "4410:3:34"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4410:13:34"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "4425:7:34"
																			}
																		],
																		"functionName": {
																			"name": "slt",
																			"nodeType": "YulIdentifier",
																			"src": "4406:3:34"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4406:27:34"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "4399:6:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "4399:35:34"
															},
															"nodeType": "YulIf",
															"src": "4396:2:34"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "4470:30:34",
															"value": {
																"arguments": [
																	{
																		"name": "_2",
																		"nodeType": "YulIdentifier",
																		"src": "4497:2:34"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "4484:12:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "4484:16:34"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "4474:6:34",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4527:26:34",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value2",
																					"nodeType": "YulIdentifier",
																					"src": "4536:6:34"
																				},
																				{
																					"name": "value2",
																					"nodeType": "YulIdentifier",
																					"src": "4544:6:34"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "4529:6:34"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4529:22:34"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4529:22:34"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "4515:6:34"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "4523:2:34"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "4512:2:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "4512:14:34"
															},
															"nodeType": "YulIf",
															"src": "4509:2:34"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4603:26:34",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value2",
																					"nodeType": "YulIdentifier",
																					"src": "4612:6:34"
																				},
																				{
																					"name": "value2",
																					"nodeType": "YulIdentifier",
																					"src": "4620:6:34"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "4605:6:34"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4605:22:34"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4605:22:34"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "_2",
																						"nodeType": "YulIdentifier",
																						"src": "4576:2:34"
																					},
																					{
																						"name": "length",
																						"nodeType": "YulIdentifier",
																						"src": "4580:6:34"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "4572:3:34"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4572:15:34"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4589:2:34",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4568:3:34"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4568:24:34"
																	},
																	{
																		"name": "dataEnd",
																		"nodeType": "YulIdentifier",
																		"src": "4594:7:34"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "4565:2:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "4565:37:34"
															},
															"nodeType": "YulIf",
															"src": "4562:2:34"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4638:21:34",
															"value": {
																"arguments": [
																	{
																		"name": "_2",
																		"nodeType": "YulIdentifier",
																		"src": "4652:2:34"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4656:2:34",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4648:3:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "4648:11:34"
															},
															"variableNames": [
																{
																	"name": "value2",
																	"nodeType": "YulIdentifier",
																	"src": "4638:6:34"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "4668:16:34",
															"value": {
																"name": "length",
																"nodeType": "YulIdentifier",
																"src": "4678:6:34"
															},
															"variableNames": [
																{
																	"name": "value3",
																	"nodeType": "YulIdentifier",
																	"src": "4668:6:34"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_int256t_int256t_bytes_calldata_ptr",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3978:9:34",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "3989:7:34",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "4001:6:34",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "4009:6:34",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "4017:6:34",
														"type": ""
													},
													{
														"name": "value3",
														"nodeType": "YulTypedName",
														"src": "4025:6:34",
														"type": ""
													}
												],
												"src": "3915:775:34"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4786:585:34",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4832:26:34",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "4841:6:34"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "4849:6:34"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "4834:6:34"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4834:22:34"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4834:22:34"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "4807:7:34"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4816:9:34"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "4803:3:34"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4803:23:34"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4828:2:34",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "4799:3:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "4799:32:34"
															},
															"nodeType": "YulIf",
															"src": "4796:2:34"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "4867:30:34",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4887:9:34"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "4881:5:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "4881:16:34"
															},
															"variables": [
																{
																	"name": "offset",
																	"nodeType": "YulTypedName",
																	"src": "4871:6:34",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4940:26:34",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "4949:6:34"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "4957:6:34"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "4942:6:34"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4942:22:34"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4942:22:34"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "4912:6:34"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4920:18:34",
																		"type": "",
																		"value": "0xffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "4909:2:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "4909:30:34"
															},
															"nodeType": "YulIf",
															"src": "4906:2:34"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "4975:32:34",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4989:9:34"
																	},
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "5000:6:34"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4985:3:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "4985:22:34"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "4979:2:34",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "5055:26:34",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "5064:6:34"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "5072:6:34"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "5057:6:34"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5057:22:34"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5057:22:34"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "_1",
																						"nodeType": "YulIdentifier",
																						"src": "5034:2:34"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "5038:4:34",
																						"type": "",
																						"value": "0x1f"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "5030:3:34"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "5030:13:34"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "5045:7:34"
																			}
																		],
																		"functionName": {
																			"name": "slt",
																			"nodeType": "YulIdentifier",
																			"src": "5026:3:34"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5026:27:34"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "5019:6:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "5019:35:34"
															},
															"nodeType": "YulIf",
															"src": "5016:2:34"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5090:19:34",
															"value": {
																"arguments": [
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "5106:2:34"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "5100:5:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "5100:9:34"
															},
															"variables": [
																{
																	"name": "_2",
																	"nodeType": "YulTypedName",
																	"src": "5094:2:34",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5118:62:34",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "_2",
																				"nodeType": "YulIdentifier",
																				"src": "5176:2:34"
																			}
																		],
																		"functionName": {
																			"name": "array_allocation_size_t_bytes",
																			"nodeType": "YulIdentifier",
																			"src": "5146:29:34"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5146:33:34"
																	}
																],
																"functionName": {
																	"name": "allocateMemory",
																	"nodeType": "YulIdentifier",
																	"src": "5131:14:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "5131:49:34"
															},
															"variables": [
																{
																	"name": "array",
																	"nodeType": "YulTypedName",
																	"src": "5122:5:34",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "array",
																		"nodeType": "YulIdentifier",
																		"src": "5196:5:34"
																	},
																	{
																		"name": "_2",
																		"nodeType": "YulIdentifier",
																		"src": "5203:2:34"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5189:6:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "5189:17:34"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5189:17:34"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "5252:26:34",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "5261:6:34"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "5269:6:34"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "5254:6:34"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5254:22:34"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5254:22:34"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "_1",
																						"nodeType": "YulIdentifier",
																						"src": "5229:2:34"
																					},
																					{
																						"name": "_2",
																						"nodeType": "YulIdentifier",
																						"src": "5233:2:34"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "5225:3:34"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "5225:11:34"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5238:2:34",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5221:3:34"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5221:20:34"
																	},
																	{
																		"name": "dataEnd",
																		"nodeType": "YulIdentifier",
																		"src": "5243:7:34"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "5218:2:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "5218:33:34"
															},
															"nodeType": "YulIf",
															"src": "5215:2:34"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "5313:2:34"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5317:2:34",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5309:3:34"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5309:11:34"
																	},
																	{
																		"arguments": [
																			{
																				"name": "array",
																				"nodeType": "YulIdentifier",
																				"src": "5326:5:34"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5333:2:34",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5322:3:34"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5322:14:34"
																	},
																	{
																		"name": "_2",
																		"nodeType": "YulIdentifier",
																		"src": "5338:2:34"
																	}
																],
																"functionName": {
																	"name": "copy_memory_to_memory",
																	"nodeType": "YulIdentifier",
																	"src": "5287:21:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "5287:54:34"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5287:54:34"
														},
														{
															"nodeType": "YulAssignment",
															"src": "5350:15:34",
															"value": {
																"name": "array",
																"nodeType": "YulIdentifier",
																"src": "5360:5:34"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "5350:6:34"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_string_memory_ptr_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4752:9:34",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "4763:7:34",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "4775:6:34",
														"type": ""
													}
												],
												"src": "4695:676:34"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5480:938:34",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "5526:26:34",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "5535:6:34"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "5543:6:34"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "5528:6:34"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5528:22:34"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5528:22:34"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "5501:7:34"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5510:9:34"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "5497:3:34"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5497:23:34"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5522:2:34",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "5493:3:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "5493:32:34"
															},
															"nodeType": "YulIf",
															"src": "5490:2:34"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5561:37:34",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5588:9:34"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "5575:12:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "5575:23:34"
															},
															"variables": [
																{
																	"name": "offset",
																	"nodeType": "YulTypedName",
																	"src": "5565:6:34",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5607:28:34",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "5617:18:34",
																"type": "",
																"value": "0xffffffffffffffff"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "5611:2:34",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "5662:26:34",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "5671:6:34"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "5679:6:34"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "5664:6:34"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5664:22:34"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5664:22:34"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "5650:6:34"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "5658:2:34"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "5647:2:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "5647:14:34"
															},
															"nodeType": "YulIf",
															"src": "5644:2:34"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5697:32:34",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5711:9:34"
																	},
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "5722:6:34"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5707:3:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "5707:22:34"
															},
															"variables": [
																{
																	"name": "_2",
																	"nodeType": "YulTypedName",
																	"src": "5701:2:34",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "5769:26:34",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "5778:6:34"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "5786:6:34"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "5771:6:34"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5771:22:34"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5771:22:34"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "5749:7:34"
																			},
																			{
																				"name": "_2",
																				"nodeType": "YulIdentifier",
																				"src": "5758:2:34"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "5745:3:34"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5745:16:34"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5763:4:34",
																		"type": "",
																		"value": "0xa0"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "5741:3:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "5741:27:34"
															},
															"nodeType": "YulIf",
															"src": "5738:2:34"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5804:23:34",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5824:2:34",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "5818:5:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "5818:9:34"
															},
															"variables": [
																{
																	"name": "memPtr",
																	"nodeType": "YulTypedName",
																	"src": "5808:6:34",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5836:35:34",
															"value": {
																"arguments": [
																	{
																		"name": "memPtr",
																		"nodeType": "YulIdentifier",
																		"src": "5858:6:34"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5866:4:34",
																		"type": "",
																		"value": "0xa0"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5854:3:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "5854:17:34"
															},
															"variables": [
																{
																	"name": "newFreePtr",
																	"nodeType": "YulTypedName",
																	"src": "5840:10:34",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "5930:13:34",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "invalid",
																				"nodeType": "YulIdentifier",
																				"src": "5932:7:34"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5932:9:34"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5932:9:34"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "newFreePtr",
																				"nodeType": "YulIdentifier",
																				"src": "5889:10:34"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "5901:2:34"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "5886:2:34"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5886:18:34"
																	},
																	{
																		"arguments": [
																			{
																				"name": "newFreePtr",
																				"nodeType": "YulIdentifier",
																				"src": "5909:10:34"
																			},
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "5921:6:34"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nodeType": "YulIdentifier",
																			"src": "5906:2:34"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5906:22:34"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "5883:2:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "5883:46:34"
															},
															"nodeType": "YulIf",
															"src": "5880:2:34"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5959:2:34",
																		"type": "",
																		"value": "64"
																	},
																	{
																		"name": "newFreePtr",
																		"nodeType": "YulIdentifier",
																		"src": "5963:10:34"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5952:6:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "5952:22:34"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5952:22:34"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5983:32:34",
															"value": {
																"arguments": [
																	{
																		"name": "_2",
																		"nodeType": "YulIdentifier",
																		"src": "6012:2:34"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "5999:12:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "5999:16:34"
															},
															"variables": [
																{
																	"name": "offset_1",
																	"nodeType": "YulTypedName",
																	"src": "5987:8:34",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "6044:26:34",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "6053:6:34"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "6061:6:34"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "6046:6:34"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "6046:22:34"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "6046:22:34"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "offset_1",
																		"nodeType": "YulIdentifier",
																		"src": "6030:8:34"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "6040:2:34"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "6027:2:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "6027:16:34"
															},
															"nodeType": "YulIf",
															"src": "6024:2:34"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "memPtr",
																		"nodeType": "YulIdentifier",
																		"src": "6086:6:34"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "_2",
																						"nodeType": "YulIdentifier",
																						"src": "6117:2:34"
																					},
																					{
																						"name": "offset_1",
																						"nodeType": "YulIdentifier",
																						"src": "6121:8:34"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "6113:3:34"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "6113:17:34"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "6132:7:34"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_bytes",
																			"nodeType": "YulIdentifier",
																			"src": "6094:18:34"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6094:46:34"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6079:6:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "6079:62:34"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6079:62:34"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "6161:6:34"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6169:2:34",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6157:3:34"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6157:15:34"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "_2",
																						"nodeType": "YulIdentifier",
																						"src": "6199:2:34"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "6203:2:34",
																						"type": "",
																						"value": "32"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "6195:3:34"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "6195:11:34"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "6174:20:34"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6174:33:34"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6150:6:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "6150:58:34"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6150:58:34"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "6228:6:34"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6236:2:34",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6224:3:34"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6224:15:34"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "_2",
																						"nodeType": "YulIdentifier",
																						"src": "6258:2:34"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "6262:2:34",
																						"type": "",
																						"value": "64"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "6254:3:34"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "6254:11:34"
																			}
																		],
																		"functionName": {
																			"name": "calldataload",
																			"nodeType": "YulIdentifier",
																			"src": "6241:12:34"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6241:25:34"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6217:6:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "6217:50:34"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6217:50:34"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "6287:6:34"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6295:2:34",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6283:3:34"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6283:15:34"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "_2",
																						"nodeType": "YulIdentifier",
																						"src": "6317:2:34"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "6321:2:34",
																						"type": "",
																						"value": "96"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "6313:3:34"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "6313:11:34"
																			}
																		],
																		"functionName": {
																			"name": "calldataload",
																			"nodeType": "YulIdentifier",
																			"src": "6300:12:34"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6300:25:34"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6276:6:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "6276:50:34"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6276:50:34"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "6346:6:34"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6354:3:34",
																				"type": "",
																				"value": "128"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6342:3:34"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6342:16:34"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "_2",
																						"nodeType": "YulIdentifier",
																						"src": "6377:2:34"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "6381:3:34",
																						"type": "",
																						"value": "128"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "6373:3:34"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "6373:12:34"
																			}
																		],
																		"functionName": {
																			"name": "calldataload",
																			"nodeType": "YulIdentifier",
																			"src": "6360:12:34"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6360:26:34"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6335:6:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "6335:52:34"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6335:52:34"
														},
														{
															"nodeType": "YulAssignment",
															"src": "6396:16:34",
															"value": {
																"name": "memPtr",
																"nodeType": "YulIdentifier",
																"src": "6406:6:34"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "6396:6:34"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_struct$_ExactInputParams_$2879_memory_ptr",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5446:9:34",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "5457:7:34",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "5469:6:34",
														"type": ""
													}
												],
												"src": "5376:1042:34"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6535:170:34",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "6582:26:34",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "6591:6:34"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "6599:6:34"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "6584:6:34"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "6584:22:34"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "6584:22:34"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "6556:7:34"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6565:9:34"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "6552:3:34"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6552:23:34"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6577:3:34",
																		"type": "",
																		"value": "256"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "6548:3:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "6548:33:34"
															},
															"nodeType": "YulIf",
															"src": "6545:2:34"
														},
														{
															"nodeType": "YulAssignment",
															"src": "6617:82:34",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6680:9:34"
																	},
																	{
																		"name": "dataEnd",
																		"nodeType": "YulIdentifier",
																		"src": "6691:7:34"
																	}
																],
																"functionName": {
																	"name": "abi_decode_t_struct$_ExactInputSingleParams_calldata",
																	"nodeType": "YulIdentifier",
																	"src": "6627:52:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "6627:72:34"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "6617:6:34"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_struct$_ExactInputSingleParams_$2860_calldata_ptr",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "6501:9:34",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "6512:7:34",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "6524:6:34",
														"type": ""
													}
												],
												"src": "6423:282:34"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6817:320:34",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "6863:26:34",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "6872:6:34"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "6880:6:34"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "6865:6:34"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "6865:22:34"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "6865:22:34"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "6838:7:34"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6847:9:34"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "6834:3:34"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6834:23:34"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6859:2:34",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "6830:3:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "6830:32:34"
															},
															"nodeType": "YulIf",
															"src": "6827:2:34"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "6898:37:34",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6925:9:34"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "6912:12:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "6912:23:34"
															},
															"variables": [
																{
																	"name": "offset",
																	"nodeType": "YulTypedName",
																	"src": "6902:6:34",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "6978:26:34",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "6987:6:34"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "6995:6:34"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "6980:6:34"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "6980:22:34"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "6980:22:34"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "6950:6:34"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6958:18:34",
																		"type": "",
																		"value": "0xffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "6947:2:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "6947:30:34"
															},
															"nodeType": "YulIf",
															"src": "6944:2:34"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "7013:32:34",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7027:9:34"
																	},
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "7038:6:34"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "7023:3:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "7023:22:34"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "7017:2:34",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "7084:26:34",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "7093:6:34"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "7101:6:34"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "7086:6:34"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "7086:22:34"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "7086:22:34"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "7065:7:34"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "7074:2:34"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "7061:3:34"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7061:16:34"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7079:3:34",
																		"type": "",
																		"value": "160"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "7057:3:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "7057:26:34"
															},
															"nodeType": "YulIf",
															"src": "7054:2:34"
														},
														{
															"nodeType": "YulAssignment",
															"src": "7119:12:34",
															"value": {
																"name": "_1",
																"nodeType": "YulIdentifier",
																"src": "7129:2:34"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "7119:6:34"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_struct$_ExactOutputParams_$2923_calldata_ptr",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "6783:9:34",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "6794:7:34",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "6806:6:34",
														"type": ""
													}
												],
												"src": "6710:427:34"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7255:170:34",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "7302:26:34",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "7311:6:34"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "7319:6:34"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "7304:6:34"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "7304:22:34"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "7304:22:34"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "7276:7:34"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7285:9:34"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "7272:3:34"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7272:23:34"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7297:3:34",
																		"type": "",
																		"value": "256"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "7268:3:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "7268:33:34"
															},
															"nodeType": "YulIf",
															"src": "7265:2:34"
														},
														{
															"nodeType": "YulAssignment",
															"src": "7337:82:34",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7400:9:34"
																	},
																	{
																		"name": "dataEnd",
																		"nodeType": "YulIdentifier",
																		"src": "7411:7:34"
																	}
																],
																"functionName": {
																	"name": "abi_decode_t_struct$_ExactInputSingleParams_calldata",
																	"nodeType": "YulIdentifier",
																	"src": "7347:52:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "7347:72:34"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "7337:6:34"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_struct$_ExactOutputSingleParams_$2904_calldata_ptr",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "7221:9:34",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "7232:7:34",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "7244:6:34",
														"type": ""
													}
												],
												"src": "7142:283:34"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7534:824:34",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "7580:26:34",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "7589:6:34"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "7597:6:34"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "7582:6:34"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "7582:22:34"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "7582:22:34"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "7555:7:34"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7564:9:34"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "7551:3:34"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7551:23:34"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7576:2:34",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "7547:3:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "7547:32:34"
															},
															"nodeType": "YulIf",
															"src": "7544:2:34"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "7615:37:34",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7642:9:34"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "7629:12:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "7629:23:34"
															},
															"variables": [
																{
																	"name": "offset",
																	"nodeType": "YulTypedName",
																	"src": "7619:6:34",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "7661:28:34",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "7671:18:34",
																"type": "",
																"value": "0xffffffffffffffff"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "7665:2:34",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "7716:26:34",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "7725:6:34"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "7733:6:34"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "7718:6:34"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "7718:22:34"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "7718:22:34"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "7704:6:34"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "7712:2:34"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "7701:2:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "7701:14:34"
															},
															"nodeType": "YulIf",
															"src": "7698:2:34"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "7751:32:34",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7765:9:34"
																	},
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "7776:6:34"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "7761:3:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "7761:22:34"
															},
															"variables": [
																{
																	"name": "_2",
																	"nodeType": "YulTypedName",
																	"src": "7755:2:34",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "7823:26:34",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "7832:6:34"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "7840:6:34"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "7825:6:34"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "7825:22:34"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "7825:22:34"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "7803:7:34"
																			},
																			{
																				"name": "_2",
																				"nodeType": "YulIdentifier",
																				"src": "7812:2:34"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "7799:3:34"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7799:16:34"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7817:4:34",
																		"type": "",
																		"value": "0x40"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "7795:3:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "7795:27:34"
															},
															"nodeType": "YulIf",
															"src": "7792:2:34"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "7858:25:34",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7878:4:34",
																		"type": "",
																		"value": "0x40"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "7872:5:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "7872:11:34"
															},
															"variables": [
																{
																	"name": "memPtr",
																	"nodeType": "YulTypedName",
																	"src": "7862:6:34",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "7892:35:34",
															"value": {
																"arguments": [
																	{
																		"name": "memPtr",
																		"nodeType": "YulIdentifier",
																		"src": "7914:6:34"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7922:4:34",
																		"type": "",
																		"value": "0x40"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "7910:3:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "7910:17:34"
															},
															"variables": [
																{
																	"name": "newFreePtr",
																	"nodeType": "YulTypedName",
																	"src": "7896:10:34",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "7986:13:34",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "invalid",
																				"nodeType": "YulIdentifier",
																				"src": "7988:7:34"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "7988:9:34"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "7988:9:34"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "newFreePtr",
																				"nodeType": "YulIdentifier",
																				"src": "7945:10:34"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "7957:2:34"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "7942:2:34"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7942:18:34"
																	},
																	{
																		"arguments": [
																			{
																				"name": "newFreePtr",
																				"nodeType": "YulIdentifier",
																				"src": "7965:10:34"
																			},
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "7977:6:34"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nodeType": "YulIdentifier",
																			"src": "7962:2:34"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7962:22:34"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "7939:2:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "7939:46:34"
															},
															"nodeType": "YulIf",
															"src": "7936:2:34"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8015:4:34",
																		"type": "",
																		"value": "0x40"
																	},
																	{
																		"name": "newFreePtr",
																		"nodeType": "YulIdentifier",
																		"src": "8021:10:34"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8008:6:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "8008:24:34"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8008:24:34"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "8041:32:34",
															"value": {
																"arguments": [
																	{
																		"name": "_2",
																		"nodeType": "YulIdentifier",
																		"src": "8070:2:34"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "8057:12:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "8057:16:34"
															},
															"variables": [
																{
																	"name": "offset_1",
																	"nodeType": "YulTypedName",
																	"src": "8045:8:34",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "8102:26:34",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "8111:6:34"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "8119:6:34"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "8104:6:34"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "8104:22:34"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "8104:22:34"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "offset_1",
																		"nodeType": "YulIdentifier",
																		"src": "8088:8:34"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "8098:2:34"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "8085:2:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "8085:16:34"
															},
															"nodeType": "YulIf",
															"src": "8082:2:34"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "memPtr",
																		"nodeType": "YulIdentifier",
																		"src": "8144:6:34"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "_2",
																						"nodeType": "YulIdentifier",
																						"src": "8175:2:34"
																					},
																					{
																						"name": "offset_1",
																						"nodeType": "YulIdentifier",
																						"src": "8179:8:34"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "8171:3:34"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "8171:17:34"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "8190:7:34"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_bytes",
																			"nodeType": "YulIdentifier",
																			"src": "8152:18:34"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8152:46:34"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8137:6:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "8137:62:34"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8137:62:34"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "8208:38:34",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "_2",
																				"nodeType": "YulIdentifier",
																				"src": "8238:2:34"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8242:2:34",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8234:3:34"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8234:11:34"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "8221:12:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "8221:25:34"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "8212:5:34",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "8282:5:34"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "8255:26:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "8255:33:34"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8255:33:34"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "8308:6:34"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8316:2:34",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8304:3:34"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8304:15:34"
																	},
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "8321:5:34"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8297:6:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "8297:30:34"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8297:30:34"
														},
														{
															"nodeType": "YulAssignment",
															"src": "8336:16:34",
															"value": {
																"name": "memPtr",
																"nodeType": "YulIdentifier",
																"src": "8346:6:34"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "8336:6:34"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_struct$_SwapCallbackData_$1394_memory_ptr",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "7500:9:34",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "7511:7:34",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "7523:6:34",
														"type": ""
													}
												],
												"src": "7430:928:34"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8433:189:34",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "8479:26:34",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "8488:6:34"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "8496:6:34"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "8481:6:34"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "8481:22:34"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "8481:22:34"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "8454:7:34"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8463:9:34"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "8450:3:34"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8450:23:34"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8475:2:34",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "8446:3:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "8446:32:34"
															},
															"nodeType": "YulIf",
															"src": "8443:2:34"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "8514:36:34",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "8540:9:34"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "8527:12:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "8527:23:34"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "8518:5:34",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "8586:5:34"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "8559:26:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "8559:33:34"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8559:33:34"
														},
														{
															"nodeType": "YulAssignment",
															"src": "8601:15:34",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "8611:5:34"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "8601:6:34"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint160",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "8399:9:34",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "8410:7:34",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "8422:6:34",
														"type": ""
													}
												],
												"src": "8363:259:34"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8696:225:34",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "8742:26:34",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "8751:6:34"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "8759:6:34"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "8744:6:34"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "8744:22:34"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "8744:22:34"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "8717:7:34"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8726:9:34"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "8713:3:34"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8713:23:34"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8738:2:34",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "8709:3:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "8709:32:34"
															},
															"nodeType": "YulIf",
															"src": "8706:2:34"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "8777:36:34",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "8803:9:34"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "8790:12:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "8790:23:34"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "8781:5:34",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "8865:26:34",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "8874:6:34"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "8882:6:34"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "8867:6:34"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "8867:22:34"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "8867:22:34"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "8835:5:34"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "8846:5:34"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "8853:8:34",
																						"type": "",
																						"value": "0xffffff"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "8842:3:34"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "8842:20:34"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "8832:2:34"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8832:31:34"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "8825:6:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "8825:39:34"
															},
															"nodeType": "YulIf",
															"src": "8822:2:34"
														},
														{
															"nodeType": "YulAssignment",
															"src": "8900:15:34",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "8910:5:34"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "8900:6:34"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint24",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "8662:9:34",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "8673:7:34",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "8685:6:34",
														"type": ""
													}
												],
												"src": "8627:294:34"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9013:240:34",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "9059:26:34",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "9068:6:34"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "9076:6:34"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "9061:6:34"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "9061:22:34"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "9061:22:34"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "9034:7:34"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9043:9:34"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "9030:3:34"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9030:23:34"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9055:2:34",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "9026:3:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "9026:32:34"
															},
															"nodeType": "YulIf",
															"src": "9023:2:34"
														},
														{
															"nodeType": "YulAssignment",
															"src": "9094:33:34",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "9117:9:34"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "9104:12:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "9104:23:34"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "9094:6:34"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "9136:45:34",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9166:9:34"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9177:2:34",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9162:3:34"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9162:18:34"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "9149:12:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "9149:32:34"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "9140:5:34",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "9217:5:34"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "9190:26:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "9190:33:34"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9190:33:34"
														},
														{
															"nodeType": "YulAssignment",
															"src": "9232:15:34",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "9242:5:34"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "9232:6:34"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint256t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "8971:9:34",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "8982:7:34",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "8994:6:34",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "9002:6:34",
														"type": ""
													}
												],
												"src": "8926:327:34"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9379:418:34",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "9426:26:34",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value2",
																					"nodeType": "YulIdentifier",
																					"src": "9435:6:34"
																				},
																				{
																					"name": "value2",
																					"nodeType": "YulIdentifier",
																					"src": "9443:6:34"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "9428:6:34"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "9428:22:34"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "9428:22:34"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "9400:7:34"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9409:9:34"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "9396:3:34"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9396:23:34"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9421:3:34",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "9392:3:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "9392:33:34"
															},
															"nodeType": "YulIf",
															"src": "9389:2:34"
														},
														{
															"nodeType": "YulAssignment",
															"src": "9461:33:34",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "9484:9:34"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "9471:12:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "9471:23:34"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "9461:6:34"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "9503:45:34",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9533:9:34"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9544:2:34",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9529:3:34"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9529:18:34"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "9516:12:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "9516:32:34"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "9507:5:34",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "9584:5:34"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "9557:26:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "9557:33:34"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9557:33:34"
														},
														{
															"nodeType": "YulAssignment",
															"src": "9599:15:34",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "9609:5:34"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "9599:6:34"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "9623:42:34",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9650:9:34"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9661:2:34",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9646:3:34"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9646:18:34"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "9633:12:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "9633:32:34"
															},
															"variableNames": [
																{
																	"name": "value2",
																	"nodeType": "YulIdentifier",
																	"src": "9623:6:34"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "9674:47:34",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9706:9:34"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9717:2:34",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9702:3:34"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9702:18:34"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "9689:12:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "9689:32:34"
															},
															"variables": [
																{
																	"name": "value_1",
																	"nodeType": "YulTypedName",
																	"src": "9678:7:34",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value_1",
																		"nodeType": "YulIdentifier",
																		"src": "9757:7:34"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "9730:26:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "9730:35:34"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9730:35:34"
														},
														{
															"nodeType": "YulAssignment",
															"src": "9774:17:34",
															"value": {
																"name": "value_1",
																"nodeType": "YulIdentifier",
																"src": "9784:7:34"
															},
															"variableNames": [
																{
																	"name": "value3",
																	"nodeType": "YulIdentifier",
																	"src": "9774:6:34"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint256t_addresst_uint256t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "9321:9:34",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "9332:7:34",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "9344:6:34",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "9352:6:34",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "9360:6:34",
														"type": ""
													},
													{
														"name": "value3",
														"nodeType": "YulTypedName",
														"src": "9368:6:34",
														"type": ""
													}
												],
												"src": "9258:539:34"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9853:208:34",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "9863:26:34",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "9883:5:34"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "9877:5:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "9877:12:34"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "9867:6:34",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "9905:3:34"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "9910:6:34"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9898:6:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "9898:19:34"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9898:19:34"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "9952:5:34"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9959:4:34",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9948:3:34"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9948:16:34"
																	},
																	{
																		"arguments": [
																			{
																				"name": "pos",
																				"nodeType": "YulIdentifier",
																				"src": "9970:3:34"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9975:4:34",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9966:3:34"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9966:14:34"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "9982:6:34"
																	}
																],
																"functionName": {
																	"name": "copy_memory_to_memory",
																	"nodeType": "YulIdentifier",
																	"src": "9926:21:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "9926:63:34"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9926:63:34"
														},
														{
															"nodeType": "YulAssignment",
															"src": "9998:57:34",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "pos",
																				"nodeType": "YulIdentifier",
																				"src": "10013:3:34"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"name": "length",
																								"nodeType": "YulIdentifier",
																								"src": "10026:6:34"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "10034:2:34",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "add",
																							"nodeType": "YulIdentifier",
																							"src": "10022:3:34"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "10022:15:34"
																					},
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "10043:2:34",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "not",
																							"nodeType": "YulIdentifier",
																							"src": "10039:3:34"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "10039:7:34"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "10018:3:34"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "10018:29:34"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10009:3:34"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10009:39:34"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10050:4:34",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "10005:3:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "10005:50:34"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "9998:3:34"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_bytes",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "9830:5:34",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "9837:3:34",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "9845:3:34",
														"type": ""
													}
												],
												"src": "9802:259:34"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10239:258:34",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "10249:41:34",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10263:26:34",
																		"type": "",
																		"value": "0xffffffffffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "not",
																	"nodeType": "YulIdentifier",
																	"src": "10259:3:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "10259:31:34"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "10253:2:34",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "10306:3:34"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "10319:2:34",
																						"type": "",
																						"value": "96"
																					},
																					{
																						"name": "value0",
																						"nodeType": "YulIdentifier",
																						"src": "10323:6:34"
																					}
																				],
																				"functionName": {
																					"name": "shl",
																					"nodeType": "YulIdentifier",
																					"src": "10315:3:34"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "10315:15:34"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "10332:2:34"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "10311:3:34"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10311:24:34"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10299:6:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "10299:37:34"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10299:37:34"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "pos",
																				"nodeType": "YulIdentifier",
																				"src": "10356:3:34"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10361:2:34",
																				"type": "",
																				"value": "20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10352:3:34"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10352:12:34"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "10374:3:34",
																						"type": "",
																						"value": "232"
																					},
																					{
																						"name": "value1",
																						"nodeType": "YulIdentifier",
																						"src": "10379:6:34"
																					}
																				],
																				"functionName": {
																					"name": "shl",
																					"nodeType": "YulIdentifier",
																					"src": "10370:3:34"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "10370:16:34"
																			},
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "10392:3:34",
																						"type": "",
																						"value": "232"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "10397:8:34",
																						"type": "",
																						"value": "16777215"
																					}
																				],
																				"functionName": {
																					"name": "shl",
																					"nodeType": "YulIdentifier",
																					"src": "10388:3:34"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "10388:18:34"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "10366:3:34"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10366:41:34"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10345:6:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "10345:63:34"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10345:63:34"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "pos",
																				"nodeType": "YulIdentifier",
																				"src": "10428:3:34"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10433:2:34",
																				"type": "",
																				"value": "23"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10424:3:34"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10424:12:34"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "10446:2:34",
																						"type": "",
																						"value": "96"
																					},
																					{
																						"name": "value2",
																						"nodeType": "YulIdentifier",
																						"src": "10450:6:34"
																					}
																				],
																				"functionName": {
																					"name": "shl",
																					"nodeType": "YulIdentifier",
																					"src": "10442:3:34"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "10442:15:34"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "10459:2:34"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "10438:3:34"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10438:24:34"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10417:6:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "10417:46:34"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10417:46:34"
														},
														{
															"nodeType": "YulAssignment",
															"src": "10472:19:34",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "10483:3:34"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10488:2:34",
																		"type": "",
																		"value": "43"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "10479:3:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "10479:12:34"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "10472:3:34"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_packed_t_address_t_uint24_t_address__to_t_address_t_uint24_t_address__nonPadded_inplace_fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "10199:3:34",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "10204:6:34",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "10212:6:34",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "10220:6:34",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "10231:3:34",
														"type": ""
													}
												],
												"src": "10066:431:34"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10649:126:34",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "10672:3:34"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "10677:6:34"
																	},
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "10685:6:34"
																	}
																],
																"functionName": {
																	"name": "calldatacopy",
																	"nodeType": "YulIdentifier",
																	"src": "10659:12:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "10659:33:34"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10659:33:34"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "10701:26:34",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "10715:3:34"
																	},
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "10720:6:34"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "10711:3:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "10711:16:34"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "10705:2:34",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "10743:2:34"
																	},
																	{
																		"name": "end",
																		"nodeType": "YulIdentifier",
																		"src": "10747:3:34"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10736:6:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "10736:15:34"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10736:15:34"
														},
														{
															"nodeType": "YulAssignment",
															"src": "10760:9:34",
															"value": {
																"name": "_1",
																"nodeType": "YulIdentifier",
																"src": "10767:2:34"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "10760:3:34"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_packed_t_bytes_calldata_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "10617:3:34",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "10622:6:34",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "10630:6:34",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "10641:3:34",
														"type": ""
													}
												],
												"src": "10502:273:34"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10881:102:34",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "10891:26:34",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "10903:9:34"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10914:2:34",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "10899:3:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "10899:18:34"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "10891:4:34"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "10933:9:34"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "10948:6:34"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "10964:3:34",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "10969:1:34",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nodeType": "YulIdentifier",
																							"src": "10960:3:34"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "10960:11:34"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "10973:1:34",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nodeType": "YulIdentifier",
																					"src": "10956:3:34"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "10956:19:34"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "10944:3:34"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10944:32:34"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10926:6:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "10926:51:34"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10926:51:34"
														}
													]
												},
												"name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "10850:9:34",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "10861:6:34",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "10872:4:34",
														"type": ""
													}
												],
												"src": "10780:203:34"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "11211:347:34",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "11221:29:34",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11239:3:34",
																				"type": "",
																				"value": "160"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11244:1:34",
																				"type": "",
																				"value": "1"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "11235:3:34"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11235:11:34"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11248:1:34",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "11231:3:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "11231:19:34"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "11225:2:34",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "11266:9:34"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "11281:6:34"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "11289:2:34"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "11277:3:34"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11277:15:34"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11259:6:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "11259:34:34"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11259:34:34"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11313:9:34"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11324:2:34",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11309:3:34"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11309:18:34"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value1",
																						"nodeType": "YulIdentifier",
																						"src": "11343:6:34"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "11336:6:34"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "11336:14:34"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "11329:6:34"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11329:22:34"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11302:6:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "11302:50:34"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11302:50:34"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11372:9:34"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11383:2:34",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11368:3:34"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11368:18:34"
																	},
																	{
																		"name": "value2",
																		"nodeType": "YulIdentifier",
																		"src": "11388:6:34"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11361:6:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "11361:34:34"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11361:34:34"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11415:9:34"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11426:2:34",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11411:3:34"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11411:18:34"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value3",
																				"nodeType": "YulIdentifier",
																				"src": "11435:6:34"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "11443:2:34"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "11431:3:34"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11431:15:34"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11404:6:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "11404:43:34"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11404:43:34"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11467:9:34"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11478:3:34",
																				"type": "",
																				"value": "128"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11463:3:34"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11463:19:34"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11484:3:34",
																		"type": "",
																		"value": "160"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11456:6:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "11456:32:34"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11456:32:34"
														},
														{
															"nodeType": "YulAssignment",
															"src": "11497:55:34",
															"value": {
																"arguments": [
																	{
																		"name": "value4",
																		"nodeType": "YulIdentifier",
																		"src": "11524:6:34"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11536:9:34"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11547:3:34",
																				"type": "",
																				"value": "160"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11532:3:34"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11532:19:34"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_bytes",
																	"nodeType": "YulIdentifier",
																	"src": "11505:18:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "11505:47:34"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "11497:4:34"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_address_t_bool_t_int256_t_uint160_t_bytes_memory_ptr__to_t_address_t_bool_t_int256_t_uint160_t_bytes_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "11148:9:34",
														"type": ""
													},
													{
														"name": "value4",
														"nodeType": "YulTypedName",
														"src": "11159:6:34",
														"type": ""
													},
													{
														"name": "value3",
														"nodeType": "YulTypedName",
														"src": "11167:6:34",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "11175:6:34",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "11183:6:34",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "11191:6:34",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "11202:4:34",
														"type": ""
													}
												],
												"src": "10988:570:34"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "11732:637:34",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "11742:12:34",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "11752:2:34",
																"type": "",
																"value": "32"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "11746:2:34",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "11763:32:34",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "11781:9:34"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "11792:2:34"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "11777:3:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "11777:18:34"
															},
															"variables": [
																{
																	"name": "tail_1",
																	"nodeType": "YulTypedName",
																	"src": "11767:6:34",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "11811:9:34"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "11822:2:34"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11804:6:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "11804:21:34"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11804:21:34"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "11834:17:34",
															"value": {
																"name": "tail_1",
																"nodeType": "YulIdentifier",
																"src": "11845:6:34"
															},
															"variables": [
																{
																	"name": "pos",
																	"nodeType": "YulTypedName",
																	"src": "11838:3:34",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "11860:27:34",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "11880:6:34"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "11874:5:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "11874:13:34"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "11864:6:34",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "tail_1",
																		"nodeType": "YulIdentifier",
																		"src": "11903:6:34"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "11911:6:34"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11896:6:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "11896:22:34"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11896:22:34"
														},
														{
															"nodeType": "YulAssignment",
															"src": "11927:25:34",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "11938:9:34"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11949:2:34",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "11934:3:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "11934:18:34"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "11927:3:34"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "11961:54:34",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11983:9:34"
																			},
																			{
																				"arguments": [
																					{
																						"name": "length",
																						"nodeType": "YulIdentifier",
																						"src": "11998:6:34"
																					},
																					{
																						"name": "_1",
																						"nodeType": "YulIdentifier",
																						"src": "12006:2:34"
																					}
																				],
																				"functionName": {
																					"name": "mul",
																					"nodeType": "YulIdentifier",
																					"src": "11994:3:34"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "11994:15:34"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11979:3:34"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11979:31:34"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12012:2:34",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "11975:3:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "11975:40:34"
															},
															"variables": [
																{
																	"name": "tail_2",
																	"nodeType": "YulTypedName",
																	"src": "11965:6:34",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "12024:29:34",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "12042:6:34"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "12050:2:34"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "12038:3:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "12038:15:34"
															},
															"variables": [
																{
																	"name": "srcPtr",
																	"nodeType": "YulTypedName",
																	"src": "12028:6:34",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "12062:13:34",
															"value": {
																"name": "tail",
																"nodeType": "YulIdentifier",
																"src": "12071:4:34"
															},
															"variables": [
																{
																	"name": "i",
																	"nodeType": "YulTypedName",
																	"src": "12066:1:34",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "12133:207:34",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "pos",
																					"nodeType": "YulIdentifier",
																					"src": "12154:3:34"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "tail_2",
																									"nodeType": "YulIdentifier",
																									"src": "12167:6:34"
																								},
																								{
																									"name": "headStart",
																									"nodeType": "YulIdentifier",
																									"src": "12175:9:34"
																								}
																							],
																							"functionName": {
																								"name": "sub",
																								"nodeType": "YulIdentifier",
																								"src": "12163:3:34"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "12163:22:34"
																						},
																						{
																							"arguments": [
																								{
																									"kind": "number",
																									"nodeType": "YulLiteral",
																									"src": "12191:2:34",
																									"type": "",
																									"value": "63"
																								}
																							],
																							"functionName": {
																								"name": "not",
																								"nodeType": "YulIdentifier",
																								"src": "12187:3:34"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "12187:7:34"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "12159:3:34"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "12159:36:34"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "12147:6:34"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "12147:49:34"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "12147:49:34"
																	},
																	{
																		"nodeType": "YulAssignment",
																		"src": "12209:51:34",
																		"value": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "srcPtr",
																							"nodeType": "YulIdentifier",
																							"src": "12244:6:34"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nodeType": "YulIdentifier",
																						"src": "12238:5:34"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "12238:13:34"
																				},
																				{
																					"name": "tail_2",
																					"nodeType": "YulIdentifier",
																					"src": "12253:6:34"
																				}
																			],
																			"functionName": {
																				"name": "abi_encode_t_bytes",
																				"nodeType": "YulIdentifier",
																				"src": "12219:18:34"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "12219:41:34"
																		},
																		"variableNames": [
																			{
																				"name": "tail_2",
																				"nodeType": "YulIdentifier",
																				"src": "12209:6:34"
																			}
																		]
																	},
																	{
																		"nodeType": "YulAssignment",
																		"src": "12273:25:34",
																		"value": {
																			"arguments": [
																				{
																					"name": "srcPtr",
																					"nodeType": "YulIdentifier",
																					"src": "12287:6:34"
																				},
																				{
																					"name": "_1",
																					"nodeType": "YulIdentifier",
																					"src": "12295:2:34"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "12283:3:34"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "12283:15:34"
																		},
																		"variableNames": [
																			{
																				"name": "srcPtr",
																				"nodeType": "YulIdentifier",
																				"src": "12273:6:34"
																			}
																		]
																	},
																	{
																		"nodeType": "YulAssignment",
																		"src": "12311:19:34",
																		"value": {
																			"arguments": [
																				{
																					"name": "pos",
																					"nodeType": "YulIdentifier",
																					"src": "12322:3:34"
																				},
																				{
																					"name": "_1",
																					"nodeType": "YulIdentifier",
																					"src": "12327:2:34"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "12318:3:34"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "12318:12:34"
																		},
																		"variableNames": [
																			{
																				"name": "pos",
																				"nodeType": "YulIdentifier",
																				"src": "12311:3:34"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "12095:1:34"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "12098:6:34"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "12092:2:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "12092:13:34"
															},
															"nodeType": "YulForLoop",
															"post": {
																"nodeType": "YulBlock",
																"src": "12106:18:34",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "12108:14:34",
																		"value": {
																			"arguments": [
																				{
																					"name": "i",
																					"nodeType": "YulIdentifier",
																					"src": "12117:1:34"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "12120:1:34",
																					"type": "",
																					"value": "1"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "12113:3:34"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "12113:9:34"
																		},
																		"variableNames": [
																			{
																				"name": "i",
																				"nodeType": "YulIdentifier",
																				"src": "12108:1:34"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nodeType": "YulBlock",
																"src": "12088:3:34",
																"statements": []
															},
															"src": "12084:256:34"
														},
														{
															"nodeType": "YulAssignment",
															"src": "12349:14:34",
															"value": {
																"name": "tail_2",
																"nodeType": "YulIdentifier",
																"src": "12357:6:34"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "12349:4:34"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr__to_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "11701:9:34",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "11712:6:34",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "11723:4:34",
														"type": ""
													}
												],
												"src": "11563:806:34"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "12495:100:34",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "12512:9:34"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12523:2:34",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "12505:6:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "12505:21:34"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12505:21:34"
														},
														{
															"nodeType": "YulAssignment",
															"src": "12535:54:34",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "12562:6:34"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "12574:9:34"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "12585:2:34",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "12570:3:34"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12570:18:34"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_bytes",
																	"nodeType": "YulIdentifier",
																	"src": "12543:18:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "12543:46:34"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "12535:4:34"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "12464:9:34",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "12475:6:34",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "12486:4:34",
														"type": ""
													}
												],
												"src": "12374:221:34"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "12774:168:34",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "12791:9:34"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12802:2:34",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "12784:6:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "12784:21:34"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12784:21:34"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "12825:9:34"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "12836:2:34",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "12821:3:34"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12821:18:34"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12841:2:34",
																		"type": "",
																		"value": "18"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "12814:6:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "12814:30:34"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12814:30:34"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "12864:9:34"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "12875:2:34",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "12860:3:34"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12860:18:34"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "12880:20:34",
																		"type": "",
																		"value": "Too much requested"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "12853:6:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "12853:48:34"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12853:48:34"
														},
														{
															"nodeType": "YulAssignment",
															"src": "12910:26:34",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "12922:9:34"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12933:2:34",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "12918:3:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "12918:18:34"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "12910:4:34"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_a5c1362ddf12293b907d8907d79f16e40792a7ddc4f09ee6d70cfec4ad443305__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "12751:9:34",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "12765:4:34",
														"type": ""
													}
												],
												"src": "12600:342:34"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "13121:169:34",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "13138:9:34"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "13149:2:34",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "13131:6:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "13131:21:34"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13131:21:34"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "13172:9:34"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "13183:2:34",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "13168:3:34"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13168:18:34"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "13188:2:34",
																		"type": "",
																		"value": "19"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "13161:6:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "13161:30:34"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13161:30:34"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "13211:9:34"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "13222:2:34",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "13207:3:34"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13207:18:34"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "13227:21:34",
																		"type": "",
																		"value": "Too little received"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "13200:6:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "13200:49:34"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13200:49:34"
														},
														{
															"nodeType": "YulAssignment",
															"src": "13258:26:34",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "13270:9:34"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "13281:2:34",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "13266:3:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "13266:18:34"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "13258:4:34"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_f037a9cbca9be03859489f289f0cf5f85c0414bbfdd9785bc7ab31bd734e249c__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "13098:9:34",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "13112:4:34",
														"type": ""
													}
												],
												"src": "12947:343:34"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "13464:305:34",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "13481:9:34"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "13492:2:34",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "13474:6:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "13474:21:34"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13474:21:34"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "13504:33:34",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "13530:6:34"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "13524:5:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "13524:13:34"
															},
															"variables": [
																{
																	"name": "memberValue0",
																	"nodeType": "YulTypedName",
																	"src": "13508:12:34",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "13557:9:34"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "13568:2:34",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "13553:3:34"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13553:18:34"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "13573:4:34",
																		"type": "",
																		"value": "0x40"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "13546:6:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "13546:32:34"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13546:32:34"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "13587:66:34",
															"value": {
																"arguments": [
																	{
																		"name": "memberValue0",
																		"nodeType": "YulIdentifier",
																		"src": "13620:12:34"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "13638:9:34"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "13649:2:34",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "13634:3:34"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13634:18:34"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_bytes",
																	"nodeType": "YulIdentifier",
																	"src": "13601:18:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "13601:52:34"
															},
															"variables": [
																{
																	"name": "tail_1",
																	"nodeType": "YulTypedName",
																	"src": "13591:6:34",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "13673:9:34"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "13684:4:34",
																				"type": "",
																				"value": "0x40"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "13669:3:34"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13669:20:34"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"name": "value0",
																								"nodeType": "YulIdentifier",
																								"src": "13705:6:34"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "13713:2:34",
																								"type": "",
																								"value": "32"
																							}
																						],
																						"functionName": {
																							"name": "add",
																							"nodeType": "YulIdentifier",
																							"src": "13701:3:34"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "13701:15:34"
																					}
																				],
																				"functionName": {
																					"name": "mload",
																					"nodeType": "YulIdentifier",
																					"src": "13695:5:34"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "13695:22:34"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "13727:3:34",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "13732:1:34",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nodeType": "YulIdentifier",
																							"src": "13723:3:34"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "13723:11:34"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "13736:1:34",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nodeType": "YulIdentifier",
																					"src": "13719:3:34"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "13719:19:34"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "13691:3:34"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13691:48:34"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "13662:6:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "13662:78:34"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13662:78:34"
														},
														{
															"nodeType": "YulAssignment",
															"src": "13749:14:34",
															"value": {
																"name": "tail_1",
																"nodeType": "YulIdentifier",
																"src": "13757:6:34"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "13749:4:34"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_struct$_SwapCallbackData_$1394_memory_ptr__to_t_struct$_SwapCallbackData_$1394_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "13433:9:34",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "13444:6:34",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "13455:4:34",
														"type": ""
													}
												],
												"src": "13295:474:34"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "13875:76:34",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "13885:26:34",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "13897:9:34"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "13908:2:34",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "13893:3:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "13893:18:34"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "13885:4:34"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "13927:9:34"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "13938:6:34"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "13920:6:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "13920:25:34"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13920:25:34"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "13844:9:34",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "13855:6:34",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "13866:4:34",
														"type": ""
													}
												],
												"src": "13774:177:34"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "14050:439:34",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "14060:51:34",
															"value": {
																"arguments": [
																	{
																		"name": "ptr_to_tail",
																		"nodeType": "YulIdentifier",
																		"src": "14099:11:34"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "14086:12:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "14086:25:34"
															},
															"variables": [
																{
																	"name": "rel_offset_of_tail",
																	"nodeType": "YulTypedName",
																	"src": "14064:18:34",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "14200:22:34",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "addr",
																					"nodeType": "YulIdentifier",
																					"src": "14209:4:34"
																				},
																				{
																					"name": "addr",
																					"nodeType": "YulIdentifier",
																					"src": "14215:4:34"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "14202:6:34"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "14202:18:34"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "14202:18:34"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "rel_offset_of_tail",
																				"nodeType": "YulIdentifier",
																				"src": "14134:18:34"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"arguments": [],
																								"functionName": {
																									"name": "calldatasize",
																									"nodeType": "YulIdentifier",
																									"src": "14162:12:34"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "14162:14:34"
																							},
																							{
																								"name": "base_ref",
																								"nodeType": "YulIdentifier",
																								"src": "14178:8:34"
																							}
																						],
																						"functionName": {
																							"name": "sub",
																							"nodeType": "YulIdentifier",
																							"src": "14158:3:34"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "14158:29:34"
																					},
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "14193:2:34",
																								"type": "",
																								"value": "30"
																							}
																						],
																						"functionName": {
																							"name": "not",
																							"nodeType": "YulIdentifier",
																							"src": "14189:3:34"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "14189:7:34"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "14154:3:34"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "14154:43:34"
																			}
																		],
																		"functionName": {
																			"name": "slt",
																			"nodeType": "YulIdentifier",
																			"src": "14130:3:34"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "14130:68:34"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "14123:6:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "14123:76:34"
															},
															"nodeType": "YulIf",
															"src": "14120:2:34"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "14231:47:34",
															"value": {
																"arguments": [
																	{
																		"name": "base_ref",
																		"nodeType": "YulIdentifier",
																		"src": "14249:8:34"
																	},
																	{
																		"name": "rel_offset_of_tail",
																		"nodeType": "YulIdentifier",
																		"src": "14259:18:34"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "14245:3:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "14245:33:34"
															},
															"variables": [
																{
																	"name": "addr_1",
																	"nodeType": "YulTypedName",
																	"src": "14235:6:34",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "14287:30:34",
															"value": {
																"arguments": [
																	{
																		"name": "addr_1",
																		"nodeType": "YulIdentifier",
																		"src": "14310:6:34"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "14297:12:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "14297:20:34"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nodeType": "YulIdentifier",
																	"src": "14287:6:34"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "14360:22:34",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "addr",
																					"nodeType": "YulIdentifier",
																					"src": "14369:4:34"
																				},
																				{
																					"name": "addr",
																					"nodeType": "YulIdentifier",
																					"src": "14375:4:34"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "14362:6:34"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "14362:18:34"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "14362:18:34"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "14332:6:34"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "14340:18:34",
																		"type": "",
																		"value": "0xffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "14329:2:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "14329:30:34"
															},
															"nodeType": "YulIf",
															"src": "14326:2:34"
														},
														{
															"nodeType": "YulAssignment",
															"src": "14391:25:34",
															"value": {
																"arguments": [
																	{
																		"name": "addr_1",
																		"nodeType": "YulIdentifier",
																		"src": "14403:6:34"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "14411:4:34",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "14399:3:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "14399:17:34"
															},
															"variableNames": [
																{
																	"name": "addr",
																	"nodeType": "YulIdentifier",
																	"src": "14391:4:34"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "14467:16:34",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "14476:1:34",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "14479:1:34",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "14469:6:34"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "14469:12:34"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "14469:12:34"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "addr",
																		"nodeType": "YulIdentifier",
																		"src": "14432:4:34"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [],
																				"functionName": {
																					"name": "calldatasize",
																					"nodeType": "YulIdentifier",
																					"src": "14442:12:34"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "14442:14:34"
																			},
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "14458:6:34"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "14438:3:34"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "14438:27:34"
																	}
																],
																"functionName": {
																	"name": "sgt",
																	"nodeType": "YulIdentifier",
																	"src": "14428:3:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "14428:38:34"
															},
															"nodeType": "YulIf",
															"src": "14425:2:34"
														}
													]
												},
												"name": "access_calldata_tail_t_bytes_calldata_ptr",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "base_ref",
														"nodeType": "YulTypedName",
														"src": "14007:8:34",
														"type": ""
													},
													{
														"name": "ptr_to_tail",
														"nodeType": "YulTypedName",
														"src": "14017:11:34",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "addr",
														"nodeType": "YulTypedName",
														"src": "14033:4:34",
														"type": ""
													},
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "14039:6:34",
														"type": ""
													}
												],
												"src": "13956:533:34"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "14538:198:34",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "14548:19:34",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "14564:2:34",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "14558:5:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "14558:9:34"
															},
															"variableNames": [
																{
																	"name": "memPtr",
																	"nodeType": "YulIdentifier",
																	"src": "14548:6:34"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "14576:35:34",
															"value": {
																"arguments": [
																	{
																		"name": "memPtr",
																		"nodeType": "YulIdentifier",
																		"src": "14598:6:34"
																	},
																	{
																		"name": "size",
																		"nodeType": "YulIdentifier",
																		"src": "14606:4:34"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "14594:3:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "14594:17:34"
															},
															"variables": [
																{
																	"name": "newFreePtr",
																	"nodeType": "YulTypedName",
																	"src": "14580:10:34",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "14686:13:34",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "invalid",
																				"nodeType": "YulIdentifier",
																				"src": "14688:7:34"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "14688:9:34"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "14688:9:34"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "newFreePtr",
																				"nodeType": "YulIdentifier",
																				"src": "14629:10:34"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "14641:18:34",
																				"type": "",
																				"value": "0xffffffffffffffff"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "14626:2:34"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "14626:34:34"
																	},
																	{
																		"arguments": [
																			{
																				"name": "newFreePtr",
																				"nodeType": "YulIdentifier",
																				"src": "14665:10:34"
																			},
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "14677:6:34"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nodeType": "YulIdentifier",
																			"src": "14662:2:34"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "14662:22:34"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "14623:2:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "14623:62:34"
															},
															"nodeType": "YulIf",
															"src": "14620:2:34"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "14715:2:34",
																		"type": "",
																		"value": "64"
																	},
																	{
																		"name": "newFreePtr",
																		"nodeType": "YulIdentifier",
																		"src": "14719:10:34"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "14708:6:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "14708:22:34"
															},
															"nodeType": "YulExpressionStatement",
															"src": "14708:22:34"
														}
													]
												},
												"name": "allocateMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "size",
														"nodeType": "YulTypedName",
														"src": "14518:4:34",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "14527:6:34",
														"type": ""
													}
												],
												"src": "14494:242:34"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "14800:122:34",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "14844:13:34",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "invalid",
																				"nodeType": "YulIdentifier",
																				"src": "14846:7:34"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "14846:9:34"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "14846:9:34"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "14816:6:34"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "14824:18:34",
																		"type": "",
																		"value": "0xffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "14813:2:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "14813:30:34"
															},
															"nodeType": "YulIf",
															"src": "14810:2:34"
														},
														{
															"nodeType": "YulAssignment",
															"src": "14866:50:34",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "length",
																						"nodeType": "YulIdentifier",
																						"src": "14886:6:34"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "14894:4:34",
																						"type": "",
																						"value": "0x1f"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "14882:3:34"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "14882:17:34"
																			},
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "14905:2:34",
																						"type": "",
																						"value": "31"
																					}
																				],
																				"functionName": {
																					"name": "not",
																					"nodeType": "YulIdentifier",
																					"src": "14901:3:34"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "14901:7:34"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "14878:3:34"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "14878:31:34"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "14911:4:34",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "14874:3:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "14874:42:34"
															},
															"variableNames": [
																{
																	"name": "size",
																	"nodeType": "YulIdentifier",
																	"src": "14866:4:34"
																}
															]
														}
													]
												},
												"name": "array_allocation_size_t_bytes",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "14780:6:34",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "size",
														"nodeType": "YulTypedName",
														"src": "14791:4:34",
														"type": ""
													}
												],
												"src": "14741:181:34"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "14980:205:34",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "14990:10:34",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "14999:1:34",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "i",
																	"nodeType": "YulTypedName",
																	"src": "14994:1:34",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "15059:63:34",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "dst",
																							"nodeType": "YulIdentifier",
																							"src": "15084:3:34"
																						},
																						{
																							"name": "i",
																							"nodeType": "YulIdentifier",
																							"src": "15089:1:34"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "15080:3:34"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "15080:11:34"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "src",
																									"nodeType": "YulIdentifier",
																									"src": "15103:3:34"
																								},
																								{
																									"name": "i",
																									"nodeType": "YulIdentifier",
																									"src": "15108:1:34"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "15099:3:34"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "15099:11:34"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nodeType": "YulIdentifier",
																						"src": "15093:5:34"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "15093:18:34"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "15073:6:34"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "15073:39:34"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "15073:39:34"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "15020:1:34"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "15023:6:34"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "15017:2:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "15017:13:34"
															},
															"nodeType": "YulForLoop",
															"post": {
																"nodeType": "YulBlock",
																"src": "15031:19:34",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "15033:15:34",
																		"value": {
																			"arguments": [
																				{
																					"name": "i",
																					"nodeType": "YulIdentifier",
																					"src": "15042:1:34"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "15045:2:34",
																					"type": "",
																					"value": "32"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "15038:3:34"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "15038:10:34"
																		},
																		"variableNames": [
																			{
																				"name": "i",
																				"nodeType": "YulIdentifier",
																				"src": "15033:1:34"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nodeType": "YulBlock",
																"src": "15013:3:34",
																"statements": []
															},
															"src": "15009:113:34"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "15148:31:34",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "dst",
																							"nodeType": "YulIdentifier",
																							"src": "15161:3:34"
																						},
																						{
																							"name": "length",
																							"nodeType": "YulIdentifier",
																							"src": "15166:6:34"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "15157:3:34"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "15157:16:34"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "15175:1:34",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "15150:6:34"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "15150:27:34"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "15150:27:34"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "15137:1:34"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "15140:6:34"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "15134:2:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "15134:13:34"
															},
															"nodeType": "YulIf",
															"src": "15131:2:34"
														}
													]
												},
												"name": "copy_memory_to_memory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "src",
														"nodeType": "YulTypedName",
														"src": "14958:3:34",
														"type": ""
													},
													{
														"name": "dst",
														"nodeType": "YulTypedName",
														"src": "14963:3:34",
														"type": ""
													},
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "14968:6:34",
														"type": ""
													}
												],
												"src": "14927:258:34"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "15237:86:34",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "15301:16:34",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "15310:1:34",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "15313:1:34",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "15303:6:34"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "15303:12:34"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "15303:12:34"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "15260:5:34"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "15271:5:34"
																					},
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "15286:3:34",
																										"type": "",
																										"value": "160"
																									},
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "15291:1:34",
																										"type": "",
																										"value": "1"
																									}
																								],
																								"functionName": {
																									"name": "shl",
																									"nodeType": "YulIdentifier",
																									"src": "15282:3:34"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "15282:11:34"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "15295:1:34",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "sub",
																							"nodeType": "YulIdentifier",
																							"src": "15278:3:34"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "15278:19:34"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "15267:3:34"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "15267:31:34"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "15257:2:34"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "15257:42:34"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "15250:6:34"
																},
																"nodeType": "YulFunctionCall",
																"src": "15250:50:34"
															},
															"nodeType": "YulIf",
															"src": "15247:2:34"
														}
													]
												},
												"name": "validator_revert_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "15226:5:34",
														"type": ""
													}
												],
												"src": "15190:133:34"
											}
										]
									},
									"contents": "{\n    { }\n    function abi_decode_t_address(offset) -> value\n    {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n    function abi_decode_t_bytes(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(array, array) }\n        let _1 := calldataload(offset)\n        let array_1 := allocateMemory(array_allocation_size_t_bytes(_1))\n        mstore(array_1, _1)\n        if gt(add(add(offset, _1), 0x20), end) { revert(array, array) }\n        calldatacopy(add(array_1, 0x20), add(offset, 0x20), _1)\n        mstore(add(add(array_1, _1), 0x20), array)\n        array := array_1\n    }\n    function abi_decode_t_struct$_ExactInputSingleParams_calldata(offset, end) -> value\n    {\n        if slt(sub(end, offset), 256) { revert(value, value) }\n        value := offset\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        let value := calldataload(headStart)\n        validator_revert_t_address(value)\n        value0 := value\n    }\n    function abi_decode_tuple_t_addresst_uint256t_address(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(value1, value1) }\n        let value := calldataload(headStart)\n        validator_revert_t_address(value)\n        value0 := value\n        value1 := calldataload(add(headStart, 32))\n        let value_1 := calldataload(add(headStart, 64))\n        validator_revert_t_address(value_1)\n        value2 := value_1\n    }\n    function abi_decode_tuple_t_addresst_uint256t_addresst_uint256t_address(headStart, dataEnd) -> value0, value1, value2, value3, value4\n    {\n        if slt(sub(dataEnd, headStart), 160) { revert(value4, value4) }\n        let value := calldataload(headStart)\n        validator_revert_t_address(value)\n        value0 := value\n        value1 := calldataload(add(headStart, 32))\n        let value_1 := calldataload(add(headStart, 64))\n        validator_revert_t_address(value_1)\n        value2 := value_1\n        value3 := calldataload(add(headStart, 96))\n        let value_2 := calldataload(add(headStart, 128))\n        validator_revert_t_address(value_2)\n        value4 := value_2\n    }\n    function abi_decode_tuple_t_addresst_uint256t_uint256t_uint8t_bytes32t_bytes32(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5\n    {\n        if slt(sub(dataEnd, headStart), 192) { revert(value5, value5) }\n        let value := calldataload(headStart)\n        validator_revert_t_address(value)\n        value0 := value\n        value1 := calldataload(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n        let value_1 := calldataload(add(headStart, 96))\n        if iszero(eq(value_1, and(value_1, 0xff))) { revert(value5, value5) }\n        value3 := value_1\n        value4 := calldataload(add(headStart, 128))\n        value5 := calldataload(add(headStart, 160))\n    }\n    function abi_decode_tuple_t_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(value0, value0) }\n        let _2 := add(headStart, offset)\n        if iszero(slt(add(_2, 0x1f), dataEnd)) { revert(value0, value0) }\n        let length := calldataload(_2)\n        if gt(length, _1) { revert(value0, value0) }\n        if gt(add(add(_2, mul(length, 32)), 32), dataEnd) { revert(value0, value0) }\n        value0 := add(_2, 32)\n        value1 := length\n    }\n    function abi_decode_tuple_t_int256t_int256_fromMemory(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(value0, value0) }\n        value0 := mload(headStart)\n        value1 := mload(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_int256t_int256t_bytes_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(value2, value2) }\n        value0 := calldataload(headStart)\n        value1 := calldataload(add(headStart, 32))\n        let offset := calldataload(add(headStart, 64))\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(value2, value2) }\n        let _2 := add(headStart, offset)\n        if iszero(slt(add(_2, 0x1f), dataEnd)) { revert(value2, value2) }\n        let length := calldataload(_2)\n        if gt(length, _1) { revert(value2, value2) }\n        if gt(add(add(_2, length), 32), dataEnd) { revert(value2, value2) }\n        value2 := add(_2, 32)\n        value3 := length\n    }\n    function abi_decode_tuple_t_string_memory_ptr_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        let offset := mload(headStart)\n        if gt(offset, 0xffffffffffffffff) { revert(value0, value0) }\n        let _1 := add(headStart, offset)\n        if iszero(slt(add(_1, 0x1f), dataEnd)) { revert(value0, value0) }\n        let _2 := mload(_1)\n        let array := allocateMemory(array_allocation_size_t_bytes(_2))\n        mstore(array, _2)\n        if gt(add(add(_1, _2), 32), dataEnd) { revert(value0, value0) }\n        copy_memory_to_memory(add(_1, 32), add(array, 32), _2)\n        value0 := array\n    }\n    function abi_decode_tuple_t_struct$_ExactInputParams_$2879_memory_ptr(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(value0, value0) }\n        let _2 := add(headStart, offset)\n        if slt(sub(dataEnd, _2), 0xa0) { revert(value0, value0) }\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, 0xa0)\n        if or(gt(newFreePtr, _1), lt(newFreePtr, memPtr)) { invalid() }\n        mstore(64, newFreePtr)\n        let offset_1 := calldataload(_2)\n        if gt(offset_1, _1) { revert(value0, value0) }\n        mstore(memPtr, abi_decode_t_bytes(add(_2, offset_1), dataEnd))\n        mstore(add(memPtr, 32), abi_decode_t_address(add(_2, 32)))\n        mstore(add(memPtr, 64), calldataload(add(_2, 64)))\n        mstore(add(memPtr, 96), calldataload(add(_2, 96)))\n        mstore(add(memPtr, 128), calldataload(add(_2, 128)))\n        value0 := memPtr\n    }\n    function abi_decode_tuple_t_struct$_ExactInputSingleParams_$2860_calldata_ptr(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 256) { revert(value0, value0) }\n        value0 := abi_decode_t_struct$_ExactInputSingleParams_calldata(headStart, dataEnd)\n    }\n    function abi_decode_tuple_t_struct$_ExactOutputParams_$2923_calldata_ptr(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        let offset := calldataload(headStart)\n        if gt(offset, 0xffffffffffffffff) { revert(value0, value0) }\n        let _1 := add(headStart, offset)\n        if slt(sub(dataEnd, _1), 160) { revert(value0, value0) }\n        value0 := _1\n    }\n    function abi_decode_tuple_t_struct$_ExactOutputSingleParams_$2904_calldata_ptr(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 256) { revert(value0, value0) }\n        value0 := abi_decode_t_struct$_ExactInputSingleParams_calldata(headStart, dataEnd)\n    }\n    function abi_decode_tuple_t_struct$_SwapCallbackData_$1394_memory_ptr(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(value0, value0) }\n        let _2 := add(headStart, offset)\n        if slt(sub(dataEnd, _2), 0x40) { revert(value0, value0) }\n        let memPtr := mload(0x40)\n        let newFreePtr := add(memPtr, 0x40)\n        if or(gt(newFreePtr, _1), lt(newFreePtr, memPtr)) { invalid() }\n        mstore(0x40, newFreePtr)\n        let offset_1 := calldataload(_2)\n        if gt(offset_1, _1) { revert(value0, value0) }\n        mstore(memPtr, abi_decode_t_bytes(add(_2, offset_1), dataEnd))\n        let value := calldataload(add(_2, 32))\n        validator_revert_t_address(value)\n        mstore(add(memPtr, 32), value)\n        value0 := memPtr\n    }\n    function abi_decode_tuple_t_uint160(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        let value := calldataload(headStart)\n        validator_revert_t_address(value)\n        value0 := value\n    }\n    function abi_decode_tuple_t_uint24(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        let value := calldataload(headStart)\n        if iszero(eq(value, and(value, 0xffffff))) { revert(value0, value0) }\n        value0 := value\n    }\n    function abi_decode_tuple_t_uint256t_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(value0, value0) }\n        value0 := calldataload(headStart)\n        let value := calldataload(add(headStart, 32))\n        validator_revert_t_address(value)\n        value1 := value\n    }\n    function abi_decode_tuple_t_uint256t_addresst_uint256t_address(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(value2, value2) }\n        value0 := calldataload(headStart)\n        let value := calldataload(add(headStart, 32))\n        validator_revert_t_address(value)\n        value1 := value\n        value2 := calldataload(add(headStart, 64))\n        let value_1 := calldataload(add(headStart, 96))\n        validator_revert_t_address(value_1)\n        value3 := value_1\n    }\n    function abi_encode_t_bytes(value, pos) -> end\n    {\n        let length := mload(value)\n        mstore(pos, length)\n        copy_memory_to_memory(add(value, 0x20), add(pos, 0x20), length)\n        end := add(add(pos, and(add(length, 31), not(31))), 0x20)\n    }\n    function abi_encode_tuple_packed_t_address_t_uint24_t_address__to_t_address_t_uint24_t_address__nonPadded_inplace_fromStack_reversed(pos, value2, value1, value0) -> end\n    {\n        let _1 := not(0xffffffffffffffffffffffff)\n        mstore(pos, and(shl(96, value0), _1))\n        mstore(add(pos, 20), and(shl(232, value1), shl(232, 16777215)))\n        mstore(add(pos, 23), and(shl(96, value2), _1))\n        end := add(pos, 43)\n    }\n    function abi_encode_tuple_packed_t_bytes_calldata_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value1, value0) -> end\n    {\n        calldatacopy(pos, value0, value1)\n        let _1 := add(pos, value1)\n        mstore(_1, end)\n        end := _1\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_address_t_bool_t_int256_t_uint160_t_bytes_memory_ptr__to_t_address_t_bool_t_int256_t_uint160_t_bytes_memory_ptr__fromStack_reversed(headStart, value4, value3, value2, value1, value0) -> tail\n    {\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), iszero(iszero(value1)))\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), and(value3, _1))\n        mstore(add(headStart, 128), 160)\n        tail := abi_encode_t_bytes(value4, add(headStart, 160))\n    }\n    function abi_encode_tuple_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr__to_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        let _1 := 32\n        let tail_1 := add(headStart, _1)\n        mstore(headStart, _1)\n        let pos := tail_1\n        let length := mload(value0)\n        mstore(tail_1, length)\n        pos := add(headStart, 64)\n        let tail_2 := add(add(headStart, mul(length, _1)), 64)\n        let srcPtr := add(value0, _1)\n        let i := tail\n        for { } lt(i, length) { i := add(i, 1) }\n        {\n            mstore(pos, add(sub(tail_2, headStart), not(63)))\n            tail_2 := abi_encode_t_bytes(mload(srcPtr), tail_2)\n            srcPtr := add(srcPtr, _1)\n            pos := add(pos, _1)\n        }\n        tail := tail_2\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        tail := abi_encode_t_bytes(value0, add(headStart, 32))\n    }\n    function abi_encode_tuple_t_stringliteral_a5c1362ddf12293b907d8907d79f16e40792a7ddc4f09ee6d70cfec4ad443305__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 18)\n        mstore(add(headStart, 64), \"Too much requested\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_f037a9cbca9be03859489f289f0cf5f85c0414bbfdd9785bc7ab31bd734e249c__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 19)\n        mstore(add(headStart, 64), \"Too little received\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_struct$_SwapCallbackData_$1394_memory_ptr__to_t_struct$_SwapCallbackData_$1394_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        let memberValue0 := mload(value0)\n        mstore(add(headStart, 32), 0x40)\n        let tail_1 := abi_encode_t_bytes(memberValue0, add(headStart, 96))\n        mstore(add(headStart, 0x40), and(mload(add(value0, 32)), sub(shl(160, 1), 1)))\n        tail := tail_1\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function access_calldata_tail_t_bytes_calldata_ptr(base_ref, ptr_to_tail) -> addr, length\n    {\n        let rel_offset_of_tail := calldataload(ptr_to_tail)\n        if iszero(slt(rel_offset_of_tail, add(sub(calldatasize(), base_ref), not(30)))) { revert(addr, addr) }\n        let addr_1 := add(base_ref, rel_offset_of_tail)\n        length := calldataload(addr_1)\n        if gt(length, 0xffffffffffffffff) { revert(addr, addr) }\n        addr := add(addr_1, 0x20)\n        if sgt(addr, sub(calldatasize(), length)) { revert(0, 0) }\n    }\n    function allocateMemory(size) -> memPtr\n    {\n        memPtr := mload(64)\n        let newFreePtr := add(memPtr, size)\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { invalid() }\n        mstore(64, newFreePtr)\n    }\n    function array_allocation_size_t_bytes(length) -> size\n    {\n        if gt(length, 0xffffffffffffffff) { invalid() }\n        size := add(and(add(length, 0x1f), not(31)), 0x20)\n    }\n    function copy_memory_to_memory(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        if gt(i, length) { mstore(add(dst, length), 0) }\n    }\n    function validator_revert_t_address(value)\n    {\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n}",
									"id": 34,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {
								"2079": [
									{
										"length": 32,
										"start": 2979
									},
									{
										"length": 32,
										"start": 4254
									},
									{
										"length": 32,
										"start": 6326
									}
								],
								"2083": [
									{
										"length": 32,
										"start": 274
									},
									{
										"length": 32,
										"start": 1223
									},
									{
										"length": 32,
										"start": 1458
									},
									{
										"length": 32,
										"start": 1599
									},
									{
										"length": 32,
										"start": 1663
									},
									{
										"length": 32,
										"start": 1898
									},
									{
										"length": 32,
										"start": 5921
									},
									{
										"length": 32,
										"start": 5991
									},
									{
										"length": 32,
										"start": 6107
									}
								]
							},
							"linkReferences": {},
							"object": "",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x102 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xC04B8D59 GT PUSH2 0x95 JUMPI DUP1 PUSH4 0xDF2AB5BB GT PUSH2 0x64 JUMPI DUP1 PUSH4 0xDF2AB5BB EQ PUSH2 0x284 JUMPI DUP1 PUSH4 0xE0E189A0 EQ PUSH2 0x297 JUMPI DUP1 PUSH4 0xF28C0498 EQ PUSH2 0x2AA JUMPI DUP1 PUSH4 0xF3995C67 EQ PUSH2 0x2BD JUMPI DUP1 PUSH4 0xFA461E33 EQ PUSH2 0x2D0 JUMPI PUSH2 0x172 JUMP JUMPDEST DUP1 PUSH4 0xC04B8D59 EQ PUSH2 0x236 JUMPI DUP1 PUSH4 0xC2E3140A EQ PUSH2 0x249 JUMPI DUP1 PUSH4 0xC45A0155 EQ PUSH2 0x25C JUMPI DUP1 PUSH4 0xDB3E2198 EQ PUSH2 0x271 JUMPI PUSH2 0x172 JUMP JUMPDEST DUP1 PUSH4 0x4AA4A4FC GT PUSH2 0xD1 JUMPI DUP1 PUSH4 0x4AA4A4FC EQ PUSH2 0x1CE JUMPI DUP1 PUSH4 0x9B2C0A37 EQ PUSH2 0x1F0 JUMPI DUP1 PUSH4 0xA4A78F0C EQ PUSH2 0x203 JUMPI DUP1 PUSH4 0xAC9650D8 EQ PUSH2 0x216 JUMPI PUSH2 0x172 JUMP JUMPDEST DUP1 PUSH4 0x12210E8A EQ PUSH2 0x177 JUMPI DUP1 PUSH4 0x414BF389 EQ PUSH2 0x17F JUMPI DUP1 PUSH4 0x4659A494 EQ PUSH2 0x1A8 JUMPI DUP1 PUSH4 0x49404B7C EQ PUSH2 0x1BB JUMPI PUSH2 0x172 JUMP JUMPDEST CALLDATASIZE PUSH2 0x172 JUMPI CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND EQ PUSH2 0x170 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x9 PUSH1 0x24 DUP3 ADD MSTORE PUSH9 0x4E6F74205745544839 PUSH1 0xB8 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST STOP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x170 PUSH2 0x2F0 JUMP JUMPDEST PUSH2 0x192 PUSH2 0x18D CALLDATASIZE PUSH1 0x4 PUSH2 0x222A JUMP JUMPDEST PUSH2 0x302 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x19F SWAP2 SWAP1 PUSH2 0x2583 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x170 PUSH2 0x1B6 CALLDATASIZE PUSH1 0x4 PUSH2 0x1FA8 JUMP JUMPDEST PUSH2 0x429 JUMP JUMPDEST PUSH2 0x170 PUSH2 0x1C9 CALLDATASIZE PUSH1 0x4 PUSH2 0x2331 JUMP JUMPDEST PUSH2 0x4C3 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1DA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1E3 PUSH2 0x63D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x19F SWAP2 SWAP1 PUSH2 0x2420 JUMP JUMPDEST PUSH2 0x170 PUSH2 0x1FE CALLDATASIZE PUSH1 0x4 PUSH2 0x2360 JUMP JUMPDEST PUSH2 0x661 JUMP JUMPDEST PUSH2 0x170 PUSH2 0x211 CALLDATASIZE PUSH1 0x4 PUSH2 0x1FA8 JUMP JUMPDEST PUSH2 0x82D JUMP JUMPDEST PUSH2 0x229 PUSH2 0x224 CALLDATASIZE PUSH1 0x4 PUSH2 0x2008 JUMP JUMPDEST PUSH2 0x8BE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x19F SWAP2 SWAP1 PUSH2 0x247A JUMP JUMPDEST PUSH2 0x192 PUSH2 0x244 CALLDATASIZE PUSH1 0x4 PUSH2 0x217F JUMP JUMPDEST PUSH2 0x9FE JUMP JUMPDEST PUSH2 0x170 PUSH2 0x257 CALLDATASIZE PUSH1 0x4 PUSH2 0x1FA8 JUMP JUMPDEST PUSH2 0xB12 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x268 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1E3 PUSH2 0xBA1 JUMP JUMPDEST PUSH2 0x192 PUSH2 0x27F CALLDATASIZE PUSH1 0x4 PUSH2 0x222A JUMP JUMPDEST PUSH2 0xBC5 JUMP JUMPDEST PUSH2 0x170 PUSH2 0x292 CALLDATASIZE PUSH1 0x4 PUSH2 0x1F09 JUMP JUMPDEST PUSH2 0xCEC JUMP JUMPDEST PUSH2 0x170 PUSH2 0x2A5 CALLDATASIZE PUSH1 0x4 PUSH2 0x1F4A JUMP JUMPDEST PUSH2 0xDCA JUMP JUMPDEST PUSH2 0x192 PUSH2 0x2B8 CALLDATASIZE PUSH1 0x4 PUSH2 0x2246 JUMP JUMPDEST PUSH2 0xEF1 JUMP JUMPDEST PUSH2 0x170 PUSH2 0x2CB CALLDATASIZE PUSH1 0x4 PUSH2 0x1FA8 JUMP JUMPDEST PUSH2 0xFE7 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2DC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x170 PUSH2 0x2EB CALLDATASIZE PUSH1 0x4 PUSH2 0x209A JUMP JUMPDEST PUSH2 0x1059 JUMP JUMPDEST SELFBALANCE ISZERO PUSH2 0x300 JUMPI PUSH2 0x300 CALLER SELFBALANCE PUSH2 0x116C JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x80 ADD CALLDATALOAD DUP1 PUSH2 0x312 PUSH2 0x125B JUMP JUMPDEST GT ISZERO PUSH2 0x35B JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH19 0x151C985B9CD858DD1A5BDB881D1BDBC81BDB19 PUSH1 0x6A SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH2 0x3F4 PUSH1 0xA0 DUP5 ADD CALLDATALOAD PUSH2 0x373 PUSH1 0x80 DUP7 ADD PUSH1 0x60 DUP8 ADD PUSH2 0x1EE6 JUMP JUMPDEST PUSH2 0x384 PUSH2 0x100 DUP8 ADD PUSH1 0xE0 DUP9 ADD PUSH2 0x1EE6 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE DUP1 PUSH2 0x39C PUSH1 0x20 DUP11 ADD DUP11 PUSH2 0x1EE6 JUMP JUMPDEST PUSH2 0x3AC PUSH1 0x60 DUP12 ADD PUSH1 0x40 DUP13 ADD PUSH2 0x230E JUMP JUMPDEST PUSH2 0x3BC PUSH1 0x40 DUP13 ADD PUSH1 0x20 DUP14 ADD PUSH2 0x1EE6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x3CE SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x23D5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP PUSH2 0x125F JUMP JUMPDEST SWAP2 POP DUP3 PUSH1 0xC0 ADD CALLDATALOAD DUP3 LT ISZERO PUSH2 0x423 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x41A SWAP1 PUSH2 0x2519 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH4 0x23F2EBC3 PUSH1 0xE2 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE ADDRESS PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP8 SWAP1 MSTORE PUSH1 0x64 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x84 DUP3 ADD MSTORE PUSH1 0xFF DUP6 AND PUSH1 0xA4 DUP3 ADD MSTORE PUSH1 0xC4 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0xE4 DUP2 ADD DUP4 SWAP1 MSTORE SWAP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND SWAP2 PUSH4 0x8FCBAF0C SWAP2 PUSH2 0x104 DUP1 DUP4 ADD SWAP3 PUSH1 0x0 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP4 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4A3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x4B7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x70A08231 ADDRESS PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x532 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x546 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x55C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP1 POP DUP3 DUP2 LT ISZERO PUSH2 0x5AA JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x12 PUSH1 0x24 DUP3 ADD MSTORE PUSH18 0x496E73756666696369656E74205745544839 PUSH1 0x70 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST DUP1 ISZERO PUSH2 0x638 JUMPI PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x2E1A7D4D DUP3 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x616 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x62A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH2 0x638 DUP3 DUP3 PUSH2 0x116C JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x0 DUP3 GT DUP1 ISZERO PUSH2 0x672 JUMPI POP PUSH1 0x64 DUP3 GT ISZERO JUMPDEST PUSH2 0x67B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x70A08231 ADDRESS PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x6EA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x6FE JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x714 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP1 POP DUP5 DUP2 LT ISZERO PUSH2 0x762 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x12 PUSH1 0x24 DUP3 ADD MSTORE PUSH18 0x496E73756666696369656E74205745544839 PUSH1 0x70 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST DUP1 ISZERO PUSH2 0x826 JUMPI PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x2E1A7D4D DUP3 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x7CE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x7E2 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x0 PUSH2 0x2710 PUSH2 0x7FE DUP6 DUP5 PUSH2 0x13B1 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP2 PUSH2 0x805 JUMPI INVALID JUMPDEST DIV SWAP1 POP DUP1 ISZERO PUSH2 0x818 JUMPI PUSH2 0x818 DUP4 DUP3 PUSH2 0x116C JUMP JUMPDEST PUSH2 0x824 DUP6 DUP3 DUP5 SUB PUSH2 0x116C JUMP JUMPDEST POP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH4 0x6EB1769F PUSH1 0xE1 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE ADDRESS PUSH1 0x24 DUP3 ADD MSTORE SWAP1 MLOAD PUSH1 0x0 NOT SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND SWAP2 PUSH4 0xDD62ED3E SWAP2 PUSH1 0x44 DUP1 DUP3 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x87E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x892 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x8A8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD LT ISZERO PUSH2 0x824 JUMPI PUSH2 0x824 DUP7 DUP7 DUP7 DUP7 DUP7 DUP7 PUSH2 0x429 JUMP JUMPDEST PUSH1 0x60 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x8D7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x90B JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x8F6 JUMPI SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x9F7 JUMPI PUSH1 0x0 DUP1 ADDRESS DUP7 DUP7 DUP6 DUP2 DUP2 LT PUSH2 0x929 JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x93B SWAP2 SWAP1 PUSH2 0x258C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x949 SWAP3 SWAP2 SWAP1 PUSH2 0x2410 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS DELEGATECALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x984 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x989 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 PUSH2 0x9D5 JUMPI PUSH1 0x44 DUP2 MLOAD LT ISZERO PUSH2 0x9A2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x4 DUP2 ADD SWAP1 POP DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x9BC SWAP2 SWAP1 PUSH2 0x2115 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x41A SWAP2 SWAP1 PUSH2 0x24DA JUMP JUMPDEST DUP1 DUP5 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x9E2 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP POP PUSH1 0x1 ADD PUSH2 0x911 JUMP JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x40 ADD MLOAD DUP1 PUSH2 0xA0E PUSH2 0x125B JUMP JUMPDEST GT ISZERO PUSH2 0xA57 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH19 0x151C985B9CD858DD1A5BDB881D1BDBC81BDB19 PUSH1 0x6A SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST CALLER JUMPDEST PUSH1 0x0 PUSH2 0xA68 DUP6 PUSH1 0x0 ADD MLOAD PUSH2 0x13DB JUMP JUMPDEST SWAP1 POP PUSH2 0xAB4 DUP6 PUSH1 0x60 ADD MLOAD DUP3 PUSH2 0xA81 JUMPI DUP7 PUSH1 0x20 ADD MLOAD PUSH2 0xA83 JUMP JUMPDEST ADDRESS JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH2 0xA9D DUP12 PUSH1 0x0 ADD MLOAD PUSH2 0x13E7 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP PUSH2 0x125F JUMP JUMPDEST PUSH1 0x60 DUP7 ADD MSTORE DUP1 ISZERO PUSH2 0xAD4 JUMPI DUP5 MLOAD ADDRESS SWAP3 POP PUSH2 0xACD SWAP1 PUSH2 0x13F6 JUMP JUMPDEST DUP6 MSTORE PUSH2 0xAE1 JUMP JUMPDEST DUP5 PUSH1 0x60 ADD MLOAD SWAP4 POP POP PUSH2 0xAE7 JUMP JUMPDEST POP PUSH2 0xA59 JUMP JUMPDEST DUP4 PUSH1 0x80 ADD MLOAD DUP4 LT ISZERO PUSH2 0xB0B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x41A SWAP1 PUSH2 0x2519 JUMP JUMPDEST POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH4 0x6EB1769F PUSH1 0xE1 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE ADDRESS PUSH1 0x24 DUP3 ADD MSTORE SWAP1 MLOAD DUP7 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND SWAP2 PUSH4 0xDD62ED3E SWAP2 PUSH1 0x44 DUP1 DUP3 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xB61 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xB75 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xB8B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD LT ISZERO PUSH2 0x824 JUMPI PUSH2 0x824 DUP7 DUP7 DUP7 DUP7 DUP7 DUP7 PUSH2 0xFE7 JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x80 ADD CALLDATALOAD DUP1 PUSH2 0xBD5 PUSH2 0x125B JUMP JUMPDEST GT ISZERO PUSH2 0xC1E JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH19 0x151C985B9CD858DD1A5BDB881D1BDBC81BDB19 PUSH1 0x6A SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH2 0xCBA PUSH1 0xA0 DUP5 ADD CALLDATALOAD PUSH2 0xC36 PUSH1 0x80 DUP7 ADD PUSH1 0x60 DUP8 ADD PUSH2 0x1EE6 JUMP JUMPDEST PUSH2 0xC47 PUSH2 0x100 DUP8 ADD PUSH1 0xE0 DUP9 ADD PUSH2 0x1EE6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 DUP9 PUSH1 0x20 ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0xC65 SWAP2 SWAP1 PUSH2 0x1EE6 JUMP JUMPDEST PUSH2 0xC75 PUSH1 0x60 DUP12 ADD PUSH1 0x40 DUP13 ADD PUSH2 0x230E JUMP JUMPDEST PUSH2 0xC82 PUSH1 0x20 DUP13 ADD DUP13 PUSH2 0x1EE6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xC94 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x23D5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP PUSH2 0x140D JUMP JUMPDEST SWAP2 POP DUP3 PUSH1 0xC0 ADD CALLDATALOAD DUP3 GT ISZERO PUSH2 0xCE0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x41A SWAP1 PUSH2 0x24ED JUMP JUMPDEST POP PUSH1 0x0 NOT PUSH1 0x0 SSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x70A08231 ADDRESS PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xD3B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xD4F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xD65 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP1 POP DUP3 DUP2 LT ISZERO PUSH2 0xDB3 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x12 PUSH1 0x24 DUP3 ADD MSTORE PUSH18 0x24B739BAB33334B1B4B2B73A103A37B5B2B7 PUSH1 0x71 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST DUP1 ISZERO PUSH2 0xDC4 JUMPI PUSH2 0xDC4 DUP5 DUP4 DUP4 PUSH2 0x1588 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 GT DUP1 ISZERO PUSH2 0xDDB JUMPI POP PUSH1 0x64 DUP3 GT ISZERO JUMPDEST PUSH2 0xDE4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x70A08231 ADDRESS PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xE33 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xE47 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xE5D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP1 POP DUP5 DUP2 LT ISZERO PUSH2 0xEAB JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x12 PUSH1 0x24 DUP3 ADD MSTORE PUSH18 0x24B739BAB33334B1B4B2B73A103A37B5B2B7 PUSH1 0x71 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST DUP1 ISZERO PUSH2 0x824 JUMPI PUSH1 0x0 PUSH2 0x2710 PUSH2 0xEC0 DUP4 DUP7 PUSH2 0x13B1 JUMP JUMPDEST DUP2 PUSH2 0xEC7 JUMPI INVALID JUMPDEST DIV SWAP1 POP DUP1 ISZERO PUSH2 0xEDB JUMPI PUSH2 0xEDB DUP8 DUP5 DUP4 PUSH2 0x1588 JUMP JUMPDEST PUSH2 0xEE8 DUP8 DUP7 DUP4 DUP6 SUB PUSH2 0x1588 JUMP JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x40 ADD CALLDATALOAD DUP1 PUSH2 0xF01 PUSH2 0x125B JUMP JUMPDEST GT ISZERO PUSH2 0xF4A JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH19 0x151C985B9CD858DD1A5BDB881D1BDBC81BDB19 PUSH1 0x6A SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH2 0xFBD PUSH1 0x60 DUP5 ADD CALLDATALOAD PUSH2 0xF62 PUSH1 0x40 DUP7 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x1EE6 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 SWAP1 DUP1 PUSH2 0xF7A DUP10 DUP1 PUSH2 0x258C JUMP JUMPDEST DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP POP POP SWAP1 DUP3 MSTORE POP CALLER PUSH1 0x20 SWAP1 SWAP2 ADD MSTORE PUSH2 0x140D JUMP JUMPDEST POP PUSH1 0x0 SLOAD SWAP2 POP DUP3 PUSH1 0x80 ADD CALLDATALOAD DUP3 GT ISZERO PUSH2 0xCE0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x41A SWAP1 PUSH2 0x24ED JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH4 0xD505ACCF PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE ADDRESS PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP8 SWAP1 MSTORE PUSH1 0x64 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0xFF DUP6 AND PUSH1 0x84 DUP3 ADD MSTORE PUSH1 0xA4 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0xC4 DUP2 ADD DUP4 SWAP1 MSTORE SWAP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND SWAP2 PUSH4 0xD505ACCF SWAP2 PUSH1 0xE4 DUP1 DUP4 ADD SWAP3 PUSH1 0x0 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP4 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4A3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP5 SGT DUP1 PUSH2 0x1068 JUMPI POP PUSH1 0x0 DUP4 SGT JUMPDEST PUSH2 0x1071 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x107F DUP3 DUP5 ADD DUP5 PUSH2 0x227E JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x1093 DUP5 PUSH1 0x0 ADD MLOAD PUSH2 0x16CF JUMP JUMPDEST SWAP3 POP SWAP3 POP SWAP3 POP PUSH2 0x10C5 PUSH32 0x0 DUP5 DUP5 DUP5 PUSH2 0x1700 JUMP JUMPDEST POP PUSH1 0x0 DUP1 PUSH1 0x0 DUP11 SGT PUSH2 0x10EC JUMPI DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND LT DUP10 PUSH2 0x1103 JUMP JUMPDEST DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND LT DUP11 JUMPDEST SWAP2 POP SWAP2 POP DUP2 ISZERO PUSH2 0x1122 JUMPI PUSH2 0x111D DUP6 DUP8 PUSH1 0x20 ADD MLOAD CALLER DUP5 PUSH2 0x171F JUMP JUMPDEST PUSH2 0x4B7 JUMP JUMPDEST DUP6 MLOAD PUSH2 0x112D SWAP1 PUSH2 0x13DB JUMP JUMPDEST ISZERO PUSH2 0x1152 JUMPI DUP6 MLOAD PUSH2 0x113D SWAP1 PUSH2 0x13F6 JUMP JUMPDEST DUP7 MSTORE PUSH2 0x114C DUP2 CALLER PUSH1 0x0 DUP10 PUSH2 0x140D JUMP JUMPDEST POP PUSH2 0x4B7 JUMP JUMPDEST DUP1 PUSH1 0x0 DUP2 SWAP1 SSTORE POP DUP4 SWAP5 POP PUSH2 0x4B7 DUP6 DUP8 PUSH1 0x20 ADD MLOAD CALLER DUP5 PUSH2 0x171F JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 SWAP3 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 DUP4 SWAP1 PUSH1 0x40 MLOAD DUP1 DUP3 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x11B8 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x1F NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0x1199 JUMP JUMPDEST PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB DUP1 NOT DUP3 MLOAD AND DUP2 DUP5 MLOAD AND DUP1 DUP3 OR DUP6 MSTORE POP POP POP POP POP POP SWAP1 POP ADD SWAP2 POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x121A JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x121F JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x638 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3 PUSH1 0x24 DUP3 ADD MSTORE PUSH3 0x535445 PUSH1 0xE8 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST TIMESTAMP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x1273 JUMPI ADDRESS SWAP4 POP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x1285 DUP6 PUSH1 0x0 ADD MLOAD PUSH2 0x16CF JUMP JUMPDEST SWAP2 SWAP5 POP SWAP3 POP SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP4 AND SWAP1 DUP5 AND LT PUSH1 0x0 DUP1 PUSH2 0x12A9 DUP7 DUP7 DUP7 PUSH2 0x18AF JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x128ACB08 DUP12 DUP6 PUSH2 0x12C2 DUP16 PUSH2 0x18ED JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP15 AND ISZERO PUSH2 0x12D7 JUMPI DUP14 PUSH2 0x12FD JUMP JUMPDEST DUP8 PUSH2 0x12F6 JUMPI PUSH20 0xFFFD8963EFD1FC6A506488495D951D5263988D25 PUSH2 0x12FD JUMP JUMPDEST PUSH5 0x1000276A4 JUMPDEST DUP14 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x130E SWAP2 SWAP1 PUSH2 0x2546 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD DUP7 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x133D SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2434 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1356 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x136A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x138E SWAP2 SWAP1 PUSH2 0x2077 JUMP JUMPDEST SWAP2 POP SWAP2 POP DUP3 PUSH2 0x139D JUMPI DUP2 PUSH2 0x139F JUMP JUMPDEST DUP1 JUMPDEST PUSH1 0x0 SUB SWAP12 SWAP11 POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 ISZERO DUP1 PUSH2 0x13CC JUMPI POP POP DUP2 DUP2 MUL DUP2 DUP4 DUP3 DUP2 PUSH2 0x13C9 JUMPI INVALID JUMPDEST DIV EQ JUMPDEST PUSH2 0x13D5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x42 GT ISZERO JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x13D5 DUP3 PUSH1 0x0 PUSH1 0x2B PUSH2 0x1903 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 PUSH2 0x13D5 SWAP1 DUP4 SWAP1 PUSH1 0x17 SWAP1 PUSH1 0x16 NOT ADD PUSH2 0x1903 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x1421 JUMPI ADDRESS SWAP4 POP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x1433 DUP6 PUSH1 0x0 ADD MLOAD PUSH2 0x16CF JUMP JUMPDEST SWAP2 SWAP5 POP SWAP3 POP SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP5 AND SWAP1 DUP4 AND LT PUSH1 0x0 DUP1 PUSH2 0x1457 DUP6 DUP8 DUP7 PUSH2 0x18AF JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x128ACB08 DUP12 DUP6 PUSH2 0x1470 DUP16 PUSH2 0x18ED JUMP JUMPDEST PUSH1 0x0 SUB PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP15 AND ISZERO PUSH2 0x1488 JUMPI DUP14 PUSH2 0x14AE JUMP JUMPDEST DUP8 PUSH2 0x14A7 JUMPI PUSH20 0xFFFD8963EFD1FC6A506488495D951D5263988D25 PUSH2 0x14AE JUMP JUMPDEST PUSH5 0x1000276A4 JUMPDEST DUP14 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x14BF SWAP2 SWAP1 PUSH2 0x2546 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD DUP7 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x14EE SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2434 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1507 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x151B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x153F SWAP2 SWAP1 PUSH2 0x2077 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 DUP4 PUSH2 0x1554 JUMPI DUP2 DUP4 PUSH1 0x0 SUB PUSH2 0x155A JUMP JUMPDEST DUP3 DUP3 PUSH1 0x0 SUB JUMPDEST SWAP1 SWAP9 POP SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 AND PUSH2 0x1579 JUMPI DUP12 DUP2 EQ PUSH2 0x1579 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP POP POP POP POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND PUSH1 0x24 DUP4 ADD MSTORE PUSH1 0x44 DUP1 DUP4 ADD DUP6 SWAP1 MSTORE DUP4 MLOAD DUP1 DUP5 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x64 SWAP1 SWAP3 ADD DUP4 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH4 0xA9059CBB PUSH1 0xE0 SHL OR DUP2 MSTORE SWAP3 MLOAD DUP3 MLOAD PUSH1 0x0 SWAP5 DUP6 SWAP5 SWAP4 DUP10 AND SWAP4 SWAP3 SWAP2 DUP3 SWAP2 SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x1604 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x1F NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0x15E5 JUMP JUMPDEST PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB DUP1 NOT DUP3 MLOAD AND DUP2 DUP5 MLOAD AND DUP1 DUP3 OR DUP6 MSTORE POP POP POP POP POP POP SWAP1 POP ADD SWAP2 POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1666 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x166B JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0x1699 JUMPI POP DUP1 MLOAD ISZERO DUP1 PUSH2 0x1699 JUMPI POP DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x1696 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD JUMPDEST PUSH2 0x826 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2 PUSH1 0x24 DUP3 ADD MSTORE PUSH2 0x14D5 PUSH1 0xF2 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP1 PUSH2 0x16DD DUP5 DUP3 PUSH2 0x1A54 JUMP JUMPDEST SWAP3 POP PUSH2 0x16EA DUP5 PUSH1 0x14 PUSH2 0x1B04 JUMP JUMPDEST SWAP1 POP PUSH2 0x16F7 DUP5 PUSH1 0x17 PUSH2 0x1A54 JUMP JUMPDEST SWAP2 POP SWAP2 SWAP4 SWAP1 SWAP3 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1716 DUP6 PUSH2 0x1711 DUP7 DUP7 DUP7 PUSH2 0x1BAB JUMP JUMPDEST PUSH2 0x1C01 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ DUP1 ISZERO PUSH2 0x1760 JUMPI POP DUP1 SELFBALANCE LT ISZERO JUMPDEST ISZERO PUSH2 0x1882 JUMPI PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD0E30DB0 DUP3 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x17C0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x17D4 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xA9059CBB DUP4 DUP4 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1850 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1864 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x187A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xDC4 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND ADDRESS EQ ISZERO PUSH2 0x18A3 JUMPI PUSH2 0x189E DUP5 DUP4 DUP4 PUSH2 0x1588 JUMP JUMPDEST PUSH2 0xDC4 JUMP JUMPDEST PUSH2 0xDC4 DUP5 DUP5 DUP5 DUP5 PUSH2 0x1C24 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x18E5 PUSH32 0x0 PUSH2 0x18E0 DUP7 DUP7 DUP7 PUSH2 0x1BAB JUMP JUMPDEST PUSH2 0x1D74 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0xFF SHL DUP3 LT PUSH2 0x18FF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP2 DUP3 PUSH1 0x1F ADD LT ISZERO PUSH2 0x194E JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xE PUSH1 0x24 DUP3 ADD MSTORE PUSH14 0x736C6963655F6F766572666C6F77 PUSH1 0x90 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST DUP3 DUP3 DUP5 ADD LT ISZERO PUSH2 0x1996 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xE PUSH1 0x24 DUP3 ADD MSTORE PUSH14 0x736C6963655F6F766572666C6F77 PUSH1 0x90 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST DUP2 DUP4 ADD DUP5 MLOAD LT ISZERO PUSH2 0x19E2 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x11 PUSH1 0x24 DUP3 ADD MSTORE PUSH17 0x736C6963655F6F75744F66426F756E6473 PUSH1 0x78 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x60 DUP3 ISZERO DUP1 ISZERO PUSH2 0x1A01 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x0 DUP3 MSTORE PUSH1 0x20 DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x1A4B JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F DUP5 AND DUP1 ISZERO PUSH1 0x20 MUL DUP2 DUP5 ADD ADD DUP6 DUP2 ADD DUP8 DUP4 ISZERO PUSH1 0x20 MUL DUP5 DUP12 ADD ADD ADD JUMPDEST DUP2 DUP4 LT ISZERO PUSH2 0x1A3A JUMPI DUP1 MLOAD DUP4 MSTORE PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 ADD PUSH2 0x1A22 JUMP JUMPDEST POP POP DUP6 DUP5 MSTORE PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x40 MSTORE POP JUMPDEST POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP3 PUSH1 0x14 ADD LT ISZERO PUSH2 0x1AA3 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x12 PUSH1 0x24 DUP3 ADD MSTORE PUSH18 0x746F416464726573735F6F766572666C6F77 PUSH1 0x70 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST DUP2 PUSH1 0x14 ADD DUP4 MLOAD LT ISZERO PUSH2 0x1AF4 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH21 0x746F416464726573735F6F75744F66426F756E6473 PUSH1 0x58 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST POP ADD PUSH1 0x20 ADD MLOAD PUSH1 0x1 PUSH1 0x60 SHL SWAP1 DIV SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP3 PUSH1 0x3 ADD LT ISZERO PUSH2 0x1B52 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x11 PUSH1 0x24 DUP3 ADD MSTORE PUSH17 0x746F55696E7432345F6F766572666C6F77 PUSH1 0x78 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST DUP2 PUSH1 0x3 ADD DUP4 MLOAD LT ISZERO PUSH2 0x1BA2 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x746F55696E7432345F6F75744F66426F756E6473 PUSH1 0x60 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST POP ADD PUSH1 0x3 ADD MLOAD SWAP1 JUMP JUMPDEST PUSH2 0x1BB3 PUSH2 0x1E58 JUMP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GT ISZERO PUSH2 0x1BD1 JUMPI SWAP2 SWAP3 SWAP2 JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 DUP6 AND DUP2 MSTORE SWAP3 SWAP1 SWAP4 AND PUSH1 0x20 DUP4 ADD MSTORE PUSH3 0xFFFFFF AND SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1C0D DUP4 DUP4 PUSH2 0x1D74 JUMP JUMPDEST SWAP1 POP CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND EQ PUSH2 0x13D5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND PUSH1 0x24 DUP4 ADD MSTORE DUP5 DUP2 AND PUSH1 0x44 DUP4 ADD MSTORE PUSH1 0x64 DUP1 DUP4 ADD DUP6 SWAP1 MSTORE DUP4 MLOAD DUP1 DUP5 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x84 SWAP1 SWAP3 ADD DUP4 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH4 0x23B872DD PUSH1 0xE0 SHL OR DUP2 MSTORE SWAP3 MLOAD DUP3 MLOAD PUSH1 0x0 SWAP5 DUP6 SWAP5 SWAP4 DUP11 AND SWAP4 SWAP3 SWAP2 DUP3 SWAP2 SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x1CA8 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x1F NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0x1C89 JUMP JUMPDEST PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB DUP1 NOT DUP3 MLOAD AND DUP2 DUP5 MLOAD AND DUP1 DUP3 OR DUP6 MSTORE POP POP POP POP POP POP SWAP1 POP ADD SWAP2 POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1D0A JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1D0F JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0x1D3D JUMPI POP DUP1 MLOAD ISZERO DUP1 PUSH2 0x1D3D JUMPI POP DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x1D3A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD JUMPDEST PUSH2 0x824 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3 PUSH1 0x24 DUP3 ADD MSTORE PUSH3 0x29AA23 PUSH1 0xE9 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x20 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND LT PUSH2 0x1D9C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 MLOAD PUSH1 0x20 DUP1 DUP4 ADD MLOAD PUSH1 0x40 SWAP4 DUP5 ADD MLOAD DUP5 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 DUP6 AND DUP2 DUP6 ADD MSTORE SWAP4 SWAP1 SWAP2 AND DUP4 DUP6 ADD MSTORE PUSH3 0xFFFFFF AND PUSH1 0x60 DUP1 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP4 MLOAD DUP1 DUP5 SUB DUP3 ADD DUP2 MSTORE PUSH1 0x80 DUP5 ADD DUP6 MSTORE DUP1 MLOAD SWAP1 DUP4 ADD KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT PUSH1 0xA0 DUP6 ADD MSTORE SWAP5 SWAP1 SHL PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0xA1 DUP4 ADD MSTORE PUSH1 0xB5 DUP3 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH32 0xE34F199B19B2B4F47F68442619D555527D244F78A3297EA89325F843F87B8B54 PUSH1 0xD5 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP3 MLOAD DUP1 DUP4 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0xF5 SWAP1 SWAP2 ADD SWAP1 SWAP2 MSTORE DUP1 MLOAD SWAP2 ADD KECCAK256 SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH2 0x13E2 DUP2 PUSH2 0x264A JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1E93 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1EA6 PUSH2 0x1EA1 DUP3 PUSH2 0x25FC JUMP JUMPDEST PUSH2 0x25D8 JUMP JUMPDEST DUP2 DUP2 MSTORE DUP5 PUSH1 0x20 DUP4 DUP7 ADD ADD GT ISZERO PUSH2 0x1EBA JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 PUSH1 0x20 DUP6 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY SWAP1 DUP2 ADD PUSH1 0x20 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x100 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x423 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1EF7 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1F02 DUP2 PUSH2 0x264A JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1F1D JUMPI DUP2 DUP3 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x1F28 DUP2 PUSH2 0x264A JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH2 0x1F3F DUP2 PUSH2 0x264A JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x1F61 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH2 0x1F6C DUP2 PUSH2 0x264A JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH2 0x1F83 DUP2 PUSH2 0x264A JUMP JUMPDEST SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD SWAP2 POP PUSH1 0x80 DUP7 ADD CALLDATALOAD PUSH2 0x1F9A DUP2 PUSH2 0x264A JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xC0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x1FC0 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP7 CALLDATALOAD PUSH2 0x1FCB DUP2 PUSH2 0x264A JUMP JUMPDEST SWAP6 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD SWAP5 POP PUSH1 0x40 DUP8 ADD CALLDATALOAD SWAP4 POP PUSH1 0x60 DUP8 ADD CALLDATALOAD PUSH1 0xFF DUP2 AND DUP2 EQ PUSH2 0x1FEE JUMPI DUP2 DUP3 REVERT JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP SWAP3 SWAP6 PUSH1 0x80 DUP2 ADD CALLDATALOAD SWAP5 PUSH1 0xA0 SWAP1 SWAP2 ADD CALLDATALOAD SWAP4 POP SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x201A JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x2031 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x2044 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x2052 JUMPI DUP5 DUP6 REVERT JUMPDEST DUP7 PUSH1 0x20 DUP1 DUP4 MUL DUP6 ADD ADD GT ISZERO PUSH2 0x2065 JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH1 0x20 SWAP3 SWAP1 SWAP3 ADD SWAP7 SWAP2 SWAP6 POP SWAP1 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2089 JUMPI DUP2 DUP3 REVERT JUMPDEST POP POP DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD MLOAD SWAP1 SWAP3 SWAP1 SWAP2 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x20AF JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 CALLDATALOAD SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x20D4 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 DUP8 ADD SWAP2 POP DUP8 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x20E7 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x20F5 JUMPI DUP5 DUP6 REVERT JUMPDEST DUP9 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x2106 JUMPI DUP5 DUP6 REVERT JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP POP PUSH1 0x20 ADD SWAP5 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2126 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x213C JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 ADD PUSH1 0x1F DUP2 ADD DUP5 SGT PUSH2 0x214C JUMPI DUP2 DUP3 REVERT JUMPDEST DUP1 MLOAD PUSH2 0x215A PUSH2 0x1EA1 DUP3 PUSH2 0x25FC JUMP JUMPDEST DUP2 DUP2 MSTORE DUP6 PUSH1 0x20 DUP4 DUP6 ADD ADD GT ISZERO PUSH2 0x216E JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x1716 DUP3 PUSH1 0x20 DUP4 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x261E JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2190 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x21A7 JUMPI DUP3 DUP4 REVERT JUMPDEST SWAP1 DUP4 ADD SWAP1 PUSH1 0xA0 DUP3 DUP7 SUB SLT ISZERO PUSH2 0x21BA JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0xA0 DUP2 ADD DUP2 DUP2 LT DUP4 DUP3 GT OR ISZERO PUSH2 0x21CF JUMPI INVALID JUMPDEST PUSH1 0x40 MSTORE DUP3 CALLDATALOAD DUP3 DUP2 GT ISZERO PUSH2 0x21E0 JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH2 0x21EC DUP8 DUP3 DUP7 ADD PUSH2 0x1E83 JUMP JUMPDEST DUP3 MSTORE POP PUSH2 0x21FB PUSH1 0x20 DUP5 ADD PUSH2 0x1E78 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP4 ADD CALLDATALOAD PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP4 ADD CALLDATALOAD PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 DUP4 ADD CALLDATALOAD PUSH1 0x80 DUP3 ADD MSTORE DUP1 SWAP4 POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x100 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x223C JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x1F02 DUP4 DUP4 PUSH2 0x1ED4 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2257 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x226D JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 ADD PUSH1 0xA0 DUP2 DUP6 SUB SLT ISZERO PUSH2 0x1F02 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x228F JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x22A6 JUMPI DUP3 DUP4 REVERT JUMPDEST SWAP1 DUP4 ADD SWAP1 PUSH1 0x40 DUP3 DUP7 SUB SLT ISZERO PUSH2 0x22B9 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x40 DUP2 ADD DUP2 DUP2 LT DUP4 DUP3 GT OR ISZERO PUSH2 0x22CE JUMPI INVALID JUMPDEST PUSH1 0x40 MSTORE DUP3 CALLDATALOAD DUP3 DUP2 GT ISZERO PUSH2 0x22DF JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH2 0x22EB DUP8 DUP3 DUP7 ADD PUSH2 0x1E83 JUMP JUMPDEST DUP3 MSTORE POP PUSH1 0x20 DUP4 ADD CALLDATALOAD SWAP3 POP PUSH2 0x22FE DUP4 PUSH2 0x264A JUMP JUMPDEST PUSH1 0x20 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x231F JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH3 0xFFFFFF DUP2 AND DUP2 EQ PUSH2 0x1F02 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2343 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x2355 DUP2 PUSH2 0x264A JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x2375 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 CALLDATALOAD SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH2 0x2387 DUP2 PUSH2 0x264A JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH2 0x239E DUP2 PUSH2 0x264A JUMP JUMPDEST SWAP4 SWAP7 SWAP3 SWAP6 POP SWAP1 SWAP4 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x23C1 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x261E JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 SWAP4 DUP5 SHL PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF NOT SWAP1 DUP2 AND DUP3 MSTORE PUSH1 0xE8 SWAP4 SWAP1 SWAP4 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE8 SHL SUB NOT AND PUSH1 0x14 DUP3 ADD MSTORE SWAP3 SHL AND PUSH1 0x17 DUP3 ADD MSTORE PUSH1 0x2B ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP5 DUP4 CALLDATACOPY SWAP2 ADD SWAP1 DUP2 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 DUP2 AND DUP3 MSTORE DUP6 ISZERO ISZERO PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP3 ADD DUP6 SWAP1 MSTORE DUP4 AND PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0xA0 PUSH1 0x80 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x246F SWAP1 DUP4 ADD DUP5 PUSH2 0x23A9 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 ADD DUP2 DUP5 MSTORE DUP1 DUP6 MLOAD DUP1 DUP4 MSTORE PUSH1 0x40 DUP7 ADD SWAP2 POP PUSH1 0x40 DUP5 DUP3 MUL DUP8 ADD ADD SWAP3 POP DUP4 DUP8 ADD DUP6 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x24CD JUMPI PUSH1 0x3F NOT DUP9 DUP7 SUB ADD DUP5 MSTORE PUSH2 0x24BB DUP6 DUP4 MLOAD PUSH2 0x23A9 JUMP JUMPDEST SWAP5 POP SWAP3 DUP6 ADD SWAP3 SWAP1 DUP6 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x249F JUMP JUMPDEST POP SWAP3 SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE PUSH2 0x1F02 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x23A9 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x12 SWAP1 DUP3 ADD MSTORE PUSH18 0x151BDBC81B5D58DA081C995C5D595CDD1959 PUSH1 0x72 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x13 SWAP1 DUP3 ADD MSTORE PUSH19 0x151BDBC81B1A5D1D1B19481C9958D95A5D9959 PUSH1 0x6A SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE DUP3 MLOAD PUSH1 0x40 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x2562 PUSH1 0x60 DUP5 ADD DUP3 PUSH2 0x23A9 JUMP JUMPDEST PUSH1 0x20 SWAP5 SWAP1 SWAP5 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x40 SWAP4 SWAP1 SWAP4 ADD SWAP3 SWAP1 SWAP3 MSTORE POP SWAP1 SWAP2 SWAP1 POP JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 CALLDATALOAD PUSH1 0x1E NOT DUP5 CALLDATASIZE SUB ADD DUP2 SLT PUSH2 0x25A2 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP4 ADD DUP1 CALLDATALOAD SWAP2 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x25BC JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH1 0x20 ADD SWAP2 POP CALLDATASIZE DUP2 SWAP1 SUB DUP3 SGT ISZERO PUSH2 0x25D1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x25F4 JUMPI INVALID JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x2610 JUMPI INVALID JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x2639 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x2621 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0xDC4 JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x265F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE2 0x28 0xC2 RETURNDATASIZE 0x2B 0x1F MUL POP MSTORE8 0xB9 BYTE COINBASE REVERT 0xE7 0xF7 PUSH10 0xEC7C402AC322A1F3E84E PUSH24 0xE836D0CC2464736F6C634300070600330000000000000000 ",
							"sourceMap": "775:8340:13:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;439:10:17;-1:-1:-1;;;;;453:5:17;439:19;;431:41;;;;;-1:-1:-1;;;431:41:17;;;;;;;;;;;;-1:-1:-1;;;431:41:17;;;;;;;;;;;;;;;775:8340:13;;;;;1406:160:17;;;:::i;4300:547:13:-;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1325:289:20;;;;;;:::i;:::-;;:::i;524:397:17:-;;;;;;:::i;:::-;;:::i;420:39:16:-;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;553:698:18:-;;;;;;:::i;:::-;;:::i;1652:348:20:-;;;;;;:::i;:::-;;:::i;308:653:15:-;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;4885:1275:13:-;;;;;;:::i;:::-;;:::i;973:314:20:-;;;;;;:::i;:::-;;:::i;328:41:16:-;;;;;;;;;;;;;:::i;7587:732:13:-;;;;;;:::i;:::-;;:::i;966:395:17:-;;;;;;:::i;:::-;;:::i;1303:678:18:-;;;;;;:::i;:::-;;:::i;8357:756:13:-;;;;;;:::i;:::-;;:::i;662:273:20:-;;;;;;:::i;:::-;;:::i;1980:1294:13:-;;;;;;;;;;-1:-1:-1;1980:1294:13;;;;;:::i;:::-;;:::i;1406:160:17:-;1467:21;:25;1463:96;;1494:65;1525:10;1537:21;1494:30;:65::i;:::-;1406:160::o;4300:547:13:-;4472:17;4438:6;:15;;;244:8:19;223:17;:15;:17::i;:::-;:29;;215:61;;;;;-1:-1:-1;;;215:61:19;;;;;;;;;;;;-1:-1:-1;;;215:61:19;;;;;;;;;;;;;;;4517:245:13::1;4549:15;::::0;::::1;;4578:16;::::0;;;::::1;::::0;::::1;;:::i;:::-;4608:24;::::0;;;::::1;::::0;::::1;;:::i;:::-;4646:106;::::0;;;;::::1;::::0;;;;4687:14:::1;;::::0;::::1;:6:::0;:14:::1;:::i;:::-;4703:10;::::0;;;::::1;::::0;::::1;;:::i;:::-;4715:15;::::0;;;::::1;::::0;::::1;;:::i;:::-;4670:61;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;4646:106;;;;4740:10;-1:-1:-1::0;;;;;4646:106:13::1;;;::::0;4517:18:::1;:245::i;:::-;4505:257;;4793:6;:23;;;4780:9;:36;;4772:68;;;;-1:-1:-1::0;;;4772:68:13::1;;;;;;;:::i;:::-;;;;;;;;;4300:547:::0;;;;:::o;1325:289:20:-;1517:90;;;-1:-1:-1;;;1517:90:20;;1551:10;1517:90;;;;1571:4;1517:90;;;;;;;;;;;;;;;;1593:4;1517:90;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1517:33:20;;;;;:90;;;;;-1:-1:-1;;1517:90:20;;;;;;;-1:-1:-1;1517:33:20;:90;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1325:289;;;;;;:::o;524:397:17:-;621:20;651:5;-1:-1:-1;;;;;644:23:17;;676:4;644:38;;;;;;;;;;;;;-1:-1:-1;;;;;644:38:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;644:38:17;;-1:-1:-1;700:29:17;;;;692:60;;;;;-1:-1:-1;;;692:60:17;;;;;;;;;;;;-1:-1:-1;;;692:60:17;;;;;;;;;;;;;;;767:16;;763:152;;806:5;-1:-1:-1;;;;;799:22:17;;822:12;799:36;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;849:55;880:9;891:12;849:30;:55::i;:::-;524:397;;;:::o;420:39:16:-;;;:::o;553:698:18:-;752:1;742:7;:11;:29;;;;;768:3;757:7;:14;;742:29;734:38;;;;;;783:20;813:5;-1:-1:-1;;;;;806:23:18;;838:4;806:38;;;;;;;;;;;;;-1:-1:-1;;;;;806:38:18;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;806:38:18;;-1:-1:-1;862:29:18;;;;854:60;;;;;-1:-1:-1;;;854:60:18;;;;;;;;;;;;-1:-1:-1;;;854:60:18;;;;;;;;;;;;;;;929:16;;925:320;;968:5;-1:-1:-1;;;;;961:22:18;;984:12;961:36;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1011:17;1059:6;1031:25;1048:7;1031:12;:16;;:25;;;;:::i;:::-;:34;;;;;;;-1:-1:-1;1083:13:18;;1079:74;;1098:55;1129:12;1143:9;1098:30;:55::i;:::-;1167:67;1198:9;1224;1209:12;:24;1167:30;:67::i;:::-;925:320;;553:698;;;;;:::o;1652:348:20:-;1861:50;;;-1:-1:-1;;;1861:50:20;;1885:10;1861:50;;;;1905:4;1861:50;;;;;;-1:-1:-1;;1914:17:20;-1:-1:-1;;;;;1861:23:20;;;;;:50;;;;;;;;;;;;;;;:23;:50;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1861:50:20;:70;1857:136;;;1945:48;1963:5;1970;1977:6;1985:1;1988;1991;1945:17;:48::i;308:653:15:-;383:22;439:4;427:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;417:34;;466:9;461:494;481:15;;;461:494;;;518:12;;563:4;582;;587:1;582:7;;;;;;;;;;;;;;;;;;:::i;:::-;555:35;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;517:73;;;;610:7;605:306;;737:2;721:6;:13;:18;717:32;;;741:8;;;717:32;820:4;812:6;808:17;798:27;;878:6;867:28;;;;;;;;;;;;:::i;:::-;860:36;;-1:-1:-1;;;860:36:15;;;;;;;;:::i;605:306::-;938:6;925:7;933:1;925:10;;;;;;;;;;;;;;;;;:19;-1:-1:-1;;498:3:15;;461:494;;;;308:653;;;;:::o;4885:1275:13:-;5043:17;5009:6;:15;;;244:8:19;223:17;:15;:17::i;:::-;:29;;215:61;;;;;-1:-1:-1;;;215:61:19;;;;;;;;;;;;-1:-1:-1;;;215:61:19;;;;;;;;;;;;;;;5092:10:13::1;5150:925;5177:21;5201:30;:6;:11;;;:28;:30::i;:::-;5177:54;;5343:394;5379:6;:15;;;5412:16;:51;;5447:6;:16;;;5412:51;;;5439:4;5412:51;5532:1;5551:172;;;;;;;;5596:26;:6;:11;;;:24;:26::i;:::-;5551:172;;;;5699:5;-1:-1:-1::0;;;;;5551:172:13::1;;;::::0;5343:18:::1;:394::i;:::-;5325:15;::::0;::::1;:412:::0;5807:258;::::1;;;5938:11:::0;;5863:4:::1;::::0;-1:-1:-1;5938:23:13::1;::::0;:21:::1;:23::i;:::-;5924:37:::0;;5807:258:::1;;;6012:6;:15;;;6000:27;;6045:5;;;5807:258;5150:925;;;;6106:6;:23;;;6093:9;:36;;6085:68;;;;-1:-1:-1::0;;;6085:68:13::1;;;;;;;:::i;:::-;286:1:19;4885:1275:13::0;;;;:::o;973:314:20:-;1177:50;;;-1:-1:-1;;;1177:50:20;;1201:10;1177:50;;;;1221:4;1177:50;;;;;;1230:5;;-1:-1:-1;;;;;1177:23:20;;;;;:50;;;;;;;;;;;;;;;:23;:50;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1177:50:20;:58;1173:107;;;1237:43;1248:5;1255;1262:8;1272:1;1275;1278;1237:10;:43::i;328:41:16:-;;;:::o;7587:732:13:-;7761:16;7727:6;:15;;;244:8:19;223:17;:15;:17::i;:::-;:29;;215:61;;;;;-1:-1:-1;;;215:61:19;;;;;;;;;;;;-1:-1:-1;;;215:61:19;;;;;;;;;;;;;;;7860:247:13::1;7893:16;::::0;::::1;;7923;::::0;;;::::1;::::0;::::1;;:::i;:::-;7953:24;::::0;;;::::1;::::0;::::1;;:::i;:::-;7991:106;;;;;;;;8032:6;:15;;;;;;;;;;:::i;:::-;8049:10;::::0;;;::::1;::::0;::::1;;:::i;:::-;8061:14;;::::0;::::1;:6:::0;:14:::1;:::i;:::-;8015:61;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;7991:106;;;;8085:10;-1:-1:-1::0;;;;;7991:106:13::1;;;::::0;7860:19:::1;:247::i;:::-;7849:258;;8138:6;:22;;;8126:8;:34;;8118:65;;;;-1:-1:-1::0;;;8118:65:13::1;;;;;;;:::i;:::-;-1:-1:-1::0;;;8271:14:13::1;:41:::0;7587:732;;-1:-1:-1;7587:732:13:o;966:395:17:-;1107:20;1137:5;-1:-1:-1;;;;;1130:23:17;;1162:4;1130:38;;;;;;;;;;;;;-1:-1:-1;;;;;1130:38:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1130:38:17;;-1:-1:-1;1186:29:17;;;;1178:60;;;;;-1:-1:-1;;;1178:60:17;;;;;;;;;;;;-1:-1:-1;;;1178:60:17;;;;;;;;;;;;;;;1253:16;;1249:106;;1285:59;1313:5;1320:9;1331:12;1285:27;:59::i;:::-;966:395;;;;:::o;1303:678:18:-;1524:1;1514:7;:11;:29;;;;;1540:3;1529:7;:14;;1514:29;1506:38;;;;;;1555:20;1585:5;-1:-1:-1;;;;;1578:23:18;;1610:4;1578:38;;;;;;;;;;;;;-1:-1:-1;;;;;1578:38:18;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1578:38:18;;-1:-1:-1;1634:29:18;;;;1626:60;;;;;-1:-1:-1;;;1626:60:18;;;;;;;;;;;;-1:-1:-1;;;1626:60:18;;;;;;;;;;;;;;;1701:16;;1697:278;;1733:17;1781:6;1753:25;:12;1770:7;1753:16;:25::i;:::-;:34;;;;;;;-1:-1:-1;1805:13:18;;1801:78;;1820:59;1848:5;1855:12;1869:9;1820:27;:59::i;:::-;1893:71;1921:5;1928:9;1954;1939:12;:24;1893:27;:71::i;:::-;1697:278;1303:678;;;;;;:::o;8357:756:13:-;8519:16;8485:6;:15;;;244:8:19;223:17;:15;:17::i;:::-;:29;;215:61;;;;;-1:-1:-1;;;215:61:19;;;;;;;;;;;;-1:-1:-1;;;215:61:19;;;;;;;;;;;;;;;8770:174:13::1;8803:16;::::0;::::1;;8833;::::0;;;::::1;::::0;::::1;;:::i;:::-;8878:56;::::0;;;;::::1;::::0;;;8863:1:::1;::::0;8878:56;8902:11:::1;:6:::0;;:11:::1;:::i;:::-;8878:56;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::1;::::0;;;;-1:-1:-1;;;8878:56:13;;;-1:-1:-1;8922:10:13::1;8878:56;::::0;;::::1;::::0;8770:19:::1;:174::i;:::-;;8966:14;;8955:25;;9010:6;:22;;;8998:8;:34;;8990:65;;;;-1:-1:-1::0;;;8990:65:13::1;;;;;;;:::i;662:273:20:-:0;849:79;;;-1:-1:-1;;;849:79:20;;876:10;849:79;;;;896:4;849:79;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;849:26:20;;;;;:79;;;;;-1:-1:-1;;849:79:20;;;;;;;-1:-1:-1;849:26:20;:79;;;;;;;;;;1980:1294:13;2156:1;2141:12;:16;:36;;;;2176:1;2161:12;:16;2141:36;2133:45;;;;;;2251:28;2282:37;;;;2293:5;2282:37;:::i;:::-;2251:68;;2330:15;2347:16;2365:10;2379:27;:4;:9;;;:25;:27::i;:::-;2329:77;;;;;;2416:66;2450:7;2459;2468:8;2478:3;2416:33;:66::i;:::-;;2494:17;2513:19;2563:1;2548:12;:16;:140;;2657:7;-1:-1:-1;;;;;2646:18:13;:8;-1:-1:-1;;;;;2646:18:13;;2674:12;2548:140;;;2594:8;-1:-1:-1;;;;;2584:18:13;:7;-1:-1:-1;;;;;2584:18:13;;2612:12;2548:140;2493:195;;;;2702:12;2698:570;;;2730:49;2734:7;2743:4;:10;;;2755;2767:11;2730:3;:49::i;:::-;2698:570;;;2866:9;;:28;;:26;:28::i;:::-;2862:396;;;2926:9;;:21;;:19;:21::i;:::-;2914:33;;2965:53;2985:11;2998:10;2914:9;:4;2965:19;:53::i;:::-;;2862:396;;;3074:11;3057:14;:28;;;;3113:8;3103:18;;3194:49;3198:7;3207:4;:10;;;3219;3231:11;3194:3;:49::i;2370:165:33:-;2482:12;;;2442;2482;;;;;;;;;-1:-1:-1;;;;;2460:7:33;;;2475:5;;2460:35;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;2460:35:33;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2441:54;;;2513:7;2505:23;;;;;-1:-1:-1;;;2505:23:33;;;;;;;;;;;;-1:-1:-1;;;2505:23:33;;;;;;;;;;;;;;319:106:14;403:15;319:106;:::o;3328:934:13:-;3505:17;-1:-1:-1;;;;;3601:23:13;;3597:54;;3646:4;3626:25;;3597:54;3663:15;3680:16;3698:10;3712:27;:4;:9;;;:25;:27::i;:::-;3662:77;;-1:-1:-1;3662:77:13;-1:-1:-1;3662:77:13;-1:-1:-1;;;;;;3768:18:13;;;;;;;3750:15;;3844:31;3662:77;;;3844:7;:31::i;:::-;-1:-1:-1;;;;;3844:36:13;;3898:9;3925:10;3953:19;:8;:17;:19::i;:::-;-1:-1:-1;;;;;3990:22:13;;;:157;;4130:17;3990:157;;;4036:10;:70;;4079:27;4036:70;;;4049:27;4036:70;4176:4;4165:16;;;;;;;;:::i;:::-;;;;;;;;;;;;;3844:351;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3797:398;;;;4223:10;:30;;4246:7;4223:30;;;4236:7;4223:30;4221:33;;;3328:934;-1:-1:-1;;;;;;;;;;;3328:934:13:o;986:125:10:-;1044:9;1073:6;;;:30;;-1:-1:-1;;1088:5:10;;;1102:1;1097;1088:5;1097:1;1083:15;;;;;:20;1073:30;1065:39;;;;;;986:125;;;;:::o;992:138:31:-;1083:11;;777:24;-1:-1:-1;1083:40:31;992:138;;;;:::o;2319:127::-;2383:12;2414:25;:4;2425:1;618:23;2414:10;:25::i;2635:149::-;2751:11;;2696:12;;2727:50;;2751:4;;507:20;;-1:-1:-1;;2751:25:31;2727:10;:50::i;6215:1334:13:-;6394:16;-1:-1:-1;;;;;6489:23:13;;6485:54;;6534:4;6514:25;;6485:54;6551:16;6569:15;6586:10;6600:27;:4;:9;;;:25;:27::i;:::-;6550:77;;-1:-1:-1;6550:77:13;-1:-1:-1;6550:77:13;-1:-1:-1;;;;;;6656:18:13;;;;;;;6638:15;;6742:31;6550:77;;;6742:7;:31::i;:::-;-1:-1:-1;;;;;6742:36:13;;6796:9;6823:10;6852:20;:9;:18;:20::i;:::-;6851:21;;-1:-1:-1;;;;;6890:22:13;;;:157;;7030:17;6890:157;;;6936:10;:70;;6979:27;6936:70;;;6949:27;6936:70;7076:4;7065:16;;;;;;;;:::i;:::-;;;;;;;;;;;;;6742:353;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;6685:410;;;;7106:25;7173:10;:134;;7269:12;7293;7292:13;;7173:134;;;7207:12;7231;7230:13;;7173:134;7141:166;;-1:-1:-1;7141:166:13;-1:-1:-1;;;;;;7479:22:13;;7475:67;;7532:9;7511:17;:30;7503:39;;;;;;6215:1334;;;;;;;;;;;;;:::o;1211:309:33:-;1371:59;;;-1:-1:-1;;;;;1371:59:33;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1371:59:33;-1:-1:-1;;;1371:59:33;;;1360:71;;;;1325:12;;;;1360:10;;;;1371:59;1360:71;;;1371:59;1360:71;;1371:59;1360:71;;;;;;;;;;-1:-1:-1;;1360:71:33;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1324:107;;;;1449:7;:57;;;;-1:-1:-1;1461:11:33;;:16;;:44;;;1492:4;1481:24;;;;;;;;;;;;;;;-1:-1:-1;1481:24:33;1461:44;1441:72;;;;;-1:-1:-1;;;1441:72:33;;;;;;;;;;;;-1:-1:-1;;;1441:72:33;;;;;;;;;;;;;;1779:314:31;1883:14;;;1983:17;:4;1883:14;1983;:17::i;:::-;1974:26;-1:-1:-1;2016:24:31;:4;304:2;2016:13;:24::i;:::-;2010:30;-1:-1:-1;2059:27:31;:4;507:20;2059:14;:27::i;:::-;2050:36;;1779:314;;;;;:::o;683:259:30:-;829:19;867:68;882:7;891:43;914:6;922;930:3;891:22;:43::i;:::-;867:14;:68::i;:::-;860:75;683:259;-1:-1:-1;;;;;683:259:30:o;1757:699:17:-;1904:5;-1:-1:-1;;;;;1895:14:17;:5;-1:-1:-1;;;;;1895:14:17;;:48;;;;;1938:5;1913:21;:30;;1895:48;1891:559;;;1996:5;-1:-1:-1;;;;;1989:21:17;;2018:5;1989:37;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2082:5;-1:-1:-1;;;;;2075:22:17;;2098:9;2109:5;2075:40;;;;;;;;;;;;;-1:-1:-1;;;;;2075:40:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1891:559:17;;-1:-1:-1;1891:559:17;;-1:-1:-1;;;;;2136:22:17;;2153:4;2136:22;2132:318;;;2265:52;2293:5;2300:9;2311:5;2265:27;:52::i;:::-;2132:318;;;2376:63;2408:5;2415;2422:9;2433:5;2376:31;:63::i;1602:249:13:-;1715:14;1763:80;1790:7;1799:43;1822:6;1830;1838:3;1799:22;:43::i;:::-;1763:26;:80::i;:::-;1741:103;1602:249;-1:-1:-1;;;;1602:249:13:o;924:121:11:-;976:8;-1:-1:-1;;;1004:1:11;:10;996:19;;;;;;-1:-1:-1;1036:1:11;924:121::o;399:3007:29:-;521:12;569:7;553;563:2;553:12;:23;;545:50;;;;;-1:-1:-1;;;545:50:29;;;;;;;;;;;;-1:-1:-1;;;545:50:29;;;;;;;;;;;;;;;633:6;622:7;613:6;:16;:26;;605:53;;;;;-1:-1:-1;;;605:53:29;;;;;;;;;;;;-1:-1:-1;;;605:53:29;;;;;;;;;;;;;;;702:7;693:6;:16;676:6;:13;:33;;668:63;;;;;-1:-1:-1;;;668:63:29;;;;;;;;;;;;-1:-1:-1;;;668:63:29;;;;;;;;;;;;;;;742:22;805:15;;837:2099;;;;3089:4;3083:11;3070:24;;3287:1;3276:9;3269:20;3339:4;3328:9;3324:20;3318:4;3311:34;798:2565;;837:2099;1031:4;1025:11;1012:24;;1726:2;1717:7;1713:16;2128:9;2121:17;2115:4;2111:28;2099:9;2088;2084:25;2080:60;2180:7;2176:2;2172:16;2448:6;2434:9;2427:17;2421:4;2417:28;2405:9;2397:6;2393:22;2389:57;2385:70;2210:461;2485:3;2481:2;2478:11;2210:461;;;2639:9;;2628:21;;2530:4;2522:13;;;;2566;2210:461;;;-1:-1:-1;;2693:26:29;;;2913:2;2896:11;-1:-1:-1;;2892:25:29;2886:4;2879:39;-1:-1:-1;798:2565:29;-1:-1:-1;3390:9:29;399:3007;-1:-1:-1;;;;399:3007:29:o;3412:416::-;3491:7;3533:6;3518;3527:2;3518:11;:21;;3510:52;;;;;-1:-1:-1;;;3510:52:29;;;;;;;;;;;;-1:-1:-1;;;3510:52:29;;;;;;;;;;;;;;;3597:6;3606:2;3597:11;3580:6;:13;:28;;3572:62;;;;;-1:-1:-1;;;3572:62:29;;;;;;;;;;;;-1:-1:-1;;;3572:62:29;;;;;;;;;;;;;;;-1:-1:-1;3722:30:29;3738:4;3722:30;3716:37;-1:-1:-1;;;3712:71:29;;;3412:416::o;3834:365::-;3912:6;3952;3938;3947:1;3938:10;:20;;3930:50;;;;;-1:-1:-1;;;3930:50:29;;;;;;;;;;;;-1:-1:-1;;;3930:50:29;;;;;;;;;;;;;;;4015:6;4024:1;4015:10;3998:6;:13;:27;;3990:60;;;;;-1:-1:-1;;;3990:60:29;;;;;;;;;;;;-1:-1:-1;;;3990:60:29;;;;;;;;;;;;;;;-1:-1:-1;4127:29:29;4143:3;4127:29;4121:36;;3834:365::o;784:274:32:-;901:14;;:::i;:::-;940:6;-1:-1:-1;;;;;931:15:32;:6;-1:-1:-1;;;;;931:15:32;;927:56;;;968:6;;976;927:56;-1:-1:-1;1000:51:32;;;;;;;;-1:-1:-1;;;;;1000:51:32;;;;;;;;;;;;;;;;;;;;;;;784:274::o;1189:279:30:-;1313:19;1370:44;1397:7;1406;1370:26;:44::i;:::-;1348:67;-1:-1:-1;1433:10:30;-1:-1:-1;;;;;1433:27:30;;;1425:36;;;;;561:358:33;759:69;;;-1:-1:-1;;;;;759:69:33;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;759:69:33;-1:-1:-1;;;759:69:33;;;748:81;;;;701:12;;;;748:10;;;;759:69;748:81;;;759:69;748:81;;759:69;748:81;;;;;;;;;;-1:-1:-1;;748:81:33;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;700:129;;;;847:7;:57;;;;-1:-1:-1;859:11:33;;:16;;:44;;;890:4;879:24;;;;;;;;;;;;;;;-1:-1:-1;879:24:33;859:44;839:73;;;;;-1:-1:-1;;;839:73:33;;;;;;;;;;;;-1:-1:-1;;;839:73:33;;;;;;;;;;;;;;1305:512:32;1389:12;1434:3;:10;;;-1:-1:-1;;;;;1421:23:32;:3;:10;;;-1:-1:-1;;;;;1421:23:32;;1413:32;;;;;;-1:-1:-1;1668:10:32;;1680;;;;;1692:7;;;;;1657:43;;-1:-1:-1;;;;;1657:43:32;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1647:54;;;;;;-1:-1:-1;;;;;;1539:229:32;;;;;;;-1:-1:-1;;1539:229:32;;;;;;;;;;;;241:66;1539:229;;;;;;;;;;;;;;;;;;;;;;;;;1508:278;;;;;;1305:512::o;-1:-1:-1:-;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;14:138:34:-;84:20;;113:33;84:20;113:33;:::i;157:485::-;;254:3;247:4;239:6;235:17;231:27;221:2;;276:5;269;262:20;221:2;316:6;303:20;347:49;362:33;392:2;362:33;:::i;:::-;347:49;:::i;:::-;421:2;412:7;405:19;467:3;460:4;455:2;447:6;443:15;439:26;436:35;433:2;;;488:5;481;474:20;433:2;557;550:4;542:6;538:17;531:4;522:7;518:18;505:55;580:16;;;598:4;576:27;569:42;;;;584:7;211:431;-1:-1:-1;;211:431:34:o;647:182::-;;770:3;761:6;756:3;752:16;748:26;745:2;;;791:5;784;777:20;834:259;;946:2;934:9;925:7;921:23;917:32;914:2;;;967:6;959;952:22;914:2;1011:9;998:23;1030:33;1057:5;1030:33;:::i;:::-;1082:5;904:189;-1:-1:-1;;;904:189:34:o;1098:470::-;;;;1244:2;1232:9;1223:7;1219:23;1215:32;1212:2;;;1265:6;1257;1250:22;1212:2;1309:9;1296:23;1328:33;1355:5;1328:33;:::i;:::-;1380:5;-1:-1:-1;1432:2:34;1417:18;;1404:32;;-1:-1:-1;1488:2:34;1473:18;;1460:32;1501:35;1460:32;1501:35;:::i;:::-;1555:7;1545:17;;;1202:366;;;;;:::o;1573:683::-;;;;;;1753:3;1741:9;1732:7;1728:23;1724:33;1721:2;;;1775:6;1767;1760:22;1721:2;1819:9;1806:23;1838:33;1865:5;1838:33;:::i;:::-;1890:5;-1:-1:-1;1942:2:34;1927:18;;1914:32;;-1:-1:-1;1998:2:34;1983:18;;1970:32;2011:35;1970:32;2011:35;:::i;:::-;2065:7;-1:-1:-1;2119:2:34;2104:18;;2091:32;;-1:-1:-1;2175:3:34;2160:19;;2147:33;2189:35;2147:33;2189:35;:::i;:::-;2243:7;2233:17;;;1711:545;;;;;;;;:::o;2261:709::-;;;;;;;2456:3;2444:9;2435:7;2431:23;2427:33;2424:2;;;2478:6;2470;2463:22;2424:2;2522:9;2509:23;2541:33;2568:5;2541:33;:::i;:::-;2593:5;-1:-1:-1;2645:2:34;2630:18;;2617:32;;-1:-1:-1;2696:2:34;2681:18;;2668:32;;-1:-1:-1;2752:2:34;2737:18;;2724:32;2800:4;2787:18;;2775:31;;2765:2;;2825:6;2817;2810:22;2765:2;2414:556;;;;-1:-1:-1;2414:556:34;;2907:3;2892:19;;2879:33;;2959:3;2944:19;;;2931:33;;-1:-1:-1;2414:556:34;-1:-1:-1;;2414:556:34:o;2975:677::-;;;3133:2;3121:9;3112:7;3108:23;3104:32;3101:2;;;3154:6;3146;3139:22;3101:2;3199:9;3186:23;3228:18;3269:2;3261:6;3258:14;3255:2;;;3290:6;3282;3275:22;3255:2;3333:6;3322:9;3318:22;3308:32;;3378:7;3371:4;3367:2;3363:13;3359:27;3349:2;;3405:6;3397;3390:22;3349:2;3450;3437:16;3476:2;3468:6;3465:14;3462:2;;;3497:6;3489;3482:22;3462:2;3556:7;3551:2;3545;3537:6;3533:15;3529:2;3525:24;3521:33;3518:46;3515:2;;;3582:6;3574;3567:22;3515:2;3618;3610:11;;;;;3640:6;;-1:-1:-1;3091:561:34;;-1:-1:-1;;;;3091:561:34:o;3657:253::-;;;3795:2;3783:9;3774:7;3770:23;3766:32;3763:2;;;3816:6;3808;3801:22;3763:2;-1:-1:-1;;3844:16:34;;3900:2;3885:18;;;3879:25;3844:16;;3879:25;;-1:-1:-1;3753:157:34:o;3915:775::-;;;;;4078:2;4066:9;4057:7;4053:23;4049:32;4046:2;;;4099:6;4091;4084:22;4046:2;4140:9;4127:23;4117:33;;4197:2;4186:9;4182:18;4169:32;4159:42;;4252:2;4241:9;4237:18;4224:32;4275:18;4316:2;4308:6;4305:14;4302:2;;;4337:6;4329;4322:22;4302:2;4380:6;4369:9;4365:22;4355:32;;4425:7;4418:4;4414:2;4410:13;4406:27;4396:2;;4452:6;4444;4437:22;4396:2;4497;4484:16;4523:2;4515:6;4512:14;4509:2;;;4544:6;4536;4529:22;4509:2;4594:7;4589:2;4580:6;4576:2;4572:15;4568:24;4565:37;4562:2;;;4620:6;4612;4605:22;4562:2;4036:654;;;;-1:-1:-1;;4656:2:34;4648:11;;-1:-1:-1;;;4036:654:34:o;4695:676::-;;4828:2;4816:9;4807:7;4803:23;4799:32;4796:2;;;4849:6;4841;4834:22;4796:2;4887:9;4881:16;4920:18;4912:6;4909:30;4906:2;;;4957:6;4949;4942:22;4906:2;4985:22;;5038:4;5030:13;;5026:27;-1:-1:-1;5016:2:34;;5072:6;5064;5057:22;5016:2;5106;5100:9;5131:49;5146:33;5176:2;5146:33;:::i;5131:49::-;5203:2;5196:5;5189:17;5243:7;5238:2;5233;5229;5225:11;5221:20;5218:33;5215:2;;;5269:6;5261;5254:22;5215:2;5287:54;5338:2;5333;5326:5;5322:14;5317:2;5313;5309:11;5287:54;:::i;5376:1042::-;;5522:2;5510:9;5501:7;5497:23;5493:32;5490:2;;;5543:6;5535;5528:22;5490:2;5588:9;5575:23;5617:18;5658:2;5650:6;5647:14;5644:2;;;5679:6;5671;5664:22;5644:2;5707:22;;;;5763:4;5745:16;;;5741:27;5738:2;;;5786:6;5778;5771:22;5738:2;5824;5818:9;5866:4;5858:6;5854:17;5921:6;5909:10;5906:22;5901:2;5889:10;5886:18;5883:46;5880:2;;;5932:9;5880:2;5959;5952:22;5999:16;;6027;;;6024:2;;;6061:6;6053;6046:22;6024:2;6094:46;6132:7;6121:8;6117:2;6113:17;6094:46;:::i;:::-;6086:6;6079:62;;6174:33;6203:2;6199;6195:11;6174:33;:::i;:::-;6169:2;6161:6;6157:15;6150:58;6262:2;6258;6254:11;6241:25;6236:2;6228:6;6224:15;6217:50;6321:2;6317;6313:11;6300:25;6295:2;6287:6;6283:15;6276:50;6381:3;6377:2;6373:12;6360:26;6354:3;6346:6;6342:16;6335:52;6406:6;6396:16;;;;;5480:938;;;;:::o;6423:282::-;;6577:3;6565:9;6556:7;6552:23;6548:33;6545:2;;;6599:6;6591;6584:22;6545:2;6627:72;6691:7;6680:9;6627:72;:::i;6710:427::-;;6859:2;6847:9;6838:7;6834:23;6830:32;6827:2;;;6880:6;6872;6865:22;6827:2;6925:9;6912:23;6958:18;6950:6;6947:30;6944:2;;;6995:6;6987;6980:22;6944:2;7023:22;;7079:3;7061:16;;;7057:26;7054:2;;;7101:6;7093;7086:22;7430:928;;7576:2;7564:9;7555:7;7551:23;7547:32;7544:2;;;7597:6;7589;7582:22;7544:2;7642:9;7629:23;7671:18;7712:2;7704:6;7701:14;7698:2;;;7733:6;7725;7718:22;7698:2;7761:22;;;;7817:4;7799:16;;;7795:27;7792:2;;;7840:6;7832;7825:22;7792:2;7878:4;7872:11;7922:4;7914:6;7910:17;7977:6;7965:10;7962:22;7957:2;7945:10;7942:18;7939:46;7936:2;;;7988:9;7936:2;8015:4;8008:24;8057:16;;8085;;;8082:2;;;8119:6;8111;8104:22;8082:2;8152:46;8190:7;8179:8;8175:2;8171:17;8152:46;:::i;:::-;8144:6;8137:62;;8242:2;8238;8234:11;8221:25;8208:38;;8255:33;8282:5;8255:33;:::i;:::-;8316:2;8304:15;;8297:30;;;;-1:-1:-1;8308:6:34;7534:824;-1:-1:-1;;;7534:824:34:o;8627:294::-;;8738:2;8726:9;8717:7;8713:23;8709:32;8706:2;;;8759:6;8751;8744:22;8706:2;8803:9;8790:23;8853:8;8846:5;8842:20;8835:5;8832:31;8822:2;;8882:6;8874;8867:22;8926:327;;;9055:2;9043:9;9034:7;9030:23;9026:32;9023:2;;;9076:6;9068;9061:22;9023:2;9117:9;9104:23;9094:33;;9177:2;9166:9;9162:18;9149:32;9190:33;9217:5;9190:33;:::i;:::-;9242:5;9232:15;;;9013:240;;;;;:::o;9258:539::-;;;;;9421:3;9409:9;9400:7;9396:23;9392:33;9389:2;;;9443:6;9435;9428:22;9389:2;9484:9;9471:23;9461:33;;9544:2;9533:9;9529:18;9516:32;9557:33;9584:5;9557:33;:::i;:::-;9609:5;-1:-1:-1;9661:2:34;9646:18;;9633:32;;-1:-1:-1;9717:2:34;9702:18;;9689:32;9730:35;9689:32;9730:35;:::i;:::-;9379:418;;;;-1:-1:-1;9379:418:34;;-1:-1:-1;;9379:418:34:o;9802:259::-;;9883:5;9877:12;9910:6;9905:3;9898:19;9926:63;9982:6;9975:4;9970:3;9966:14;9959:4;9952:5;9948:16;9926:63;:::i;:::-;10043:2;10022:15;-1:-1:-1;;10018:29:34;10009:39;;;;10050:4;10005:50;;9853:208;-1:-1:-1;;9853:208:34:o;10066:431::-;10319:2;10315:15;;;-1:-1:-1;;10311:24:34;;;10299:37;;10392:3;10370:16;;;;-1:-1:-1;;;;;;10366:41:34;10361:2;10352:12;;10345:63;10442:15;;10438:24;10433:2;10424:12;;10417:46;10488:2;10479:12;;10239:258::o;10502:273::-;;10685:6;10677;10672:3;10659:33;10711:16;;10736:15;;;10711:16;10649:126;-1:-1:-1;10649:126:34:o;10780:203::-;-1:-1:-1;;;;;10944:32:34;;;;10926:51;;10914:2;10899:18;;10881:102::o;10988:570::-;-1:-1:-1;;;;;11277:15:34;;;11259:34;;11336:14;;11329:22;11324:2;11309:18;;11302:50;11383:2;11368:18;;11361:34;;;11431:15;;11426:2;11411:18;;11404:43;11239:3;11478;11463:19;;11456:32;;;10988:570;;11505:47;;11532:19;;11524:6;11505:47;:::i;:::-;11497:55;11211:347;-1:-1:-1;;;;;;;11211:347:34:o;11563:806::-;;11752:2;11792;11781:9;11777:18;11822:2;11811:9;11804:21;11845:6;11880;11874:13;11911:6;11903;11896:22;11949:2;11938:9;11934:18;11927:25;;12012:2;12006;11998:6;11994:15;11983:9;11979:31;11975:40;11961:54;;12050:2;12042:6;12038:15;12071:4;12084:256;12098:6;12095:1;12092:13;12084:256;;;12191:2;12187:7;12175:9;12167:6;12163:22;12159:36;12154:3;12147:49;12219:41;12253:6;12244;12238:13;12219:41;:::i;:::-;12209:51;-1:-1:-1;12318:12:34;;;;12283:15;;;;12120:1;12113:9;12084:256;;;-1:-1:-1;12357:6:34;;11732:637;-1:-1:-1;;;;;;;11732:637:34:o;12374:221::-;;12523:2;12512:9;12505:21;12543:46;12585:2;12574:9;12570:18;12562:6;12543:46;:::i;12600:342::-;12802:2;12784:21;;;12841:2;12821:18;;;12814:30;-1:-1:-1;;;12875:2:34;12860:18;;12853:48;12933:2;12918:18;;12774:168::o;12947:343::-;13149:2;13131:21;;;13188:2;13168:18;;;13161:30;-1:-1:-1;;;13222:2:34;13207:18;;13200:49;13281:2;13266:18;;13121:169::o;13295:474::-;;13492:2;13481:9;13474:21;13530:6;13524:13;13573:4;13568:2;13557:9;13553:18;13546:32;13601:52;13649:2;13638:9;13634:18;13620:12;13601:52;:::i;:::-;13713:2;13701:15;;;;13695:22;-1:-1:-1;;;;;13691:48:34;13684:4;13669:20;;;;13662:78;;;;-1:-1:-1;13587:66:34;;13464:305;-1:-1:-1;13464:305:34:o;13774:177::-;13920:25;;;13908:2;13893:18;;13875:76::o;13956:533::-;;;14099:11;14086:25;14193:2;14189:7;14178:8;14162:14;14158:29;14154:43;14134:18;14130:68;14120:2;;14215:4;14209;14202:18;14120:2;14245:33;;14297:20;;;-1:-1:-1;14340:18:34;14329:30;;14326:2;;;14375:4;14369;14362:18;14326:2;14411:4;14399:17;;-1:-1:-1;14442:14:34;14438:27;;;14428:38;;14425:2;;;14479:1;14476;14469:12;14425:2;14050:439;;;;;:::o;14494:242::-;14564:2;14558:9;14594:17;;;14641:18;14626:34;;14662:22;;;14623:62;14620:2;;;14688:9;14620:2;14715;14708:22;14538:198;;-1:-1:-1;14538:198:34:o;14741:181::-;;14824:18;14816:6;14813:30;14810:2;;;14846:9;14810:2;-1:-1:-1;14905:2:34;14882:17;-1:-1:-1;;14878:31:34;14911:4;14874:42;;14800:122::o;14927:258::-;14999:1;15009:113;15023:6;15020:1;15017:13;15009:113;;;15099:11;;;15093:18;15080:11;;;15073:39;15045:2;15038:10;15009:113;;;15140:6;15137:1;15134:13;15131:2;;;-1:-1:-1;;15175:1:34;15157:16;;15150:27;14980:205::o;15190:133::-;-1:-1:-1;;;;;15267:31:34;;15257:42;;15247:2;;15313:1;15310;15303:12;15247:2;15237:86;:::o"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "1976000",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"external": {
								"WETH9()": "infinite",
								"exactInput((bytes,address,uint256,uint256,uint256))": "infinite",
								"exactInputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))": "infinite",
								"exactOutput((bytes,address,uint256,uint256,uint256))": "infinite",
								"exactOutputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))": "infinite",
								"factory()": "infinite",
								"multicall(bytes[])": "infinite",
								"refundETH()": "infinite",
								"selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)": "infinite",
								"selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)": "infinite",
								"selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)": "infinite",
								"selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)": "infinite",
								"sweepToken(address,uint256,address)": "infinite",
								"sweepTokenWithFee(address,uint256,address,uint256,address)": "infinite",
								"uniswapV3SwapCallback(int256,int256,bytes)": "infinite",
								"unwrapWETH9(uint256,address)": "infinite",
								"unwrapWETH9WithFee(uint256,address,uint256,address)": "infinite"
							},
							"internal": {
								"exactInputInternal(uint256,address,uint160,struct SwapRouter.SwapCallbackData memory)": "infinite",
								"exactOutputInternal(uint256,address,uint160,struct SwapRouter.SwapCallbackData memory)": "infinite",
								"getPool(address,address,uint24)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 775,
									"end": 9115,
									"name": "PUSH",
									"source": 13,
									"value": "C0"
								},
								{
									"begin": 775,
									"end": 9115,
									"name": "PUSH",
									"source": 13,
									"value": "40"
								},
								{
									"begin": 775,
									"end": 9115,
									"name": "MSTORE",
									"source": 13
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 1338,
									"end": 1395,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 1338,
									"end": 1395,
									"name": "SSTORE",
									"source": 13
								},
								{
									"begin": 1402,
									"end": 1492,
									"name": "CALLVALUE",
									"source": 13
								},
								{
									"begin": 1402,
									"end": 1492,
									"name": "DUP1",
									"source": 13
								},
								{
									"begin": 1402,
									"end": 1492,
									"name": "ISZERO",
									"source": 13
								},
								{
									"begin": 1402,
									"end": 1492,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "1"
								},
								{
									"begin": 1402,
									"end": 1492,
									"name": "JUMPI",
									"source": 13
								},
								{
									"begin": 1402,
									"end": 1492,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 1402,
									"end": 1492,
									"name": "DUP1",
									"source": 13
								},
								{
									"begin": 1402,
									"end": 1492,
									"name": "REVERT",
									"source": 13
								},
								{
									"begin": 1402,
									"end": 1492,
									"name": "tag",
									"source": 13,
									"value": "1"
								},
								{
									"begin": 1402,
									"end": 1492,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 1402,
									"end": 1492,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 1402,
									"end": 1492,
									"name": "PUSH",
									"source": 13,
									"value": "40"
								},
								{
									"begin": 1402,
									"end": 1492,
									"name": "MLOAD",
									"source": 13
								},
								{
									"begin": 1402,
									"end": 1492,
									"name": "PUSHSIZE",
									"source": 13
								},
								{
									"begin": 1402,
									"end": 1492,
									"name": "CODESIZE",
									"source": 13
								},
								{
									"begin": 1402,
									"end": 1492,
									"name": "SUB",
									"source": 13
								},
								{
									"begin": 1402,
									"end": 1492,
									"name": "DUP1",
									"source": 13
								},
								{
									"begin": 1402,
									"end": 1492,
									"name": "PUSHSIZE",
									"source": 13
								},
								{
									"begin": 1402,
									"end": 1492,
									"name": "DUP4",
									"source": 13
								},
								{
									"begin": 1402,
									"end": 1492,
									"name": "CODECOPY",
									"source": 13
								},
								{
									"begin": 1402,
									"end": 1492,
									"name": "DUP2",
									"source": 13
								},
								{
									"begin": 1402,
									"end": 1492,
									"name": "ADD",
									"source": 13
								},
								{
									"begin": 1402,
									"end": 1492,
									"name": "PUSH",
									"source": 13,
									"value": "40"
								},
								{
									"begin": 1402,
									"end": 1492,
									"name": "DUP2",
									"source": 13
								},
								{
									"begin": 1402,
									"end": 1492,
									"name": "SWAP1",
									"source": 13
								},
								{
									"begin": 1402,
									"end": 1492,
									"name": "MSTORE",
									"source": 13
								},
								{
									"begin": 1402,
									"end": 1492,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "2"
								},
								{
									"begin": 1402,
									"end": 1492,
									"name": "SWAP2",
									"source": 13
								},
								{
									"begin": 1402,
									"end": 1492,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "3"
								},
								{
									"begin": 1402,
									"end": 1492,
									"name": "JUMP",
									"source": 13,
									"value": "[in]"
								},
								{
									"begin": 1402,
									"end": 1492,
									"name": "tag",
									"source": 13,
									"value": "2"
								},
								{
									"begin": 1402,
									"end": 1492,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "60"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 522,
									"end": 540,
									"name": "PUSH",
									"source": 16,
									"value": "60"
								},
								{
									"begin": 522,
									"end": 540,
									"name": "SWAP3",
									"source": 16
								},
								{
									"begin": 522,
									"end": 540,
									"name": "DUP4",
									"source": 16
								},
								{
									"begin": 522,
									"end": 540,
									"name": "SHL",
									"source": 16
								},
								{
									"begin": 522,
									"end": 540,
									"name": "DUP2",
									"source": 16
								},
								{
									"begin": 522,
									"end": 540,
									"name": "AND",
									"source": 16
								},
								{
									"begin": 522,
									"end": 540,
									"name": "PUSH",
									"source": 16,
									"value": "80"
								},
								{
									"begin": 522,
									"end": 540,
									"name": "MSTORE",
									"source": 16
								},
								{
									"begin": 550,
									"end": 564,
									"name": "SWAP2",
									"source": 16
								},
								{
									"begin": 550,
									"end": 564,
									"name": "SHL",
									"source": 16
								},
								{
									"begin": 550,
									"end": 564,
									"name": "AND",
									"source": 16
								},
								{
									"begin": 550,
									"end": 564,
									"name": "PUSH",
									"source": 16,
									"value": "A0"
								},
								{
									"begin": 550,
									"end": 564,
									"name": "MSTORE",
									"source": 16
								},
								{
									"begin": 775,
									"end": 9115,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "9"
								},
								{
									"begin": 775,
									"end": 9115,
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 14,
									"end": 193,
									"name": "tag",
									"source": 34,
									"value": "10"
								},
								{
									"begin": 14,
									"end": 193,
									"name": "JUMPDEST",
									"source": 34
								},
								{
									"begin": 95,
									"end": 108,
									"name": "DUP1",
									"source": 34
								},
								{
									"begin": 95,
									"end": 108,
									"name": "MLOAD",
									"source": 34
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 137,
									"end": 168,
									"name": "DUP2",
									"source": 34
								},
								{
									"begin": 137,
									"end": 168,
									"name": "AND",
									"source": 34
								},
								{
									"begin": 127,
									"end": 169,
									"name": "DUP2",
									"source": 34
								},
								{
									"begin": 127,
									"end": 169,
									"name": "EQ",
									"source": 34
								},
								{
									"begin": 117,
									"end": 119,
									"name": "PUSH [tag]",
									"source": 34,
									"value": "12"
								},
								{
									"begin": 117,
									"end": 119,
									"name": "JUMPI",
									"source": 34
								},
								{
									"begin": 183,
									"end": 184,
									"name": "PUSH",
									"source": 34,
									"value": "0"
								},
								{
									"begin": 180,
									"end": 181,
									"name": "DUP1",
									"source": 34
								},
								{
									"begin": 173,
									"end": 185,
									"name": "REVERT",
									"source": 34
								},
								{
									"begin": 117,
									"end": 119,
									"name": "tag",
									"source": 34,
									"value": "12"
								},
								{
									"begin": 117,
									"end": 119,
									"name": "JUMPDEST",
									"source": 34
								},
								{
									"begin": 76,
									"end": 193,
									"name": "SWAP2",
									"source": 34
								},
								{
									"begin": 76,
									"end": 193,
									"name": "SWAP1",
									"source": 34
								},
								{
									"begin": 76,
									"end": 193,
									"name": "POP",
									"source": 34
								},
								{
									"begin": 76,
									"end": 193,
									"name": "JUMP",
									"source": 34,
									"value": "[out]"
								},
								{
									"begin": 198,
									"end": 505,
									"name": "tag",
									"source": 34,
									"value": "3"
								},
								{
									"begin": 198,
									"end": 505,
									"name": "JUMPDEST",
									"source": 34
								},
								{
									"begin": 198,
									"end": 505,
									"name": "PUSH",
									"source": 34,
									"value": "0"
								},
								{
									"begin": 198,
									"end": 505,
									"name": "DUP1",
									"source": 34
								},
								{
									"begin": 338,
									"end": 340,
									"name": "PUSH",
									"source": 34,
									"value": "40"
								},
								{
									"begin": 326,
									"end": 335,
									"name": "DUP4",
									"source": 34
								},
								{
									"begin": 317,
									"end": 324,
									"name": "DUP6",
									"source": 34
								},
								{
									"begin": 313,
									"end": 336,
									"name": "SUB",
									"source": 34
								},
								{
									"begin": 309,
									"end": 341,
									"name": "SLT",
									"source": 34
								},
								{
									"begin": 306,
									"end": 308,
									"name": "ISZERO",
									"source": 34
								},
								{
									"begin": 306,
									"end": 308,
									"name": "PUSH [tag]",
									"source": 34,
									"value": "14"
								},
								{
									"begin": 306,
									"end": 308,
									"name": "JUMPI",
									"source": 34
								},
								{
									"begin": 359,
									"end": 365,
									"name": "DUP2",
									"source": 34
								},
								{
									"begin": 351,
									"end": 357,
									"name": "DUP3",
									"source": 34
								},
								{
									"begin": 344,
									"end": 366,
									"name": "REVERT",
									"source": 34
								},
								{
									"begin": 306,
									"end": 308,
									"name": "tag",
									"source": 34,
									"value": "14"
								},
								{
									"begin": 306,
									"end": 308,
									"name": "JUMPDEST",
									"source": 34
								},
								{
									"begin": 387,
									"end": 429,
									"name": "PUSH [tag]",
									"source": 34,
									"value": "15"
								},
								{
									"begin": 419,
									"end": 428,
									"name": "DUP4",
									"source": 34
								},
								{
									"begin": 387,
									"end": 429,
									"name": "PUSH [tag]",
									"source": 34,
									"value": "10"
								},
								{
									"begin": 387,
									"end": 429,
									"name": "JUMP",
									"source": 34,
									"value": "[in]"
								},
								{
									"begin": 387,
									"end": 429,
									"name": "tag",
									"source": 34,
									"value": "15"
								},
								{
									"begin": 387,
									"end": 429,
									"name": "JUMPDEST",
									"source": 34
								},
								{
									"begin": 377,
									"end": 429,
									"name": "SWAP2",
									"source": 34
								},
								{
									"begin": 377,
									"end": 429,
									"name": "POP",
									"source": 34
								},
								{
									"begin": 448,
									"end": 499,
									"name": "PUSH [tag]",
									"source": 34,
									"value": "16"
								},
								{
									"begin": 495,
									"end": 497,
									"name": "PUSH",
									"source": 34,
									"value": "20"
								},
								{
									"begin": 484,
									"end": 493,
									"name": "DUP5",
									"source": 34
								},
								{
									"begin": 480,
									"end": 498,
									"name": "ADD",
									"source": 34
								},
								{
									"begin": 448,
									"end": 499,
									"name": "PUSH [tag]",
									"source": 34,
									"value": "10"
								},
								{
									"begin": 448,
									"end": 499,
									"name": "JUMP",
									"source": 34,
									"value": "[in]"
								},
								{
									"begin": 448,
									"end": 499,
									"name": "tag",
									"source": 34,
									"value": "16"
								},
								{
									"begin": 448,
									"end": 499,
									"name": "JUMPDEST",
									"source": 34
								},
								{
									"begin": 438,
									"end": 499,
									"name": "SWAP1",
									"source": 34
								},
								{
									"begin": 438,
									"end": 499,
									"name": "POP",
									"source": 34
								},
								{
									"begin": 296,
									"end": 505,
									"name": "SWAP3",
									"source": 34
								},
								{
									"begin": 296,
									"end": 505,
									"name": "POP",
									"source": 34
								},
								{
									"begin": 296,
									"end": 505,
									"name": "SWAP3",
									"source": 34
								},
								{
									"begin": 296,
									"end": 505,
									"name": "SWAP1",
									"source": 34
								},
								{
									"begin": 296,
									"end": 505,
									"name": "POP",
									"source": 34
								},
								{
									"begin": 296,
									"end": 505,
									"name": "JUMP",
									"source": 34,
									"value": "[out]"
								},
								{
									"begin": 296,
									"end": 505,
									"name": "tag",
									"source": 34,
									"value": "9"
								},
								{
									"begin": 296,
									"end": 505,
									"name": "JUMPDEST",
									"source": 34
								},
								{
									"begin": 775,
									"end": 9115,
									"name": "PUSH",
									"source": 13,
									"value": "80"
								},
								{
									"begin": 775,
									"end": 9115,
									"name": "MLOAD",
									"source": 13
								},
								{
									"begin": 775,
									"end": 9115,
									"name": "PUSH",
									"source": 13,
									"value": "60"
								},
								{
									"begin": 775,
									"end": 9115,
									"name": "SHR",
									"source": 13
								},
								{
									"begin": 775,
									"end": 9115,
									"name": "PUSH",
									"source": 13,
									"value": "A0"
								},
								{
									"begin": 775,
									"end": 9115,
									"name": "MLOAD",
									"source": 13
								},
								{
									"begin": 775,
									"end": 9115,
									"name": "PUSH",
									"source": 13,
									"value": "60"
								},
								{
									"begin": 775,
									"end": 9115,
									"name": "SHR",
									"source": 13
								},
								{
									"begin": 775,
									"end": 9115,
									"name": "PUSH #[$]",
									"source": 13,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 775,
									"end": 9115,
									"name": "PUSH [$]",
									"source": 13,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 775,
									"end": 9115,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 775,
									"end": 9115,
									"name": "CODECOPY",
									"source": 13
								},
								{
									"begin": 775,
									"end": 9115,
									"name": "ASSIGNIMMUTABLE",
									"source": 13,
									"value": "2083"
								},
								{
									"begin": 775,
									"end": 9115,
									"name": "ASSIGNIMMUTABLE",
									"source": 13,
									"value": "2079"
								},
								{
									"begin": 775,
									"end": 9115,
									"name": "PUSH #[$]",
									"source": 13,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 775,
									"end": 9115,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 775,
									"end": 9115,
									"name": "RETURN",
									"source": 13
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220e228c23d2b1f025053b91a41fde7f769ec7c402ac322a1f3e84e77e836d0cc2464736f6c63430007060033",
									".code": [
										{
											"begin": 775,
											"end": 9115,
											"name": "PUSH",
											"source": 13,
											"value": "80"
										},
										{
											"begin": 775,
											"end": 9115,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 775,
											"end": 9115,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 775,
											"end": 9115,
											"name": "PUSH",
											"source": 13,
											"value": "4"
										},
										{
											"begin": 775,
											"end": 9115,
											"name": "CALLDATASIZE",
											"source": 13
										},
										{
											"begin": 775,
											"end": 9115,
											"name": "LT",
											"source": 13
										},
										{
											"begin": 775,
											"end": 9115,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "1"
										},
										{
											"begin": 775,
											"end": 9115,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 775,
											"end": 9115,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 775,
											"end": 9115,
											"name": "CALLDATALOAD",
											"source": 13
										},
										{
											"begin": 775,
											"end": 9115,
											"name": "PUSH",
											"source": 13,
											"value": "E0"
										},
										{
											"begin": 775,
											"end": 9115,
											"name": "SHR",
											"source": 13
										},
										{
											"begin": 775,
											"end": 9115,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 775,
											"end": 9115,
											"name": "PUSH",
											"source": 13,
											"value": "C04B8D59"
										},
										{
											"begin": 775,
											"end": 9115,
											"name": "GT",
											"source": 13
										},
										{
											"begin": 775,
											"end": 9115,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 775,
											"end": 9115,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 775,
											"end": 9115,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 775,
											"end": 9115,
											"name": "PUSH",
											"source": 13,
											"value": "DF2AB5BB"
										},
										{
											"begin": 775,
											"end": 9115,
											"name": "GT",
											"source": 13
										},
										{
											"begin": 775,
											"end": 9115,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "21"
										},
										{
											"begin": 775,
											"end": 9115,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 775,
											"end": 9115,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 775,
											"end": 9115,
											"name": "PUSH",
											"source": 13,
											"value": "DF2AB5BB"
										},
										{
											"begin": 775,
											"end": 9115,
											"name": "EQ",
											"source": 13
										},
										{
											"begin": 775,
											"end": 9115,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "15"
										},
										{
											"begin": 775,
											"end": 9115,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 775,
											"end": 9115,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 775,
											"end": 9115,
											"name": "PUSH",
											"source": 13,
											"value": "E0E189A0"
										},
										{
											"begin": 775,
											"end": 9115,
											"name": "EQ",
											"source": 13
										},
										{
											"begin": 775,
											"end": 9115,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "16"
										},
										{
											"begin": 775,
											"end": 9115,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 775,
											"end": 9115,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 775,
											"end": 9115,
											"name": "PUSH",
											"source": 13,
											"value": "F28C0498"
										},
										{
											"begin": 775,
											"end": 9115,
											"name": "EQ",
											"source": 13
										},
										{
											"begin": 775,
											"end": 9115,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "17"
										},
										{
											"begin": 775,
											"end": 9115,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 775,
											"end": 9115,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 775,
											"end": 9115,
											"name": "PUSH",
											"source": 13,
											"value": "F3995C67"
										},
										{
											"begin": 775,
											"end": 9115,
											"name": "EQ",
											"source": 13
										},
										{
											"begin": 775,
											"end": 9115,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "18"
										},
										{
											"begin": 775,
											"end": 9115,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 775,
											"end": 9115,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 775,
											"end": 9115,
											"name": "PUSH",
											"source": 13,
											"value": "FA461E33"
										},
										{
											"begin": 775,
											"end": 9115,
											"name": "EQ",
											"source": 13
										},
										{
											"begin": 775,
											"end": 9115,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "19"
										},
										{
											"begin": 775,
											"end": 9115,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 775,
											"end": 9115,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "2"
										},
										{
											"begin": 775,
											"end": 9115,
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 775,
											"end": 9115,
											"name": "tag",
											"source": 13,
											"value": "21"
										},
										{
											"begin": 775,
											"end": 9115,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 775,
											"end": 9115,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 775,
											"end": 9115,
											"name": "PUSH",
											"source": 13,
											"value": "C04B8D59"
										},
										{
											"begin": 775,
											"end": 9115,
											"name": "EQ",
											"source": 13
										},
										{
											"begin": 775,
											"end": 9115,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "11"
										},
										{
											"begin": 775,
											"end": 9115,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 775,
											"end": 9115,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 775,
											"end": 9115,
											"name": "PUSH",
											"source": 13,
											"value": "C2E3140A"
										},
										{
											"begin": 775,
											"end": 9115,
											"name": "EQ",
											"source": 13
										},
										{
											"begin": 775,
											"end": 9115,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "12"
										},
										{
											"begin": 775,
											"end": 9115,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 775,
											"end": 9115,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 775,
											"end": 9115,
											"name": "PUSH",
											"source": 13,
											"value": "C45A0155"
										},
										{
											"begin": 775,
											"end": 9115,
											"name": "EQ",
											"source": 13
										},
										{
											"begin": 775,
											"end": 9115,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "13"
										},
										{
											"begin": 775,
											"end": 9115,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 775,
											"end": 9115,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 775,
											"end": 9115,
											"name": "PUSH",
											"source": 13,
											"value": "DB3E2198"
										},
										{
											"begin": 775,
											"end": 9115,
											"name": "EQ",
											"source": 13
										},
										{
											"begin": 775,
											"end": 9115,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "14"
										},
										{
											"begin": 775,
											"end": 9115,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 775,
											"end": 9115,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "2"
										},
										{
											"begin": 775,
											"end": 9115,
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 775,
											"end": 9115,
											"name": "tag",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 775,
											"end": 9115,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 775,
											"end": 9115,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 775,
											"end": 9115,
											"name": "PUSH",
											"source": 13,
											"value": "4AA4A4FC"
										},
										{
											"begin": 775,
											"end": 9115,
											"name": "GT",
											"source": 13
										},
										{
											"begin": 775,
											"end": 9115,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "22"
										},
										{
											"begin": 775,
											"end": 9115,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 775,
											"end": 9115,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 775,
											"end": 9115,
											"name": "PUSH",
											"source": 13,
											"value": "4AA4A4FC"
										},
										{
											"begin": 775,
											"end": 9115,
											"name": "EQ",
											"source": 13
										},
										{
											"begin": 775,
											"end": 9115,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "7"
										},
										{
											"begin": 775,
											"end": 9115,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 775,
											"end": 9115,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 775,
											"end": 9115,
											"name": "PUSH",
											"source": 13,
											"value": "9B2C0A37"
										},
										{
											"begin": 775,
											"end": 9115,
											"name": "EQ",
											"source": 13
										},
										{
											"begin": 775,
											"end": 9115,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "8"
										},
										{
											"begin": 775,
											"end": 9115,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 775,
											"end": 9115,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 775,
											"end": 9115,
											"name": "PUSH",
											"source": 13,
											"value": "A4A78F0C"
										},
										{
											"begin": 775,
											"end": 9115,
											"name": "EQ",
											"source": 13
										},
										{
											"begin": 775,
											"end": 9115,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "9"
										},
										{
											"begin": 775,
											"end": 9115,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 775,
											"end": 9115,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 775,
											"end": 9115,
											"name": "PUSH",
											"source": 13,
											"value": "AC9650D8"
										},
										{
											"begin": 775,
											"end": 9115,
											"name": "EQ",
											"source": 13
										},
										{
											"begin": 775,
											"end": 9115,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "10"
										},
										{
											"begin": 775,
											"end": 9115,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 775,
											"end": 9115,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "2"
										},
										{
											"begin": 775,
											"end": 9115,
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 775,
											"end": 9115,
											"name": "tag",
											"source": 13,
											"value": "22"
										},
										{
											"begin": 775,
											"end": 9115,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 775,
											"end": 9115,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 775,
											"end": 9115,
											"name": "PUSH",
											"source": 13,
											"value": "12210E8A"
										},
										{
											"begin": 775,
											"end": 9115,
											"name": "EQ",
											"source": 13
										},
										{
											"begin": 775,
											"end": 9115,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "3"
										},
										{
											"begin": 775,
											"end": 9115,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 775,
											"end": 9115,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 775,
											"end": 9115,
											"name": "PUSH",
											"source": 13,
											"value": "414BF389"
										},
										{
											"begin": 775,
											"end": 9115,
											"name": "EQ",
											"source": 13
										},
										{
											"begin": 775,
											"end": 9115,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "4"
										},
										{
											"begin": 775,
											"end": 9115,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 775,
											"end": 9115,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 775,
											"end": 9115,
											"name": "PUSH",
											"source": 13,
											"value": "4659A494"
										},
										{
											"begin": 775,
											"end": 9115,
											"name": "EQ",
											"source": 13
										},
										{
											"begin": 775,
											"end": 9115,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "5"
										},
										{
											"begin": 775,
											"end": 9115,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 775,
											"end": 9115,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 775,
											"end": 9115,
											"name": "PUSH",
											"source": 13,
											"value": "49404B7C"
										},
										{
											"begin": 775,
											"end": 9115,
											"name": "EQ",
											"source": 13
										},
										{
											"begin": 775,
											"end": 9115,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "6"
										},
										{
											"begin": 775,
											"end": 9115,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 775,
											"end": 9115,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "2"
										},
										{
											"begin": 775,
											"end": 9115,
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 775,
											"end": 9115,
											"name": "tag",
											"source": 13,
											"value": "1"
										},
										{
											"begin": 775,
											"end": 9115,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 775,
											"end": 9115,
											"name": "CALLDATASIZE",
											"source": 13
										},
										{
											"begin": 775,
											"end": 9115,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "2"
										},
										{
											"begin": 775,
											"end": 9115,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 439,
											"end": 449,
											"name": "CALLER",
											"source": 17
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 453,
											"end": 458,
											"name": "PUSHIMMUTABLE",
											"source": 17,
											"value": "2083"
										},
										{
											"begin": 439,
											"end": 458,
											"name": "AND",
											"source": 17
										},
										{
											"begin": 439,
											"end": 458,
											"name": "EQ",
											"source": 17
										},
										{
											"begin": 431,
											"end": 472,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "25"
										},
										{
											"begin": 431,
											"end": 472,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 431,
											"end": 472,
											"name": "PUSH",
											"source": 17,
											"value": "40"
										},
										{
											"begin": 431,
											"end": 472,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 431,
											"end": 472,
											"name": "MLOAD",
											"source": 17
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 431,
											"end": 472,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 431,
											"end": 472,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 431,
											"end": 472,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 431,
											"end": 472,
											"name": "PUSH",
											"source": 17,
											"value": "4"
										},
										{
											"begin": 431,
											"end": 472,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 431,
											"end": 472,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 431,
											"end": 472,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 431,
											"end": 472,
											"name": "PUSH",
											"source": 17,
											"value": "9"
										},
										{
											"begin": 431,
											"end": 472,
											"name": "PUSH",
											"source": 17,
											"value": "24"
										},
										{
											"begin": 431,
											"end": 472,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 431,
											"end": 472,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 431,
											"end": 472,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "4E6F74205745544839"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "B8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 431,
											"end": 472,
											"name": "PUSH",
											"source": 17,
											"value": "44"
										},
										{
											"begin": 431,
											"end": 472,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 431,
											"end": 472,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 431,
											"end": 472,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 431,
											"end": 472,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 431,
											"end": 472,
											"name": "MLOAD",
											"source": 17
										},
										{
											"begin": 431,
											"end": 472,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 431,
											"end": 472,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 431,
											"end": 472,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 431,
											"end": 472,
											"name": "SUB",
											"source": 17
										},
										{
											"begin": 431,
											"end": 472,
											"name": "PUSH",
											"source": 17,
											"value": "64"
										},
										{
											"begin": 431,
											"end": 472,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 431,
											"end": 472,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 431,
											"end": 472,
											"name": "REVERT",
											"source": 17
										},
										{
											"begin": 431,
											"end": 472,
											"name": "tag",
											"source": 17,
											"value": "25"
										},
										{
											"begin": 431,
											"end": 472,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 775,
											"end": 9115,
											"name": "STOP",
											"source": 13
										},
										{
											"begin": 775,
											"end": 9115,
											"name": "tag",
											"source": 13,
											"value": "2"
										},
										{
											"begin": 775,
											"end": 9115,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 775,
											"end": 9115,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 775,
											"end": 9115,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 775,
											"end": 9115,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 1406,
											"end": 1566,
											"name": "tag",
											"source": 17,
											"value": "3"
										},
										{
											"begin": 1406,
											"end": 1566,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 1406,
											"end": 1566,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "25"
										},
										{
											"begin": 1406,
											"end": 1566,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "27"
										},
										{
											"begin": 1406,
											"end": 1566,
											"name": "JUMP",
											"source": 17,
											"value": "[in]"
										},
										{
											"begin": 4300,
											"end": 4847,
											"name": "tag",
											"source": 13,
											"value": "4"
										},
										{
											"begin": 4300,
											"end": 4847,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 4300,
											"end": 4847,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "28"
										},
										{
											"begin": 4300,
											"end": 4847,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "29"
										},
										{
											"begin": 4300,
											"end": 4847,
											"name": "CALLDATASIZE",
											"source": 13
										},
										{
											"begin": 4300,
											"end": 4847,
											"name": "PUSH",
											"source": 13,
											"value": "4"
										},
										{
											"begin": 4300,
											"end": 4847,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "30"
										},
										{
											"begin": 4300,
											"end": 4847,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 4300,
											"end": 4847,
											"name": "tag",
											"source": 13,
											"value": "29"
										},
										{
											"begin": 4300,
											"end": 4847,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 4300,
											"end": 4847,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "31"
										},
										{
											"begin": 4300,
											"end": 4847,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 4300,
											"end": 4847,
											"name": "tag",
											"source": 13,
											"value": "28"
										},
										{
											"begin": 4300,
											"end": 4847,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 4300,
											"end": 4847,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 4300,
											"end": 4847,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 4300,
											"end": 4847,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "32"
										},
										{
											"begin": 4300,
											"end": 4847,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 4300,
											"end": 4847,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 4300,
											"end": 4847,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "33"
										},
										{
											"begin": 4300,
											"end": 4847,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 4300,
											"end": 4847,
											"name": "tag",
											"source": 13,
											"value": "32"
										},
										{
											"begin": 4300,
											"end": 4847,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 4300,
											"end": 4847,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 4300,
											"end": 4847,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 4300,
											"end": 4847,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 4300,
											"end": 4847,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 4300,
											"end": 4847,
											"name": "SUB",
											"source": 13
										},
										{
											"begin": 4300,
											"end": 4847,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 4300,
											"end": 4847,
											"name": "RETURN",
											"source": 13
										},
										{
											"begin": 1325,
											"end": 1614,
											"name": "tag",
											"source": 20,
											"value": "5"
										},
										{
											"begin": 1325,
											"end": 1614,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 1325,
											"end": 1614,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "25"
										},
										{
											"begin": 1325,
											"end": 1614,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "35"
										},
										{
											"begin": 1325,
											"end": 1614,
											"name": "CALLDATASIZE",
											"source": 20
										},
										{
											"begin": 1325,
											"end": 1614,
											"name": "PUSH",
											"source": 20,
											"value": "4"
										},
										{
											"begin": 1325,
											"end": 1614,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "36"
										},
										{
											"begin": 1325,
											"end": 1614,
											"name": "JUMP",
											"source": 20,
											"value": "[in]"
										},
										{
											"begin": 1325,
											"end": 1614,
											"name": "tag",
											"source": 20,
											"value": "35"
										},
										{
											"begin": 1325,
											"end": 1614,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 1325,
											"end": 1614,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "37"
										},
										{
											"begin": 1325,
											"end": 1614,
											"name": "JUMP",
											"source": 20,
											"value": "[in]"
										},
										{
											"begin": 524,
											"end": 921,
											"name": "tag",
											"source": 17,
											"value": "6"
										},
										{
											"begin": 524,
											"end": 921,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 524,
											"end": 921,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "25"
										},
										{
											"begin": 524,
											"end": 921,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "39"
										},
										{
											"begin": 524,
											"end": 921,
											"name": "CALLDATASIZE",
											"source": 17
										},
										{
											"begin": 524,
											"end": 921,
											"name": "PUSH",
											"source": 17,
											"value": "4"
										},
										{
											"begin": 524,
											"end": 921,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "40"
										},
										{
											"begin": 524,
											"end": 921,
											"name": "JUMP",
											"source": 17,
											"value": "[in]"
										},
										{
											"begin": 524,
											"end": 921,
											"name": "tag",
											"source": 17,
											"value": "39"
										},
										{
											"begin": 524,
											"end": 921,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 524,
											"end": 921,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "41"
										},
										{
											"begin": 524,
											"end": 921,
											"name": "JUMP",
											"source": 17,
											"value": "[in]"
										},
										{
											"begin": 420,
											"end": 459,
											"name": "tag",
											"source": 16,
											"value": "7"
										},
										{
											"begin": 420,
											"end": 459,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 420,
											"end": 459,
											"name": "CALLVALUE",
											"source": 16
										},
										{
											"begin": 420,
											"end": 459,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 420,
											"end": 459,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 420,
											"end": 459,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "42"
										},
										{
											"begin": 420,
											"end": 459,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 420,
											"end": 459,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 420,
											"end": 459,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 420,
											"end": 459,
											"name": "REVERT",
											"source": 16
										},
										{
											"begin": 420,
											"end": 459,
											"name": "tag",
											"source": 16,
											"value": "42"
										},
										{
											"begin": 420,
											"end": 459,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 420,
											"end": 459,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 420,
											"end": 459,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "43"
										},
										{
											"begin": 420,
											"end": 459,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "44"
										},
										{
											"begin": 420,
											"end": 459,
											"name": "JUMP",
											"source": 16,
											"value": "[in]"
										},
										{
											"begin": 420,
											"end": 459,
											"name": "tag",
											"source": 16,
											"value": "43"
										},
										{
											"begin": 420,
											"end": 459,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 420,
											"end": 459,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 420,
											"end": 459,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 420,
											"end": 459,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "32"
										},
										{
											"begin": 420,
											"end": 459,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 420,
											"end": 459,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 420,
											"end": 459,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "46"
										},
										{
											"begin": 420,
											"end": 459,
											"name": "JUMP",
											"source": 16,
											"value": "[in]"
										},
										{
											"begin": 553,
											"end": 1251,
											"name": "tag",
											"source": 18,
											"value": "8"
										},
										{
											"begin": 553,
											"end": 1251,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 553,
											"end": 1251,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "25"
										},
										{
											"begin": 553,
											"end": 1251,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "48"
										},
										{
											"begin": 553,
											"end": 1251,
											"name": "CALLDATASIZE",
											"source": 18
										},
										{
											"begin": 553,
											"end": 1251,
											"name": "PUSH",
											"source": 18,
											"value": "4"
										},
										{
											"begin": 553,
											"end": 1251,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "49"
										},
										{
											"begin": 553,
											"end": 1251,
											"name": "JUMP",
											"source": 18,
											"value": "[in]"
										},
										{
											"begin": 553,
											"end": 1251,
											"name": "tag",
											"source": 18,
											"value": "48"
										},
										{
											"begin": 553,
											"end": 1251,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 553,
											"end": 1251,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "50"
										},
										{
											"begin": 553,
											"end": 1251,
											"name": "JUMP",
											"source": 18,
											"value": "[in]"
										},
										{
											"begin": 1652,
											"end": 2000,
											"name": "tag",
											"source": 20,
											"value": "9"
										},
										{
											"begin": 1652,
											"end": 2000,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 1652,
											"end": 2000,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "25"
										},
										{
											"begin": 1652,
											"end": 2000,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "52"
										},
										{
											"begin": 1652,
											"end": 2000,
											"name": "CALLDATASIZE",
											"source": 20
										},
										{
											"begin": 1652,
											"end": 2000,
											"name": "PUSH",
											"source": 20,
											"value": "4"
										},
										{
											"begin": 1652,
											"end": 2000,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "36"
										},
										{
											"begin": 1652,
											"end": 2000,
											"name": "JUMP",
											"source": 20,
											"value": "[in]"
										},
										{
											"begin": 1652,
											"end": 2000,
											"name": "tag",
											"source": 20,
											"value": "52"
										},
										{
											"begin": 1652,
											"end": 2000,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 1652,
											"end": 2000,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "53"
										},
										{
											"begin": 1652,
											"end": 2000,
											"name": "JUMP",
											"source": 20,
											"value": "[in]"
										},
										{
											"begin": 308,
											"end": 961,
											"name": "tag",
											"source": 15,
											"value": "10"
										},
										{
											"begin": 308,
											"end": 961,
											"name": "JUMPDEST",
											"source": 15
										},
										{
											"begin": 308,
											"end": 961,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "54"
										},
										{
											"begin": 308,
											"end": 961,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "55"
										},
										{
											"begin": 308,
											"end": 961,
											"name": "CALLDATASIZE",
											"source": 15
										},
										{
											"begin": 308,
											"end": 961,
											"name": "PUSH",
											"source": 15,
											"value": "4"
										},
										{
											"begin": 308,
											"end": 961,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "56"
										},
										{
											"begin": 308,
											"end": 961,
											"name": "JUMP",
											"source": 15,
											"value": "[in]"
										},
										{
											"begin": 308,
											"end": 961,
											"name": "tag",
											"source": 15,
											"value": "55"
										},
										{
											"begin": 308,
											"end": 961,
											"name": "JUMPDEST",
											"source": 15
										},
										{
											"begin": 308,
											"end": 961,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "57"
										},
										{
											"begin": 308,
											"end": 961,
											"name": "JUMP",
											"source": 15,
											"value": "[in]"
										},
										{
											"begin": 308,
											"end": 961,
											"name": "tag",
											"source": 15,
											"value": "54"
										},
										{
											"begin": 308,
											"end": 961,
											"name": "JUMPDEST",
											"source": 15
										},
										{
											"begin": 308,
											"end": 961,
											"name": "PUSH",
											"source": 15,
											"value": "40"
										},
										{
											"begin": 308,
											"end": 961,
											"name": "MLOAD",
											"source": 15
										},
										{
											"begin": 308,
											"end": 961,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "32"
										},
										{
											"begin": 308,
											"end": 961,
											"name": "SWAP2",
											"source": 15
										},
										{
											"begin": 308,
											"end": 961,
											"name": "SWAP1",
											"source": 15
										},
										{
											"begin": 308,
											"end": 961,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "59"
										},
										{
											"begin": 308,
											"end": 961,
											"name": "JUMP",
											"source": 15,
											"value": "[in]"
										},
										{
											"begin": 4885,
											"end": 6160,
											"name": "tag",
											"source": 13,
											"value": "11"
										},
										{
											"begin": 4885,
											"end": 6160,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 4885,
											"end": 6160,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "28"
										},
										{
											"begin": 4885,
											"end": 6160,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "61"
										},
										{
											"begin": 4885,
											"end": 6160,
											"name": "CALLDATASIZE",
											"source": 13
										},
										{
											"begin": 4885,
											"end": 6160,
											"name": "PUSH",
											"source": 13,
											"value": "4"
										},
										{
											"begin": 4885,
											"end": 6160,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "62"
										},
										{
											"begin": 4885,
											"end": 6160,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 4885,
											"end": 6160,
											"name": "tag",
											"source": 13,
											"value": "61"
										},
										{
											"begin": 4885,
											"end": 6160,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 4885,
											"end": 6160,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "63"
										},
										{
											"begin": 4885,
											"end": 6160,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 973,
											"end": 1287,
											"name": "tag",
											"source": 20,
											"value": "12"
										},
										{
											"begin": 973,
											"end": 1287,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 973,
											"end": 1287,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "25"
										},
										{
											"begin": 973,
											"end": 1287,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "66"
										},
										{
											"begin": 973,
											"end": 1287,
											"name": "CALLDATASIZE",
											"source": 20
										},
										{
											"begin": 973,
											"end": 1287,
											"name": "PUSH",
											"source": 20,
											"value": "4"
										},
										{
											"begin": 973,
											"end": 1287,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "36"
										},
										{
											"begin": 973,
											"end": 1287,
											"name": "JUMP",
											"source": 20,
											"value": "[in]"
										},
										{
											"begin": 973,
											"end": 1287,
											"name": "tag",
											"source": 20,
											"value": "66"
										},
										{
											"begin": 973,
											"end": 1287,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 973,
											"end": 1287,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "67"
										},
										{
											"begin": 973,
											"end": 1287,
											"name": "JUMP",
											"source": 20,
											"value": "[in]"
										},
										{
											"begin": 328,
											"end": 369,
											"name": "tag",
											"source": 16,
											"value": "13"
										},
										{
											"begin": 328,
											"end": 369,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 328,
											"end": 369,
											"name": "CALLVALUE",
											"source": 16
										},
										{
											"begin": 328,
											"end": 369,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 328,
											"end": 369,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 328,
											"end": 369,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "68"
										},
										{
											"begin": 328,
											"end": 369,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 328,
											"end": 369,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 328,
											"end": 369,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 328,
											"end": 369,
											"name": "REVERT",
											"source": 16
										},
										{
											"begin": 328,
											"end": 369,
											"name": "tag",
											"source": 16,
											"value": "68"
										},
										{
											"begin": 328,
											"end": 369,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 328,
											"end": 369,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 328,
											"end": 369,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "43"
										},
										{
											"begin": 328,
											"end": 369,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "70"
										},
										{
											"begin": 328,
											"end": 369,
											"name": "JUMP",
											"source": 16,
											"value": "[in]"
										},
										{
											"begin": 7587,
											"end": 8319,
											"name": "tag",
											"source": 13,
											"value": "14"
										},
										{
											"begin": 7587,
											"end": 8319,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 7587,
											"end": 8319,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "28"
										},
										{
											"begin": 7587,
											"end": 8319,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "73"
										},
										{
											"begin": 7587,
											"end": 8319,
											"name": "CALLDATASIZE",
											"source": 13
										},
										{
											"begin": 7587,
											"end": 8319,
											"name": "PUSH",
											"source": 13,
											"value": "4"
										},
										{
											"begin": 7587,
											"end": 8319,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "30"
										},
										{
											"begin": 7587,
											"end": 8319,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 7587,
											"end": 8319,
											"name": "tag",
											"source": 13,
											"value": "73"
										},
										{
											"begin": 7587,
											"end": 8319,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 7587,
											"end": 8319,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "75"
										},
										{
											"begin": 7587,
											"end": 8319,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 966,
											"end": 1361,
											"name": "tag",
											"source": 17,
											"value": "15"
										},
										{
											"begin": 966,
											"end": 1361,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 966,
											"end": 1361,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "25"
										},
										{
											"begin": 966,
											"end": 1361,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "78"
										},
										{
											"begin": 966,
											"end": 1361,
											"name": "CALLDATASIZE",
											"source": 17
										},
										{
											"begin": 966,
											"end": 1361,
											"name": "PUSH",
											"source": 17,
											"value": "4"
										},
										{
											"begin": 966,
											"end": 1361,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "79"
										},
										{
											"begin": 966,
											"end": 1361,
											"name": "JUMP",
											"source": 17,
											"value": "[in]"
										},
										{
											"begin": 966,
											"end": 1361,
											"name": "tag",
											"source": 17,
											"value": "78"
										},
										{
											"begin": 966,
											"end": 1361,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 966,
											"end": 1361,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "80"
										},
										{
											"begin": 966,
											"end": 1361,
											"name": "JUMP",
											"source": 17,
											"value": "[in]"
										},
										{
											"begin": 1303,
											"end": 1981,
											"name": "tag",
											"source": 18,
											"value": "16"
										},
										{
											"begin": 1303,
											"end": 1981,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 1303,
											"end": 1981,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "25"
										},
										{
											"begin": 1303,
											"end": 1981,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "82"
										},
										{
											"begin": 1303,
											"end": 1981,
											"name": "CALLDATASIZE",
											"source": 18
										},
										{
											"begin": 1303,
											"end": 1981,
											"name": "PUSH",
											"source": 18,
											"value": "4"
										},
										{
											"begin": 1303,
											"end": 1981,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "83"
										},
										{
											"begin": 1303,
											"end": 1981,
											"name": "JUMP",
											"source": 18,
											"value": "[in]"
										},
										{
											"begin": 1303,
											"end": 1981,
											"name": "tag",
											"source": 18,
											"value": "82"
										},
										{
											"begin": 1303,
											"end": 1981,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 1303,
											"end": 1981,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "84"
										},
										{
											"begin": 1303,
											"end": 1981,
											"name": "JUMP",
											"source": 18,
											"value": "[in]"
										},
										{
											"begin": 8357,
											"end": 9113,
											"name": "tag",
											"source": 13,
											"value": "17"
										},
										{
											"begin": 8357,
											"end": 9113,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 8357,
											"end": 9113,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "28"
										},
										{
											"begin": 8357,
											"end": 9113,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "86"
										},
										{
											"begin": 8357,
											"end": 9113,
											"name": "CALLDATASIZE",
											"source": 13
										},
										{
											"begin": 8357,
											"end": 9113,
											"name": "PUSH",
											"source": 13,
											"value": "4"
										},
										{
											"begin": 8357,
											"end": 9113,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "87"
										},
										{
											"begin": 8357,
											"end": 9113,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 8357,
											"end": 9113,
											"name": "tag",
											"source": 13,
											"value": "86"
										},
										{
											"begin": 8357,
											"end": 9113,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 8357,
											"end": 9113,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "88"
										},
										{
											"begin": 8357,
											"end": 9113,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 662,
											"end": 935,
											"name": "tag",
											"source": 20,
											"value": "18"
										},
										{
											"begin": 662,
											"end": 935,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 662,
											"end": 935,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "25"
										},
										{
											"begin": 662,
											"end": 935,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "91"
										},
										{
											"begin": 662,
											"end": 935,
											"name": "CALLDATASIZE",
											"source": 20
										},
										{
											"begin": 662,
											"end": 935,
											"name": "PUSH",
											"source": 20,
											"value": "4"
										},
										{
											"begin": 662,
											"end": 935,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "36"
										},
										{
											"begin": 662,
											"end": 935,
											"name": "JUMP",
											"source": 20,
											"value": "[in]"
										},
										{
											"begin": 662,
											"end": 935,
											"name": "tag",
											"source": 20,
											"value": "91"
										},
										{
											"begin": 662,
											"end": 935,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 662,
											"end": 935,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "92"
										},
										{
											"begin": 662,
											"end": 935,
											"name": "JUMP",
											"source": 20,
											"value": "[in]"
										},
										{
											"begin": 1980,
											"end": 3274,
											"name": "tag",
											"source": 13,
											"value": "19"
										},
										{
											"begin": 1980,
											"end": 3274,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 1980,
											"end": 3274,
											"name": "CALLVALUE",
											"source": 13
										},
										{
											"begin": 1980,
											"end": 3274,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 1980,
											"end": 3274,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 1980,
											"end": 3274,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "93"
										},
										{
											"begin": 1980,
											"end": 3274,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 1980,
											"end": 3274,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 1980,
											"end": 3274,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 1980,
											"end": 3274,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 1980,
											"end": 3274,
											"name": "tag",
											"source": 13,
											"value": "93"
										},
										{
											"begin": 1980,
											"end": 3274,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1980,
											"end": 3274,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "25"
										},
										{
											"begin": 1980,
											"end": 3274,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "95"
										},
										{
											"begin": 1980,
											"end": 3274,
											"name": "CALLDATASIZE",
											"source": 13
										},
										{
											"begin": 1980,
											"end": 3274,
											"name": "PUSH",
											"source": 13,
											"value": "4"
										},
										{
											"begin": 1980,
											"end": 3274,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "96"
										},
										{
											"begin": 1980,
											"end": 3274,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 1980,
											"end": 3274,
											"name": "tag",
											"source": 13,
											"value": "95"
										},
										{
											"begin": 1980,
											"end": 3274,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 1980,
											"end": 3274,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "97"
										},
										{
											"begin": 1980,
											"end": 3274,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 1406,
											"end": 1566,
											"name": "tag",
											"source": 17,
											"value": "27"
										},
										{
											"begin": 1406,
											"end": 1566,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 1467,
											"end": 1488,
											"name": "SELFBALANCE",
											"source": 17
										},
										{
											"begin": 1467,
											"end": 1492,
											"name": "ISZERO",
											"source": 17
										},
										{
											"begin": 1463,
											"end": 1559,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "100"
										},
										{
											"begin": 1463,
											"end": 1559,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 1494,
											"end": 1559,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "100"
										},
										{
											"begin": 1525,
											"end": 1535,
											"name": "CALLER",
											"source": 17
										},
										{
											"begin": 1537,
											"end": 1558,
											"name": "SELFBALANCE",
											"source": 17
										},
										{
											"begin": 1494,
											"end": 1524,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "101"
										},
										{
											"begin": 1494,
											"end": 1559,
											"name": "JUMP",
											"source": 17,
											"value": "[in]"
										},
										{
											"begin": 1494,
											"end": 1559,
											"name": "tag",
											"source": 17,
											"value": "100"
										},
										{
											"begin": 1494,
											"end": 1559,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 1406,
											"end": 1566,
											"name": "JUMP",
											"source": 17,
											"value": "[out]"
										},
										{
											"begin": 4300,
											"end": 4847,
											"name": "tag",
											"source": 13,
											"value": "31"
										},
										{
											"begin": 4300,
											"end": 4847,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 4472,
											"end": 4489,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 4438,
											"end": 4444,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 4438,
											"end": 4453,
											"name": "PUSH",
											"source": 13,
											"value": "80"
										},
										{
											"begin": 4438,
											"end": 4453,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 4438,
											"end": 4453,
											"name": "CALLDATALOAD",
											"source": 13
										},
										{
											"begin": 244,
											"end": 252,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 223,
											"end": 240,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "103"
										},
										{
											"begin": 223,
											"end": 238,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "104"
										},
										{
											"begin": 223,
											"end": 240,
											"name": "JUMP",
											"source": 19,
											"value": "[in]"
										},
										{
											"begin": 223,
											"end": 240,
											"name": "tag",
											"source": 19,
											"value": "103"
										},
										{
											"begin": 223,
											"end": 240,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 223,
											"end": 252,
											"name": "GT",
											"source": 19
										},
										{
											"begin": 223,
											"end": 252,
											"name": "ISZERO",
											"source": 19
										},
										{
											"begin": 215,
											"end": 276,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "105"
										},
										{
											"begin": 215,
											"end": 276,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 215,
											"end": 276,
											"name": "PUSH",
											"source": 19,
											"value": "40"
										},
										{
											"begin": 215,
											"end": 276,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 215,
											"end": 276,
											"name": "MLOAD",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 215,
											"end": 276,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 215,
											"end": 276,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 215,
											"end": 276,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 215,
											"end": 276,
											"name": "PUSH",
											"source": 19,
											"value": "4"
										},
										{
											"begin": 215,
											"end": 276,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 215,
											"end": 276,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 215,
											"end": 276,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 215,
											"end": 276,
											"name": "PUSH",
											"source": 19,
											"value": "13"
										},
										{
											"begin": 215,
											"end": 276,
											"name": "PUSH",
											"source": 19,
											"value": "24"
										},
										{
											"begin": 215,
											"end": 276,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 215,
											"end": 276,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 215,
											"end": 276,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "151C985B9CD858DD1A5BDB881D1BDBC81BDB19"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "6A"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 215,
											"end": 276,
											"name": "PUSH",
											"source": 19,
											"value": "44"
										},
										{
											"begin": 215,
											"end": 276,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 215,
											"end": 276,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 215,
											"end": 276,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 215,
											"end": 276,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 215,
											"end": 276,
											"name": "MLOAD",
											"source": 19
										},
										{
											"begin": 215,
											"end": 276,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 215,
											"end": 276,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 215,
											"end": 276,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 215,
											"end": 276,
											"name": "SUB",
											"source": 19
										},
										{
											"begin": 215,
											"end": 276,
											"name": "PUSH",
											"source": 19,
											"value": "64"
										},
										{
											"begin": 215,
											"end": 276,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 215,
											"end": 276,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 215,
											"end": 276,
											"name": "REVERT",
											"source": 19
										},
										{
											"begin": 215,
											"end": 276,
											"name": "tag",
											"source": 19,
											"value": "105"
										},
										{
											"begin": 215,
											"end": 276,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 4517,
											"end": 4762,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "107"
										},
										{
											"begin": 4549,
											"end": 4564,
											"name": "PUSH",
											"source": 13,
											"value": "A0"
										},
										{
											"begin": 4549,
											"end": 4564,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 4549,
											"end": 4564,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 4549,
											"end": 4564,
											"name": "CALLDATALOAD",
											"source": 13
										},
										{
											"begin": 4578,
											"end": 4594,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "108"
										},
										{
											"begin": 4578,
											"end": 4594,
											"name": "PUSH",
											"source": 13,
											"value": "80"
										},
										{
											"begin": 4578,
											"end": 4594,
											"name": "DUP7",
											"source": 13
										},
										{
											"begin": 4578,
											"end": 4594,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 4578,
											"end": 4594,
											"name": "PUSH",
											"source": 13,
											"value": "60"
										},
										{
											"begin": 4578,
											"end": 4594,
											"name": "DUP8",
											"source": 13
										},
										{
											"begin": 4578,
											"end": 4594,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 4578,
											"end": 4594,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "109"
										},
										{
											"begin": 4578,
											"end": 4594,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 4578,
											"end": 4594,
											"name": "tag",
											"source": 13,
											"value": "108"
										},
										{
											"begin": 4578,
											"end": 4594,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 4608,
											"end": 4632,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "110"
										},
										{
											"begin": 4608,
											"end": 4632,
											"name": "PUSH",
											"source": 13,
											"value": "100"
										},
										{
											"begin": 4608,
											"end": 4632,
											"name": "DUP8",
											"source": 13
										},
										{
											"begin": 4608,
											"end": 4632,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 4608,
											"end": 4632,
											"name": "PUSH",
											"source": 13,
											"value": "E0"
										},
										{
											"begin": 4608,
											"end": 4632,
											"name": "DUP9",
											"source": 13
										},
										{
											"begin": 4608,
											"end": 4632,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 4608,
											"end": 4632,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "109"
										},
										{
											"begin": 4608,
											"end": 4632,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 4608,
											"end": 4632,
											"name": "tag",
											"source": 13,
											"value": "110"
										},
										{
											"begin": 4608,
											"end": 4632,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 4646,
											"end": 4752,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 4646,
											"end": 4752,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 4646,
											"end": 4752,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 4646,
											"end": 4752,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 4646,
											"end": 4752,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 4646,
											"end": 4752,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 4646,
											"end": 4752,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 4646,
											"end": 4752,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 4646,
											"end": 4752,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 4646,
											"end": 4752,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 4687,
											"end": 4701,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "112"
										},
										{
											"begin": 4687,
											"end": 4701,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 4687,
											"end": 4701,
											"name": "DUP11",
											"source": 13
										},
										{
											"begin": 4687,
											"end": 4701,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 4687,
											"end": 4693,
											"name": "DUP11",
											"source": 13
										},
										{
											"begin": 4687,
											"end": 4701,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "109"
										},
										{
											"begin": 4687,
											"end": 4701,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 4687,
											"end": 4701,
											"name": "tag",
											"source": 13,
											"value": "112"
										},
										{
											"begin": 4687,
											"end": 4701,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 4703,
											"end": 4713,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "113"
										},
										{
											"begin": 4703,
											"end": 4713,
											"name": "PUSH",
											"source": 13,
											"value": "60"
										},
										{
											"begin": 4703,
											"end": 4713,
											"name": "DUP12",
											"source": 13
										},
										{
											"begin": 4703,
											"end": 4713,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 4703,
											"end": 4713,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 4703,
											"end": 4713,
											"name": "DUP13",
											"source": 13
										},
										{
											"begin": 4703,
											"end": 4713,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 4703,
											"end": 4713,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "114"
										},
										{
											"begin": 4703,
											"end": 4713,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 4703,
											"end": 4713,
											"name": "tag",
											"source": 13,
											"value": "113"
										},
										{
											"begin": 4703,
											"end": 4713,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 4715,
											"end": 4730,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "115"
										},
										{
											"begin": 4715,
											"end": 4730,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 4715,
											"end": 4730,
											"name": "DUP13",
											"source": 13
										},
										{
											"begin": 4715,
											"end": 4730,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 4715,
											"end": 4730,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 4715,
											"end": 4730,
											"name": "DUP14",
											"source": 13
										},
										{
											"begin": 4715,
											"end": 4730,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 4715,
											"end": 4730,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "109"
										},
										{
											"begin": 4715,
											"end": 4730,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 4715,
											"end": 4730,
											"name": "tag",
											"source": 13,
											"value": "115"
										},
										{
											"begin": 4715,
											"end": 4730,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 4670,
											"end": 4731,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 4670,
											"end": 4731,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 4670,
											"end": 4731,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 4670,
											"end": 4731,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 4670,
											"end": 4731,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "116"
										},
										{
											"begin": 4670,
											"end": 4731,
											"name": "SWAP4",
											"source": 13
										},
										{
											"begin": 4670,
											"end": 4731,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 4670,
											"end": 4731,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 4670,
											"end": 4731,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 4670,
											"end": 4731,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "117"
										},
										{
											"begin": 4670,
											"end": 4731,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 4670,
											"end": 4731,
											"name": "tag",
											"source": 13,
											"value": "116"
										},
										{
											"begin": 4670,
											"end": 4731,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 4670,
											"end": 4731,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 4670,
											"end": 4731,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 4670,
											"end": 4731,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 4670,
											"end": 4731,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 4670,
											"end": 4731,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 4670,
											"end": 4731,
											"name": "SUB",
											"source": 13
										},
										{
											"begin": 4670,
											"end": 4731,
											"name": "SUB",
											"source": 13
										},
										{
											"begin": 4670,
											"end": 4731,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 4670,
											"end": 4731,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 4670,
											"end": 4731,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 4670,
											"end": 4731,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 4670,
											"end": 4731,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 4646,
											"end": 4752,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 4646,
											"end": 4752,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 4646,
											"end": 4752,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 4646,
											"end": 4752,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 4740,
											"end": 4750,
											"name": "CALLER",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 4646,
											"end": 4752,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 4646,
											"end": 4752,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 4646,
											"end": 4752,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 4646,
											"end": 4752,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 4517,
											"end": 4535,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "118"
										},
										{
											"begin": 4517,
											"end": 4762,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 4517,
											"end": 4762,
											"name": "tag",
											"source": 13,
											"value": "107"
										},
										{
											"begin": 4517,
											"end": 4762,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 4505,
											"end": 4762,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 4505,
											"end": 4762,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 4793,
											"end": 4799,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 4793,
											"end": 4816,
											"name": "PUSH",
											"source": 13,
											"value": "C0"
										},
										{
											"begin": 4793,
											"end": 4816,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 4793,
											"end": 4816,
											"name": "CALLDATALOAD",
											"source": 13
										},
										{
											"begin": 4780,
											"end": 4789,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 4780,
											"end": 4816,
											"name": "LT",
											"source": 13
										},
										{
											"begin": 4780,
											"end": 4816,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 4772,
											"end": 4840,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "119"
										},
										{
											"begin": 4772,
											"end": 4840,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 4772,
											"end": 4840,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 4772,
											"end": 4840,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4772,
											"end": 4840,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 4772,
											"end": 4840,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 4772,
											"end": 4840,
											"name": "PUSH",
											"source": 13,
											"value": "4"
										},
										{
											"begin": 4772,
											"end": 4840,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 4772,
											"end": 4840,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "120"
										},
										{
											"begin": 4772,
											"end": 4840,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 4772,
											"end": 4840,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "121"
										},
										{
											"begin": 4772,
											"end": 4840,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 4772,
											"end": 4840,
											"name": "tag",
											"source": 13,
											"value": "120"
										},
										{
											"begin": 4772,
											"end": 4840,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 4772,
											"end": 4840,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 4772,
											"end": 4840,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 4772,
											"end": 4840,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 4772,
											"end": 4840,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 4772,
											"end": 4840,
											"name": "SUB",
											"source": 13
										},
										{
											"begin": 4772,
											"end": 4840,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 4772,
											"end": 4840,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 4772,
											"end": 4840,
											"name": "tag",
											"source": 13,
											"value": "119"
										},
										{
											"begin": 4772,
											"end": 4840,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 4300,
											"end": 4847,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 4300,
											"end": 4847,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 4300,
											"end": 4847,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 4300,
											"end": 4847,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 4300,
											"end": 4847,
											"name": "JUMP",
											"source": 13,
											"value": "[out]"
										},
										{
											"begin": 1325,
											"end": 1614,
											"name": "tag",
											"source": 20,
											"value": "37"
										},
										{
											"begin": 1325,
											"end": 1614,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 1517,
											"end": 1607,
											"name": "PUSH",
											"source": 20,
											"value": "40"
										},
										{
											"begin": 1517,
											"end": 1607,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 1517,
											"end": 1607,
											"name": "MLOAD",
											"source": 20
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "23F2EBC3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1517,
											"end": 1607,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 1517,
											"end": 1607,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 1551,
											"end": 1561,
											"name": "CALLER",
											"source": 20
										},
										{
											"begin": 1517,
											"end": 1607,
											"name": "PUSH",
											"source": 20,
											"value": "4"
										},
										{
											"begin": 1517,
											"end": 1607,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 1517,
											"end": 1607,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 1517,
											"end": 1607,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 1571,
											"end": 1575,
											"name": "ADDRESS",
											"source": 20
										},
										{
											"begin": 1517,
											"end": 1607,
											"name": "PUSH",
											"source": 20,
											"value": "24"
										},
										{
											"begin": 1517,
											"end": 1607,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 1517,
											"end": 1607,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 1517,
											"end": 1607,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 1517,
											"end": 1607,
											"name": "PUSH",
											"source": 20,
											"value": "44"
										},
										{
											"begin": 1517,
											"end": 1607,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 1517,
											"end": 1607,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 1517,
											"end": 1607,
											"name": "DUP8",
											"source": 20
										},
										{
											"begin": 1517,
											"end": 1607,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 1517,
											"end": 1607,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 1517,
											"end": 1607,
											"name": "PUSH",
											"source": 20,
											"value": "64"
										},
										{
											"begin": 1517,
											"end": 1607,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 1517,
											"end": 1607,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 1517,
											"end": 1607,
											"name": "DUP7",
											"source": 20
										},
										{
											"begin": 1517,
											"end": 1607,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 1517,
											"end": 1607,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 1593,
											"end": 1597,
											"name": "PUSH",
											"source": 20,
											"value": "1"
										},
										{
											"begin": 1517,
											"end": 1607,
											"name": "PUSH",
											"source": 20,
											"value": "84"
										},
										{
											"begin": 1517,
											"end": 1607,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 1517,
											"end": 1607,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 1517,
											"end": 1607,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 1517,
											"end": 1607,
											"name": "PUSH",
											"source": 20,
											"value": "FF"
										},
										{
											"begin": 1517,
											"end": 1607,
											"name": "DUP6",
											"source": 20
										},
										{
											"begin": 1517,
											"end": 1607,
											"name": "AND",
											"source": 20
										},
										{
											"begin": 1517,
											"end": 1607,
											"name": "PUSH",
											"source": 20,
											"value": "A4"
										},
										{
											"begin": 1517,
											"end": 1607,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 1517,
											"end": 1607,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 1517,
											"end": 1607,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 1517,
											"end": 1607,
											"name": "PUSH",
											"source": 20,
											"value": "C4"
										},
										{
											"begin": 1517,
											"end": 1607,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 1517,
											"end": 1607,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 1517,
											"end": 1607,
											"name": "DUP5",
											"source": 20
										},
										{
											"begin": 1517,
											"end": 1607,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 1517,
											"end": 1607,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 1517,
											"end": 1607,
											"name": "PUSH",
											"source": 20,
											"value": "E4"
										},
										{
											"begin": 1517,
											"end": 1607,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 1517,
											"end": 1607,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 1517,
											"end": 1607,
											"name": "DUP4",
											"source": 20
										},
										{
											"begin": 1517,
											"end": 1607,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 1517,
											"end": 1607,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 1517,
											"end": 1607,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 1517,
											"end": 1607,
											"name": "MLOAD",
											"source": 20
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1517,
											"end": 1550,
											"name": "DUP9",
											"source": 20
										},
										{
											"begin": 1517,
											"end": 1550,
											"name": "AND",
											"source": 20
										},
										{
											"begin": 1517,
											"end": 1550,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 1517,
											"end": 1550,
											"name": "PUSH",
											"source": 20,
											"value": "8FCBAF0C"
										},
										{
											"begin": 1517,
											"end": 1550,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 1517,
											"end": 1607,
											"name": "PUSH",
											"source": 20,
											"value": "104"
										},
										{
											"begin": 1517,
											"end": 1607,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 1517,
											"end": 1607,
											"name": "DUP4",
											"source": 20
										},
										{
											"begin": 1517,
											"end": 1607,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 1517,
											"end": 1607,
											"name": "SWAP3",
											"source": 20
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP3",
											"source": -1
										},
										{
											"begin": 1517,
											"end": 1607,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 1517,
											"end": 1607,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 1517,
											"end": 1607,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 1517,
											"end": 1607,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 1517,
											"end": 1607,
											"name": "SUB",
											"source": 20
										},
										{
											"begin": 1517,
											"end": 1607,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 1517,
											"end": 1607,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP4",
											"source": -1
										},
										{
											"begin": 1517,
											"end": 1550,
											"name": "DUP8",
											"source": 20
										},
										{
											"begin": 1517,
											"end": 1607,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 1517,
											"end": 1607,
											"name": "EXTCODESIZE",
											"source": 20
										},
										{
											"begin": 1517,
											"end": 1607,
											"name": "ISZERO",
											"source": 20
										},
										{
											"begin": 1517,
											"end": 1607,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 1517,
											"end": 1607,
											"name": "ISZERO",
											"source": 20
										},
										{
											"begin": 1517,
											"end": 1607,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "123"
										},
										{
											"begin": 1517,
											"end": 1607,
											"name": "JUMPI",
											"source": 20
										},
										{
											"begin": 1517,
											"end": 1607,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 1517,
											"end": 1607,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 1517,
											"end": 1607,
											"name": "REVERT",
											"source": 20
										},
										{
											"begin": 1517,
											"end": 1607,
											"name": "tag",
											"source": 20,
											"value": "123"
										},
										{
											"begin": 1517,
											"end": 1607,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 1517,
											"end": 1607,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 1517,
											"end": 1607,
											"name": "GAS",
											"source": 20
										},
										{
											"begin": 1517,
											"end": 1607,
											"name": "CALL",
											"source": 20
										},
										{
											"begin": 1517,
											"end": 1607,
											"name": "ISZERO",
											"source": 20
										},
										{
											"begin": 1517,
											"end": 1607,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 1517,
											"end": 1607,
											"name": "ISZERO",
											"source": 20
										},
										{
											"begin": 1517,
											"end": 1607,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "125"
										},
										{
											"begin": 1517,
											"end": 1607,
											"name": "JUMPI",
											"source": 20
										},
										{
											"begin": 1517,
											"end": 1607,
											"name": "RETURNDATASIZE",
											"source": 20
										},
										{
											"begin": 1517,
											"end": 1607,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 1517,
											"end": 1607,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 1517,
											"end": 1607,
											"name": "RETURNDATACOPY",
											"source": 20
										},
										{
											"begin": 1517,
											"end": 1607,
											"name": "RETURNDATASIZE",
											"source": 20
										},
										{
											"begin": 1517,
											"end": 1607,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 1517,
											"end": 1607,
											"name": "REVERT",
											"source": 20
										},
										{
											"begin": 1517,
											"end": 1607,
											"name": "tag",
											"source": 20,
											"value": "125"
										},
										{
											"begin": 1517,
											"end": 1607,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 1517,
											"end": 1607,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 1517,
											"end": 1607,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 1517,
											"end": 1607,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 1517,
											"end": 1607,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 1325,
											"end": 1614,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 1325,
											"end": 1614,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 1325,
											"end": 1614,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 1325,
											"end": 1614,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 1325,
											"end": 1614,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 1325,
											"end": 1614,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 1325,
											"end": 1614,
											"name": "JUMP",
											"source": 20,
											"value": "[out]"
										},
										{
											"begin": 524,
											"end": 921,
											"name": "tag",
											"source": 17,
											"value": "41"
										},
										{
											"begin": 524,
											"end": 921,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 621,
											"end": 641,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 651,
											"end": 656,
											"name": "PUSHIMMUTABLE",
											"source": 17,
											"value": "2083"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 644,
											"end": 667,
											"name": "AND",
											"source": 17
										},
										{
											"begin": 644,
											"end": 667,
											"name": "PUSH",
											"source": 17,
											"value": "70A08231"
										},
										{
											"begin": 676,
											"end": 680,
											"name": "ADDRESS",
											"source": 17
										},
										{
											"begin": 644,
											"end": 682,
											"name": "PUSH",
											"source": 17,
											"value": "40"
										},
										{
											"begin": 644,
											"end": 682,
											"name": "MLOAD",
											"source": 17
										},
										{
											"begin": 644,
											"end": 682,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 644,
											"end": 682,
											"name": "PUSH",
											"source": 17,
											"value": "FFFFFFFF"
										},
										{
											"begin": 644,
											"end": 682,
											"name": "AND",
											"source": 17
										},
										{
											"begin": 644,
											"end": 682,
											"name": "PUSH",
											"source": 17,
											"value": "E0"
										},
										{
											"begin": 644,
											"end": 682,
											"name": "SHL",
											"source": 17
										},
										{
											"begin": 644,
											"end": 682,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 644,
											"end": 682,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 644,
											"end": 682,
											"name": "PUSH",
											"source": 17,
											"value": "4"
										},
										{
											"begin": 644,
											"end": 682,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 644,
											"end": 682,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 644,
											"end": 682,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 644,
											"end": 682,
											"name": "AND",
											"source": 17
										},
										{
											"begin": 644,
											"end": 682,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 644,
											"end": 682,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 644,
											"end": 682,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 644,
											"end": 682,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 644,
											"end": 682,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 644,
											"end": 682,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 644,
											"end": 682,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 644,
											"end": 682,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 644,
											"end": 682,
											"name": "PUSH",
											"source": 17,
											"value": "40"
										},
										{
											"begin": 644,
											"end": 682,
											"name": "MLOAD",
											"source": 17
										},
										{
											"begin": 644,
											"end": 682,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 644,
											"end": 682,
											"name": "DUP4",
											"source": 17
										},
										{
											"begin": 644,
											"end": 682,
											"name": "SUB",
											"source": 17
										},
										{
											"begin": 644,
											"end": 682,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 644,
											"end": 682,
											"name": "DUP7",
											"source": 17
										},
										{
											"begin": 644,
											"end": 682,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 644,
											"end": 682,
											"name": "EXTCODESIZE",
											"source": 17
										},
										{
											"begin": 644,
											"end": 682,
											"name": "ISZERO",
											"source": 17
										},
										{
											"begin": 644,
											"end": 682,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 644,
											"end": 682,
											"name": "ISZERO",
											"source": 17
										},
										{
											"begin": 644,
											"end": 682,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "127"
										},
										{
											"begin": 644,
											"end": 682,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 644,
											"end": 682,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 644,
											"end": 682,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 644,
											"end": 682,
											"name": "REVERT",
											"source": 17
										},
										{
											"begin": 644,
											"end": 682,
											"name": "tag",
											"source": 17,
											"value": "127"
										},
										{
											"begin": 644,
											"end": 682,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 644,
											"end": 682,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 644,
											"end": 682,
											"name": "GAS",
											"source": 17
										},
										{
											"begin": 644,
											"end": 682,
											"name": "STATICCALL",
											"source": 17
										},
										{
											"begin": 644,
											"end": 682,
											"name": "ISZERO",
											"source": 17
										},
										{
											"begin": 644,
											"end": 682,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 644,
											"end": 682,
											"name": "ISZERO",
											"source": 17
										},
										{
											"begin": 644,
											"end": 682,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "129"
										},
										{
											"begin": 644,
											"end": 682,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 644,
											"end": 682,
											"name": "RETURNDATASIZE",
											"source": 17
										},
										{
											"begin": 644,
											"end": 682,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 644,
											"end": 682,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 644,
											"end": 682,
											"name": "RETURNDATACOPY",
											"source": 17
										},
										{
											"begin": 644,
											"end": 682,
											"name": "RETURNDATASIZE",
											"source": 17
										},
										{
											"begin": 644,
											"end": 682,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 644,
											"end": 682,
											"name": "REVERT",
											"source": 17
										},
										{
											"begin": 644,
											"end": 682,
											"name": "tag",
											"source": 17,
											"value": "129"
										},
										{
											"begin": 644,
											"end": 682,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 644,
											"end": 682,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 644,
											"end": 682,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 644,
											"end": 682,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 644,
											"end": 682,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 644,
											"end": 682,
											"name": "PUSH",
											"source": 17,
											"value": "40"
										},
										{
											"begin": 644,
											"end": 682,
											"name": "MLOAD",
											"source": 17
										},
										{
											"begin": 644,
											"end": 682,
											"name": "RETURNDATASIZE",
											"source": 17
										},
										{
											"begin": 644,
											"end": 682,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 644,
											"end": 682,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 644,
											"end": 682,
											"name": "LT",
											"source": 17
										},
										{
											"begin": 644,
											"end": 682,
											"name": "ISZERO",
											"source": 17
										},
										{
											"begin": 644,
											"end": 682,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "130"
										},
										{
											"begin": 644,
											"end": 682,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 644,
											"end": 682,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 644,
											"end": 682,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 644,
											"end": 682,
											"name": "REVERT",
											"source": 17
										},
										{
											"begin": 644,
											"end": 682,
											"name": "tag",
											"source": 17,
											"value": "130"
										},
										{
											"begin": 644,
											"end": 682,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 644,
											"end": 682,
											"name": "MLOAD",
											"source": 17
										},
										{
											"begin": 644,
											"end": 682,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 700,
											"end": 729,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 700,
											"end": 729,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 700,
											"end": 729,
											"name": "LT",
											"source": 17
										},
										{
											"begin": 700,
											"end": 729,
											"name": "ISZERO",
											"source": 17
										},
										{
											"begin": 692,
											"end": 752,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "131"
										},
										{
											"begin": 692,
											"end": 752,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 692,
											"end": 752,
											"name": "PUSH",
											"source": 17,
											"value": "40"
										},
										{
											"begin": 692,
											"end": 752,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 692,
											"end": 752,
											"name": "MLOAD",
											"source": 17
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 692,
											"end": 752,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 692,
											"end": 752,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 692,
											"end": 752,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 692,
											"end": 752,
											"name": "PUSH",
											"source": 17,
											"value": "4"
										},
										{
											"begin": 692,
											"end": 752,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 692,
											"end": 752,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 692,
											"end": 752,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 692,
											"end": 752,
											"name": "PUSH",
											"source": 17,
											"value": "12"
										},
										{
											"begin": 692,
											"end": 752,
											"name": "PUSH",
											"source": 17,
											"value": "24"
										},
										{
											"begin": 692,
											"end": 752,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 692,
											"end": 752,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 692,
											"end": 752,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "496E73756666696369656E74205745544839"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "70"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 692,
											"end": 752,
											"name": "PUSH",
											"source": 17,
											"value": "44"
										},
										{
											"begin": 692,
											"end": 752,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 692,
											"end": 752,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 692,
											"end": 752,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 692,
											"end": 752,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 692,
											"end": 752,
											"name": "MLOAD",
											"source": 17
										},
										{
											"begin": 692,
											"end": 752,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 692,
											"end": 752,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 692,
											"end": 752,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 692,
											"end": 752,
											"name": "SUB",
											"source": 17
										},
										{
											"begin": 692,
											"end": 752,
											"name": "PUSH",
											"source": 17,
											"value": "64"
										},
										{
											"begin": 692,
											"end": 752,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 692,
											"end": 752,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 692,
											"end": 752,
											"name": "REVERT",
											"source": 17
										},
										{
											"begin": 692,
											"end": 752,
											"name": "tag",
											"source": 17,
											"value": "131"
										},
										{
											"begin": 692,
											"end": 752,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 767,
											"end": 783,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 767,
											"end": 783,
											"name": "ISZERO",
											"source": 17
										},
										{
											"begin": 763,
											"end": 915,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "136"
										},
										{
											"begin": 763,
											"end": 915,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 806,
											"end": 811,
											"name": "PUSHIMMUTABLE",
											"source": 17,
											"value": "2083"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 799,
											"end": 821,
											"name": "AND",
											"source": 17
										},
										{
											"begin": 799,
											"end": 821,
											"name": "PUSH",
											"source": 17,
											"value": "2E1A7D4D"
										},
										{
											"begin": 822,
											"end": 834,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 799,
											"end": 835,
											"name": "PUSH",
											"source": 17,
											"value": "40"
										},
										{
											"begin": 799,
											"end": 835,
											"name": "MLOAD",
											"source": 17
										},
										{
											"begin": 799,
											"end": 835,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 799,
											"end": 835,
											"name": "PUSH",
											"source": 17,
											"value": "FFFFFFFF"
										},
										{
											"begin": 799,
											"end": 835,
											"name": "AND",
											"source": 17
										},
										{
											"begin": 799,
											"end": 835,
											"name": "PUSH",
											"source": 17,
											"value": "E0"
										},
										{
											"begin": 799,
											"end": 835,
											"name": "SHL",
											"source": 17
										},
										{
											"begin": 799,
											"end": 835,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 799,
											"end": 835,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 799,
											"end": 835,
											"name": "PUSH",
											"source": 17,
											"value": "4"
										},
										{
											"begin": 799,
											"end": 835,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 799,
											"end": 835,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 799,
											"end": 835,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 799,
											"end": 835,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 799,
											"end": 835,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 799,
											"end": 835,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 799,
											"end": 835,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 799,
											"end": 835,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 799,
											"end": 835,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 799,
											"end": 835,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 799,
											"end": 835,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 799,
											"end": 835,
											"name": "PUSH",
											"source": 17,
											"value": "40"
										},
										{
											"begin": 799,
											"end": 835,
											"name": "MLOAD",
											"source": 17
										},
										{
											"begin": 799,
											"end": 835,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 799,
											"end": 835,
											"name": "DUP4",
											"source": 17
										},
										{
											"begin": 799,
											"end": 835,
											"name": "SUB",
											"source": 17
										},
										{
											"begin": 799,
											"end": 835,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 799,
											"end": 835,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 799,
											"end": 835,
											"name": "DUP8",
											"source": 17
										},
										{
											"begin": 799,
											"end": 835,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 799,
											"end": 835,
											"name": "EXTCODESIZE",
											"source": 17
										},
										{
											"begin": 799,
											"end": 835,
											"name": "ISZERO",
											"source": 17
										},
										{
											"begin": 799,
											"end": 835,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 799,
											"end": 835,
											"name": "ISZERO",
											"source": 17
										},
										{
											"begin": 799,
											"end": 835,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "133"
										},
										{
											"begin": 799,
											"end": 835,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 799,
											"end": 835,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 799,
											"end": 835,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 799,
											"end": 835,
											"name": "REVERT",
											"source": 17
										},
										{
											"begin": 799,
											"end": 835,
											"name": "tag",
											"source": 17,
											"value": "133"
										},
										{
											"begin": 799,
											"end": 835,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 799,
											"end": 835,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 799,
											"end": 835,
											"name": "GAS",
											"source": 17
										},
										{
											"begin": 799,
											"end": 835,
											"name": "CALL",
											"source": 17
										},
										{
											"begin": 799,
											"end": 835,
											"name": "ISZERO",
											"source": 17
										},
										{
											"begin": 799,
											"end": 835,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 799,
											"end": 835,
											"name": "ISZERO",
											"source": 17
										},
										{
											"begin": 799,
											"end": 835,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "135"
										},
										{
											"begin": 799,
											"end": 835,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 799,
											"end": 835,
											"name": "RETURNDATASIZE",
											"source": 17
										},
										{
											"begin": 799,
											"end": 835,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 799,
											"end": 835,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 799,
											"end": 835,
											"name": "RETURNDATACOPY",
											"source": 17
										},
										{
											"begin": 799,
											"end": 835,
											"name": "RETURNDATASIZE",
											"source": 17
										},
										{
											"begin": 799,
											"end": 835,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 799,
											"end": 835,
											"name": "REVERT",
											"source": 17
										},
										{
											"begin": 799,
											"end": 835,
											"name": "tag",
											"source": 17,
											"value": "135"
										},
										{
											"begin": 799,
											"end": 835,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 799,
											"end": 835,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 799,
											"end": 835,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 799,
											"end": 835,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 799,
											"end": 835,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 849,
											"end": 904,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "136"
										},
										{
											"begin": 880,
											"end": 889,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 891,
											"end": 903,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 849,
											"end": 879,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "101"
										},
										{
											"begin": 849,
											"end": 904,
											"name": "JUMP",
											"source": 17,
											"value": "[in]"
										},
										{
											"begin": 849,
											"end": 904,
											"name": "tag",
											"source": 17,
											"value": "136"
										},
										{
											"begin": 849,
											"end": 904,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 524,
											"end": 921,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 524,
											"end": 921,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 524,
											"end": 921,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 524,
											"end": 921,
											"name": "JUMP",
											"source": 17,
											"value": "[out]"
										},
										{
											"begin": 420,
											"end": 459,
											"name": "tag",
											"source": 16,
											"value": "44"
										},
										{
											"begin": 420,
											"end": 459,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 420,
											"end": 459,
											"name": "PUSHIMMUTABLE",
											"source": 16,
											"value": "2083"
										},
										{
											"begin": 420,
											"end": 459,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 420,
											"end": 459,
											"name": "JUMP",
											"source": 16,
											"value": "[out]"
										},
										{
											"begin": 553,
											"end": 1251,
											"name": "tag",
											"source": 18,
											"value": "50"
										},
										{
											"begin": 553,
											"end": 1251,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 752,
											"end": 753,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 742,
											"end": 749,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 742,
											"end": 753,
											"name": "GT",
											"source": 18
										},
										{
											"begin": 742,
											"end": 771,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 742,
											"end": 771,
											"name": "ISZERO",
											"source": 18
										},
										{
											"begin": 742,
											"end": 771,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "138"
										},
										{
											"begin": 742,
											"end": 771,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 742,
											"end": 771,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 768,
											"end": 771,
											"name": "PUSH",
											"source": 18,
											"value": "64"
										},
										{
											"begin": 757,
											"end": 764,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 757,
											"end": 771,
											"name": "GT",
											"source": 18
										},
										{
											"begin": 757,
											"end": 771,
											"name": "ISZERO",
											"source": 18
										},
										{
											"begin": 742,
											"end": 771,
											"name": "tag",
											"source": 18,
											"value": "138"
										},
										{
											"begin": 742,
											"end": 771,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 734,
											"end": 772,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "139"
										},
										{
											"begin": 734,
											"end": 772,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 734,
											"end": 772,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 734,
											"end": 772,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 734,
											"end": 772,
											"name": "REVERT",
											"source": 18
										},
										{
											"begin": 734,
											"end": 772,
											"name": "tag",
											"source": 18,
											"value": "139"
										},
										{
											"begin": 734,
											"end": 772,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 783,
											"end": 803,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 813,
											"end": 818,
											"name": "PUSHIMMUTABLE",
											"source": 18,
											"value": "2083"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 806,
											"end": 829,
											"name": "AND",
											"source": 18
										},
										{
											"begin": 806,
											"end": 829,
											"name": "PUSH",
											"source": 18,
											"value": "70A08231"
										},
										{
											"begin": 838,
											"end": 842,
											"name": "ADDRESS",
											"source": 18
										},
										{
											"begin": 806,
											"end": 844,
											"name": "PUSH",
											"source": 18,
											"value": "40"
										},
										{
											"begin": 806,
											"end": 844,
											"name": "MLOAD",
											"source": 18
										},
										{
											"begin": 806,
											"end": 844,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 806,
											"end": 844,
											"name": "PUSH",
											"source": 18,
											"value": "FFFFFFFF"
										},
										{
											"begin": 806,
											"end": 844,
											"name": "AND",
											"source": 18
										},
										{
											"begin": 806,
											"end": 844,
											"name": "PUSH",
											"source": 18,
											"value": "E0"
										},
										{
											"begin": 806,
											"end": 844,
											"name": "SHL",
											"source": 18
										},
										{
											"begin": 806,
											"end": 844,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 806,
											"end": 844,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 806,
											"end": 844,
											"name": "PUSH",
											"source": 18,
											"value": "4"
										},
										{
											"begin": 806,
											"end": 844,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 806,
											"end": 844,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 806,
											"end": 844,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 806,
											"end": 844,
											"name": "AND",
											"source": 18
										},
										{
											"begin": 806,
											"end": 844,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 806,
											"end": 844,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 806,
											"end": 844,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 806,
											"end": 844,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 806,
											"end": 844,
											"name": "SWAP2",
											"source": 18
										},
										{
											"begin": 806,
											"end": 844,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 806,
											"end": 844,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 806,
											"end": 844,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 806,
											"end": 844,
											"name": "PUSH",
											"source": 18,
											"value": "40"
										},
										{
											"begin": 806,
											"end": 844,
											"name": "MLOAD",
											"source": 18
										},
										{
											"begin": 806,
											"end": 844,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 806,
											"end": 844,
											"name": "DUP4",
											"source": 18
										},
										{
											"begin": 806,
											"end": 844,
											"name": "SUB",
											"source": 18
										},
										{
											"begin": 806,
											"end": 844,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 806,
											"end": 844,
											"name": "DUP7",
											"source": 18
										},
										{
											"begin": 806,
											"end": 844,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 806,
											"end": 844,
											"name": "EXTCODESIZE",
											"source": 18
										},
										{
											"begin": 806,
											"end": 844,
											"name": "ISZERO",
											"source": 18
										},
										{
											"begin": 806,
											"end": 844,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 806,
											"end": 844,
											"name": "ISZERO",
											"source": 18
										},
										{
											"begin": 806,
											"end": 844,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "140"
										},
										{
											"begin": 806,
											"end": 844,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 806,
											"end": 844,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 806,
											"end": 844,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 806,
											"end": 844,
											"name": "REVERT",
											"source": 18
										},
										{
											"begin": 806,
											"end": 844,
											"name": "tag",
											"source": 18,
											"value": "140"
										},
										{
											"begin": 806,
											"end": 844,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 806,
											"end": 844,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 806,
											"end": 844,
											"name": "GAS",
											"source": 18
										},
										{
											"begin": 806,
											"end": 844,
											"name": "STATICCALL",
											"source": 18
										},
										{
											"begin": 806,
											"end": 844,
											"name": "ISZERO",
											"source": 18
										},
										{
											"begin": 806,
											"end": 844,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 806,
											"end": 844,
											"name": "ISZERO",
											"source": 18
										},
										{
											"begin": 806,
											"end": 844,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "142"
										},
										{
											"begin": 806,
											"end": 844,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 806,
											"end": 844,
											"name": "RETURNDATASIZE",
											"source": 18
										},
										{
											"begin": 806,
											"end": 844,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 806,
											"end": 844,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 806,
											"end": 844,
											"name": "RETURNDATACOPY",
											"source": 18
										},
										{
											"begin": 806,
											"end": 844,
											"name": "RETURNDATASIZE",
											"source": 18
										},
										{
											"begin": 806,
											"end": 844,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 806,
											"end": 844,
											"name": "REVERT",
											"source": 18
										},
										{
											"begin": 806,
											"end": 844,
											"name": "tag",
											"source": 18,
											"value": "142"
										},
										{
											"begin": 806,
											"end": 844,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 806,
											"end": 844,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 806,
											"end": 844,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 806,
											"end": 844,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 806,
											"end": 844,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 806,
											"end": 844,
											"name": "PUSH",
											"source": 18,
											"value": "40"
										},
										{
											"begin": 806,
											"end": 844,
											"name": "MLOAD",
											"source": 18
										},
										{
											"begin": 806,
											"end": 844,
											"name": "RETURNDATASIZE",
											"source": 18
										},
										{
											"begin": 806,
											"end": 844,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 806,
											"end": 844,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 806,
											"end": 844,
											"name": "LT",
											"source": 18
										},
										{
											"begin": 806,
											"end": 844,
											"name": "ISZERO",
											"source": 18
										},
										{
											"begin": 806,
											"end": 844,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "143"
										},
										{
											"begin": 806,
											"end": 844,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 806,
											"end": 844,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 806,
											"end": 844,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 806,
											"end": 844,
											"name": "REVERT",
											"source": 18
										},
										{
											"begin": 806,
											"end": 844,
											"name": "tag",
											"source": 18,
											"value": "143"
										},
										{
											"begin": 806,
											"end": 844,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 806,
											"end": 844,
											"name": "MLOAD",
											"source": 18
										},
										{
											"begin": 806,
											"end": 844,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 862,
											"end": 891,
											"name": "DUP5",
											"source": 18
										},
										{
											"begin": 862,
											"end": 891,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 862,
											"end": 891,
											"name": "LT",
											"source": 18
										},
										{
											"begin": 862,
											"end": 891,
											"name": "ISZERO",
											"source": 18
										},
										{
											"begin": 854,
											"end": 914,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "144"
										},
										{
											"begin": 854,
											"end": 914,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 854,
											"end": 914,
											"name": "PUSH",
											"source": 18,
											"value": "40"
										},
										{
											"begin": 854,
											"end": 914,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 854,
											"end": 914,
											"name": "MLOAD",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 854,
											"end": 914,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 854,
											"end": 914,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 854,
											"end": 914,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 854,
											"end": 914,
											"name": "PUSH",
											"source": 18,
											"value": "4"
										},
										{
											"begin": 854,
											"end": 914,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 854,
											"end": 914,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 854,
											"end": 914,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 854,
											"end": 914,
											"name": "PUSH",
											"source": 18,
											"value": "12"
										},
										{
											"begin": 854,
											"end": 914,
											"name": "PUSH",
											"source": 18,
											"value": "24"
										},
										{
											"begin": 854,
											"end": 914,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 854,
											"end": 914,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 854,
											"end": 914,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "496E73756666696369656E74205745544839"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "70"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 854,
											"end": 914,
											"name": "PUSH",
											"source": 18,
											"value": "44"
										},
										{
											"begin": 854,
											"end": 914,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 854,
											"end": 914,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 854,
											"end": 914,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 854,
											"end": 914,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 854,
											"end": 914,
											"name": "MLOAD",
											"source": 18
										},
										{
											"begin": 854,
											"end": 914,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 854,
											"end": 914,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 854,
											"end": 914,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 854,
											"end": 914,
											"name": "SUB",
											"source": 18
										},
										{
											"begin": 854,
											"end": 914,
											"name": "PUSH",
											"source": 18,
											"value": "64"
										},
										{
											"begin": 854,
											"end": 914,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 854,
											"end": 914,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 854,
											"end": 914,
											"name": "REVERT",
											"source": 18
										},
										{
											"begin": 854,
											"end": 914,
											"name": "tag",
											"source": 18,
											"value": "144"
										},
										{
											"begin": 854,
											"end": 914,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 929,
											"end": 945,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 929,
											"end": 945,
											"name": "ISZERO",
											"source": 18
										},
										{
											"begin": 925,
											"end": 1245,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "145"
										},
										{
											"begin": 925,
											"end": 1245,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 968,
											"end": 973,
											"name": "PUSHIMMUTABLE",
											"source": 18,
											"value": "2083"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 961,
											"end": 983,
											"name": "AND",
											"source": 18
										},
										{
											"begin": 961,
											"end": 983,
											"name": "PUSH",
											"source": 18,
											"value": "2E1A7D4D"
										},
										{
											"begin": 984,
											"end": 996,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 961,
											"end": 997,
											"name": "PUSH",
											"source": 18,
											"value": "40"
										},
										{
											"begin": 961,
											"end": 997,
											"name": "MLOAD",
											"source": 18
										},
										{
											"begin": 961,
											"end": 997,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 961,
											"end": 997,
											"name": "PUSH",
											"source": 18,
											"value": "FFFFFFFF"
										},
										{
											"begin": 961,
											"end": 997,
											"name": "AND",
											"source": 18
										},
										{
											"begin": 961,
											"end": 997,
											"name": "PUSH",
											"source": 18,
											"value": "E0"
										},
										{
											"begin": 961,
											"end": 997,
											"name": "SHL",
											"source": 18
										},
										{
											"begin": 961,
											"end": 997,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 961,
											"end": 997,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 961,
											"end": 997,
											"name": "PUSH",
											"source": 18,
											"value": "4"
										},
										{
											"begin": 961,
											"end": 997,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 961,
											"end": 997,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 961,
											"end": 997,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 961,
											"end": 997,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 961,
											"end": 997,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 961,
											"end": 997,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 961,
											"end": 997,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 961,
											"end": 997,
											"name": "SWAP2",
											"source": 18
										},
										{
											"begin": 961,
											"end": 997,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 961,
											"end": 997,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 961,
											"end": 997,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 961,
											"end": 997,
											"name": "PUSH",
											"source": 18,
											"value": "40"
										},
										{
											"begin": 961,
											"end": 997,
											"name": "MLOAD",
											"source": 18
										},
										{
											"begin": 961,
											"end": 997,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 961,
											"end": 997,
											"name": "DUP4",
											"source": 18
										},
										{
											"begin": 961,
											"end": 997,
											"name": "SUB",
											"source": 18
										},
										{
											"begin": 961,
											"end": 997,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 961,
											"end": 997,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 961,
											"end": 997,
											"name": "DUP8",
											"source": 18
										},
										{
											"begin": 961,
											"end": 997,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 961,
											"end": 997,
											"name": "EXTCODESIZE",
											"source": 18
										},
										{
											"begin": 961,
											"end": 997,
											"name": "ISZERO",
											"source": 18
										},
										{
											"begin": 961,
											"end": 997,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 961,
											"end": 997,
											"name": "ISZERO",
											"source": 18
										},
										{
											"begin": 961,
											"end": 997,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "146"
										},
										{
											"begin": 961,
											"end": 997,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 961,
											"end": 997,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 961,
											"end": 997,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 961,
											"end": 997,
											"name": "REVERT",
											"source": 18
										},
										{
											"begin": 961,
											"end": 997,
											"name": "tag",
											"source": 18,
											"value": "146"
										},
										{
											"begin": 961,
											"end": 997,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 961,
											"end": 997,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 961,
											"end": 997,
											"name": "GAS",
											"source": 18
										},
										{
											"begin": 961,
											"end": 997,
											"name": "CALL",
											"source": 18
										},
										{
											"begin": 961,
											"end": 997,
											"name": "ISZERO",
											"source": 18
										},
										{
											"begin": 961,
											"end": 997,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 961,
											"end": 997,
											"name": "ISZERO",
											"source": 18
										},
										{
											"begin": 961,
											"end": 997,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "148"
										},
										{
											"begin": 961,
											"end": 997,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 961,
											"end": 997,
											"name": "RETURNDATASIZE",
											"source": 18
										},
										{
											"begin": 961,
											"end": 997,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 961,
											"end": 997,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 961,
											"end": 997,
											"name": "RETURNDATACOPY",
											"source": 18
										},
										{
											"begin": 961,
											"end": 997,
											"name": "RETURNDATASIZE",
											"source": 18
										},
										{
											"begin": 961,
											"end": 997,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 961,
											"end": 997,
											"name": "REVERT",
											"source": 18
										},
										{
											"begin": 961,
											"end": 997,
											"name": "tag",
											"source": 18,
											"value": "148"
										},
										{
											"begin": 961,
											"end": 997,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 961,
											"end": 997,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 961,
											"end": 997,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 961,
											"end": 997,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 961,
											"end": 997,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 1011,
											"end": 1028,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 1059,
											"end": 1065,
											"name": "PUSH",
											"source": 18,
											"value": "2710"
										},
										{
											"begin": 1031,
											"end": 1056,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "149"
										},
										{
											"begin": 1048,
											"end": 1055,
											"name": "DUP6",
											"source": 18
										},
										{
											"begin": 1031,
											"end": 1043,
											"name": "DUP5",
											"source": 18
										},
										{
											"begin": 1031,
											"end": 1047,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "150"
										},
										{
											"begin": 1031,
											"end": 1047,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 1031,
											"end": 1056,
											"name": "SWAP2",
											"source": 18
										},
										{
											"begin": 1031,
											"end": 1056,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 1031,
											"end": 1056,
											"name": "PUSH",
											"source": 18,
											"value": "FFFFFFFF"
										},
										{
											"begin": 1031,
											"end": 1056,
											"name": "AND",
											"source": 18
										},
										{
											"begin": 1031,
											"end": 1056,
											"name": "JUMP",
											"source": 18,
											"value": "[in]"
										},
										{
											"begin": 1031,
											"end": 1056,
											"name": "tag",
											"source": 18,
											"value": "149"
										},
										{
											"begin": 1031,
											"end": 1056,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 1031,
											"end": 1065,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 1031,
											"end": 1065,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "151"
										},
										{
											"begin": 1031,
											"end": 1065,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 1031,
											"end": 1065,
											"name": "INVALID",
											"source": 18
										},
										{
											"begin": 1031,
											"end": 1065,
											"name": "tag",
											"source": 18,
											"value": "151"
										},
										{
											"begin": 1031,
											"end": 1065,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 1031,
											"end": 1065,
											"name": "DIV",
											"source": 18
										},
										{
											"begin": 1031,
											"end": 1065,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1083,
											"end": 1096,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 1083,
											"end": 1096,
											"name": "ISZERO",
											"source": 18
										},
										{
											"begin": 1079,
											"end": 1153,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "153"
										},
										{
											"begin": 1079,
											"end": 1153,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 1098,
											"end": 1153,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "153"
										},
										{
											"begin": 1129,
											"end": 1141,
											"name": "DUP4",
											"source": 18
										},
										{
											"begin": 1143,
											"end": 1152,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 1098,
											"end": 1128,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "101"
										},
										{
											"begin": 1098,
											"end": 1153,
											"name": "JUMP",
											"source": 18,
											"value": "[in]"
										},
										{
											"begin": 1098,
											"end": 1153,
											"name": "tag",
											"source": 18,
											"value": "153"
										},
										{
											"begin": 1098,
											"end": 1153,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 1167,
											"end": 1234,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "154"
										},
										{
											"begin": 1198,
											"end": 1207,
											"name": "DUP6",
											"source": 18
										},
										{
											"begin": 1224,
											"end": 1233,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 1209,
											"end": 1221,
											"name": "DUP5",
											"source": 18
										},
										{
											"begin": 1209,
											"end": 1233,
											"name": "SUB",
											"source": 18
										},
										{
											"begin": 1167,
											"end": 1197,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "101"
										},
										{
											"begin": 1167,
											"end": 1234,
											"name": "JUMP",
											"source": 18,
											"value": "[in]"
										},
										{
											"begin": 1167,
											"end": 1234,
											"name": "tag",
											"source": 18,
											"value": "154"
										},
										{
											"begin": 1167,
											"end": 1234,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 925,
											"end": 1245,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 925,
											"end": 1245,
											"name": "tag",
											"source": 18,
											"value": "145"
										},
										{
											"begin": 925,
											"end": 1245,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 553,
											"end": 1251,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 553,
											"end": 1251,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 553,
											"end": 1251,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 553,
											"end": 1251,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 553,
											"end": 1251,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 553,
											"end": 1251,
											"name": "JUMP",
											"source": 18,
											"value": "[out]"
										},
										{
											"begin": 1652,
											"end": 2000,
											"name": "tag",
											"source": 20,
											"value": "53"
										},
										{
											"begin": 1652,
											"end": 2000,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 1861,
											"end": 1911,
											"name": "PUSH",
											"source": 20,
											"value": "40"
										},
										{
											"begin": 1861,
											"end": 1911,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 1861,
											"end": 1911,
											"name": "MLOAD",
											"source": 20
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "6EB1769F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1861,
											"end": 1911,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 1861,
											"end": 1911,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 1885,
											"end": 1895,
											"name": "CALLER",
											"source": 20
										},
										{
											"begin": 1861,
											"end": 1911,
											"name": "PUSH",
											"source": 20,
											"value": "4"
										},
										{
											"begin": 1861,
											"end": 1911,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 1861,
											"end": 1911,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 1861,
											"end": 1911,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 1905,
											"end": 1909,
											"name": "ADDRESS",
											"source": 20
										},
										{
											"begin": 1861,
											"end": 1911,
											"name": "PUSH",
											"source": 20,
											"value": "24"
										},
										{
											"begin": 1861,
											"end": 1911,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 1861,
											"end": 1911,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 1861,
											"end": 1911,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 1861,
											"end": 1911,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 1861,
											"end": 1911,
											"name": "MLOAD",
											"source": 20
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 1914,
											"end": 1931,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1861,
											"end": 1884,
											"name": "DUP10",
											"source": 20
										},
										{
											"begin": 1861,
											"end": 1884,
											"name": "AND",
											"source": 20
										},
										{
											"begin": 1861,
											"end": 1884,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 1861,
											"end": 1884,
											"name": "PUSH",
											"source": 20,
											"value": "DD62ED3E"
										},
										{
											"begin": 1861,
											"end": 1884,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 1861,
											"end": 1911,
											"name": "PUSH",
											"source": 20,
											"value": "44"
										},
										{
											"begin": 1861,
											"end": 1911,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 1861,
											"end": 1911,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 1861,
											"end": 1911,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 1861,
											"end": 1911,
											"name": "SWAP3",
											"source": 20
										},
										{
											"begin": 1861,
											"end": 1911,
											"name": "PUSH",
											"source": 20,
											"value": "20"
										},
										{
											"begin": 1861,
											"end": 1911,
											"name": "SWAP3",
											"source": 20
										},
										{
											"begin": 1861,
											"end": 1911,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 1861,
											"end": 1911,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 1861,
											"end": 1911,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 1861,
											"end": 1911,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 1861,
											"end": 1911,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 1861,
											"end": 1911,
											"name": "SUB",
											"source": 20
										},
										{
											"begin": 1861,
											"end": 1911,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 1861,
											"end": 1911,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 1861,
											"end": 1884,
											"name": "DUP7",
											"source": 20
										},
										{
											"begin": 1861,
											"end": 1911,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 1861,
											"end": 1911,
											"name": "EXTCODESIZE",
											"source": 20
										},
										{
											"begin": 1861,
											"end": 1911,
											"name": "ISZERO",
											"source": 20
										},
										{
											"begin": 1861,
											"end": 1911,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 1861,
											"end": 1911,
											"name": "ISZERO",
											"source": 20
										},
										{
											"begin": 1861,
											"end": 1911,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "156"
										},
										{
											"begin": 1861,
											"end": 1911,
											"name": "JUMPI",
											"source": 20
										},
										{
											"begin": 1861,
											"end": 1911,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 1861,
											"end": 1911,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 1861,
											"end": 1911,
											"name": "REVERT",
											"source": 20
										},
										{
											"begin": 1861,
											"end": 1911,
											"name": "tag",
											"source": 20,
											"value": "156"
										},
										{
											"begin": 1861,
											"end": 1911,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 1861,
											"end": 1911,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 1861,
											"end": 1911,
											"name": "GAS",
											"source": 20
										},
										{
											"begin": 1861,
											"end": 1911,
											"name": "STATICCALL",
											"source": 20
										},
										{
											"begin": 1861,
											"end": 1911,
											"name": "ISZERO",
											"source": 20
										},
										{
											"begin": 1861,
											"end": 1911,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 1861,
											"end": 1911,
											"name": "ISZERO",
											"source": 20
										},
										{
											"begin": 1861,
											"end": 1911,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "158"
										},
										{
											"begin": 1861,
											"end": 1911,
											"name": "JUMPI",
											"source": 20
										},
										{
											"begin": 1861,
											"end": 1911,
											"name": "RETURNDATASIZE",
											"source": 20
										},
										{
											"begin": 1861,
											"end": 1911,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 1861,
											"end": 1911,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 1861,
											"end": 1911,
											"name": "RETURNDATACOPY",
											"source": 20
										},
										{
											"begin": 1861,
											"end": 1911,
											"name": "RETURNDATASIZE",
											"source": 20
										},
										{
											"begin": 1861,
											"end": 1911,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 1861,
											"end": 1911,
											"name": "REVERT",
											"source": 20
										},
										{
											"begin": 1861,
											"end": 1911,
											"name": "tag",
											"source": 20,
											"value": "158"
										},
										{
											"begin": 1861,
											"end": 1911,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 1861,
											"end": 1911,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 1861,
											"end": 1911,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 1861,
											"end": 1911,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 1861,
											"end": 1911,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 1861,
											"end": 1911,
											"name": "PUSH",
											"source": 20,
											"value": "40"
										},
										{
											"begin": 1861,
											"end": 1911,
											"name": "MLOAD",
											"source": 20
										},
										{
											"begin": 1861,
											"end": 1911,
											"name": "RETURNDATASIZE",
											"source": 20
										},
										{
											"begin": 1861,
											"end": 1911,
											"name": "PUSH",
											"source": 20,
											"value": "20"
										},
										{
											"begin": 1861,
											"end": 1911,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 1861,
											"end": 1911,
											"name": "LT",
											"source": 20
										},
										{
											"begin": 1861,
											"end": 1911,
											"name": "ISZERO",
											"source": 20
										},
										{
											"begin": 1861,
											"end": 1911,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "159"
										},
										{
											"begin": 1861,
											"end": 1911,
											"name": "JUMPI",
											"source": 20
										},
										{
											"begin": 1861,
											"end": 1911,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 1861,
											"end": 1911,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 1861,
											"end": 1911,
											"name": "REVERT",
											"source": 20
										},
										{
											"begin": 1861,
											"end": 1911,
											"name": "tag",
											"source": 20,
											"value": "159"
										},
										{
											"begin": 1861,
											"end": 1911,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1861,
											"end": 1911,
											"name": "MLOAD",
											"source": 20
										},
										{
											"begin": 1861,
											"end": 1931,
											"name": "LT",
											"source": 20
										},
										{
											"begin": 1857,
											"end": 1993,
											"name": "ISZERO",
											"source": 20
										},
										{
											"begin": 1857,
											"end": 1993,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "154"
										},
										{
											"begin": 1857,
											"end": 1993,
											"name": "JUMPI",
											"source": 20
										},
										{
											"begin": 1945,
											"end": 1993,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "154"
										},
										{
											"begin": 1963,
											"end": 1968,
											"name": "DUP7",
											"source": 20
										},
										{
											"begin": 1970,
											"end": 1975,
											"name": "DUP7",
											"source": 20
										},
										{
											"begin": 1977,
											"end": 1983,
											"name": "DUP7",
											"source": 20
										},
										{
											"begin": 1985,
											"end": 1986,
											"name": "DUP7",
											"source": 20
										},
										{
											"begin": 1988,
											"end": 1989,
											"name": "DUP7",
											"source": 20
										},
										{
											"begin": 1991,
											"end": 1992,
											"name": "DUP7",
											"source": 20
										},
										{
											"begin": 1945,
											"end": 1962,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "37"
										},
										{
											"begin": 1945,
											"end": 1993,
											"name": "JUMP",
											"source": 20,
											"value": "[in]"
										},
										{
											"begin": 308,
											"end": 961,
											"name": "tag",
											"source": 15,
											"value": "57"
										},
										{
											"begin": 308,
											"end": 961,
											"name": "JUMPDEST",
											"source": 15
										},
										{
											"begin": 383,
											"end": 405,
											"name": "PUSH",
											"source": 15,
											"value": "60"
										},
										{
											"begin": 439,
											"end": 443,
											"name": "DUP2",
											"source": 15
										},
										{
											"begin": 427,
											"end": 451,
											"name": "PUSH",
											"source": 15,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 427,
											"end": 451,
											"name": "DUP2",
											"source": 15
										},
										{
											"begin": 427,
											"end": 451,
											"name": "GT",
											"source": 15
										},
										{
											"begin": 427,
											"end": 451,
											"name": "DUP1",
											"source": 15
										},
										{
											"begin": 427,
											"end": 451,
											"name": "ISZERO",
											"source": 15
										},
										{
											"begin": 427,
											"end": 451,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "163"
										},
										{
											"begin": 427,
											"end": 451,
											"name": "JUMPI",
											"source": 15
										},
										{
											"begin": 427,
											"end": 451,
											"name": "PUSH",
											"source": 15,
											"value": "0"
										},
										{
											"begin": 427,
											"end": 451,
											"name": "DUP1",
											"source": 15
										},
										{
											"begin": 427,
											"end": 451,
											"name": "REVERT",
											"source": 15
										},
										{
											"begin": 427,
											"end": 451,
											"name": "tag",
											"source": 15,
											"value": "163"
										},
										{
											"begin": 427,
											"end": 451,
											"name": "JUMPDEST",
											"source": 15
										},
										{
											"begin": 427,
											"end": 451,
											"name": "POP",
											"source": 15
										},
										{
											"begin": 427,
											"end": 451,
											"name": "PUSH",
											"source": 15,
											"value": "40"
										},
										{
											"begin": 427,
											"end": 451,
											"name": "MLOAD",
											"source": 15
										},
										{
											"begin": 427,
											"end": 451,
											"name": "SWAP1",
											"source": 15
										},
										{
											"begin": 427,
											"end": 451,
											"name": "DUP1",
											"source": 15
										},
										{
											"begin": 427,
											"end": 451,
											"name": "DUP3",
											"source": 15
										},
										{
											"begin": 427,
											"end": 451,
											"name": "MSTORE",
											"source": 15
										},
										{
											"begin": 427,
											"end": 451,
											"name": "DUP1",
											"source": 15
										},
										{
											"begin": 427,
											"end": 451,
											"name": "PUSH",
											"source": 15,
											"value": "20"
										},
										{
											"begin": 427,
											"end": 451,
											"name": "MUL",
											"source": 15
										},
										{
											"begin": 427,
											"end": 451,
											"name": "PUSH",
											"source": 15,
											"value": "20"
										},
										{
											"begin": 427,
											"end": 451,
											"name": "ADD",
											"source": 15
										},
										{
											"begin": 427,
											"end": 451,
											"name": "DUP3",
											"source": 15
										},
										{
											"begin": 427,
											"end": 451,
											"name": "ADD",
											"source": 15
										},
										{
											"begin": 427,
											"end": 451,
											"name": "PUSH",
											"source": 15,
											"value": "40"
										},
										{
											"begin": 427,
											"end": 451,
											"name": "MSTORE",
											"source": 15
										},
										{
											"begin": 427,
											"end": 451,
											"name": "DUP1",
											"source": 15
										},
										{
											"begin": 427,
											"end": 451,
											"name": "ISZERO",
											"source": 15
										},
										{
											"begin": 427,
											"end": 451,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "164"
										},
										{
											"begin": 427,
											"end": 451,
											"name": "JUMPI",
											"source": 15
										},
										{
											"begin": 427,
											"end": 451,
											"name": "DUP2",
											"source": 15
										},
										{
											"begin": 427,
											"end": 451,
											"name": "PUSH",
											"source": 15,
											"value": "20"
										},
										{
											"begin": 427,
											"end": 451,
											"name": "ADD",
											"source": 15
										},
										{
											"begin": 427,
											"end": 451,
											"name": "tag",
											"source": 15,
											"value": "165"
										},
										{
											"begin": 427,
											"end": 451,
											"name": "JUMPDEST",
											"source": 15
										},
										{
											"begin": 427,
											"end": 451,
											"name": "PUSH",
											"source": 15,
											"value": "60"
										},
										{
											"begin": 427,
											"end": 451,
											"name": "DUP2",
											"source": 15
										},
										{
											"begin": 427,
											"end": 451,
											"name": "MSTORE",
											"source": 15
										},
										{
											"begin": 427,
											"end": 451,
											"name": "PUSH",
											"source": 15,
											"value": "20"
										},
										{
											"begin": 427,
											"end": 451,
											"name": "ADD",
											"source": 15
										},
										{
											"begin": 427,
											"end": 451,
											"name": "SWAP1",
											"source": 15
										},
										{
											"begin": 427,
											"end": 451,
											"name": "PUSH",
											"source": 15,
											"value": "1"
										},
										{
											"begin": 427,
											"end": 451,
											"name": "SWAP1",
											"source": 15
										},
										{
											"begin": 427,
											"end": 451,
											"name": "SUB",
											"source": 15
										},
										{
											"begin": 427,
											"end": 451,
											"name": "SWAP1",
											"source": 15
										},
										{
											"begin": 427,
											"end": 451,
											"name": "DUP2",
											"source": 15
										},
										{
											"begin": 427,
											"end": 451,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "165"
										},
										{
											"begin": 427,
											"end": 451,
											"name": "JUMPI",
											"source": 15
										},
										{
											"begin": 427,
											"end": 451,
											"name": "SWAP1",
											"source": 15
										},
										{
											"begin": 427,
											"end": 451,
											"name": "POP",
											"source": 15
										},
										{
											"begin": 427,
											"end": 451,
											"name": "tag",
											"source": 15,
											"value": "164"
										},
										{
											"begin": 427,
											"end": 451,
											"name": "JUMPDEST",
											"source": 15
										},
										{
											"begin": 427,
											"end": 451,
											"name": "POP",
											"source": 15
										},
										{
											"begin": 417,
											"end": 451,
											"name": "SWAP1",
											"source": 15
										},
										{
											"begin": 417,
											"end": 451,
											"name": "POP",
											"source": 15
										},
										{
											"begin": 466,
											"end": 475,
											"name": "PUSH",
											"source": 15,
											"value": "0"
										},
										{
											"begin": 461,
											"end": 955,
											"name": "tag",
											"source": 15,
											"value": "166"
										},
										{
											"begin": 461,
											"end": 955,
											"name": "JUMPDEST",
											"source": 15
										},
										{
											"begin": 481,
											"end": 496,
											"name": "DUP3",
											"source": 15
										},
										{
											"begin": 481,
											"end": 496,
											"name": "DUP2",
											"source": 15
										},
										{
											"begin": 481,
											"end": 496,
											"name": "LT",
											"source": 15
										},
										{
											"begin": 461,
											"end": 955,
											"name": "ISZERO",
											"source": 15
										},
										{
											"begin": 461,
											"end": 955,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "167"
										},
										{
											"begin": 461,
											"end": 955,
											"name": "JUMPI",
											"source": 15
										},
										{
											"begin": 518,
											"end": 530,
											"name": "PUSH",
											"source": 15,
											"value": "0"
										},
										{
											"begin": 518,
											"end": 530,
											"name": "DUP1",
											"source": 15
										},
										{
											"begin": 563,
											"end": 567,
											"name": "ADDRESS",
											"source": 15
										},
										{
											"begin": 582,
											"end": 586,
											"name": "DUP7",
											"source": 15
										},
										{
											"begin": 582,
											"end": 586,
											"name": "DUP7",
											"source": 15
										},
										{
											"begin": 587,
											"end": 588,
											"name": "DUP6",
											"source": 15
										},
										{
											"begin": 582,
											"end": 589,
											"name": "DUP2",
											"source": 15
										},
										{
											"begin": 582,
											"end": 589,
											"name": "DUP2",
											"source": 15
										},
										{
											"begin": 582,
											"end": 589,
											"name": "LT",
											"source": 15
										},
										{
											"begin": 582,
											"end": 589,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "169"
										},
										{
											"begin": 582,
											"end": 589,
											"name": "JUMPI",
											"source": 15
										},
										{
											"begin": 582,
											"end": 589,
											"name": "INVALID",
											"source": 15
										},
										{
											"begin": 582,
											"end": 589,
											"name": "tag",
											"source": 15,
											"value": "169"
										},
										{
											"begin": 582,
											"end": 589,
											"name": "JUMPDEST",
											"source": 15
										},
										{
											"begin": 582,
											"end": 589,
											"name": "SWAP1",
											"source": 15
										},
										{
											"begin": 582,
											"end": 589,
											"name": "POP",
											"source": 15
										},
										{
											"begin": 582,
											"end": 589,
											"name": "PUSH",
											"source": 15,
											"value": "20"
										},
										{
											"begin": 582,
											"end": 589,
											"name": "MUL",
											"source": 15
										},
										{
											"begin": 582,
											"end": 589,
											"name": "DUP2",
											"source": 15
										},
										{
											"begin": 582,
											"end": 589,
											"name": "ADD",
											"source": 15
										},
										{
											"begin": 582,
											"end": 589,
											"name": "SWAP1",
											"source": 15
										},
										{
											"begin": 582,
											"end": 589,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "170"
										},
										{
											"begin": 582,
											"end": 589,
											"name": "SWAP2",
											"source": 15
										},
										{
											"begin": 582,
											"end": 589,
											"name": "SWAP1",
											"source": 15
										},
										{
											"begin": 582,
											"end": 589,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "171"
										},
										{
											"begin": 582,
											"end": 589,
											"name": "JUMP",
											"source": 15,
											"value": "[in]"
										},
										{
											"begin": 582,
											"end": 589,
											"name": "tag",
											"source": 15,
											"value": "170"
										},
										{
											"begin": 582,
											"end": 589,
											"name": "JUMPDEST",
											"source": 15
										},
										{
											"begin": 555,
											"end": 590,
											"name": "PUSH",
											"source": 15,
											"value": "40"
										},
										{
											"begin": 555,
											"end": 590,
											"name": "MLOAD",
											"source": 15
										},
										{
											"begin": 555,
											"end": 590,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "172"
										},
										{
											"begin": 555,
											"end": 590,
											"name": "SWAP3",
											"source": 15
										},
										{
											"begin": 555,
											"end": 590,
											"name": "SWAP2",
											"source": 15
										},
										{
											"begin": 555,
											"end": 590,
											"name": "SWAP1",
											"source": 15
										},
										{
											"begin": 555,
											"end": 590,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "173"
										},
										{
											"begin": 555,
											"end": 590,
											"name": "JUMP",
											"source": 15,
											"value": "[in]"
										},
										{
											"begin": 555,
											"end": 590,
											"name": "tag",
											"source": 15,
											"value": "172"
										},
										{
											"begin": 555,
											"end": 590,
											"name": "JUMPDEST",
											"source": 15
										},
										{
											"begin": 555,
											"end": 590,
											"name": "PUSH",
											"source": 15,
											"value": "0"
										},
										{
											"begin": 555,
											"end": 590,
											"name": "PUSH",
											"source": 15,
											"value": "40"
										},
										{
											"begin": 555,
											"end": 590,
											"name": "MLOAD",
											"source": 15
										},
										{
											"begin": 555,
											"end": 590,
											"name": "DUP1",
											"source": 15
										},
										{
											"begin": 555,
											"end": 590,
											"name": "DUP4",
											"source": 15
										},
										{
											"begin": 555,
											"end": 590,
											"name": "SUB",
											"source": 15
										},
										{
											"begin": 555,
											"end": 590,
											"name": "DUP2",
											"source": 15
										},
										{
											"begin": 555,
											"end": 590,
											"name": "DUP6",
											"source": 15
										},
										{
											"begin": 555,
											"end": 590,
											"name": "GAS",
											"source": 15
										},
										{
											"begin": 555,
											"end": 590,
											"name": "DELEGATECALL",
											"source": 15
										},
										{
											"begin": 555,
											"end": 590,
											"name": "SWAP2",
											"source": 15
										},
										{
											"begin": 555,
											"end": 590,
											"name": "POP",
											"source": 15
										},
										{
											"begin": 555,
											"end": 590,
											"name": "POP",
											"source": 15
										},
										{
											"begin": 555,
											"end": 590,
											"name": "RETURNDATASIZE",
											"source": 15
										},
										{
											"begin": 555,
											"end": 590,
											"name": "DUP1",
											"source": 15
										},
										{
											"begin": 555,
											"end": 590,
											"name": "PUSH",
											"source": 15,
											"value": "0"
										},
										{
											"begin": 555,
											"end": 590,
											"name": "DUP2",
											"source": 15
										},
										{
											"begin": 555,
											"end": 590,
											"name": "EQ",
											"source": 15
										},
										{
											"begin": 555,
											"end": 590,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "176"
										},
										{
											"begin": 555,
											"end": 590,
											"name": "JUMPI",
											"source": 15
										},
										{
											"begin": 555,
											"end": 590,
											"name": "PUSH",
											"source": 15,
											"value": "40"
										},
										{
											"begin": 555,
											"end": 590,
											"name": "MLOAD",
											"source": 15
										},
										{
											"begin": 555,
											"end": 590,
											"name": "SWAP2",
											"source": 15
										},
										{
											"begin": 555,
											"end": 590,
											"name": "POP",
											"source": 15
										},
										{
											"begin": 555,
											"end": 590,
											"name": "PUSH",
											"source": 15,
											"value": "1F"
										},
										{
											"begin": 555,
											"end": 590,
											"name": "NOT",
											"source": 15
										},
										{
											"begin": 555,
											"end": 590,
											"name": "PUSH",
											"source": 15,
											"value": "3F"
										},
										{
											"begin": 555,
											"end": 590,
											"name": "RETURNDATASIZE",
											"source": 15
										},
										{
											"begin": 555,
											"end": 590,
											"name": "ADD",
											"source": 15
										},
										{
											"begin": 555,
											"end": 590,
											"name": "AND",
											"source": 15
										},
										{
											"begin": 555,
											"end": 590,
											"name": "DUP3",
											"source": 15
										},
										{
											"begin": 555,
											"end": 590,
											"name": "ADD",
											"source": 15
										},
										{
											"begin": 555,
											"end": 590,
											"name": "PUSH",
											"source": 15,
											"value": "40"
										},
										{
											"begin": 555,
											"end": 590,
											"name": "MSTORE",
											"source": 15
										},
										{
											"begin": 555,
											"end": 590,
											"name": "RETURNDATASIZE",
											"source": 15
										},
										{
											"begin": 555,
											"end": 590,
											"name": "DUP3",
											"source": 15
										},
										{
											"begin": 555,
											"end": 590,
											"name": "MSTORE",
											"source": 15
										},
										{
											"begin": 555,
											"end": 590,
											"name": "RETURNDATASIZE",
											"source": 15
										},
										{
											"begin": 555,
											"end": 590,
											"name": "PUSH",
											"source": 15,
											"value": "0"
										},
										{
											"begin": 555,
											"end": 590,
											"name": "PUSH",
											"source": 15,
											"value": "20"
										},
										{
											"begin": 555,
											"end": 590,
											"name": "DUP5",
											"source": 15
										},
										{
											"begin": 555,
											"end": 590,
											"name": "ADD",
											"source": 15
										},
										{
											"begin": 555,
											"end": 590,
											"name": "RETURNDATACOPY",
											"source": 15
										},
										{
											"begin": 555,
											"end": 590,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "175"
										},
										{
											"begin": 555,
											"end": 590,
											"name": "JUMP",
											"source": 15
										},
										{
											"begin": 555,
											"end": 590,
											"name": "tag",
											"source": 15,
											"value": "176"
										},
										{
											"begin": 555,
											"end": 590,
											"name": "JUMPDEST",
											"source": 15
										},
										{
											"begin": 555,
											"end": 590,
											"name": "PUSH",
											"source": 15,
											"value": "60"
										},
										{
											"begin": 555,
											"end": 590,
											"name": "SWAP2",
											"source": 15
										},
										{
											"begin": 555,
											"end": 590,
											"name": "POP",
											"source": 15
										},
										{
											"begin": 555,
											"end": 590,
											"name": "tag",
											"source": 15,
											"value": "175"
										},
										{
											"begin": 555,
											"end": 590,
											"name": "JUMPDEST",
											"source": 15
										},
										{
											"begin": 555,
											"end": 590,
											"name": "POP",
											"source": 15
										},
										{
											"begin": 517,
											"end": 590,
											"name": "SWAP2",
											"source": 15
										},
										{
											"begin": 517,
											"end": 590,
											"name": "POP",
											"source": 15
										},
										{
											"begin": 517,
											"end": 590,
											"name": "SWAP2",
											"source": 15
										},
										{
											"begin": 517,
											"end": 590,
											"name": "POP",
											"source": 15
										},
										{
											"begin": 610,
											"end": 617,
											"name": "DUP2",
											"source": 15
										},
										{
											"begin": 605,
											"end": 911,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "177"
										},
										{
											"begin": 605,
											"end": 911,
											"name": "JUMPI",
											"source": 15
										},
										{
											"begin": 737,
											"end": 739,
											"name": "PUSH",
											"source": 15,
											"value": "44"
										},
										{
											"begin": 721,
											"end": 727,
											"name": "DUP2",
											"source": 15
										},
										{
											"begin": 721,
											"end": 734,
											"name": "MLOAD",
											"source": 15
										},
										{
											"begin": 721,
											"end": 739,
											"name": "LT",
											"source": 15
										},
										{
											"begin": 717,
											"end": 749,
											"name": "ISZERO",
											"source": 15
										},
										{
											"begin": 717,
											"end": 749,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "178"
										},
										{
											"begin": 717,
											"end": 749,
											"name": "JUMPI",
											"source": 15
										},
										{
											"begin": 741,
											"end": 749,
											"name": "PUSH",
											"source": 15,
											"value": "0"
										},
										{
											"begin": 741,
											"end": 749,
											"name": "DUP1",
											"source": 15
										},
										{
											"begin": 741,
											"end": 749,
											"name": "REVERT",
											"source": 15
										},
										{
											"begin": 717,
											"end": 749,
											"name": "tag",
											"source": 15,
											"value": "178"
										},
										{
											"begin": 717,
											"end": 749,
											"name": "JUMPDEST",
											"source": 15
										},
										{
											"begin": 820,
											"end": 824,
											"name": "PUSH",
											"source": 15,
											"value": "4"
										},
										{
											"begin": 812,
											"end": 818,
											"name": "DUP2",
											"source": 15
										},
										{
											"begin": 808,
											"end": 825,
											"name": "ADD",
											"source": 15
										},
										{
											"begin": 798,
											"end": 825,
											"name": "SWAP1",
											"source": 15
										},
										{
											"begin": 798,
											"end": 825,
											"name": "POP",
											"source": 15
										},
										{
											"begin": 878,
											"end": 884,
											"name": "DUP1",
											"source": 15
										},
										{
											"begin": 867,
											"end": 895,
											"name": "DUP1",
											"source": 15
										},
										{
											"begin": 867,
											"end": 895,
											"name": "PUSH",
											"source": 15,
											"value": "20"
										},
										{
											"begin": 867,
											"end": 895,
											"name": "ADD",
											"source": 15
										},
										{
											"begin": 867,
											"end": 895,
											"name": "SWAP1",
											"source": 15
										},
										{
											"begin": 867,
											"end": 895,
											"name": "MLOAD",
											"source": 15
										},
										{
											"begin": 867,
											"end": 895,
											"name": "DUP2",
											"source": 15
										},
										{
											"begin": 867,
											"end": 895,
											"name": "ADD",
											"source": 15
										},
										{
											"begin": 867,
											"end": 895,
											"name": "SWAP1",
											"source": 15
										},
										{
											"begin": 867,
											"end": 895,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "179"
										},
										{
											"begin": 867,
											"end": 895,
											"name": "SWAP2",
											"source": 15
										},
										{
											"begin": 867,
											"end": 895,
											"name": "SWAP1",
											"source": 15
										},
										{
											"begin": 867,
											"end": 895,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "180"
										},
										{
											"begin": 867,
											"end": 895,
											"name": "JUMP",
											"source": 15,
											"value": "[in]"
										},
										{
											"begin": 867,
											"end": 895,
											"name": "tag",
											"source": 15,
											"value": "179"
										},
										{
											"begin": 867,
											"end": 895,
											"name": "JUMPDEST",
											"source": 15
										},
										{
											"begin": 860,
											"end": 896,
											"name": "PUSH",
											"source": 15,
											"value": "40"
										},
										{
											"begin": 860,
											"end": 896,
											"name": "MLOAD",
											"source": 15
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 860,
											"end": 896,
											"name": "DUP2",
											"source": 15
										},
										{
											"begin": 860,
											"end": 896,
											"name": "MSTORE",
											"source": 15
										},
										{
											"begin": 860,
											"end": 896,
											"name": "PUSH",
											"source": 15,
											"value": "4"
										},
										{
											"begin": 860,
											"end": 896,
											"name": "ADD",
											"source": 15
										},
										{
											"begin": 860,
											"end": 896,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "120"
										},
										{
											"begin": 860,
											"end": 896,
											"name": "SWAP2",
											"source": 15
										},
										{
											"begin": 860,
											"end": 896,
											"name": "SWAP1",
											"source": 15
										},
										{
											"begin": 860,
											"end": 896,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "182"
										},
										{
											"begin": 860,
											"end": 896,
											"name": "JUMP",
											"source": 15,
											"value": "[in]"
										},
										{
											"begin": 605,
											"end": 911,
											"name": "tag",
											"source": 15,
											"value": "177"
										},
										{
											"begin": 605,
											"end": 911,
											"name": "JUMPDEST",
											"source": 15
										},
										{
											"begin": 938,
											"end": 944,
											"name": "DUP1",
											"source": 15
										},
										{
											"begin": 925,
											"end": 932,
											"name": "DUP5",
											"source": 15
										},
										{
											"begin": 933,
											"end": 934,
											"name": "DUP5",
											"source": 15
										},
										{
											"begin": 925,
											"end": 935,
											"name": "DUP2",
											"source": 15
										},
										{
											"begin": 925,
											"end": 935,
											"name": "MLOAD",
											"source": 15
										},
										{
											"begin": 925,
											"end": 935,
											"name": "DUP2",
											"source": 15
										},
										{
											"begin": 925,
											"end": 935,
											"name": "LT",
											"source": 15
										},
										{
											"begin": 925,
											"end": 935,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "183"
										},
										{
											"begin": 925,
											"end": 935,
											"name": "JUMPI",
											"source": 15
										},
										{
											"begin": 925,
											"end": 935,
											"name": "INVALID",
											"source": 15
										},
										{
											"begin": 925,
											"end": 935,
											"name": "tag",
											"source": 15,
											"value": "183"
										},
										{
											"begin": 925,
											"end": 935,
											"name": "JUMPDEST",
											"source": 15
										},
										{
											"begin": 925,
											"end": 935,
											"name": "PUSH",
											"source": 15,
											"value": "20"
										},
										{
											"begin": 925,
											"end": 935,
											"name": "SWAP1",
											"source": 15
										},
										{
											"begin": 925,
											"end": 935,
											"name": "DUP2",
											"source": 15
										},
										{
											"begin": 925,
											"end": 935,
											"name": "MUL",
											"source": 15
										},
										{
											"begin": 925,
											"end": 935,
											"name": "SWAP2",
											"source": 15
										},
										{
											"begin": 925,
											"end": 935,
											"name": "SWAP1",
											"source": 15
										},
										{
											"begin": 925,
											"end": 935,
											"name": "SWAP2",
											"source": 15
										},
										{
											"begin": 925,
											"end": 935,
											"name": "ADD",
											"source": 15
										},
										{
											"begin": 925,
											"end": 935,
											"name": "ADD",
											"source": 15
										},
										{
											"begin": 925,
											"end": 944,
											"name": "MSTORE",
											"source": 15
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 498,
											"end": 501,
											"name": "PUSH",
											"source": 15,
											"value": "1"
										},
										{
											"begin": 498,
											"end": 501,
											"name": "ADD",
											"source": 15
										},
										{
											"begin": 461,
											"end": 955,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "166"
										},
										{
											"begin": 461,
											"end": 955,
											"name": "JUMP",
											"source": 15
										},
										{
											"begin": 461,
											"end": 955,
											"name": "tag",
											"source": 15,
											"value": "167"
										},
										{
											"begin": 461,
											"end": 955,
											"name": "JUMPDEST",
											"source": 15
										},
										{
											"begin": 461,
											"end": 955,
											"name": "POP",
											"source": 15
										},
										{
											"begin": 308,
											"end": 961,
											"name": "SWAP3",
											"source": 15
										},
										{
											"begin": 308,
											"end": 961,
											"name": "SWAP2",
											"source": 15
										},
										{
											"begin": 308,
											"end": 961,
											"name": "POP",
											"source": 15
										},
										{
											"begin": 308,
											"end": 961,
											"name": "POP",
											"source": 15
										},
										{
											"begin": 308,
											"end": 961,
											"name": "JUMP",
											"source": 15,
											"value": "[out]"
										},
										{
											"begin": 4885,
											"end": 6160,
											"name": "tag",
											"source": 13,
											"value": "63"
										},
										{
											"begin": 4885,
											"end": 6160,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 5043,
											"end": 5060,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 5009,
											"end": 5015,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 5009,
											"end": 5024,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 5009,
											"end": 5024,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 5009,
											"end": 5024,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 244,
											"end": 252,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 223,
											"end": 240,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "185"
										},
										{
											"begin": 223,
											"end": 238,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "104"
										},
										{
											"begin": 223,
											"end": 240,
											"name": "JUMP",
											"source": 19,
											"value": "[in]"
										},
										{
											"begin": 223,
											"end": 240,
											"name": "tag",
											"source": 19,
											"value": "185"
										},
										{
											"begin": 223,
											"end": 240,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 223,
											"end": 252,
											"name": "GT",
											"source": 19
										},
										{
											"begin": 223,
											"end": 252,
											"name": "ISZERO",
											"source": 19
										},
										{
											"begin": 215,
											"end": 276,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "186"
										},
										{
											"begin": 215,
											"end": 276,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 215,
											"end": 276,
											"name": "PUSH",
											"source": 19,
											"value": "40"
										},
										{
											"begin": 215,
											"end": 276,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 215,
											"end": 276,
											"name": "MLOAD",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 215,
											"end": 276,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 215,
											"end": 276,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 215,
											"end": 276,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 215,
											"end": 276,
											"name": "PUSH",
											"source": 19,
											"value": "4"
										},
										{
											"begin": 215,
											"end": 276,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 215,
											"end": 276,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 215,
											"end": 276,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 215,
											"end": 276,
											"name": "PUSH",
											"source": 19,
											"value": "13"
										},
										{
											"begin": 215,
											"end": 276,
											"name": "PUSH",
											"source": 19,
											"value": "24"
										},
										{
											"begin": 215,
											"end": 276,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 215,
											"end": 276,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 215,
											"end": 276,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "151C985B9CD858DD1A5BDB881D1BDBC81BDB19"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "6A"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 215,
											"end": 276,
											"name": "PUSH",
											"source": 19,
											"value": "44"
										},
										{
											"begin": 215,
											"end": 276,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 215,
											"end": 276,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 215,
											"end": 276,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 215,
											"end": 276,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 215,
											"end": 276,
											"name": "MLOAD",
											"source": 19
										},
										{
											"begin": 215,
											"end": 276,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 215,
											"end": 276,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 215,
											"end": 276,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 215,
											"end": 276,
											"name": "SUB",
											"source": 19
										},
										{
											"begin": 215,
											"end": 276,
											"name": "PUSH",
											"source": 19,
											"value": "64"
										},
										{
											"begin": 215,
											"end": 276,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 215,
											"end": 276,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 215,
											"end": 276,
											"name": "REVERT",
											"source": 19
										},
										{
											"begin": 215,
											"end": 276,
											"name": "tag",
											"source": 19,
											"value": "186"
										},
										{
											"begin": 215,
											"end": 276,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 5092,
											"end": 5102,
											"name": "CALLER",
											"source": 13
										},
										{
											"begin": 5150,
											"end": 6075,
											"name": "tag",
											"source": 13,
											"value": "188"
										},
										{
											"begin": 5150,
											"end": 6075,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 5177,
											"end": 5198,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 5201,
											"end": 5231,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "190"
										},
										{
											"begin": 5201,
											"end": 5207,
											"name": "DUP6",
											"source": 13
										},
										{
											"begin": 5201,
											"end": 5212,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 5201,
											"end": 5212,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 5201,
											"end": 5212,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 5201,
											"end": 5229,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "191"
										},
										{
											"begin": 5201,
											"end": 5231,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 5201,
											"end": 5231,
											"name": "tag",
											"source": 13,
											"value": "190"
										},
										{
											"begin": 5201,
											"end": 5231,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 5177,
											"end": 5231,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 5177,
											"end": 5231,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 5343,
											"end": 5737,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "192"
										},
										{
											"begin": 5379,
											"end": 5385,
											"name": "DUP6",
											"source": 13
										},
										{
											"begin": 5379,
											"end": 5394,
											"name": "PUSH",
											"source": 13,
											"value": "60"
										},
										{
											"begin": 5379,
											"end": 5394,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 5379,
											"end": 5394,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 5412,
											"end": 5428,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 5412,
											"end": 5463,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "193"
										},
										{
											"begin": 5412,
											"end": 5463,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 5447,
											"end": 5453,
											"name": "DUP7",
											"source": 13
										},
										{
											"begin": 5447,
											"end": 5463,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 5447,
											"end": 5463,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 5447,
											"end": 5463,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 5412,
											"end": 5463,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "194"
										},
										{
											"begin": 5412,
											"end": 5463,
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 5412,
											"end": 5463,
											"name": "tag",
											"source": 13,
											"value": "193"
										},
										{
											"begin": 5412,
											"end": 5463,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 5439,
											"end": 5443,
											"name": "ADDRESS",
											"source": 13
										},
										{
											"begin": 5412,
											"end": 5463,
											"name": "tag",
											"source": 13,
											"value": "194"
										},
										{
											"begin": 5412,
											"end": 5463,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 5532,
											"end": 5533,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 5551,
											"end": 5723,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 5551,
											"end": 5723,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 5551,
											"end": 5723,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 5551,
											"end": 5723,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 5551,
											"end": 5723,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 5551,
											"end": 5723,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 5551,
											"end": 5723,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 5551,
											"end": 5723,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 5596,
											"end": 5622,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "195"
										},
										{
											"begin": 5596,
											"end": 5602,
											"name": "DUP12",
											"source": 13
										},
										{
											"begin": 5596,
											"end": 5607,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 5596,
											"end": 5607,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 5596,
											"end": 5607,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 5596,
											"end": 5620,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "196"
										},
										{
											"begin": 5596,
											"end": 5622,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 5596,
											"end": 5622,
											"name": "tag",
											"source": 13,
											"value": "195"
										},
										{
											"begin": 5596,
											"end": 5622,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 5551,
											"end": 5723,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 5551,
											"end": 5723,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 5551,
											"end": 5723,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 5551,
											"end": 5723,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 5699,
											"end": 5704,
											"name": "DUP8",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5551,
											"end": 5723,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 5551,
											"end": 5723,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 5551,
											"end": 5723,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 5551,
											"end": 5723,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 5343,
											"end": 5361,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "118"
										},
										{
											"begin": 5343,
											"end": 5737,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 5343,
											"end": 5737,
											"name": "tag",
											"source": 13,
											"value": "192"
										},
										{
											"begin": 5343,
											"end": 5737,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 5325,
											"end": 5340,
											"name": "PUSH",
											"source": 13,
											"value": "60"
										},
										{
											"begin": 5325,
											"end": 5340,
											"name": "DUP7",
											"source": 13
										},
										{
											"begin": 5325,
											"end": 5340,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 5325,
											"end": 5737,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 5807,
											"end": 6065,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 5807,
											"end": 6065,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 5807,
											"end": 6065,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "197"
										},
										{
											"begin": 5807,
											"end": 6065,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 5938,
											"end": 5949,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 5938,
											"end": 5949,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 5863,
											"end": 5867,
											"name": "ADDRESS",
											"source": 13
										},
										{
											"begin": 5863,
											"end": 5867,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5938,
											"end": 5961,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "198"
										},
										{
											"begin": 5938,
											"end": 5961,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 5938,
											"end": 5959,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "199"
										},
										{
											"begin": 5938,
											"end": 5961,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 5938,
											"end": 5961,
											"name": "tag",
											"source": 13,
											"value": "198"
										},
										{
											"begin": 5938,
											"end": 5961,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 5924,
											"end": 5961,
											"name": "DUP6",
											"source": 13
										},
										{
											"begin": 5924,
											"end": 5961,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 5807,
											"end": 6065,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "200"
										},
										{
											"begin": 5807,
											"end": 6065,
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 5807,
											"end": 6065,
											"name": "tag",
											"source": 13,
											"value": "197"
										},
										{
											"begin": 5807,
											"end": 6065,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 6012,
											"end": 6018,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 6012,
											"end": 6027,
											"name": "PUSH",
											"source": 13,
											"value": "60"
										},
										{
											"begin": 6012,
											"end": 6027,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 6012,
											"end": 6027,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 6000,
											"end": 6027,
											"name": "SWAP4",
											"source": 13
										},
										{
											"begin": 6000,
											"end": 6027,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 6045,
											"end": 6050,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 6045,
											"end": 6050,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "189"
										},
										{
											"begin": 6045,
											"end": 6050,
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 5807,
											"end": 6065,
											"name": "tag",
											"source": 13,
											"value": "200"
										},
										{
											"begin": 5807,
											"end": 6065,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 5150,
											"end": 6075,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 5150,
											"end": 6075,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "188"
										},
										{
											"begin": 5150,
											"end": 6075,
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 5150,
											"end": 6075,
											"name": "tag",
											"source": 13,
											"value": "189"
										},
										{
											"begin": 5150,
											"end": 6075,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 6106,
											"end": 6112,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 6106,
											"end": 6129,
											"name": "PUSH",
											"source": 13,
											"value": "80"
										},
										{
											"begin": 6106,
											"end": 6129,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 6106,
											"end": 6129,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 6093,
											"end": 6102,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 6093,
											"end": 6129,
											"name": "LT",
											"source": 13
										},
										{
											"begin": 6093,
											"end": 6129,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 6085,
											"end": 6153,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "201"
										},
										{
											"begin": 6085,
											"end": 6153,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 6085,
											"end": 6153,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 6085,
											"end": 6153,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 6085,
											"end": 6153,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 6085,
											"end": 6153,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 6085,
											"end": 6153,
											"name": "PUSH",
											"source": 13,
											"value": "4"
										},
										{
											"begin": 6085,
											"end": 6153,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 6085,
											"end": 6153,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "120"
										},
										{
											"begin": 6085,
											"end": 6153,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 6085,
											"end": 6153,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "121"
										},
										{
											"begin": 6085,
											"end": 6153,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 6085,
											"end": 6153,
											"name": "tag",
											"source": 13,
											"value": "201"
										},
										{
											"begin": 6085,
											"end": 6153,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 286,
											"end": 287,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 4885,
											"end": 6160,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 4885,
											"end": 6160,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 4885,
											"end": 6160,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 4885,
											"end": 6160,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 4885,
											"end": 6160,
											"name": "JUMP",
											"source": 13,
											"value": "[out]"
										},
										{
											"begin": 973,
											"end": 1287,
											"name": "tag",
											"source": 20,
											"value": "67"
										},
										{
											"begin": 973,
											"end": 1287,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 1177,
											"end": 1227,
											"name": "PUSH",
											"source": 20,
											"value": "40"
										},
										{
											"begin": 1177,
											"end": 1227,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 1177,
											"end": 1227,
											"name": "MLOAD",
											"source": 20
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "6EB1769F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1177,
											"end": 1227,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 1177,
											"end": 1227,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 1201,
											"end": 1211,
											"name": "CALLER",
											"source": 20
										},
										{
											"begin": 1177,
											"end": 1227,
											"name": "PUSH",
											"source": 20,
											"value": "4"
										},
										{
											"begin": 1177,
											"end": 1227,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 1177,
											"end": 1227,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 1177,
											"end": 1227,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 1221,
											"end": 1225,
											"name": "ADDRESS",
											"source": 20
										},
										{
											"begin": 1177,
											"end": 1227,
											"name": "PUSH",
											"source": 20,
											"value": "24"
										},
										{
											"begin": 1177,
											"end": 1227,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 1177,
											"end": 1227,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 1177,
											"end": 1227,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 1177,
											"end": 1227,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 1177,
											"end": 1227,
											"name": "MLOAD",
											"source": 20
										},
										{
											"begin": 1230,
											"end": 1235,
											"name": "DUP7",
											"source": 20
										},
										{
											"begin": 1230,
											"end": 1235,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1177,
											"end": 1200,
											"name": "DUP10",
											"source": 20
										},
										{
											"begin": 1177,
											"end": 1200,
											"name": "AND",
											"source": 20
										},
										{
											"begin": 1177,
											"end": 1200,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 1177,
											"end": 1200,
											"name": "PUSH",
											"source": 20,
											"value": "DD62ED3E"
										},
										{
											"begin": 1177,
											"end": 1200,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 1177,
											"end": 1227,
											"name": "PUSH",
											"source": 20,
											"value": "44"
										},
										{
											"begin": 1177,
											"end": 1227,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 1177,
											"end": 1227,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 1177,
											"end": 1227,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 1177,
											"end": 1227,
											"name": "SWAP3",
											"source": 20
										},
										{
											"begin": 1177,
											"end": 1227,
											"name": "PUSH",
											"source": 20,
											"value": "20"
										},
										{
											"begin": 1177,
											"end": 1227,
											"name": "SWAP3",
											"source": 20
										},
										{
											"begin": 1177,
											"end": 1227,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 1177,
											"end": 1227,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 1177,
											"end": 1227,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 1177,
											"end": 1227,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 1177,
											"end": 1227,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 1177,
											"end": 1227,
											"name": "SUB",
											"source": 20
										},
										{
											"begin": 1177,
											"end": 1227,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 1177,
											"end": 1227,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 1177,
											"end": 1200,
											"name": "DUP7",
											"source": 20
										},
										{
											"begin": 1177,
											"end": 1227,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 1177,
											"end": 1227,
											"name": "EXTCODESIZE",
											"source": 20
										},
										{
											"begin": 1177,
											"end": 1227,
											"name": "ISZERO",
											"source": 20
										},
										{
											"begin": 1177,
											"end": 1227,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 1177,
											"end": 1227,
											"name": "ISZERO",
											"source": 20
										},
										{
											"begin": 1177,
											"end": 1227,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "204"
										},
										{
											"begin": 1177,
											"end": 1227,
											"name": "JUMPI",
											"source": 20
										},
										{
											"begin": 1177,
											"end": 1227,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 1177,
											"end": 1227,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 1177,
											"end": 1227,
											"name": "REVERT",
											"source": 20
										},
										{
											"begin": 1177,
											"end": 1227,
											"name": "tag",
											"source": 20,
											"value": "204"
										},
										{
											"begin": 1177,
											"end": 1227,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 1177,
											"end": 1227,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 1177,
											"end": 1227,
											"name": "GAS",
											"source": 20
										},
										{
											"begin": 1177,
											"end": 1227,
											"name": "STATICCALL",
											"source": 20
										},
										{
											"begin": 1177,
											"end": 1227,
											"name": "ISZERO",
											"source": 20
										},
										{
											"begin": 1177,
											"end": 1227,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 1177,
											"end": 1227,
											"name": "ISZERO",
											"source": 20
										},
										{
											"begin": 1177,
											"end": 1227,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "206"
										},
										{
											"begin": 1177,
											"end": 1227,
											"name": "JUMPI",
											"source": 20
										},
										{
											"begin": 1177,
											"end": 1227,
											"name": "RETURNDATASIZE",
											"source": 20
										},
										{
											"begin": 1177,
											"end": 1227,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 1177,
											"end": 1227,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 1177,
											"end": 1227,
											"name": "RETURNDATACOPY",
											"source": 20
										},
										{
											"begin": 1177,
											"end": 1227,
											"name": "RETURNDATASIZE",
											"source": 20
										},
										{
											"begin": 1177,
											"end": 1227,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 1177,
											"end": 1227,
											"name": "REVERT",
											"source": 20
										},
										{
											"begin": 1177,
											"end": 1227,
											"name": "tag",
											"source": 20,
											"value": "206"
										},
										{
											"begin": 1177,
											"end": 1227,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 1177,
											"end": 1227,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 1177,
											"end": 1227,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 1177,
											"end": 1227,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 1177,
											"end": 1227,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 1177,
											"end": 1227,
											"name": "PUSH",
											"source": 20,
											"value": "40"
										},
										{
											"begin": 1177,
											"end": 1227,
											"name": "MLOAD",
											"source": 20
										},
										{
											"begin": 1177,
											"end": 1227,
											"name": "RETURNDATASIZE",
											"source": 20
										},
										{
											"begin": 1177,
											"end": 1227,
											"name": "PUSH",
											"source": 20,
											"value": "20"
										},
										{
											"begin": 1177,
											"end": 1227,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 1177,
											"end": 1227,
											"name": "LT",
											"source": 20
										},
										{
											"begin": 1177,
											"end": 1227,
											"name": "ISZERO",
											"source": 20
										},
										{
											"begin": 1177,
											"end": 1227,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "207"
										},
										{
											"begin": 1177,
											"end": 1227,
											"name": "JUMPI",
											"source": 20
										},
										{
											"begin": 1177,
											"end": 1227,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 1177,
											"end": 1227,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 1177,
											"end": 1227,
											"name": "REVERT",
											"source": 20
										},
										{
											"begin": 1177,
											"end": 1227,
											"name": "tag",
											"source": 20,
											"value": "207"
										},
										{
											"begin": 1177,
											"end": 1227,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1177,
											"end": 1227,
											"name": "MLOAD",
											"source": 20
										},
										{
											"begin": 1177,
											"end": 1235,
											"name": "LT",
											"source": 20
										},
										{
											"begin": 1173,
											"end": 1280,
											"name": "ISZERO",
											"source": 20
										},
										{
											"begin": 1173,
											"end": 1280,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "154"
										},
										{
											"begin": 1173,
											"end": 1280,
											"name": "JUMPI",
											"source": 20
										},
										{
											"begin": 1237,
											"end": 1280,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "154"
										},
										{
											"begin": 1248,
											"end": 1253,
											"name": "DUP7",
											"source": 20
										},
										{
											"begin": 1255,
											"end": 1260,
											"name": "DUP7",
											"source": 20
										},
										{
											"begin": 1262,
											"end": 1270,
											"name": "DUP7",
											"source": 20
										},
										{
											"begin": 1272,
											"end": 1273,
											"name": "DUP7",
											"source": 20
										},
										{
											"begin": 1275,
											"end": 1276,
											"name": "DUP7",
											"source": 20
										},
										{
											"begin": 1278,
											"end": 1279,
											"name": "DUP7",
											"source": 20
										},
										{
											"begin": 1237,
											"end": 1247,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "92"
										},
										{
											"begin": 1237,
											"end": 1280,
											"name": "JUMP",
											"source": 20,
											"value": "[in]"
										},
										{
											"begin": 328,
											"end": 369,
											"name": "tag",
											"source": 16,
											"value": "70"
										},
										{
											"begin": 328,
											"end": 369,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 328,
											"end": 369,
											"name": "PUSHIMMUTABLE",
											"source": 16,
											"value": "2079"
										},
										{
											"begin": 328,
											"end": 369,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 328,
											"end": 369,
											"name": "JUMP",
											"source": 16,
											"value": "[out]"
										},
										{
											"begin": 7587,
											"end": 8319,
											"name": "tag",
											"source": 13,
											"value": "75"
										},
										{
											"begin": 7587,
											"end": 8319,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 7761,
											"end": 7777,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 7727,
											"end": 7733,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 7727,
											"end": 7742,
											"name": "PUSH",
											"source": 13,
											"value": "80"
										},
										{
											"begin": 7727,
											"end": 7742,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 7727,
											"end": 7742,
											"name": "CALLDATALOAD",
											"source": 13
										},
										{
											"begin": 244,
											"end": 252,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 223,
											"end": 240,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "211"
										},
										{
											"begin": 223,
											"end": 238,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "104"
										},
										{
											"begin": 223,
											"end": 240,
											"name": "JUMP",
											"source": 19,
											"value": "[in]"
										},
										{
											"begin": 223,
											"end": 240,
											"name": "tag",
											"source": 19,
											"value": "211"
										},
										{
											"begin": 223,
											"end": 240,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 223,
											"end": 252,
											"name": "GT",
											"source": 19
										},
										{
											"begin": 223,
											"end": 252,
											"name": "ISZERO",
											"source": 19
										},
										{
											"begin": 215,
											"end": 276,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "212"
										},
										{
											"begin": 215,
											"end": 276,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 215,
											"end": 276,
											"name": "PUSH",
											"source": 19,
											"value": "40"
										},
										{
											"begin": 215,
											"end": 276,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 215,
											"end": 276,
											"name": "MLOAD",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 215,
											"end": 276,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 215,
											"end": 276,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 215,
											"end": 276,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 215,
											"end": 276,
											"name": "PUSH",
											"source": 19,
											"value": "4"
										},
										{
											"begin": 215,
											"end": 276,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 215,
											"end": 276,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 215,
											"end": 276,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 215,
											"end": 276,
											"name": "PUSH",
											"source": 19,
											"value": "13"
										},
										{
											"begin": 215,
											"end": 276,
											"name": "PUSH",
											"source": 19,
											"value": "24"
										},
										{
											"begin": 215,
											"end": 276,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 215,
											"end": 276,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 215,
											"end": 276,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "151C985B9CD858DD1A5BDB881D1BDBC81BDB19"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "6A"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 215,
											"end": 276,
											"name": "PUSH",
											"source": 19,
											"value": "44"
										},
										{
											"begin": 215,
											"end": 276,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 215,
											"end": 276,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 215,
											"end": 276,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 215,
											"end": 276,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 215,
											"end": 276,
											"name": "MLOAD",
											"source": 19
										},
										{
											"begin": 215,
											"end": 276,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 215,
											"end": 276,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 215,
											"end": 276,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 215,
											"end": 276,
											"name": "SUB",
											"source": 19
										},
										{
											"begin": 215,
											"end": 276,
											"name": "PUSH",
											"source": 19,
											"value": "64"
										},
										{
											"begin": 215,
											"end": 276,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 215,
											"end": 276,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 215,
											"end": 276,
											"name": "REVERT",
											"source": 19
										},
										{
											"begin": 215,
											"end": 276,
											"name": "tag",
											"source": 19,
											"value": "212"
										},
										{
											"begin": 215,
											"end": 276,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 7860,
											"end": 8107,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "214"
										},
										{
											"begin": 7893,
											"end": 7909,
											"name": "PUSH",
											"source": 13,
											"value": "A0"
										},
										{
											"begin": 7893,
											"end": 7909,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 7893,
											"end": 7909,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 7893,
											"end": 7909,
											"name": "CALLDATALOAD",
											"source": 13
										},
										{
											"begin": 7923,
											"end": 7939,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "215"
										},
										{
											"begin": 7923,
											"end": 7939,
											"name": "PUSH",
											"source": 13,
											"value": "80"
										},
										{
											"begin": 7923,
											"end": 7939,
											"name": "DUP7",
											"source": 13
										},
										{
											"begin": 7923,
											"end": 7939,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 7923,
											"end": 7939,
											"name": "PUSH",
											"source": 13,
											"value": "60"
										},
										{
											"begin": 7923,
											"end": 7939,
											"name": "DUP8",
											"source": 13
										},
										{
											"begin": 7923,
											"end": 7939,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 7923,
											"end": 7939,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "109"
										},
										{
											"begin": 7923,
											"end": 7939,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 7923,
											"end": 7939,
											"name": "tag",
											"source": 13,
											"value": "215"
										},
										{
											"begin": 7923,
											"end": 7939,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 7953,
											"end": 7977,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "216"
										},
										{
											"begin": 7953,
											"end": 7977,
											"name": "PUSH",
											"source": 13,
											"value": "100"
										},
										{
											"begin": 7953,
											"end": 7977,
											"name": "DUP8",
											"source": 13
										},
										{
											"begin": 7953,
											"end": 7977,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 7953,
											"end": 7977,
											"name": "PUSH",
											"source": 13,
											"value": "E0"
										},
										{
											"begin": 7953,
											"end": 7977,
											"name": "DUP9",
											"source": 13
										},
										{
											"begin": 7953,
											"end": 7977,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 7953,
											"end": 7977,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "109"
										},
										{
											"begin": 7953,
											"end": 7977,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 7953,
											"end": 7977,
											"name": "tag",
											"source": 13,
											"value": "216"
										},
										{
											"begin": 7953,
											"end": 7977,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 7991,
											"end": 8097,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 7991,
											"end": 8097,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 7991,
											"end": 8097,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 7991,
											"end": 8097,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 7991,
											"end": 8097,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 7991,
											"end": 8097,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 7991,
											"end": 8097,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 7991,
											"end": 8097,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 8032,
											"end": 8038,
											"name": "DUP9",
											"source": 13
										},
										{
											"begin": 8032,
											"end": 8047,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 8032,
											"end": 8047,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 8032,
											"end": 8047,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 8032,
											"end": 8047,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 8032,
											"end": 8047,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 8032,
											"end": 8047,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 8032,
											"end": 8047,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "217"
										},
										{
											"begin": 8032,
											"end": 8047,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 8032,
											"end": 8047,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 8032,
											"end": 8047,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "109"
										},
										{
											"begin": 8032,
											"end": 8047,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 8032,
											"end": 8047,
											"name": "tag",
											"source": 13,
											"value": "217"
										},
										{
											"begin": 8032,
											"end": 8047,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 8049,
											"end": 8059,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "218"
										},
										{
											"begin": 8049,
											"end": 8059,
											"name": "PUSH",
											"source": 13,
											"value": "60"
										},
										{
											"begin": 8049,
											"end": 8059,
											"name": "DUP12",
											"source": 13
										},
										{
											"begin": 8049,
											"end": 8059,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 8049,
											"end": 8059,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 8049,
											"end": 8059,
											"name": "DUP13",
											"source": 13
										},
										{
											"begin": 8049,
											"end": 8059,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 8049,
											"end": 8059,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "114"
										},
										{
											"begin": 8049,
											"end": 8059,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 8049,
											"end": 8059,
											"name": "tag",
											"source": 13,
											"value": "218"
										},
										{
											"begin": 8049,
											"end": 8059,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 8061,
											"end": 8075,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "219"
										},
										{
											"begin": 8061,
											"end": 8075,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 8061,
											"end": 8075,
											"name": "DUP13",
											"source": 13
										},
										{
											"begin": 8061,
											"end": 8075,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 8061,
											"end": 8067,
											"name": "DUP13",
											"source": 13
										},
										{
											"begin": 8061,
											"end": 8075,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "109"
										},
										{
											"begin": 8061,
											"end": 8075,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 8061,
											"end": 8075,
											"name": "tag",
											"source": 13,
											"value": "219"
										},
										{
											"begin": 8061,
											"end": 8075,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 8015,
											"end": 8076,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 8015,
											"end": 8076,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 8015,
											"end": 8076,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 8015,
											"end": 8076,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 8015,
											"end": 8076,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "220"
										},
										{
											"begin": 8015,
											"end": 8076,
											"name": "SWAP4",
											"source": 13
										},
										{
											"begin": 8015,
											"end": 8076,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 8015,
											"end": 8076,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 8015,
											"end": 8076,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 8015,
											"end": 8076,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "117"
										},
										{
											"begin": 8015,
											"end": 8076,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 8015,
											"end": 8076,
											"name": "tag",
											"source": 13,
											"value": "220"
										},
										{
											"begin": 8015,
											"end": 8076,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 8015,
											"end": 8076,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 8015,
											"end": 8076,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 8015,
											"end": 8076,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 8015,
											"end": 8076,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 8015,
											"end": 8076,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 8015,
											"end": 8076,
											"name": "SUB",
											"source": 13
										},
										{
											"begin": 8015,
											"end": 8076,
											"name": "SUB",
											"source": 13
										},
										{
											"begin": 8015,
											"end": 8076,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 8015,
											"end": 8076,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 8015,
											"end": 8076,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 8015,
											"end": 8076,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 8015,
											"end": 8076,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 7991,
											"end": 8097,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 7991,
											"end": 8097,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 7991,
											"end": 8097,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 7991,
											"end": 8097,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 8085,
											"end": 8095,
											"name": "CALLER",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7991,
											"end": 8097,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 7991,
											"end": 8097,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 7991,
											"end": 8097,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 7991,
											"end": 8097,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 7860,
											"end": 7879,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "221"
										},
										{
											"begin": 7860,
											"end": 8107,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 7860,
											"end": 8107,
											"name": "tag",
											"source": 13,
											"value": "214"
										},
										{
											"begin": 7860,
											"end": 8107,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 7849,
											"end": 8107,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 7849,
											"end": 8107,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 8138,
											"end": 8144,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 8138,
											"end": 8160,
											"name": "PUSH",
											"source": 13,
											"value": "C0"
										},
										{
											"begin": 8138,
											"end": 8160,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 8138,
											"end": 8160,
											"name": "CALLDATALOAD",
											"source": 13
										},
										{
											"begin": 8126,
											"end": 8134,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 8126,
											"end": 8160,
											"name": "GT",
											"source": 13
										},
										{
											"begin": 8126,
											"end": 8160,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 8118,
											"end": 8183,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "222"
										},
										{
											"begin": 8118,
											"end": 8183,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 8118,
											"end": 8183,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 8118,
											"end": 8183,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 8118,
											"end": 8183,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 8118,
											"end": 8183,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 8118,
											"end": 8183,
											"name": "PUSH",
											"source": 13,
											"value": "4"
										},
										{
											"begin": 8118,
											"end": 8183,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 8118,
											"end": 8183,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "120"
										},
										{
											"begin": 8118,
											"end": 8183,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 8118,
											"end": 8183,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "224"
										},
										{
											"begin": 8118,
											"end": 8183,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 8118,
											"end": 8183,
											"name": "tag",
											"source": 13,
											"value": "222"
										},
										{
											"begin": 8118,
											"end": 8183,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 8271,
											"end": 8285,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 8271,
											"end": 8312,
											"name": "SSTORE",
											"source": 13
										},
										{
											"begin": 7587,
											"end": 8319,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 7587,
											"end": 8319,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 7587,
											"end": 8319,
											"name": "JUMP",
											"source": 13,
											"value": "[out]"
										},
										{
											"begin": 966,
											"end": 1361,
											"name": "tag",
											"source": 17,
											"value": "80"
										},
										{
											"begin": 966,
											"end": 1361,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 1107,
											"end": 1127,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 1137,
											"end": 1142,
											"name": "DUP4",
											"source": 17
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1130,
											"end": 1153,
											"name": "AND",
											"source": 17
										},
										{
											"begin": 1130,
											"end": 1153,
											"name": "PUSH",
											"source": 17,
											"value": "70A08231"
										},
										{
											"begin": 1162,
											"end": 1166,
											"name": "ADDRESS",
											"source": 17
										},
										{
											"begin": 1130,
											"end": 1168,
											"name": "PUSH",
											"source": 17,
											"value": "40"
										},
										{
											"begin": 1130,
											"end": 1168,
											"name": "MLOAD",
											"source": 17
										},
										{
											"begin": 1130,
											"end": 1168,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 1130,
											"end": 1168,
											"name": "PUSH",
											"source": 17,
											"value": "FFFFFFFF"
										},
										{
											"begin": 1130,
											"end": 1168,
											"name": "AND",
											"source": 17
										},
										{
											"begin": 1130,
											"end": 1168,
											"name": "PUSH",
											"source": 17,
											"value": "E0"
										},
										{
											"begin": 1130,
											"end": 1168,
											"name": "SHL",
											"source": 17
										},
										{
											"begin": 1130,
											"end": 1168,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 1130,
											"end": 1168,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 1130,
											"end": 1168,
											"name": "PUSH",
											"source": 17,
											"value": "4"
										},
										{
											"begin": 1130,
											"end": 1168,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 1130,
											"end": 1168,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 1130,
											"end": 1168,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1130,
											"end": 1168,
											"name": "AND",
											"source": 17
										},
										{
											"begin": 1130,
											"end": 1168,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 1130,
											"end": 1168,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 1130,
											"end": 1168,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 1130,
											"end": 1168,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 1130,
											"end": 1168,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 1130,
											"end": 1168,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 1130,
											"end": 1168,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 1130,
											"end": 1168,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 1130,
											"end": 1168,
											"name": "PUSH",
											"source": 17,
											"value": "40"
										},
										{
											"begin": 1130,
											"end": 1168,
											"name": "MLOAD",
											"source": 17
										},
										{
											"begin": 1130,
											"end": 1168,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 1130,
											"end": 1168,
											"name": "DUP4",
											"source": 17
										},
										{
											"begin": 1130,
											"end": 1168,
											"name": "SUB",
											"source": 17
										},
										{
											"begin": 1130,
											"end": 1168,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 1130,
											"end": 1168,
											"name": "DUP7",
											"source": 17
										},
										{
											"begin": 1130,
											"end": 1168,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 1130,
											"end": 1168,
											"name": "EXTCODESIZE",
											"source": 17
										},
										{
											"begin": 1130,
											"end": 1168,
											"name": "ISZERO",
											"source": 17
										},
										{
											"begin": 1130,
											"end": 1168,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 1130,
											"end": 1168,
											"name": "ISZERO",
											"source": 17
										},
										{
											"begin": 1130,
											"end": 1168,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "226"
										},
										{
											"begin": 1130,
											"end": 1168,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 1130,
											"end": 1168,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 1130,
											"end": 1168,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 1130,
											"end": 1168,
											"name": "REVERT",
											"source": 17
										},
										{
											"begin": 1130,
											"end": 1168,
											"name": "tag",
											"source": 17,
											"value": "226"
										},
										{
											"begin": 1130,
											"end": 1168,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 1130,
											"end": 1168,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 1130,
											"end": 1168,
											"name": "GAS",
											"source": 17
										},
										{
											"begin": 1130,
											"end": 1168,
											"name": "STATICCALL",
											"source": 17
										},
										{
											"begin": 1130,
											"end": 1168,
											"name": "ISZERO",
											"source": 17
										},
										{
											"begin": 1130,
											"end": 1168,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 1130,
											"end": 1168,
											"name": "ISZERO",
											"source": 17
										},
										{
											"begin": 1130,
											"end": 1168,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "228"
										},
										{
											"begin": 1130,
											"end": 1168,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 1130,
											"end": 1168,
											"name": "RETURNDATASIZE",
											"source": 17
										},
										{
											"begin": 1130,
											"end": 1168,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 1130,
											"end": 1168,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 1130,
											"end": 1168,
											"name": "RETURNDATACOPY",
											"source": 17
										},
										{
											"begin": 1130,
											"end": 1168,
											"name": "RETURNDATASIZE",
											"source": 17
										},
										{
											"begin": 1130,
											"end": 1168,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 1130,
											"end": 1168,
											"name": "REVERT",
											"source": 17
										},
										{
											"begin": 1130,
											"end": 1168,
											"name": "tag",
											"source": 17,
											"value": "228"
										},
										{
											"begin": 1130,
											"end": 1168,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 1130,
											"end": 1168,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 1130,
											"end": 1168,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 1130,
											"end": 1168,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 1130,
											"end": 1168,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 1130,
											"end": 1168,
											"name": "PUSH",
											"source": 17,
											"value": "40"
										},
										{
											"begin": 1130,
											"end": 1168,
											"name": "MLOAD",
											"source": 17
										},
										{
											"begin": 1130,
											"end": 1168,
											"name": "RETURNDATASIZE",
											"source": 17
										},
										{
											"begin": 1130,
											"end": 1168,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 1130,
											"end": 1168,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 1130,
											"end": 1168,
											"name": "LT",
											"source": 17
										},
										{
											"begin": 1130,
											"end": 1168,
											"name": "ISZERO",
											"source": 17
										},
										{
											"begin": 1130,
											"end": 1168,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "229"
										},
										{
											"begin": 1130,
											"end": 1168,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 1130,
											"end": 1168,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 1130,
											"end": 1168,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 1130,
											"end": 1168,
											"name": "REVERT",
											"source": 17
										},
										{
											"begin": 1130,
											"end": 1168,
											"name": "tag",
											"source": 17,
											"value": "229"
										},
										{
											"begin": 1130,
											"end": 1168,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1130,
											"end": 1168,
											"name": "MLOAD",
											"source": 17
										},
										{
											"begin": 1130,
											"end": 1168,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1186,
											"end": 1215,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 1186,
											"end": 1215,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 1186,
											"end": 1215,
											"name": "LT",
											"source": 17
										},
										{
											"begin": 1186,
											"end": 1215,
											"name": "ISZERO",
											"source": 17
										},
										{
											"begin": 1178,
											"end": 1238,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "230"
										},
										{
											"begin": 1178,
											"end": 1238,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 1178,
											"end": 1238,
											"name": "PUSH",
											"source": 17,
											"value": "40"
										},
										{
											"begin": 1178,
											"end": 1238,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 1178,
											"end": 1238,
											"name": "MLOAD",
											"source": 17
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1178,
											"end": 1238,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 1178,
											"end": 1238,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 1178,
											"end": 1238,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 1178,
											"end": 1238,
											"name": "PUSH",
											"source": 17,
											"value": "4"
										},
										{
											"begin": 1178,
											"end": 1238,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 1178,
											"end": 1238,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 1178,
											"end": 1238,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 1178,
											"end": 1238,
											"name": "PUSH",
											"source": 17,
											"value": "12"
										},
										{
											"begin": 1178,
											"end": 1238,
											"name": "PUSH",
											"source": 17,
											"value": "24"
										},
										{
											"begin": 1178,
											"end": 1238,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 1178,
											"end": 1238,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 1178,
											"end": 1238,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "24B739BAB33334B1B4B2B73A103A37B5B2B7"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "71"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1178,
											"end": 1238,
											"name": "PUSH",
											"source": 17,
											"value": "44"
										},
										{
											"begin": 1178,
											"end": 1238,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 1178,
											"end": 1238,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 1178,
											"end": 1238,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 1178,
											"end": 1238,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 1178,
											"end": 1238,
											"name": "MLOAD",
											"source": 17
										},
										{
											"begin": 1178,
											"end": 1238,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 1178,
											"end": 1238,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 1178,
											"end": 1238,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 1178,
											"end": 1238,
											"name": "SUB",
											"source": 17
										},
										{
											"begin": 1178,
											"end": 1238,
											"name": "PUSH",
											"source": 17,
											"value": "64"
										},
										{
											"begin": 1178,
											"end": 1238,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 1178,
											"end": 1238,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 1178,
											"end": 1238,
											"name": "REVERT",
											"source": 17
										},
										{
											"begin": 1178,
											"end": 1238,
											"name": "tag",
											"source": 17,
											"value": "230"
										},
										{
											"begin": 1178,
											"end": 1238,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 1253,
											"end": 1269,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 1253,
											"end": 1269,
											"name": "ISZERO",
											"source": 17
										},
										{
											"begin": 1249,
											"end": 1355,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "232"
										},
										{
											"begin": 1249,
											"end": 1355,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 1285,
											"end": 1344,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "232"
										},
										{
											"begin": 1313,
											"end": 1318,
											"name": "DUP5",
											"source": 17
										},
										{
											"begin": 1320,
											"end": 1329,
											"name": "DUP4",
											"source": 17
										},
										{
											"begin": 1331,
											"end": 1343,
											"name": "DUP4",
											"source": 17
										},
										{
											"begin": 1285,
											"end": 1312,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "233"
										},
										{
											"begin": 1285,
											"end": 1344,
											"name": "JUMP",
											"source": 17,
											"value": "[in]"
										},
										{
											"begin": 1285,
											"end": 1344,
											"name": "tag",
											"source": 17,
											"value": "232"
										},
										{
											"begin": 1285,
											"end": 1344,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 966,
											"end": 1361,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 966,
											"end": 1361,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 966,
											"end": 1361,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 966,
											"end": 1361,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 966,
											"end": 1361,
											"name": "JUMP",
											"source": 17,
											"value": "[out]"
										},
										{
											"begin": 1303,
											"end": 1981,
											"name": "tag",
											"source": 18,
											"value": "84"
										},
										{
											"begin": 1303,
											"end": 1981,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 1524,
											"end": 1525,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 1514,
											"end": 1521,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 1514,
											"end": 1525,
											"name": "GT",
											"source": 18
										},
										{
											"begin": 1514,
											"end": 1543,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 1514,
											"end": 1543,
											"name": "ISZERO",
											"source": 18
										},
										{
											"begin": 1514,
											"end": 1543,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "235"
										},
										{
											"begin": 1514,
											"end": 1543,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 1514,
											"end": 1543,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 1540,
											"end": 1543,
											"name": "PUSH",
											"source": 18,
											"value": "64"
										},
										{
											"begin": 1529,
											"end": 1536,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 1529,
											"end": 1543,
											"name": "GT",
											"source": 18
										},
										{
											"begin": 1529,
											"end": 1543,
											"name": "ISZERO",
											"source": 18
										},
										{
											"begin": 1514,
											"end": 1543,
											"name": "tag",
											"source": 18,
											"value": "235"
										},
										{
											"begin": 1514,
											"end": 1543,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 1506,
											"end": 1544,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "236"
										},
										{
											"begin": 1506,
											"end": 1544,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 1506,
											"end": 1544,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 1506,
											"end": 1544,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 1506,
											"end": 1544,
											"name": "REVERT",
											"source": 18
										},
										{
											"begin": 1506,
											"end": 1544,
											"name": "tag",
											"source": 18,
											"value": "236"
										},
										{
											"begin": 1506,
											"end": 1544,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 1555,
											"end": 1575,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 1585,
											"end": 1590,
											"name": "DUP6",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1578,
											"end": 1601,
											"name": "AND",
											"source": 18
										},
										{
											"begin": 1578,
											"end": 1601,
											"name": "PUSH",
											"source": 18,
											"value": "70A08231"
										},
										{
											"begin": 1610,
											"end": 1614,
											"name": "ADDRESS",
											"source": 18
										},
										{
											"begin": 1578,
											"end": 1616,
											"name": "PUSH",
											"source": 18,
											"value": "40"
										},
										{
											"begin": 1578,
											"end": 1616,
											"name": "MLOAD",
											"source": 18
										},
										{
											"begin": 1578,
											"end": 1616,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 1578,
											"end": 1616,
											"name": "PUSH",
											"source": 18,
											"value": "FFFFFFFF"
										},
										{
											"begin": 1578,
											"end": 1616,
											"name": "AND",
											"source": 18
										},
										{
											"begin": 1578,
											"end": 1616,
											"name": "PUSH",
											"source": 18,
											"value": "E0"
										},
										{
											"begin": 1578,
											"end": 1616,
											"name": "SHL",
											"source": 18
										},
										{
											"begin": 1578,
											"end": 1616,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 1578,
											"end": 1616,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 1578,
											"end": 1616,
											"name": "PUSH",
											"source": 18,
											"value": "4"
										},
										{
											"begin": 1578,
											"end": 1616,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 1578,
											"end": 1616,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 1578,
											"end": 1616,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1578,
											"end": 1616,
											"name": "AND",
											"source": 18
										},
										{
											"begin": 1578,
											"end": 1616,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 1578,
											"end": 1616,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 1578,
											"end": 1616,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 1578,
											"end": 1616,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 1578,
											"end": 1616,
											"name": "SWAP2",
											"source": 18
										},
										{
											"begin": 1578,
											"end": 1616,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 1578,
											"end": 1616,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 1578,
											"end": 1616,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 1578,
											"end": 1616,
											"name": "PUSH",
											"source": 18,
											"value": "40"
										},
										{
											"begin": 1578,
											"end": 1616,
											"name": "MLOAD",
											"source": 18
										},
										{
											"begin": 1578,
											"end": 1616,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 1578,
											"end": 1616,
											"name": "DUP4",
											"source": 18
										},
										{
											"begin": 1578,
											"end": 1616,
											"name": "SUB",
											"source": 18
										},
										{
											"begin": 1578,
											"end": 1616,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 1578,
											"end": 1616,
											"name": "DUP7",
											"source": 18
										},
										{
											"begin": 1578,
											"end": 1616,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 1578,
											"end": 1616,
											"name": "EXTCODESIZE",
											"source": 18
										},
										{
											"begin": 1578,
											"end": 1616,
											"name": "ISZERO",
											"source": 18
										},
										{
											"begin": 1578,
											"end": 1616,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 1578,
											"end": 1616,
											"name": "ISZERO",
											"source": 18
										},
										{
											"begin": 1578,
											"end": 1616,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "237"
										},
										{
											"begin": 1578,
											"end": 1616,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 1578,
											"end": 1616,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 1578,
											"end": 1616,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 1578,
											"end": 1616,
											"name": "REVERT",
											"source": 18
										},
										{
											"begin": 1578,
											"end": 1616,
											"name": "tag",
											"source": 18,
											"value": "237"
										},
										{
											"begin": 1578,
											"end": 1616,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 1578,
											"end": 1616,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 1578,
											"end": 1616,
											"name": "GAS",
											"source": 18
										},
										{
											"begin": 1578,
											"end": 1616,
											"name": "STATICCALL",
											"source": 18
										},
										{
											"begin": 1578,
											"end": 1616,
											"name": "ISZERO",
											"source": 18
										},
										{
											"begin": 1578,
											"end": 1616,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 1578,
											"end": 1616,
											"name": "ISZERO",
											"source": 18
										},
										{
											"begin": 1578,
											"end": 1616,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "239"
										},
										{
											"begin": 1578,
											"end": 1616,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 1578,
											"end": 1616,
											"name": "RETURNDATASIZE",
											"source": 18
										},
										{
											"begin": 1578,
											"end": 1616,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 1578,
											"end": 1616,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 1578,
											"end": 1616,
											"name": "RETURNDATACOPY",
											"source": 18
										},
										{
											"begin": 1578,
											"end": 1616,
											"name": "RETURNDATASIZE",
											"source": 18
										},
										{
											"begin": 1578,
											"end": 1616,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 1578,
											"end": 1616,
											"name": "REVERT",
											"source": 18
										},
										{
											"begin": 1578,
											"end": 1616,
											"name": "tag",
											"source": 18,
											"value": "239"
										},
										{
											"begin": 1578,
											"end": 1616,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 1578,
											"end": 1616,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 1578,
											"end": 1616,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 1578,
											"end": 1616,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 1578,
											"end": 1616,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 1578,
											"end": 1616,
											"name": "PUSH",
											"source": 18,
											"value": "40"
										},
										{
											"begin": 1578,
											"end": 1616,
											"name": "MLOAD",
											"source": 18
										},
										{
											"begin": 1578,
											"end": 1616,
											"name": "RETURNDATASIZE",
											"source": 18
										},
										{
											"begin": 1578,
											"end": 1616,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 1578,
											"end": 1616,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 1578,
											"end": 1616,
											"name": "LT",
											"source": 18
										},
										{
											"begin": 1578,
											"end": 1616,
											"name": "ISZERO",
											"source": 18
										},
										{
											"begin": 1578,
											"end": 1616,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "240"
										},
										{
											"begin": 1578,
											"end": 1616,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 1578,
											"end": 1616,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 1578,
											"end": 1616,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 1578,
											"end": 1616,
											"name": "REVERT",
											"source": 18
										},
										{
											"begin": 1578,
											"end": 1616,
											"name": "tag",
											"source": 18,
											"value": "240"
										},
										{
											"begin": 1578,
											"end": 1616,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1578,
											"end": 1616,
											"name": "MLOAD",
											"source": 18
										},
										{
											"begin": 1578,
											"end": 1616,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1634,
											"end": 1663,
											"name": "DUP5",
											"source": 18
										},
										{
											"begin": 1634,
											"end": 1663,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 1634,
											"end": 1663,
											"name": "LT",
											"source": 18
										},
										{
											"begin": 1634,
											"end": 1663,
											"name": "ISZERO",
											"source": 18
										},
										{
											"begin": 1626,
											"end": 1686,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "241"
										},
										{
											"begin": 1626,
											"end": 1686,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 1626,
											"end": 1686,
											"name": "PUSH",
											"source": 18,
											"value": "40"
										},
										{
											"begin": 1626,
											"end": 1686,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 1626,
											"end": 1686,
											"name": "MLOAD",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1626,
											"end": 1686,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 1626,
											"end": 1686,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 1626,
											"end": 1686,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 1626,
											"end": 1686,
											"name": "PUSH",
											"source": 18,
											"value": "4"
										},
										{
											"begin": 1626,
											"end": 1686,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 1626,
											"end": 1686,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 1626,
											"end": 1686,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 1626,
											"end": 1686,
											"name": "PUSH",
											"source": 18,
											"value": "12"
										},
										{
											"begin": 1626,
											"end": 1686,
											"name": "PUSH",
											"source": 18,
											"value": "24"
										},
										{
											"begin": 1626,
											"end": 1686,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 1626,
											"end": 1686,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 1626,
											"end": 1686,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "24B739BAB33334B1B4B2B73A103A37B5B2B7"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "71"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1626,
											"end": 1686,
											"name": "PUSH",
											"source": 18,
											"value": "44"
										},
										{
											"begin": 1626,
											"end": 1686,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 1626,
											"end": 1686,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 1626,
											"end": 1686,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 1626,
											"end": 1686,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 1626,
											"end": 1686,
											"name": "MLOAD",
											"source": 18
										},
										{
											"begin": 1626,
											"end": 1686,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 1626,
											"end": 1686,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 1626,
											"end": 1686,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 1626,
											"end": 1686,
											"name": "SUB",
											"source": 18
										},
										{
											"begin": 1626,
											"end": 1686,
											"name": "PUSH",
											"source": 18,
											"value": "64"
										},
										{
											"begin": 1626,
											"end": 1686,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 1626,
											"end": 1686,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 1626,
											"end": 1686,
											"name": "REVERT",
											"source": 18
										},
										{
											"begin": 1626,
											"end": 1686,
											"name": "tag",
											"source": 18,
											"value": "241"
										},
										{
											"begin": 1626,
											"end": 1686,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 1701,
											"end": 1717,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 1701,
											"end": 1717,
											"name": "ISZERO",
											"source": 18
										},
										{
											"begin": 1697,
											"end": 1975,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "154"
										},
										{
											"begin": 1697,
											"end": 1975,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 1733,
											"end": 1750,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 1781,
											"end": 1787,
											"name": "PUSH",
											"source": 18,
											"value": "2710"
										},
										{
											"begin": 1753,
											"end": 1778,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "243"
										},
										{
											"begin": 1753,
											"end": 1765,
											"name": "DUP4",
											"source": 18
										},
										{
											"begin": 1770,
											"end": 1777,
											"name": "DUP7",
											"source": 18
										},
										{
											"begin": 1753,
											"end": 1769,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "150"
										},
										{
											"begin": 1753,
											"end": 1778,
											"name": "JUMP",
											"source": 18,
											"value": "[in]"
										},
										{
											"begin": 1753,
											"end": 1778,
											"name": "tag",
											"source": 18,
											"value": "243"
										},
										{
											"begin": 1753,
											"end": 1778,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 1753,
											"end": 1787,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 1753,
											"end": 1787,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "244"
										},
										{
											"begin": 1753,
											"end": 1787,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 1753,
											"end": 1787,
											"name": "INVALID",
											"source": 18
										},
										{
											"begin": 1753,
											"end": 1787,
											"name": "tag",
											"source": 18,
											"value": "244"
										},
										{
											"begin": 1753,
											"end": 1787,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 1753,
											"end": 1787,
											"name": "DIV",
											"source": 18
										},
										{
											"begin": 1753,
											"end": 1787,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1805,
											"end": 1818,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 1805,
											"end": 1818,
											"name": "ISZERO",
											"source": 18
										},
										{
											"begin": 1801,
											"end": 1879,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "246"
										},
										{
											"begin": 1801,
											"end": 1879,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 1820,
											"end": 1879,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "246"
										},
										{
											"begin": 1848,
											"end": 1853,
											"name": "DUP8",
											"source": 18
										},
										{
											"begin": 1855,
											"end": 1867,
											"name": "DUP5",
											"source": 18
										},
										{
											"begin": 1869,
											"end": 1878,
											"name": "DUP4",
											"source": 18
										},
										{
											"begin": 1820,
											"end": 1847,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "233"
										},
										{
											"begin": 1820,
											"end": 1879,
											"name": "JUMP",
											"source": 18,
											"value": "[in]"
										},
										{
											"begin": 1820,
											"end": 1879,
											"name": "tag",
											"source": 18,
											"value": "246"
										},
										{
											"begin": 1820,
											"end": 1879,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 1893,
											"end": 1964,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "247"
										},
										{
											"begin": 1921,
											"end": 1926,
											"name": "DUP8",
											"source": 18
										},
										{
											"begin": 1928,
											"end": 1937,
											"name": "DUP7",
											"source": 18
										},
										{
											"begin": 1954,
											"end": 1963,
											"name": "DUP4",
											"source": 18
										},
										{
											"begin": 1939,
											"end": 1951,
											"name": "DUP6",
											"source": 18
										},
										{
											"begin": 1939,
											"end": 1963,
											"name": "SUB",
											"source": 18
										},
										{
											"begin": 1893,
											"end": 1920,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "233"
										},
										{
											"begin": 1893,
											"end": 1964,
											"name": "JUMP",
											"source": 18,
											"value": "[in]"
										},
										{
											"begin": 1893,
											"end": 1964,
											"name": "tag",
											"source": 18,
											"value": "247"
										},
										{
											"begin": 1893,
											"end": 1964,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 1697,
											"end": 1975,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 1303,
											"end": 1981,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 1303,
											"end": 1981,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 1303,
											"end": 1981,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 1303,
											"end": 1981,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 1303,
											"end": 1981,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 1303,
											"end": 1981,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 1303,
											"end": 1981,
											"name": "JUMP",
											"source": 18,
											"value": "[out]"
										},
										{
											"begin": 8357,
											"end": 9113,
											"name": "tag",
											"source": 13,
											"value": "88"
										},
										{
											"begin": 8357,
											"end": 9113,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 8519,
											"end": 8535,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 8485,
											"end": 8491,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 8485,
											"end": 8500,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 8485,
											"end": 8500,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 8485,
											"end": 8500,
											"name": "CALLDATALOAD",
											"source": 13
										},
										{
											"begin": 244,
											"end": 252,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 223,
											"end": 240,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "249"
										},
										{
											"begin": 223,
											"end": 238,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "104"
										},
										{
											"begin": 223,
											"end": 240,
											"name": "JUMP",
											"source": 19,
											"value": "[in]"
										},
										{
											"begin": 223,
											"end": 240,
											"name": "tag",
											"source": 19,
											"value": "249"
										},
										{
											"begin": 223,
											"end": 240,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 223,
											"end": 252,
											"name": "GT",
											"source": 19
										},
										{
											"begin": 223,
											"end": 252,
											"name": "ISZERO",
											"source": 19
										},
										{
											"begin": 215,
											"end": 276,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "250"
										},
										{
											"begin": 215,
											"end": 276,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 215,
											"end": 276,
											"name": "PUSH",
											"source": 19,
											"value": "40"
										},
										{
											"begin": 215,
											"end": 276,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 215,
											"end": 276,
											"name": "MLOAD",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 215,
											"end": 276,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 215,
											"end": 276,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 215,
											"end": 276,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 215,
											"end": 276,
											"name": "PUSH",
											"source": 19,
											"value": "4"
										},
										{
											"begin": 215,
											"end": 276,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 215,
											"end": 276,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 215,
											"end": 276,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 215,
											"end": 276,
											"name": "PUSH",
											"source": 19,
											"value": "13"
										},
										{
											"begin": 215,
											"end": 276,
											"name": "PUSH",
											"source": 19,
											"value": "24"
										},
										{
											"begin": 215,
											"end": 276,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 215,
											"end": 276,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 215,
											"end": 276,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "151C985B9CD858DD1A5BDB881D1BDBC81BDB19"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "6A"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 215,
											"end": 276,
											"name": "PUSH",
											"source": 19,
											"value": "44"
										},
										{
											"begin": 215,
											"end": 276,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 215,
											"end": 276,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 215,
											"end": 276,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 215,
											"end": 276,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 215,
											"end": 276,
											"name": "MLOAD",
											"source": 19
										},
										{
											"begin": 215,
											"end": 276,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 215,
											"end": 276,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 215,
											"end": 276,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 215,
											"end": 276,
											"name": "SUB",
											"source": 19
										},
										{
											"begin": 215,
											"end": 276,
											"name": "PUSH",
											"source": 19,
											"value": "64"
										},
										{
											"begin": 215,
											"end": 276,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 215,
											"end": 276,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 215,
											"end": 276,
											"name": "REVERT",
											"source": 19
										},
										{
											"begin": 215,
											"end": 276,
											"name": "tag",
											"source": 19,
											"value": "250"
										},
										{
											"begin": 215,
											"end": 276,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 8770,
											"end": 8944,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "252"
										},
										{
											"begin": 8803,
											"end": 8819,
											"name": "PUSH",
											"source": 13,
											"value": "60"
										},
										{
											"begin": 8803,
											"end": 8819,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 8803,
											"end": 8819,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 8803,
											"end": 8819,
											"name": "CALLDATALOAD",
											"source": 13
										},
										{
											"begin": 8833,
											"end": 8849,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "253"
										},
										{
											"begin": 8833,
											"end": 8849,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 8833,
											"end": 8849,
											"name": "DUP7",
											"source": 13
										},
										{
											"begin": 8833,
											"end": 8849,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 8833,
											"end": 8849,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 8833,
											"end": 8849,
											"name": "DUP8",
											"source": 13
										},
										{
											"begin": 8833,
											"end": 8849,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 8833,
											"end": 8849,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "109"
										},
										{
											"begin": 8833,
											"end": 8849,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 8833,
											"end": 8849,
											"name": "tag",
											"source": 13,
											"value": "253"
										},
										{
											"begin": 8833,
											"end": 8849,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 8878,
											"end": 8934,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 8878,
											"end": 8934,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 8878,
											"end": 8934,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 8878,
											"end": 8934,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 8878,
											"end": 8934,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 8878,
											"end": 8934,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 8878,
											"end": 8934,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 8878,
											"end": 8934,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 8878,
											"end": 8934,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 8863,
											"end": 8864,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 8863,
											"end": 8864,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 8878,
											"end": 8934,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 8902,
											"end": 8913,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "254"
										},
										{
											"begin": 8902,
											"end": 8908,
											"name": "DUP10",
											"source": 13
										},
										{
											"begin": 8902,
											"end": 8908,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 8902,
											"end": 8913,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "171"
										},
										{
											"begin": 8902,
											"end": 8913,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 8902,
											"end": 8913,
											"name": "tag",
											"source": 13,
											"value": "254"
										},
										{
											"begin": 8902,
											"end": 8913,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 8878,
											"end": 8934,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 8878,
											"end": 8934,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 8878,
											"end": 8934,
											"name": "PUSH",
											"source": 13,
											"value": "1F"
										},
										{
											"begin": 8878,
											"end": 8934,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 8878,
											"end": 8934,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 8878,
											"end": 8934,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 8878,
											"end": 8934,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 8878,
											"end": 8934,
											"name": "DIV",
											"source": 13
										},
										{
											"begin": 8878,
											"end": 8934,
											"name": "MUL",
											"source": 13
										},
										{
											"begin": 8878,
											"end": 8934,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 8878,
											"end": 8934,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 8878,
											"end": 8934,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 8878,
											"end": 8934,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 8878,
											"end": 8934,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 8878,
											"end": 8934,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 8878,
											"end": 8934,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 8878,
											"end": 8934,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 8878,
											"end": 8934,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 8878,
											"end": 8934,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 8878,
											"end": 8934,
											"name": "SWAP4",
											"source": 13
										},
										{
											"begin": 8878,
											"end": 8934,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 8878,
											"end": 8934,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 8878,
											"end": 8934,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 8878,
											"end": 8934,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 8878,
											"end": 8934,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 8878,
											"end": 8934,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 8878,
											"end": 8934,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 8878,
											"end": 8934,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 8878,
											"end": 8934,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 8878,
											"end": 8934,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 8878,
											"end": 8934,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 8878,
											"end": 8934,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 8878,
											"end": 8934,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 8878,
											"end": 8934,
											"name": "CALLDATACOPY",
											"source": 13
										},
										{
											"begin": 8878,
											"end": 8934,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 8878,
											"end": 8934,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 8878,
											"end": 8934,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 8878,
											"end": 8934,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 8878,
											"end": 8934,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 8878,
											"end": 8934,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 8878,
											"end": 8934,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 8878,
											"end": 8934,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 8878,
											"end": 8934,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 8878,
											"end": 8934,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 8922,
											"end": 8932,
											"name": "CALLER",
											"source": 13
										},
										{
											"begin": 8878,
											"end": 8934,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 8878,
											"end": 8934,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 8878,
											"end": 8934,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 8878,
											"end": 8934,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 8878,
											"end": 8934,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 8770,
											"end": 8789,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "221"
										},
										{
											"begin": 8770,
											"end": 8944,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 8770,
											"end": 8944,
											"name": "tag",
											"source": 13,
											"value": "252"
										},
										{
											"begin": 8770,
											"end": 8944,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 8770,
											"end": 8944,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 8966,
											"end": 8980,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 8966,
											"end": 8980,
											"name": "SLOAD",
											"source": 13
										},
										{
											"begin": 8955,
											"end": 8980,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 8955,
											"end": 8980,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 9010,
											"end": 9016,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 9010,
											"end": 9032,
											"name": "PUSH",
											"source": 13,
											"value": "80"
										},
										{
											"begin": 9010,
											"end": 9032,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 9010,
											"end": 9032,
											"name": "CALLDATALOAD",
											"source": 13
										},
										{
											"begin": 8998,
											"end": 9006,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 8998,
											"end": 9032,
											"name": "GT",
											"source": 13
										},
										{
											"begin": 8998,
											"end": 9032,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 8990,
											"end": 9055,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "222"
										},
										{
											"begin": 8990,
											"end": 9055,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 8990,
											"end": 9055,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 8990,
											"end": 9055,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 8990,
											"end": 9055,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 8990,
											"end": 9055,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 8990,
											"end": 9055,
											"name": "PUSH",
											"source": 13,
											"value": "4"
										},
										{
											"begin": 8990,
											"end": 9055,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 8990,
											"end": 9055,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "120"
										},
										{
											"begin": 8990,
											"end": 9055,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 8990,
											"end": 9055,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "224"
										},
										{
											"begin": 8990,
											"end": 9055,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 662,
											"end": 935,
											"name": "tag",
											"source": 20,
											"value": "92"
										},
										{
											"begin": 662,
											"end": 935,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 849,
											"end": 928,
											"name": "PUSH",
											"source": 20,
											"value": "40"
										},
										{
											"begin": 849,
											"end": 928,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 849,
											"end": 928,
											"name": "MLOAD",
											"source": 20
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D505ACCF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 849,
											"end": 928,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 849,
											"end": 928,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 876,
											"end": 886,
											"name": "CALLER",
											"source": 20
										},
										{
											"begin": 849,
											"end": 928,
											"name": "PUSH",
											"source": 20,
											"value": "4"
										},
										{
											"begin": 849,
											"end": 928,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 849,
											"end": 928,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 849,
											"end": 928,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 896,
											"end": 900,
											"name": "ADDRESS",
											"source": 20
										},
										{
											"begin": 849,
											"end": 928,
											"name": "PUSH",
											"source": 20,
											"value": "24"
										},
										{
											"begin": 849,
											"end": 928,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 849,
											"end": 928,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 849,
											"end": 928,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 849,
											"end": 928,
											"name": "PUSH",
											"source": 20,
											"value": "44"
										},
										{
											"begin": 849,
											"end": 928,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 849,
											"end": 928,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 849,
											"end": 928,
											"name": "DUP8",
											"source": 20
										},
										{
											"begin": 849,
											"end": 928,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 849,
											"end": 928,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 849,
											"end": 928,
											"name": "PUSH",
											"source": 20,
											"value": "64"
										},
										{
											"begin": 849,
											"end": 928,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 849,
											"end": 928,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 849,
											"end": 928,
											"name": "DUP7",
											"source": 20
										},
										{
											"begin": 849,
											"end": 928,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 849,
											"end": 928,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 849,
											"end": 928,
											"name": "PUSH",
											"source": 20,
											"value": "FF"
										},
										{
											"begin": 849,
											"end": 928,
											"name": "DUP6",
											"source": 20
										},
										{
											"begin": 849,
											"end": 928,
											"name": "AND",
											"source": 20
										},
										{
											"begin": 849,
											"end": 928,
											"name": "PUSH",
											"source": 20,
											"value": "84"
										},
										{
											"begin": 849,
											"end": 928,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 849,
											"end": 928,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 849,
											"end": 928,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 849,
											"end": 928,
											"name": "PUSH",
											"source": 20,
											"value": "A4"
										},
										{
											"begin": 849,
											"end": 928,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 849,
											"end": 928,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 849,
											"end": 928,
											"name": "DUP5",
											"source": 20
										},
										{
											"begin": 849,
											"end": 928,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 849,
											"end": 928,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 849,
											"end": 928,
											"name": "PUSH",
											"source": 20,
											"value": "C4"
										},
										{
											"begin": 849,
											"end": 928,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 849,
											"end": 928,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 849,
											"end": 928,
											"name": "DUP4",
											"source": 20
										},
										{
											"begin": 849,
											"end": 928,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 849,
											"end": 928,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 849,
											"end": 928,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 849,
											"end": 928,
											"name": "MLOAD",
											"source": 20
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 849,
											"end": 875,
											"name": "DUP9",
											"source": 20
										},
										{
											"begin": 849,
											"end": 875,
											"name": "AND",
											"source": 20
										},
										{
											"begin": 849,
											"end": 875,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 849,
											"end": 875,
											"name": "PUSH",
											"source": 20,
											"value": "D505ACCF"
										},
										{
											"begin": 849,
											"end": 875,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 849,
											"end": 928,
											"name": "PUSH",
											"source": 20,
											"value": "E4"
										},
										{
											"begin": 849,
											"end": 928,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 849,
											"end": 928,
											"name": "DUP4",
											"source": 20
										},
										{
											"begin": 849,
											"end": 928,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 849,
											"end": 928,
											"name": "SWAP3",
											"source": 20
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP3",
											"source": -1
										},
										{
											"begin": 849,
											"end": 928,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 849,
											"end": 928,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 849,
											"end": 928,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 849,
											"end": 928,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 849,
											"end": 928,
											"name": "SUB",
											"source": 20
										},
										{
											"begin": 849,
											"end": 928,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 849,
											"end": 928,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP4",
											"source": -1
										},
										{
											"begin": 849,
											"end": 875,
											"name": "DUP8",
											"source": 20
										},
										{
											"begin": 849,
											"end": 928,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 849,
											"end": 928,
											"name": "EXTCODESIZE",
											"source": 20
										},
										{
											"begin": 849,
											"end": 928,
											"name": "ISZERO",
											"source": 20
										},
										{
											"begin": 849,
											"end": 928,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 849,
											"end": 928,
											"name": "ISZERO",
											"source": 20
										},
										{
											"begin": 849,
											"end": 928,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "123"
										},
										{
											"begin": 849,
											"end": 928,
											"name": "JUMPI",
											"source": 20
										},
										{
											"begin": 849,
											"end": 928,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 849,
											"end": 928,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 849,
											"end": 928,
											"name": "REVERT",
											"source": 20
										},
										{
											"begin": 1980,
											"end": 3274,
											"name": "tag",
											"source": 13,
											"value": "97"
										},
										{
											"begin": 1980,
											"end": 3274,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 2156,
											"end": 2157,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 2141,
											"end": 2153,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 2141,
											"end": 2157,
											"name": "SGT",
											"source": 13
										},
										{
											"begin": 2141,
											"end": 2177,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 2141,
											"end": 2177,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "262"
										},
										{
											"begin": 2141,
											"end": 2177,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 2141,
											"end": 2177,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 2176,
											"end": 2177,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 2161,
											"end": 2173,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 2161,
											"end": 2177,
											"name": "SGT",
											"source": 13
										},
										{
											"begin": 2141,
											"end": 2177,
											"name": "tag",
											"source": 13,
											"value": "262"
										},
										{
											"begin": 2141,
											"end": 2177,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 2133,
											"end": 2178,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "263"
										},
										{
											"begin": 2133,
											"end": 2178,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 2133,
											"end": 2178,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 2133,
											"end": 2178,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 2133,
											"end": 2178,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 2133,
											"end": 2178,
											"name": "tag",
											"source": 13,
											"value": "263"
										},
										{
											"begin": 2133,
											"end": 2178,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 2251,
											"end": 2279,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 2282,
											"end": 2319,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "264"
										},
										{
											"begin": 2282,
											"end": 2319,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 2282,
											"end": 2319,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 2282,
											"end": 2319,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 2293,
											"end": 2298,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 2282,
											"end": 2319,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "265"
										},
										{
											"begin": 2282,
											"end": 2319,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 2282,
											"end": 2319,
											"name": "tag",
											"source": 13,
											"value": "264"
										},
										{
											"begin": 2282,
											"end": 2319,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 2251,
											"end": 2319,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 2251,
											"end": 2319,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 2330,
											"end": 2345,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 2347,
											"end": 2363,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 2365,
											"end": 2375,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 2379,
											"end": 2406,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "266"
										},
										{
											"begin": 2379,
											"end": 2383,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 2379,
											"end": 2388,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 2379,
											"end": 2388,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 2379,
											"end": 2388,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 2379,
											"end": 2404,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "267"
										},
										{
											"begin": 2379,
											"end": 2406,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 2379,
											"end": 2406,
											"name": "tag",
											"source": 13,
											"value": "266"
										},
										{
											"begin": 2379,
											"end": 2406,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 2329,
											"end": 2406,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 2329,
											"end": 2406,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 2329,
											"end": 2406,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 2329,
											"end": 2406,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 2329,
											"end": 2406,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 2329,
											"end": 2406,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 2416,
											"end": 2482,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "268"
										},
										{
											"begin": 2450,
											"end": 2457,
											"name": "PUSHIMMUTABLE",
											"source": 13,
											"value": "2079"
										},
										{
											"begin": 2459,
											"end": 2466,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 2468,
											"end": 2476,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 2478,
											"end": 2481,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 2416,
											"end": 2449,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "269"
										},
										{
											"begin": 2416,
											"end": 2482,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 2416,
											"end": 2482,
											"name": "tag",
											"source": 13,
											"value": "268"
										},
										{
											"begin": 2416,
											"end": 2482,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 2416,
											"end": 2482,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 2494,
											"end": 2511,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 2513,
											"end": 2532,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 2563,
											"end": 2564,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 2548,
											"end": 2560,
											"name": "DUP11",
											"source": 13
										},
										{
											"begin": 2548,
											"end": 2564,
											"name": "SGT",
											"source": 13
										},
										{
											"begin": 2548,
											"end": 2688,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "270"
										},
										{
											"begin": 2548,
											"end": 2688,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 2657,
											"end": 2664,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2646,
											"end": 2664,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 2646,
											"end": 2654,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2646,
											"end": 2664,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 2646,
											"end": 2664,
											"name": "LT",
											"source": 13
										},
										{
											"begin": 2674,
											"end": 2686,
											"name": "DUP10",
											"source": 13
										},
										{
											"begin": 2548,
											"end": 2688,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "271"
										},
										{
											"begin": 2548,
											"end": 2688,
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 2548,
											"end": 2688,
											"name": "tag",
											"source": 13,
											"value": "270"
										},
										{
											"begin": 2548,
											"end": 2688,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 2594,
											"end": 2602,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2584,
											"end": 2602,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 2584,
											"end": 2591,
											"name": "DUP6",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2584,
											"end": 2602,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 2584,
											"end": 2602,
											"name": "LT",
											"source": 13
										},
										{
											"begin": 2612,
											"end": 2624,
											"name": "DUP11",
											"source": 13
										},
										{
											"begin": 2548,
											"end": 2688,
											"name": "tag",
											"source": 13,
											"value": "271"
										},
										{
											"begin": 2548,
											"end": 2688,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 2493,
											"end": 2688,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 2493,
											"end": 2688,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 2493,
											"end": 2688,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 2493,
											"end": 2688,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 2702,
											"end": 2714,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 2698,
											"end": 3268,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 2698,
											"end": 3268,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "272"
										},
										{
											"begin": 2698,
											"end": 3268,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 2730,
											"end": 2779,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "273"
										},
										{
											"begin": 2734,
											"end": 2741,
											"name": "DUP6",
											"source": 13
										},
										{
											"begin": 2743,
											"end": 2747,
											"name": "DUP8",
											"source": 13
										},
										{
											"begin": 2743,
											"end": 2753,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 2743,
											"end": 2753,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 2743,
											"end": 2753,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 2755,
											"end": 2765,
											"name": "CALLER",
											"source": 13
										},
										{
											"begin": 2767,
											"end": 2778,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 2730,
											"end": 2733,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "274"
										},
										{
											"begin": 2730,
											"end": 2779,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 2730,
											"end": 2779,
											"name": "tag",
											"source": 13,
											"value": "273"
										},
										{
											"begin": 2730,
											"end": 2779,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 2698,
											"end": 3268,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "125"
										},
										{
											"begin": 2698,
											"end": 3268,
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 2698,
											"end": 3268,
											"name": "tag",
											"source": 13,
											"value": "272"
										},
										{
											"begin": 2698,
											"end": 3268,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 2866,
											"end": 2875,
											"name": "DUP6",
											"source": 13
										},
										{
											"begin": 2866,
											"end": 2875,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 2866,
											"end": 2894,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "276"
										},
										{
											"begin": 2866,
											"end": 2894,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 2866,
											"end": 2892,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "191"
										},
										{
											"begin": 2866,
											"end": 2894,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 2866,
											"end": 2894,
											"name": "tag",
											"source": 13,
											"value": "276"
										},
										{
											"begin": 2866,
											"end": 2894,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 2862,
											"end": 3258,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 2862,
											"end": 3258,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "277"
										},
										{
											"begin": 2862,
											"end": 3258,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 2926,
											"end": 2935,
											"name": "DUP6",
											"source": 13
										},
										{
											"begin": 2926,
											"end": 2935,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 2926,
											"end": 2947,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "278"
										},
										{
											"begin": 2926,
											"end": 2947,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 2926,
											"end": 2945,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "199"
										},
										{
											"begin": 2926,
											"end": 2947,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 2926,
											"end": 2947,
											"name": "tag",
											"source": 13,
											"value": "278"
										},
										{
											"begin": 2926,
											"end": 2947,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 2914,
											"end": 2947,
											"name": "DUP7",
											"source": 13
										},
										{
											"begin": 2914,
											"end": 2947,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 2965,
											"end": 3018,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "279"
										},
										{
											"begin": 2985,
											"end": 2996,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 2998,
											"end": 3008,
											"name": "CALLER",
											"source": 13
										},
										{
											"begin": 2914,
											"end": 2923,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 2914,
											"end": 2918,
											"name": "DUP10",
											"source": 13
										},
										{
											"begin": 2965,
											"end": 2984,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "221"
										},
										{
											"begin": 2965,
											"end": 3018,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 2965,
											"end": 3018,
											"name": "tag",
											"source": 13,
											"value": "279"
										},
										{
											"begin": 2965,
											"end": 3018,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 2965,
											"end": 3018,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 2862,
											"end": 3258,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "125"
										},
										{
											"begin": 2862,
											"end": 3258,
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 2862,
											"end": 3258,
											"name": "tag",
											"source": 13,
											"value": "277"
										},
										{
											"begin": 2862,
											"end": 3258,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 3074,
											"end": 3085,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 3057,
											"end": 3071,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 3057,
											"end": 3085,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 3057,
											"end": 3085,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 3057,
											"end": 3085,
											"name": "SSTORE",
											"source": 13
										},
										{
											"begin": 3057,
											"end": 3085,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 3113,
											"end": 3121,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 3103,
											"end": 3121,
											"name": "SWAP5",
											"source": 13
										},
										{
											"begin": 3103,
											"end": 3121,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 3194,
											"end": 3243,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "125"
										},
										{
											"begin": 3198,
											"end": 3205,
											"name": "DUP6",
											"source": 13
										},
										{
											"begin": 3207,
											"end": 3211,
											"name": "DUP8",
											"source": 13
										},
										{
											"begin": 3207,
											"end": 3217,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 3207,
											"end": 3217,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 3207,
											"end": 3217,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 3219,
											"end": 3229,
											"name": "CALLER",
											"source": 13
										},
										{
											"begin": 3231,
											"end": 3242,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 3194,
											"end": 3197,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "274"
										},
										{
											"begin": 3194,
											"end": 3243,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 2370,
											"end": 2535,
											"name": "tag",
											"source": 33,
											"value": "101"
										},
										{
											"begin": 2370,
											"end": 2535,
											"name": "JUMPDEST",
											"source": 33
										},
										{
											"begin": 2482,
											"end": 2494,
											"name": "PUSH",
											"source": 33,
											"value": "40"
										},
										{
											"begin": 2482,
											"end": 2494,
											"name": "DUP1",
											"source": 33
										},
										{
											"begin": 2482,
											"end": 2494,
											"name": "MLOAD",
											"source": 33
										},
										{
											"begin": 2442,
											"end": 2454,
											"name": "PUSH",
											"source": 33,
											"value": "0"
										},
										{
											"begin": 2482,
											"end": 2494,
											"name": "DUP1",
											"source": 33
										},
										{
											"begin": 2482,
											"end": 2494,
											"name": "DUP3",
											"source": 33
										},
										{
											"begin": 2482,
											"end": 2494,
											"name": "MSTORE",
											"source": 33
										},
										{
											"begin": 2482,
											"end": 2494,
											"name": "PUSH",
											"source": 33,
											"value": "20"
										},
										{
											"begin": 2482,
											"end": 2494,
											"name": "DUP3",
											"source": 33
										},
										{
											"begin": 2482,
											"end": 2494,
											"name": "ADD",
											"source": 33
										},
										{
											"begin": 2482,
											"end": 2494,
											"name": "SWAP1",
											"source": 33
										},
										{
											"begin": 2482,
											"end": 2494,
											"name": "SWAP3",
											"source": 33
										},
										{
											"begin": 2482,
											"end": 2494,
											"name": "MSTORE",
											"source": 33
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2460,
											"end": 2467,
											"name": "DUP5",
											"source": 33
										},
										{
											"begin": 2460,
											"end": 2467,
											"name": "AND",
											"source": 33
										},
										{
											"begin": 2460,
											"end": 2467,
											"name": "SWAP1",
											"source": 33
										},
										{
											"begin": 2475,
											"end": 2480,
											"name": "DUP4",
											"source": 33
										},
										{
											"begin": 2475,
											"end": 2480,
											"name": "SWAP1",
											"source": 33
										},
										{
											"begin": 2460,
											"end": 2495,
											"name": "PUSH",
											"source": 33,
											"value": "40"
										},
										{
											"begin": 2460,
											"end": 2495,
											"name": "MLOAD",
											"source": 33
										},
										{
											"begin": 2460,
											"end": 2495,
											"name": "DUP1",
											"source": 33
										},
										{
											"begin": 2460,
											"end": 2495,
											"name": "DUP3",
											"source": 33
										},
										{
											"begin": 2460,
											"end": 2495,
											"name": "DUP1",
											"source": 33
										},
										{
											"begin": 2460,
											"end": 2495,
											"name": "MLOAD",
											"source": 33
										},
										{
											"begin": 2460,
											"end": 2495,
											"name": "SWAP1",
											"source": 33
										},
										{
											"begin": 2460,
											"end": 2495,
											"name": "PUSH",
											"source": 33,
											"value": "20"
										},
										{
											"begin": 2460,
											"end": 2495,
											"name": "ADD",
											"source": 33
										},
										{
											"begin": 2460,
											"end": 2495,
											"name": "SWAP1",
											"source": 33
										},
										{
											"begin": 2460,
											"end": 2495,
											"name": "DUP1",
											"source": 33
										},
										{
											"begin": 2460,
											"end": 2495,
											"name": "DUP4",
											"source": 33
										},
										{
											"begin": 2460,
											"end": 2495,
											"name": "DUP4",
											"source": 33
										},
										{
											"begin": 2460,
											"end": 2495,
											"name": "tag",
											"source": 33,
											"value": "285"
										},
										{
											"begin": 2460,
											"end": 2495,
											"name": "JUMPDEST",
											"source": 33
										},
										{
											"begin": 2460,
											"end": 2495,
											"name": "PUSH",
											"source": 33,
											"value": "20"
										},
										{
											"begin": 2460,
											"end": 2495,
											"name": "DUP4",
											"source": 33
										},
										{
											"begin": 2460,
											"end": 2495,
											"name": "LT",
											"source": 33
										},
										{
											"begin": 2460,
											"end": 2495,
											"name": "PUSH [tag]",
											"source": 33,
											"value": "287"
										},
										{
											"begin": 2460,
											"end": 2495,
											"name": "JUMPI",
											"source": 33
										},
										{
											"begin": 2460,
											"end": 2495,
											"name": "DUP1",
											"source": 33
										},
										{
											"begin": 2460,
											"end": 2495,
											"name": "MLOAD",
											"source": 33
										},
										{
											"begin": 2460,
											"end": 2495,
											"name": "DUP3",
											"source": 33
										},
										{
											"begin": 2460,
											"end": 2495,
											"name": "MSTORE",
											"source": 33
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 2460,
											"end": 2495,
											"name": "SWAP1",
											"source": 33
										},
										{
											"begin": 2460,
											"end": 2495,
											"name": "SWAP3",
											"source": 33
										},
										{
											"begin": 2460,
											"end": 2495,
											"name": "ADD",
											"source": 33
										},
										{
											"begin": 2460,
											"end": 2495,
											"name": "SWAP2",
											"source": 33
										},
										{
											"begin": 2460,
											"end": 2495,
											"name": "PUSH",
											"source": 33,
											"value": "20"
										},
										{
											"begin": 2460,
											"end": 2495,
											"name": "SWAP2",
											"source": 33
										},
										{
											"begin": 2460,
											"end": 2495,
											"name": "DUP3",
											"source": 33
										},
										{
											"begin": 2460,
											"end": 2495,
											"name": "ADD",
											"source": 33
										},
										{
											"begin": 2460,
											"end": 2495,
											"name": "SWAP2",
											"source": 33
										},
										{
											"begin": 2460,
											"end": 2495,
											"name": "ADD",
											"source": 33
										},
										{
											"begin": 2460,
											"end": 2495,
											"name": "PUSH [tag]",
											"source": 33,
											"value": "285"
										},
										{
											"begin": 2460,
											"end": 2495,
											"name": "JUMP",
											"source": 33
										},
										{
											"begin": 2460,
											"end": 2495,
											"name": "tag",
											"source": 33,
											"value": "287"
										},
										{
											"begin": 2460,
											"end": 2495,
											"name": "JUMPDEST",
											"source": 33
										},
										{
											"begin": 2460,
											"end": 2495,
											"name": "PUSH",
											"source": 33,
											"value": "1"
										},
										{
											"begin": 2460,
											"end": 2495,
											"name": "DUP4",
											"source": 33
										},
										{
											"begin": 2460,
											"end": 2495,
											"name": "PUSH",
											"source": 33,
											"value": "20"
										},
										{
											"begin": 2460,
											"end": 2495,
											"name": "SUB",
											"source": 33
										},
										{
											"begin": 2460,
											"end": 2495,
											"name": "PUSH",
											"source": 33,
											"value": "100"
										},
										{
											"begin": 2460,
											"end": 2495,
											"name": "EXP",
											"source": 33
										},
										{
											"begin": 2460,
											"end": 2495,
											"name": "SUB",
											"source": 33
										},
										{
											"begin": 2460,
											"end": 2495,
											"name": "DUP1",
											"source": 33
										},
										{
											"begin": 2460,
											"end": 2495,
											"name": "NOT",
											"source": 33
										},
										{
											"begin": 2460,
											"end": 2495,
											"name": "DUP3",
											"source": 33
										},
										{
											"begin": 2460,
											"end": 2495,
											"name": "MLOAD",
											"source": 33
										},
										{
											"begin": 2460,
											"end": 2495,
											"name": "AND",
											"source": 33
										},
										{
											"begin": 2460,
											"end": 2495,
											"name": "DUP2",
											"source": 33
										},
										{
											"begin": 2460,
											"end": 2495,
											"name": "DUP5",
											"source": 33
										},
										{
											"begin": 2460,
											"end": 2495,
											"name": "MLOAD",
											"source": 33
										},
										{
											"begin": 2460,
											"end": 2495,
											"name": "AND",
											"source": 33
										},
										{
											"begin": 2460,
											"end": 2495,
											"name": "DUP1",
											"source": 33
										},
										{
											"begin": 2460,
											"end": 2495,
											"name": "DUP3",
											"source": 33
										},
										{
											"begin": 2460,
											"end": 2495,
											"name": "OR",
											"source": 33
										},
										{
											"begin": 2460,
											"end": 2495,
											"name": "DUP6",
											"source": 33
										},
										{
											"begin": 2460,
											"end": 2495,
											"name": "MSTORE",
											"source": 33
										},
										{
											"begin": 2460,
											"end": 2495,
											"name": "POP",
											"source": 33
										},
										{
											"begin": 2460,
											"end": 2495,
											"name": "POP",
											"source": 33
										},
										{
											"begin": 2460,
											"end": 2495,
											"name": "POP",
											"source": 33
										},
										{
											"begin": 2460,
											"end": 2495,
											"name": "POP",
											"source": 33
										},
										{
											"begin": 2460,
											"end": 2495,
											"name": "POP",
											"source": 33
										},
										{
											"begin": 2460,
											"end": 2495,
											"name": "POP",
											"source": 33
										},
										{
											"begin": 2460,
											"end": 2495,
											"name": "SWAP1",
											"source": 33
										},
										{
											"begin": 2460,
											"end": 2495,
											"name": "POP",
											"source": 33
										},
										{
											"begin": 2460,
											"end": 2495,
											"name": "ADD",
											"source": 33
										},
										{
											"begin": 2460,
											"end": 2495,
											"name": "SWAP2",
											"source": 33
										},
										{
											"begin": 2460,
											"end": 2495,
											"name": "POP",
											"source": 33
										},
										{
											"begin": 2460,
											"end": 2495,
											"name": "POP",
											"source": 33
										},
										{
											"begin": 2460,
											"end": 2495,
											"name": "PUSH",
											"source": 33,
											"value": "0"
										},
										{
											"begin": 2460,
											"end": 2495,
											"name": "PUSH",
											"source": 33,
											"value": "40"
										},
										{
											"begin": 2460,
											"end": 2495,
											"name": "MLOAD",
											"source": 33
										},
										{
											"begin": 2460,
											"end": 2495,
											"name": "DUP1",
											"source": 33
										},
										{
											"begin": 2460,
											"end": 2495,
											"name": "DUP4",
											"source": 33
										},
										{
											"begin": 2460,
											"end": 2495,
											"name": "SUB",
											"source": 33
										},
										{
											"begin": 2460,
											"end": 2495,
											"name": "DUP2",
											"source": 33
										},
										{
											"begin": 2460,
											"end": 2495,
											"name": "DUP6",
											"source": 33
										},
										{
											"begin": 2460,
											"end": 2495,
											"name": "DUP8",
											"source": 33
										},
										{
											"begin": 2460,
											"end": 2495,
											"name": "GAS",
											"source": 33
										},
										{
											"begin": 2460,
											"end": 2495,
											"name": "CALL",
											"source": 33
										},
										{
											"begin": 2460,
											"end": 2495,
											"name": "SWAP3",
											"source": 33
										},
										{
											"begin": 2460,
											"end": 2495,
											"name": "POP",
											"source": 33
										},
										{
											"begin": 2460,
											"end": 2495,
											"name": "POP",
											"source": 33
										},
										{
											"begin": 2460,
											"end": 2495,
											"name": "POP",
											"source": 33
										},
										{
											"begin": 2460,
											"end": 2495,
											"name": "RETURNDATASIZE",
											"source": 33
										},
										{
											"begin": 2460,
											"end": 2495,
											"name": "DUP1",
											"source": 33
										},
										{
											"begin": 2460,
											"end": 2495,
											"name": "PUSH",
											"source": 33,
											"value": "0"
										},
										{
											"begin": 2460,
											"end": 2495,
											"name": "DUP2",
											"source": 33
										},
										{
											"begin": 2460,
											"end": 2495,
											"name": "EQ",
											"source": 33
										},
										{
											"begin": 2460,
											"end": 2495,
											"name": "PUSH [tag]",
											"source": 33,
											"value": "290"
										},
										{
											"begin": 2460,
											"end": 2495,
											"name": "JUMPI",
											"source": 33
										},
										{
											"begin": 2460,
											"end": 2495,
											"name": "PUSH",
											"source": 33,
											"value": "40"
										},
										{
											"begin": 2460,
											"end": 2495,
											"name": "MLOAD",
											"source": 33
										},
										{
											"begin": 2460,
											"end": 2495,
											"name": "SWAP2",
											"source": 33
										},
										{
											"begin": 2460,
											"end": 2495,
											"name": "POP",
											"source": 33
										},
										{
											"begin": 2460,
											"end": 2495,
											"name": "PUSH",
											"source": 33,
											"value": "1F"
										},
										{
											"begin": 2460,
											"end": 2495,
											"name": "NOT",
											"source": 33
										},
										{
											"begin": 2460,
											"end": 2495,
											"name": "PUSH",
											"source": 33,
											"value": "3F"
										},
										{
											"begin": 2460,
											"end": 2495,
											"name": "RETURNDATASIZE",
											"source": 33
										},
										{
											"begin": 2460,
											"end": 2495,
											"name": "ADD",
											"source": 33
										},
										{
											"begin": 2460,
											"end": 2495,
											"name": "AND",
											"source": 33
										},
										{
											"begin": 2460,
											"end": 2495,
											"name": "DUP3",
											"source": 33
										},
										{
											"begin": 2460,
											"end": 2495,
											"name": "ADD",
											"source": 33
										},
										{
											"begin": 2460,
											"end": 2495,
											"name": "PUSH",
											"source": 33,
											"value": "40"
										},
										{
											"begin": 2460,
											"end": 2495,
											"name": "MSTORE",
											"source": 33
										},
										{
											"begin": 2460,
											"end": 2495,
											"name": "RETURNDATASIZE",
											"source": 33
										},
										{
											"begin": 2460,
											"end": 2495,
											"name": "DUP3",
											"source": 33
										},
										{
											"begin": 2460,
											"end": 2495,
											"name": "MSTORE",
											"source": 33
										},
										{
											"begin": 2460,
											"end": 2495,
											"name": "RETURNDATASIZE",
											"source": 33
										},
										{
											"begin": 2460,
											"end": 2495,
											"name": "PUSH",
											"source": 33,
											"value": "0"
										},
										{
											"begin": 2460,
											"end": 2495,
											"name": "PUSH",
											"source": 33,
											"value": "20"
										},
										{
											"begin": 2460,
											"end": 2495,
											"name": "DUP5",
											"source": 33
										},
										{
											"begin": 2460,
											"end": 2495,
											"name": "ADD",
											"source": 33
										},
										{
											"begin": 2460,
											"end": 2495,
											"name": "RETURNDATACOPY",
											"source": 33
										},
										{
											"begin": 2460,
											"end": 2495,
											"name": "PUSH [tag]",
											"source": 33,
											"value": "289"
										},
										{
											"begin": 2460,
											"end": 2495,
											"name": "JUMP",
											"source": 33
										},
										{
											"begin": 2460,
											"end": 2495,
											"name": "tag",
											"source": 33,
											"value": "290"
										},
										{
											"begin": 2460,
											"end": 2495,
											"name": "JUMPDEST",
											"source": 33
										},
										{
											"begin": 2460,
											"end": 2495,
											"name": "PUSH",
											"source": 33,
											"value": "60"
										},
										{
											"begin": 2460,
											"end": 2495,
											"name": "SWAP2",
											"source": 33
										},
										{
											"begin": 2460,
											"end": 2495,
											"name": "POP",
											"source": 33
										},
										{
											"begin": 2460,
											"end": 2495,
											"name": "tag",
											"source": 33,
											"value": "289"
										},
										{
											"begin": 2460,
											"end": 2495,
											"name": "JUMPDEST",
											"source": 33
										},
										{
											"begin": 2460,
											"end": 2495,
											"name": "POP",
											"source": 33
										},
										{
											"begin": 2441,
											"end": 2495,
											"name": "POP",
											"source": 33
										},
										{
											"begin": 2441,
											"end": 2495,
											"name": "SWAP1",
											"source": 33
										},
										{
											"begin": 2441,
											"end": 2495,
											"name": "POP",
											"source": 33
										},
										{
											"begin": 2513,
											"end": 2520,
											"name": "DUP1",
											"source": 33
										},
										{
											"begin": 2505,
											"end": 2528,
											"name": "PUSH [tag]",
											"source": 33,
											"value": "136"
										},
										{
											"begin": 2505,
											"end": 2528,
											"name": "JUMPI",
											"source": 33
										},
										{
											"begin": 2505,
											"end": 2528,
											"name": "PUSH",
											"source": 33,
											"value": "40"
										},
										{
											"begin": 2505,
											"end": 2528,
											"name": "DUP1",
											"source": 33
										},
										{
											"begin": 2505,
											"end": 2528,
											"name": "MLOAD",
											"source": 33
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2505,
											"end": 2528,
											"name": "DUP2",
											"source": 33
										},
										{
											"begin": 2505,
											"end": 2528,
											"name": "MSTORE",
											"source": 33
										},
										{
											"begin": 2505,
											"end": 2528,
											"name": "PUSH",
											"source": 33,
											"value": "20"
										},
										{
											"begin": 2505,
											"end": 2528,
											"name": "PUSH",
											"source": 33,
											"value": "4"
										},
										{
											"begin": 2505,
											"end": 2528,
											"name": "DUP3",
											"source": 33
										},
										{
											"begin": 2505,
											"end": 2528,
											"name": "ADD",
											"source": 33
										},
										{
											"begin": 2505,
											"end": 2528,
											"name": "MSTORE",
											"source": 33
										},
										{
											"begin": 2505,
											"end": 2528,
											"name": "PUSH",
											"source": 33,
											"value": "3"
										},
										{
											"begin": 2505,
											"end": 2528,
											"name": "PUSH",
											"source": 33,
											"value": "24"
										},
										{
											"begin": 2505,
											"end": 2528,
											"name": "DUP3",
											"source": 33
										},
										{
											"begin": 2505,
											"end": 2528,
											"name": "ADD",
											"source": 33
										},
										{
											"begin": 2505,
											"end": 2528,
											"name": "MSTORE",
											"source": 33
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "535445"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2505,
											"end": 2528,
											"name": "PUSH",
											"source": 33,
											"value": "44"
										},
										{
											"begin": 2505,
											"end": 2528,
											"name": "DUP3",
											"source": 33
										},
										{
											"begin": 2505,
											"end": 2528,
											"name": "ADD",
											"source": 33
										},
										{
											"begin": 2505,
											"end": 2528,
											"name": "MSTORE",
											"source": 33
										},
										{
											"begin": 2505,
											"end": 2528,
											"name": "SWAP1",
											"source": 33
										},
										{
											"begin": 2505,
											"end": 2528,
											"name": "MLOAD",
											"source": 33
										},
										{
											"begin": 2505,
											"end": 2528,
											"name": "SWAP1",
											"source": 33
										},
										{
											"begin": 2505,
											"end": 2528,
											"name": "DUP2",
											"source": 33
										},
										{
											"begin": 2505,
											"end": 2528,
											"name": "SWAP1",
											"source": 33
										},
										{
											"begin": 2505,
											"end": 2528,
											"name": "SUB",
											"source": 33
										},
										{
											"begin": 2505,
											"end": 2528,
											"name": "PUSH",
											"source": 33,
											"value": "64"
										},
										{
											"begin": 2505,
											"end": 2528,
											"name": "ADD",
											"source": 33
										},
										{
											"begin": 2505,
											"end": 2528,
											"name": "SWAP1",
											"source": 33
										},
										{
											"begin": 2505,
											"end": 2528,
											"name": "REVERT",
											"source": 33
										},
										{
											"begin": 319,
											"end": 425,
											"name": "tag",
											"source": 14,
											"value": "104"
										},
										{
											"begin": 319,
											"end": 425,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 403,
											"end": 418,
											"name": "TIMESTAMP",
											"source": 14
										},
										{
											"begin": 319,
											"end": 425,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 319,
											"end": 425,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 3328,
											"end": 4262,
											"name": "tag",
											"source": 13,
											"value": "118"
										},
										{
											"begin": 3328,
											"end": 4262,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 3505,
											"end": 3522,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3601,
											"end": 3624,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 3601,
											"end": 3624,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 3597,
											"end": 3651,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "294"
										},
										{
											"begin": 3597,
											"end": 3651,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 3646,
											"end": 3650,
											"name": "ADDRESS",
											"source": 13
										},
										{
											"begin": 3626,
											"end": 3651,
											"name": "SWAP4",
											"source": 13
										},
										{
											"begin": 3626,
											"end": 3651,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 3597,
											"end": 3651,
											"name": "tag",
											"source": 13,
											"value": "294"
										},
										{
											"begin": 3597,
											"end": 3651,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 3663,
											"end": 3678,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 3680,
											"end": 3696,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 3698,
											"end": 3708,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 3712,
											"end": 3739,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "295"
										},
										{
											"begin": 3712,
											"end": 3716,
											"name": "DUP6",
											"source": 13
										},
										{
											"begin": 3712,
											"end": 3721,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 3712,
											"end": 3721,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 3712,
											"end": 3721,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 3712,
											"end": 3737,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "267"
										},
										{
											"begin": 3712,
											"end": 3739,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 3712,
											"end": 3739,
											"name": "tag",
											"source": 13,
											"value": "295"
										},
										{
											"begin": 3712,
											"end": 3739,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 3662,
											"end": 3739,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 3662,
											"end": 3739,
											"name": "SWAP5",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3662,
											"end": 3739,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3662,
											"end": 3739,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3768,
											"end": 3786,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 3768,
											"end": 3786,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 3768,
											"end": 3786,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 3768,
											"end": 3786,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 3768,
											"end": 3786,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 3768,
											"end": 3786,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 3768,
											"end": 3786,
											"name": "LT",
											"source": 13
										},
										{
											"begin": 3750,
											"end": 3765,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 3750,
											"end": 3765,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 3844,
											"end": 3875,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "296"
										},
										{
											"begin": 3662,
											"end": 3739,
											"name": "DUP7",
											"source": 13
										},
										{
											"begin": 3662,
											"end": 3739,
											"name": "DUP7",
											"source": 13
										},
										{
											"begin": 3662,
											"end": 3739,
											"name": "DUP7",
											"source": 13
										},
										{
											"begin": 3844,
											"end": 3851,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "297"
										},
										{
											"begin": 3844,
											"end": 3875,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 3844,
											"end": 3875,
											"name": "tag",
											"source": 13,
											"value": "296"
										},
										{
											"begin": 3844,
											"end": 3875,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3844,
											"end": 3880,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 3844,
											"end": 3880,
											"name": "PUSH",
											"source": 13,
											"value": "128ACB08"
										},
										{
											"begin": 3898,
											"end": 3907,
											"name": "DUP12",
											"source": 13
										},
										{
											"begin": 3925,
											"end": 3935,
											"name": "DUP6",
											"source": 13
										},
										{
											"begin": 3953,
											"end": 3972,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "298"
										},
										{
											"begin": 3953,
											"end": 3961,
											"name": "DUP16",
											"source": 13
										},
										{
											"begin": 3953,
											"end": 3970,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "299"
										},
										{
											"begin": 3953,
											"end": 3972,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 3953,
											"end": 3972,
											"name": "tag",
											"source": 13,
											"value": "298"
										},
										{
											"begin": 3953,
											"end": 3972,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3990,
											"end": 4012,
											"name": "DUP15",
											"source": 13
										},
										{
											"begin": 3990,
											"end": 4012,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 3990,
											"end": 4012,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 3990,
											"end": 4147,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "300"
										},
										{
											"begin": 3990,
											"end": 4147,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 4130,
											"end": 4147,
											"name": "DUP14",
											"source": 13
										},
										{
											"begin": 3990,
											"end": 4147,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "303"
										},
										{
											"begin": 3990,
											"end": 4147,
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 3990,
											"end": 4147,
											"name": "tag",
											"source": 13,
											"value": "300"
										},
										{
											"begin": 3990,
											"end": 4147,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 4036,
											"end": 4046,
											"name": "DUP8",
											"source": 13
										},
										{
											"begin": 4036,
											"end": 4106,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "302"
										},
										{
											"begin": 4036,
											"end": 4106,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 4079,
											"end": 4106,
											"name": "PUSH",
											"source": 13,
											"value": "FFFD8963EFD1FC6A506488495D951D5263988D25"
										},
										{
											"begin": 4036,
											"end": 4106,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "303"
										},
										{
											"begin": 4036,
											"end": 4106,
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 4036,
											"end": 4106,
											"name": "tag",
											"source": 13,
											"value": "302"
										},
										{
											"begin": 4036,
											"end": 4106,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 4049,
											"end": 4076,
											"name": "PUSH",
											"source": 13,
											"value": "1000276A4"
										},
										{
											"begin": 4036,
											"end": 4106,
											"name": "tag",
											"source": 13,
											"value": "303"
										},
										{
											"begin": 4036,
											"end": 4106,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 4176,
											"end": 4180,
											"name": "DUP14",
											"source": 13
										},
										{
											"begin": 4165,
											"end": 4181,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 4165,
											"end": 4181,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 4165,
											"end": 4181,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 4165,
											"end": 4181,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 4165,
											"end": 4181,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "304"
										},
										{
											"begin": 4165,
											"end": 4181,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 4165,
											"end": 4181,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 4165,
											"end": 4181,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "305"
										},
										{
											"begin": 4165,
											"end": 4181,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 4165,
											"end": 4181,
											"name": "tag",
											"source": 13,
											"value": "304"
										},
										{
											"begin": 4165,
											"end": 4181,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 4165,
											"end": 4181,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 4165,
											"end": 4181,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 4165,
											"end": 4181,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 4165,
											"end": 4181,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 4165,
											"end": 4181,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 4165,
											"end": 4181,
											"name": "SUB",
											"source": 13
										},
										{
											"begin": 4165,
											"end": 4181,
											"name": "SUB",
											"source": 13
										},
										{
											"begin": 4165,
											"end": 4181,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 4165,
											"end": 4181,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 4165,
											"end": 4181,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 4165,
											"end": 4181,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 4165,
											"end": 4181,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 3844,
											"end": 4195,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 3844,
											"end": 4195,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 3844,
											"end": 4195,
											"name": "DUP7",
											"source": 13
										},
										{
											"begin": 3844,
											"end": 4195,
											"name": "PUSH",
											"source": 13,
											"value": "FFFFFFFF"
										},
										{
											"begin": 3844,
											"end": 4195,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 3844,
											"end": 4195,
											"name": "PUSH",
											"source": 13,
											"value": "E0"
										},
										{
											"begin": 3844,
											"end": 4195,
											"name": "SHL",
											"source": 13
										},
										{
											"begin": 3844,
											"end": 4195,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 3844,
											"end": 4195,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 3844,
											"end": 4195,
											"name": "PUSH",
											"source": 13,
											"value": "4"
										},
										{
											"begin": 3844,
											"end": 4195,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 3844,
											"end": 4195,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "306"
										},
										{
											"begin": 3844,
											"end": 4195,
											"name": "SWAP6",
											"source": 13
										},
										{
											"begin": 3844,
											"end": 4195,
											"name": "SWAP5",
											"source": 13
										},
										{
											"begin": 3844,
											"end": 4195,
											"name": "SWAP4",
											"source": 13
										},
										{
											"begin": 3844,
											"end": 4195,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 3844,
											"end": 4195,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 3844,
											"end": 4195,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 3844,
											"end": 4195,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "307"
										},
										{
											"begin": 3844,
											"end": 4195,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 3844,
											"end": 4195,
											"name": "tag",
											"source": 13,
											"value": "306"
										},
										{
											"begin": 3844,
											"end": 4195,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 3844,
											"end": 4195,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 3844,
											"end": 4195,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 3844,
											"end": 4195,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 3844,
											"end": 4195,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 3844,
											"end": 4195,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 3844,
											"end": 4195,
											"name": "SUB",
											"source": 13
										},
										{
											"begin": 3844,
											"end": 4195,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 3844,
											"end": 4195,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 3844,
											"end": 4195,
											"name": "DUP8",
											"source": 13
										},
										{
											"begin": 3844,
											"end": 4195,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 3844,
											"end": 4195,
											"name": "EXTCODESIZE",
											"source": 13
										},
										{
											"begin": 3844,
											"end": 4195,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 3844,
											"end": 4195,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 3844,
											"end": 4195,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 3844,
											"end": 4195,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "308"
										},
										{
											"begin": 3844,
											"end": 4195,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 3844,
											"end": 4195,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 3844,
											"end": 4195,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 3844,
											"end": 4195,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 3844,
											"end": 4195,
											"name": "tag",
											"source": 13,
											"value": "308"
										},
										{
											"begin": 3844,
											"end": 4195,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 3844,
											"end": 4195,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 3844,
											"end": 4195,
											"name": "GAS",
											"source": 13
										},
										{
											"begin": 3844,
											"end": 4195,
											"name": "CALL",
											"source": 13
										},
										{
											"begin": 3844,
											"end": 4195,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 3844,
											"end": 4195,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 3844,
											"end": 4195,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 3844,
											"end": 4195,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "310"
										},
										{
											"begin": 3844,
											"end": 4195,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 3844,
											"end": 4195,
											"name": "RETURNDATASIZE",
											"source": 13
										},
										{
											"begin": 3844,
											"end": 4195,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 3844,
											"end": 4195,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 3844,
											"end": 4195,
											"name": "RETURNDATACOPY",
											"source": 13
										},
										{
											"begin": 3844,
											"end": 4195,
											"name": "RETURNDATASIZE",
											"source": 13
										},
										{
											"begin": 3844,
											"end": 4195,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 3844,
											"end": 4195,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 3844,
											"end": 4195,
											"name": "tag",
											"source": 13,
											"value": "310"
										},
										{
											"begin": 3844,
											"end": 4195,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 3844,
											"end": 4195,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 3844,
											"end": 4195,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 3844,
											"end": 4195,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 3844,
											"end": 4195,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 3844,
											"end": 4195,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 3844,
											"end": 4195,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 3844,
											"end": 4195,
											"name": "RETURNDATASIZE",
											"source": 13
										},
										{
											"begin": 3844,
											"end": 4195,
											"name": "PUSH",
											"source": 13,
											"value": "1F"
										},
										{
											"begin": 3844,
											"end": 4195,
											"name": "NOT",
											"source": 13
										},
										{
											"begin": 3844,
											"end": 4195,
											"name": "PUSH",
											"source": 13,
											"value": "1F"
										},
										{
											"begin": 3844,
											"end": 4195,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 3844,
											"end": 4195,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 3844,
											"end": 4195,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 3844,
											"end": 4195,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 3844,
											"end": 4195,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 3844,
											"end": 4195,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 3844,
											"end": 4195,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 3844,
											"end": 4195,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 3844,
											"end": 4195,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 3844,
											"end": 4195,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 3844,
											"end": 4195,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 3844,
											"end": 4195,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 3844,
											"end": 4195,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "311"
										},
										{
											"begin": 3844,
											"end": 4195,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 3844,
											"end": 4195,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 3844,
											"end": 4195,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "312"
										},
										{
											"begin": 3844,
											"end": 4195,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 3844,
											"end": 4195,
											"name": "tag",
											"source": 13,
											"value": "311"
										},
										{
											"begin": 3844,
											"end": 4195,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 3797,
											"end": 4195,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 3797,
											"end": 4195,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 3797,
											"end": 4195,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 3797,
											"end": 4195,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 4223,
											"end": 4233,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 4223,
											"end": 4253,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "313"
										},
										{
											"begin": 4223,
											"end": 4253,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 4246,
											"end": 4253,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 4223,
											"end": 4253,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "314"
										},
										{
											"begin": 4223,
											"end": 4253,
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 4223,
											"end": 4253,
											"name": "tag",
											"source": 13,
											"value": "313"
										},
										{
											"begin": 4223,
											"end": 4253,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 4236,
											"end": 4243,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 4223,
											"end": 4253,
											"name": "tag",
											"source": 13,
											"value": "314"
										},
										{
											"begin": 4223,
											"end": 4253,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 4221,
											"end": 4254,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 4221,
											"end": 4254,
											"name": "SUB",
											"source": 13
										},
										{
											"begin": 4221,
											"end": 4254,
											"name": "SWAP12",
											"source": 13
										},
										{
											"begin": 3328,
											"end": 4262,
											"name": "SWAP11",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3328,
											"end": 4262,
											"name": "JUMP",
											"source": 13,
											"value": "[out]"
										},
										{
											"begin": 986,
											"end": 1111,
											"name": "tag",
											"source": 10,
											"value": "150"
										},
										{
											"begin": 986,
											"end": 1111,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1044,
											"end": 1053,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 1073,
											"end": 1079,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 1073,
											"end": 1079,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 1073,
											"end": 1079,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1073,
											"end": 1103,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "316"
										},
										{
											"begin": 1073,
											"end": 1103,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1088,
											"end": 1093,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1088,
											"end": 1093,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1088,
											"end": 1093,
											"name": "MUL",
											"source": 10
										},
										{
											"begin": 1102,
											"end": 1103,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1097,
											"end": 1098,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 1088,
											"end": 1093,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 1097,
											"end": 1098,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1083,
											"end": 1098,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "317"
										},
										{
											"begin": 1083,
											"end": 1098,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 1083,
											"end": 1098,
											"name": "INVALID",
											"source": 10
										},
										{
											"begin": 1083,
											"end": 1098,
											"name": "tag",
											"source": 10,
											"value": "317"
										},
										{
											"begin": 1083,
											"end": 1098,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1083,
											"end": 1098,
											"name": "DIV",
											"source": 10
										},
										{
											"begin": 1083,
											"end": 1103,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 1073,
											"end": 1103,
											"name": "tag",
											"source": 10,
											"value": "316"
										},
										{
											"begin": 1073,
											"end": 1103,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1065,
											"end": 1104,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "318"
										},
										{
											"begin": 1065,
											"end": 1104,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 1065,
											"end": 1104,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 1065,
											"end": 1104,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1065,
											"end": 1104,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 1065,
											"end": 1104,
											"name": "tag",
											"source": 10,
											"value": "318"
										},
										{
											"begin": 1065,
											"end": 1104,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 986,
											"end": 1111,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 986,
											"end": 1111,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 986,
											"end": 1111,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 986,
											"end": 1111,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 986,
											"end": 1111,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 992,
											"end": 1130,
											"name": "tag",
											"source": 31,
											"value": "191"
										},
										{
											"begin": 992,
											"end": 1130,
											"name": "JUMPDEST",
											"source": 31
										},
										{
											"begin": 1083,
											"end": 1094,
											"name": "DUP1",
											"source": 31
										},
										{
											"begin": 1083,
											"end": 1094,
											"name": "MLOAD",
											"source": 31
										},
										{
											"begin": 777,
											"end": 801,
											"name": "PUSH",
											"source": 31,
											"value": "42"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "GT",
											"source": -1
										},
										{
											"begin": 1083,
											"end": 1123,
											"name": "ISZERO",
											"source": 31
										},
										{
											"begin": 992,
											"end": 1130,
											"name": "tag",
											"source": 31,
											"value": "319"
										},
										{
											"begin": 992,
											"end": 1130,
											"name": "JUMPDEST",
											"source": 31
										},
										{
											"begin": 992,
											"end": 1130,
											"name": "SWAP2",
											"source": 31
										},
										{
											"begin": 992,
											"end": 1130,
											"name": "SWAP1",
											"source": 31
										},
										{
											"begin": 992,
											"end": 1130,
											"name": "POP",
											"source": 31
										},
										{
											"begin": 992,
											"end": 1130,
											"name": "JUMP",
											"source": 31,
											"value": "[out]"
										},
										{
											"begin": 2319,
											"end": 2446,
											"name": "tag",
											"source": 31,
											"value": "196"
										},
										{
											"begin": 2319,
											"end": 2446,
											"name": "JUMPDEST",
											"source": 31
										},
										{
											"begin": 2383,
											"end": 2395,
											"name": "PUSH",
											"source": 31,
											"value": "60"
										},
										{
											"begin": 2414,
											"end": 2439,
											"name": "PUSH [tag]",
											"source": 31,
											"value": "318"
										},
										{
											"begin": 2414,
											"end": 2418,
											"name": "DUP3",
											"source": 31
										},
										{
											"begin": 2425,
											"end": 2426,
											"name": "PUSH",
											"source": 31,
											"value": "0"
										},
										{
											"begin": 618,
											"end": 641,
											"name": "PUSH",
											"source": 31,
											"value": "2B"
										},
										{
											"begin": 2414,
											"end": 2424,
											"name": "PUSH [tag]",
											"source": 31,
											"value": "322"
										},
										{
											"begin": 2414,
											"end": 2439,
											"name": "JUMP",
											"source": 31,
											"value": "[in]"
										},
										{
											"begin": 2635,
											"end": 2784,
											"name": "tag",
											"source": 31,
											"value": "199"
										},
										{
											"begin": 2635,
											"end": 2784,
											"name": "JUMPDEST",
											"source": 31
										},
										{
											"begin": 2751,
											"end": 2762,
											"name": "DUP1",
											"source": 31
										},
										{
											"begin": 2751,
											"end": 2762,
											"name": "MLOAD",
											"source": 31
										},
										{
											"begin": 2696,
											"end": 2708,
											"name": "PUSH",
											"source": 31,
											"value": "60"
										},
										{
											"begin": 2696,
											"end": 2708,
											"name": "SWAP1",
											"source": 31
										},
										{
											"begin": 2727,
											"end": 2777,
											"name": "PUSH [tag]",
											"source": 31,
											"value": "318"
										},
										{
											"begin": 2727,
											"end": 2777,
											"name": "SWAP1",
											"source": 31
										},
										{
											"begin": 2751,
											"end": 2755,
											"name": "DUP4",
											"source": 31
										},
										{
											"begin": 2751,
											"end": 2755,
											"name": "SWAP1",
											"source": 31
										},
										{
											"begin": 507,
											"end": 527,
											"name": "PUSH",
											"source": 31,
											"value": "17"
										},
										{
											"begin": 507,
											"end": 527,
											"name": "SWAP1",
											"source": 31
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "16"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 2751,
											"end": 2776,
											"name": "ADD",
											"source": 31
										},
										{
											"begin": 2727,
											"end": 2737,
											"name": "PUSH [tag]",
											"source": 31,
											"value": "322"
										},
										{
											"begin": 2727,
											"end": 2777,
											"name": "JUMP",
											"source": 31,
											"value": "[in]"
										},
										{
											"begin": 6215,
											"end": 7549,
											"name": "tag",
											"source": 13,
											"value": "221"
										},
										{
											"begin": 6215,
											"end": 7549,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 6394,
											"end": 6410,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 6489,
											"end": 6512,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 6489,
											"end": 6512,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 6485,
											"end": 6539,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "326"
										},
										{
											"begin": 6485,
											"end": 6539,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 6534,
											"end": 6538,
											"name": "ADDRESS",
											"source": 13
										},
										{
											"begin": 6514,
											"end": 6539,
											"name": "SWAP4",
											"source": 13
										},
										{
											"begin": 6514,
											"end": 6539,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 6485,
											"end": 6539,
											"name": "tag",
											"source": 13,
											"value": "326"
										},
										{
											"begin": 6485,
											"end": 6539,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 6551,
											"end": 6567,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 6569,
											"end": 6584,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 6586,
											"end": 6596,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 6600,
											"end": 6627,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "327"
										},
										{
											"begin": 6600,
											"end": 6604,
											"name": "DUP6",
											"source": 13
										},
										{
											"begin": 6600,
											"end": 6609,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 6600,
											"end": 6609,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 6600,
											"end": 6609,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 6600,
											"end": 6625,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "267"
										},
										{
											"begin": 6600,
											"end": 6627,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 6600,
											"end": 6627,
											"name": "tag",
											"source": 13,
											"value": "327"
										},
										{
											"begin": 6600,
											"end": 6627,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 6550,
											"end": 6627,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 6550,
											"end": 6627,
											"name": "SWAP5",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6550,
											"end": 6627,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6550,
											"end": 6627,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 6656,
											"end": 6674,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 6656,
											"end": 6674,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 6656,
											"end": 6674,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 6656,
											"end": 6674,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 6656,
											"end": 6674,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 6656,
											"end": 6674,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 6656,
											"end": 6674,
											"name": "LT",
											"source": 13
										},
										{
											"begin": 6638,
											"end": 6653,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 6638,
											"end": 6653,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 6742,
											"end": 6773,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "328"
										},
										{
											"begin": 6550,
											"end": 6627,
											"name": "DUP6",
											"source": 13
										},
										{
											"begin": 6550,
											"end": 6627,
											"name": "DUP8",
											"source": 13
										},
										{
											"begin": 6550,
											"end": 6627,
											"name": "DUP7",
											"source": 13
										},
										{
											"begin": 6742,
											"end": 6749,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "297"
										},
										{
											"begin": 6742,
											"end": 6773,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 6742,
											"end": 6773,
											"name": "tag",
											"source": 13,
											"value": "328"
										},
										{
											"begin": 6742,
											"end": 6773,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 6742,
											"end": 6778,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 6742,
											"end": 6778,
											"name": "PUSH",
											"source": 13,
											"value": "128ACB08"
										},
										{
											"begin": 6796,
											"end": 6805,
											"name": "DUP12",
											"source": 13
										},
										{
											"begin": 6823,
											"end": 6833,
											"name": "DUP6",
											"source": 13
										},
										{
											"begin": 6852,
											"end": 6872,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "329"
										},
										{
											"begin": 6852,
											"end": 6861,
											"name": "DUP16",
											"source": 13
										},
										{
											"begin": 6852,
											"end": 6870,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "299"
										},
										{
											"begin": 6852,
											"end": 6872,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 6852,
											"end": 6872,
											"name": "tag",
											"source": 13,
											"value": "329"
										},
										{
											"begin": 6852,
											"end": 6872,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 6851,
											"end": 6872,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 6851,
											"end": 6872,
											"name": "SUB",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 6890,
											"end": 6912,
											"name": "DUP15",
											"source": 13
										},
										{
											"begin": 6890,
											"end": 6912,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 6890,
											"end": 6912,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 6890,
											"end": 7047,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "330"
										},
										{
											"begin": 6890,
											"end": 7047,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 7030,
											"end": 7047,
											"name": "DUP14",
											"source": 13
										},
										{
											"begin": 6890,
											"end": 7047,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "333"
										},
										{
											"begin": 6890,
											"end": 7047,
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 6890,
											"end": 7047,
											"name": "tag",
											"source": 13,
											"value": "330"
										},
										{
											"begin": 6890,
											"end": 7047,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 6936,
											"end": 6946,
											"name": "DUP8",
											"source": 13
										},
										{
											"begin": 6936,
											"end": 7006,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "332"
										},
										{
											"begin": 6936,
											"end": 7006,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 6979,
											"end": 7006,
											"name": "PUSH",
											"source": 13,
											"value": "FFFD8963EFD1FC6A506488495D951D5263988D25"
										},
										{
											"begin": 6936,
											"end": 7006,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "333"
										},
										{
											"begin": 6936,
											"end": 7006,
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 6936,
											"end": 7006,
											"name": "tag",
											"source": 13,
											"value": "332"
										},
										{
											"begin": 6936,
											"end": 7006,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 6949,
											"end": 6976,
											"name": "PUSH",
											"source": 13,
											"value": "1000276A4"
										},
										{
											"begin": 6936,
											"end": 7006,
											"name": "tag",
											"source": 13,
											"value": "333"
										},
										{
											"begin": 6936,
											"end": 7006,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 7076,
											"end": 7080,
											"name": "DUP14",
											"source": 13
										},
										{
											"begin": 7065,
											"end": 7081,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 7065,
											"end": 7081,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 7065,
											"end": 7081,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 7065,
											"end": 7081,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 7065,
											"end": 7081,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "334"
										},
										{
											"begin": 7065,
											"end": 7081,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 7065,
											"end": 7081,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 7065,
											"end": 7081,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "305"
										},
										{
											"begin": 7065,
											"end": 7081,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 7065,
											"end": 7081,
											"name": "tag",
											"source": 13,
											"value": "334"
										},
										{
											"begin": 7065,
											"end": 7081,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 7065,
											"end": 7081,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 7065,
											"end": 7081,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 7065,
											"end": 7081,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 7065,
											"end": 7081,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 7065,
											"end": 7081,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 7065,
											"end": 7081,
											"name": "SUB",
											"source": 13
										},
										{
											"begin": 7065,
											"end": 7081,
											"name": "SUB",
											"source": 13
										},
										{
											"begin": 7065,
											"end": 7081,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 7065,
											"end": 7081,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 7065,
											"end": 7081,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 7065,
											"end": 7081,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 7065,
											"end": 7081,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 6742,
											"end": 7095,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 6742,
											"end": 7095,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 6742,
											"end": 7095,
											"name": "DUP7",
											"source": 13
										},
										{
											"begin": 6742,
											"end": 7095,
											"name": "PUSH",
											"source": 13,
											"value": "FFFFFFFF"
										},
										{
											"begin": 6742,
											"end": 7095,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 6742,
											"end": 7095,
											"name": "PUSH",
											"source": 13,
											"value": "E0"
										},
										{
											"begin": 6742,
											"end": 7095,
											"name": "SHL",
											"source": 13
										},
										{
											"begin": 6742,
											"end": 7095,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 6742,
											"end": 7095,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 6742,
											"end": 7095,
											"name": "PUSH",
											"source": 13,
											"value": "4"
										},
										{
											"begin": 6742,
											"end": 7095,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 6742,
											"end": 7095,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "335"
										},
										{
											"begin": 6742,
											"end": 7095,
											"name": "SWAP6",
											"source": 13
										},
										{
											"begin": 6742,
											"end": 7095,
											"name": "SWAP5",
											"source": 13
										},
										{
											"begin": 6742,
											"end": 7095,
											"name": "SWAP4",
											"source": 13
										},
										{
											"begin": 6742,
											"end": 7095,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 6742,
											"end": 7095,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 6742,
											"end": 7095,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 6742,
											"end": 7095,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "307"
										},
										{
											"begin": 6742,
											"end": 7095,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 6742,
											"end": 7095,
											"name": "tag",
											"source": 13,
											"value": "335"
										},
										{
											"begin": 6742,
											"end": 7095,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 6742,
											"end": 7095,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 6742,
											"end": 7095,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 6742,
											"end": 7095,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 6742,
											"end": 7095,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 6742,
											"end": 7095,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 6742,
											"end": 7095,
											"name": "SUB",
											"source": 13
										},
										{
											"begin": 6742,
											"end": 7095,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 6742,
											"end": 7095,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 6742,
											"end": 7095,
											"name": "DUP8",
											"source": 13
										},
										{
											"begin": 6742,
											"end": 7095,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 6742,
											"end": 7095,
											"name": "EXTCODESIZE",
											"source": 13
										},
										{
											"begin": 6742,
											"end": 7095,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 6742,
											"end": 7095,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 6742,
											"end": 7095,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 6742,
											"end": 7095,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "336"
										},
										{
											"begin": 6742,
											"end": 7095,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 6742,
											"end": 7095,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 6742,
											"end": 7095,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 6742,
											"end": 7095,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 6742,
											"end": 7095,
											"name": "tag",
											"source": 13,
											"value": "336"
										},
										{
											"begin": 6742,
											"end": 7095,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 6742,
											"end": 7095,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 6742,
											"end": 7095,
											"name": "GAS",
											"source": 13
										},
										{
											"begin": 6742,
											"end": 7095,
											"name": "CALL",
											"source": 13
										},
										{
											"begin": 6742,
											"end": 7095,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 6742,
											"end": 7095,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 6742,
											"end": 7095,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 6742,
											"end": 7095,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "338"
										},
										{
											"begin": 6742,
											"end": 7095,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 6742,
											"end": 7095,
											"name": "RETURNDATASIZE",
											"source": 13
										},
										{
											"begin": 6742,
											"end": 7095,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 6742,
											"end": 7095,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 6742,
											"end": 7095,
											"name": "RETURNDATACOPY",
											"source": 13
										},
										{
											"begin": 6742,
											"end": 7095,
											"name": "RETURNDATASIZE",
											"source": 13
										},
										{
											"begin": 6742,
											"end": 7095,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 6742,
											"end": 7095,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 6742,
											"end": 7095,
											"name": "tag",
											"source": 13,
											"value": "338"
										},
										{
											"begin": 6742,
											"end": 7095,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 6742,
											"end": 7095,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 6742,
											"end": 7095,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 6742,
											"end": 7095,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 6742,
											"end": 7095,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 6742,
											"end": 7095,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 6742,
											"end": 7095,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 6742,
											"end": 7095,
											"name": "RETURNDATASIZE",
											"source": 13
										},
										{
											"begin": 6742,
											"end": 7095,
											"name": "PUSH",
											"source": 13,
											"value": "1F"
										},
										{
											"begin": 6742,
											"end": 7095,
											"name": "NOT",
											"source": 13
										},
										{
											"begin": 6742,
											"end": 7095,
											"name": "PUSH",
											"source": 13,
											"value": "1F"
										},
										{
											"begin": 6742,
											"end": 7095,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 6742,
											"end": 7095,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 6742,
											"end": 7095,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 6742,
											"end": 7095,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 6742,
											"end": 7095,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 6742,
											"end": 7095,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 6742,
											"end": 7095,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 6742,
											"end": 7095,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 6742,
											"end": 7095,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 6742,
											"end": 7095,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 6742,
											"end": 7095,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 6742,
											"end": 7095,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 6742,
											"end": 7095,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "339"
										},
										{
											"begin": 6742,
											"end": 7095,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 6742,
											"end": 7095,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 6742,
											"end": 7095,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "312"
										},
										{
											"begin": 6742,
											"end": 7095,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 6742,
											"end": 7095,
											"name": "tag",
											"source": 13,
											"value": "339"
										},
										{
											"begin": 6742,
											"end": 7095,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 6685,
											"end": 7095,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 6685,
											"end": 7095,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 6685,
											"end": 7095,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 6685,
											"end": 7095,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 7106,
											"end": 7131,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 7173,
											"end": 7183,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 7173,
											"end": 7307,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "340"
										},
										{
											"begin": 7173,
											"end": 7307,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 7269,
											"end": 7281,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 7293,
											"end": 7305,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 7292,
											"end": 7305,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 7292,
											"end": 7305,
											"name": "SUB",
											"source": 13
										},
										{
											"begin": 7173,
											"end": 7307,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "341"
										},
										{
											"begin": 7173,
											"end": 7307,
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 7173,
											"end": 7307,
											"name": "tag",
											"source": 13,
											"value": "340"
										},
										{
											"begin": 7173,
											"end": 7307,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 7207,
											"end": 7219,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 7231,
											"end": 7243,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 7230,
											"end": 7243,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 7230,
											"end": 7243,
											"name": "SUB",
											"source": 13
										},
										{
											"begin": 7173,
											"end": 7307,
											"name": "tag",
											"source": 13,
											"value": "341"
										},
										{
											"begin": 7173,
											"end": 7307,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 7141,
											"end": 7307,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 7141,
											"end": 7307,
											"name": "SWAP9",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 7141,
											"end": 7307,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7479,
											"end": 7501,
											"name": "DUP11",
											"source": 13
										},
										{
											"begin": 7479,
											"end": 7501,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 7475,
											"end": 7542,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "343"
										},
										{
											"begin": 7475,
											"end": 7542,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 7532,
											"end": 7541,
											"name": "DUP12",
											"source": 13
										},
										{
											"begin": 7511,
											"end": 7528,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 7511,
											"end": 7541,
											"name": "EQ",
											"source": 13
										},
										{
											"begin": 7503,
											"end": 7542,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "343"
										},
										{
											"begin": 7503,
											"end": 7542,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 7503,
											"end": 7542,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 7503,
											"end": 7542,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 7503,
											"end": 7542,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 7503,
											"end": 7542,
											"name": "tag",
											"source": 13,
											"value": "343"
										},
										{
											"begin": 7503,
											"end": 7542,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 6215,
											"end": 7549,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 6215,
											"end": 7549,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 6215,
											"end": 7549,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 6215,
											"end": 7549,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 6215,
											"end": 7549,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 6215,
											"end": 7549,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 6215,
											"end": 7549,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 6215,
											"end": 7549,
											"name": "SWAP5",
											"source": 13
										},
										{
											"begin": 6215,
											"end": 7549,
											"name": "SWAP4",
											"source": 13
										},
										{
											"begin": 6215,
											"end": 7549,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 6215,
											"end": 7549,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 6215,
											"end": 7549,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 6215,
											"end": 7549,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 6215,
											"end": 7549,
											"name": "JUMP",
											"source": 13,
											"value": "[out]"
										},
										{
											"begin": 1211,
											"end": 1520,
											"name": "tag",
											"source": 33,
											"value": "233"
										},
										{
											"begin": 1211,
											"end": 1520,
											"name": "JUMPDEST",
											"source": 33
										},
										{
											"begin": 1371,
											"end": 1430,
											"name": "PUSH",
											"source": 33,
											"value": "40"
										},
										{
											"begin": 1371,
											"end": 1430,
											"name": "DUP1",
											"source": 33
										},
										{
											"begin": 1371,
											"end": 1430,
											"name": "MLOAD",
											"source": 33
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1371,
											"end": 1430,
											"name": "DUP5",
											"source": 33
										},
										{
											"begin": 1371,
											"end": 1430,
											"name": "DUP2",
											"source": 33
										},
										{
											"begin": 1371,
											"end": 1430,
											"name": "AND",
											"source": 33
										},
										{
											"begin": 1371,
											"end": 1430,
											"name": "PUSH",
											"source": 33,
											"value": "24"
										},
										{
											"begin": 1371,
											"end": 1430,
											"name": "DUP4",
											"source": 33
										},
										{
											"begin": 1371,
											"end": 1430,
											"name": "ADD",
											"source": 33
										},
										{
											"begin": 1371,
											"end": 1430,
											"name": "MSTORE",
											"source": 33
										},
										{
											"begin": 1371,
											"end": 1430,
											"name": "PUSH",
											"source": 33,
											"value": "44"
										},
										{
											"begin": 1371,
											"end": 1430,
											"name": "DUP1",
											"source": 33
										},
										{
											"begin": 1371,
											"end": 1430,
											"name": "DUP4",
											"source": 33
										},
										{
											"begin": 1371,
											"end": 1430,
											"name": "ADD",
											"source": 33
										},
										{
											"begin": 1371,
											"end": 1430,
											"name": "DUP6",
											"source": 33
										},
										{
											"begin": 1371,
											"end": 1430,
											"name": "SWAP1",
											"source": 33
										},
										{
											"begin": 1371,
											"end": 1430,
											"name": "MSTORE",
											"source": 33
										},
										{
											"begin": 1371,
											"end": 1430,
											"name": "DUP4",
											"source": 33
										},
										{
											"begin": 1371,
											"end": 1430,
											"name": "MLOAD",
											"source": 33
										},
										{
											"begin": 1371,
											"end": 1430,
											"name": "DUP1",
											"source": 33
										},
										{
											"begin": 1371,
											"end": 1430,
											"name": "DUP5",
											"source": 33
										},
										{
											"begin": 1371,
											"end": 1430,
											"name": "SUB",
											"source": 33
										},
										{
											"begin": 1371,
											"end": 1430,
											"name": "SWAP1",
											"source": 33
										},
										{
											"begin": 1371,
											"end": 1430,
											"name": "SWAP2",
											"source": 33
										},
										{
											"begin": 1371,
											"end": 1430,
											"name": "ADD",
											"source": 33
										},
										{
											"begin": 1371,
											"end": 1430,
											"name": "DUP2",
											"source": 33
										},
										{
											"begin": 1371,
											"end": 1430,
											"name": "MSTORE",
											"source": 33
										},
										{
											"begin": 1371,
											"end": 1430,
											"name": "PUSH",
											"source": 33,
											"value": "64"
										},
										{
											"begin": 1371,
											"end": 1430,
											"name": "SWAP1",
											"source": 33
										},
										{
											"begin": 1371,
											"end": 1430,
											"name": "SWAP3",
											"source": 33
										},
										{
											"begin": 1371,
											"end": 1430,
											"name": "ADD",
											"source": 33
										},
										{
											"begin": 1371,
											"end": 1430,
											"name": "DUP4",
											"source": 33
										},
										{
											"begin": 1371,
											"end": 1430,
											"name": "MSTORE",
											"source": 33
										},
										{
											"begin": 1371,
											"end": 1430,
											"name": "PUSH",
											"source": 33,
											"value": "20"
										},
										{
											"begin": 1371,
											"end": 1430,
											"name": "DUP3",
											"source": 33
										},
										{
											"begin": 1371,
											"end": 1430,
											"name": "ADD",
											"source": 33
										},
										{
											"begin": 1371,
											"end": 1430,
											"name": "DUP1",
											"source": 33
										},
										{
											"begin": 1371,
											"end": 1430,
											"name": "MLOAD",
											"source": 33
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1371,
											"end": 1430,
											"name": "AND",
											"source": 33
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A9059CBB"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1371,
											"end": 1430,
											"name": "OR",
											"source": 33
										},
										{
											"begin": 1371,
											"end": 1430,
											"name": "DUP2",
											"source": 33
										},
										{
											"begin": 1371,
											"end": 1430,
											"name": "MSTORE",
											"source": 33
										},
										{
											"begin": 1360,
											"end": 1431,
											"name": "SWAP3",
											"source": 33
										},
										{
											"begin": 1360,
											"end": 1431,
											"name": "MLOAD",
											"source": 33
										},
										{
											"begin": 1360,
											"end": 1431,
											"name": "DUP3",
											"source": 33
										},
										{
											"begin": 1360,
											"end": 1431,
											"name": "MLOAD",
											"source": 33
										},
										{
											"begin": 1325,
											"end": 1337,
											"name": "PUSH",
											"source": 33,
											"value": "0"
										},
										{
											"begin": 1325,
											"end": 1337,
											"name": "SWAP5",
											"source": 33
										},
										{
											"begin": 1325,
											"end": 1337,
											"name": "DUP6",
											"source": 33
										},
										{
											"begin": 1325,
											"end": 1337,
											"name": "SWAP5",
											"source": 33
										},
										{
											"begin": 1360,
											"end": 1370,
											"name": "SWAP4",
											"source": 33
										},
										{
											"begin": 1360,
											"end": 1370,
											"name": "DUP10",
											"source": 33
										},
										{
											"begin": 1360,
											"end": 1370,
											"name": "AND",
											"source": 33
										},
										{
											"begin": 1360,
											"end": 1370,
											"name": "SWAP4",
											"source": 33
										},
										{
											"begin": 1371,
											"end": 1430,
											"name": "SWAP3",
											"source": 33
										},
										{
											"begin": 1360,
											"end": 1431,
											"name": "SWAP2",
											"source": 33
										},
										{
											"begin": 1360,
											"end": 1431,
											"name": "DUP3",
											"source": 33
										},
										{
											"begin": 1360,
											"end": 1431,
											"name": "SWAP2",
											"source": 33
										},
										{
											"begin": 1371,
											"end": 1430,
											"name": "SWAP1",
											"source": 33
										},
										{
											"begin": 1360,
											"end": 1431,
											"name": "DUP1",
											"source": 33
										},
										{
											"begin": 1360,
											"end": 1431,
											"name": "DUP4",
											"source": 33
										},
										{
											"begin": 1371,
											"end": 1430,
											"name": "DUP4",
											"source": 33
										},
										{
											"begin": 1360,
											"end": 1431,
											"name": "tag",
											"source": 33,
											"value": "345"
										},
										{
											"begin": 1360,
											"end": 1431,
											"name": "JUMPDEST",
											"source": 33
										},
										{
											"begin": 1360,
											"end": 1431,
											"name": "PUSH",
											"source": 33,
											"value": "20"
										},
										{
											"begin": 1360,
											"end": 1431,
											"name": "DUP4",
											"source": 33
										},
										{
											"begin": 1360,
											"end": 1431,
											"name": "LT",
											"source": 33
										},
										{
											"begin": 1360,
											"end": 1431,
											"name": "PUSH [tag]",
											"source": 33,
											"value": "347"
										},
										{
											"begin": 1360,
											"end": 1431,
											"name": "JUMPI",
											"source": 33
										},
										{
											"begin": 1360,
											"end": 1431,
											"name": "DUP1",
											"source": 33
										},
										{
											"begin": 1360,
											"end": 1431,
											"name": "MLOAD",
											"source": 33
										},
										{
											"begin": 1360,
											"end": 1431,
											"name": "DUP3",
											"source": 33
										},
										{
											"begin": 1360,
											"end": 1431,
											"name": "MSTORE",
											"source": 33
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 1360,
											"end": 1431,
											"name": "SWAP1",
											"source": 33
										},
										{
											"begin": 1360,
											"end": 1431,
											"name": "SWAP3",
											"source": 33
										},
										{
											"begin": 1360,
											"end": 1431,
											"name": "ADD",
											"source": 33
										},
										{
											"begin": 1360,
											"end": 1431,
											"name": "SWAP2",
											"source": 33
										},
										{
											"begin": 1360,
											"end": 1431,
											"name": "PUSH",
											"source": 33,
											"value": "20"
										},
										{
											"begin": 1360,
											"end": 1431,
											"name": "SWAP2",
											"source": 33
										},
										{
											"begin": 1360,
											"end": 1431,
											"name": "DUP3",
											"source": 33
										},
										{
											"begin": 1360,
											"end": 1431,
											"name": "ADD",
											"source": 33
										},
										{
											"begin": 1360,
											"end": 1431,
											"name": "SWAP2",
											"source": 33
										},
										{
											"begin": 1360,
											"end": 1431,
											"name": "ADD",
											"source": 33
										},
										{
											"begin": 1360,
											"end": 1431,
											"name": "PUSH [tag]",
											"source": 33,
											"value": "345"
										},
										{
											"begin": 1360,
											"end": 1431,
											"name": "JUMP",
											"source": 33
										},
										{
											"begin": 1360,
											"end": 1431,
											"name": "tag",
											"source": 33,
											"value": "347"
										},
										{
											"begin": 1360,
											"end": 1431,
											"name": "JUMPDEST",
											"source": 33
										},
										{
											"begin": 1360,
											"end": 1431,
											"name": "PUSH",
											"source": 33,
											"value": "1"
										},
										{
											"begin": 1360,
											"end": 1431,
											"name": "DUP4",
											"source": 33
										},
										{
											"begin": 1360,
											"end": 1431,
											"name": "PUSH",
											"source": 33,
											"value": "20"
										},
										{
											"begin": 1360,
											"end": 1431,
											"name": "SUB",
											"source": 33
										},
										{
											"begin": 1360,
											"end": 1431,
											"name": "PUSH",
											"source": 33,
											"value": "100"
										},
										{
											"begin": 1360,
											"end": 1431,
											"name": "EXP",
											"source": 33
										},
										{
											"begin": 1360,
											"end": 1431,
											"name": "SUB",
											"source": 33
										},
										{
											"begin": 1360,
											"end": 1431,
											"name": "DUP1",
											"source": 33
										},
										{
											"begin": 1360,
											"end": 1431,
											"name": "NOT",
											"source": 33
										},
										{
											"begin": 1360,
											"end": 1431,
											"name": "DUP3",
											"source": 33
										},
										{
											"begin": 1360,
											"end": 1431,
											"name": "MLOAD",
											"source": 33
										},
										{
											"begin": 1360,
											"end": 1431,
											"name": "AND",
											"source": 33
										},
										{
											"begin": 1360,
											"end": 1431,
											"name": "DUP2",
											"source": 33
										},
										{
											"begin": 1360,
											"end": 1431,
											"name": "DUP5",
											"source": 33
										},
										{
											"begin": 1360,
											"end": 1431,
											"name": "MLOAD",
											"source": 33
										},
										{
											"begin": 1360,
											"end": 1431,
											"name": "AND",
											"source": 33
										},
										{
											"begin": 1360,
											"end": 1431,
											"name": "DUP1",
											"source": 33
										},
										{
											"begin": 1360,
											"end": 1431,
											"name": "DUP3",
											"source": 33
										},
										{
											"begin": 1360,
											"end": 1431,
											"name": "OR",
											"source": 33
										},
										{
											"begin": 1360,
											"end": 1431,
											"name": "DUP6",
											"source": 33
										},
										{
											"begin": 1360,
											"end": 1431,
											"name": "MSTORE",
											"source": 33
										},
										{
											"begin": 1360,
											"end": 1431,
											"name": "POP",
											"source": 33
										},
										{
											"begin": 1360,
											"end": 1431,
											"name": "POP",
											"source": 33
										},
										{
											"begin": 1360,
											"end": 1431,
											"name": "POP",
											"source": 33
										},
										{
											"begin": 1360,
											"end": 1431,
											"name": "POP",
											"source": 33
										},
										{
											"begin": 1360,
											"end": 1431,
											"name": "POP",
											"source": 33
										},
										{
											"begin": 1360,
											"end": 1431,
											"name": "POP",
											"source": 33
										},
										{
											"begin": 1360,
											"end": 1431,
											"name": "SWAP1",
											"source": 33
										},
										{
											"begin": 1360,
											"end": 1431,
											"name": "POP",
											"source": 33
										},
										{
											"begin": 1360,
											"end": 1431,
											"name": "ADD",
											"source": 33
										},
										{
											"begin": 1360,
											"end": 1431,
											"name": "SWAP2",
											"source": 33
										},
										{
											"begin": 1360,
											"end": 1431,
											"name": "POP",
											"source": 33
										},
										{
											"begin": 1360,
											"end": 1431,
											"name": "POP",
											"source": 33
										},
										{
											"begin": 1360,
											"end": 1431,
											"name": "PUSH",
											"source": 33,
											"value": "0"
										},
										{
											"begin": 1360,
											"end": 1431,
											"name": "PUSH",
											"source": 33,
											"value": "40"
										},
										{
											"begin": 1360,
											"end": 1431,
											"name": "MLOAD",
											"source": 33
										},
										{
											"begin": 1360,
											"end": 1431,
											"name": "DUP1",
											"source": 33
										},
										{
											"begin": 1360,
											"end": 1431,
											"name": "DUP4",
											"source": 33
										},
										{
											"begin": 1360,
											"end": 1431,
											"name": "SUB",
											"source": 33
										},
										{
											"begin": 1360,
											"end": 1431,
											"name": "DUP2",
											"source": 33
										},
										{
											"begin": 1360,
											"end": 1431,
											"name": "PUSH",
											"source": 33,
											"value": "0"
										},
										{
											"begin": 1360,
											"end": 1431,
											"name": "DUP7",
											"source": 33
										},
										{
											"begin": 1360,
											"end": 1431,
											"name": "GAS",
											"source": 33
										},
										{
											"begin": 1360,
											"end": 1431,
											"name": "CALL",
											"source": 33
										},
										{
											"begin": 1360,
											"end": 1431,
											"name": "SWAP2",
											"source": 33
										},
										{
											"begin": 1360,
											"end": 1431,
											"name": "POP",
											"source": 33
										},
										{
											"begin": 1360,
											"end": 1431,
											"name": "POP",
											"source": 33
										},
										{
											"begin": 1360,
											"end": 1431,
											"name": "RETURNDATASIZE",
											"source": 33
										},
										{
											"begin": 1360,
											"end": 1431,
											"name": "DUP1",
											"source": 33
										},
										{
											"begin": 1360,
											"end": 1431,
											"name": "PUSH",
											"source": 33,
											"value": "0"
										},
										{
											"begin": 1360,
											"end": 1431,
											"name": "DUP2",
											"source": 33
										},
										{
											"begin": 1360,
											"end": 1431,
											"name": "EQ",
											"source": 33
										},
										{
											"begin": 1360,
											"end": 1431,
											"name": "PUSH [tag]",
											"source": 33,
											"value": "350"
										},
										{
											"begin": 1360,
											"end": 1431,
											"name": "JUMPI",
											"source": 33
										},
										{
											"begin": 1360,
											"end": 1431,
											"name": "PUSH",
											"source": 33,
											"value": "40"
										},
										{
											"begin": 1360,
											"end": 1431,
											"name": "MLOAD",
											"source": 33
										},
										{
											"begin": 1360,
											"end": 1431,
											"name": "SWAP2",
											"source": 33
										},
										{
											"begin": 1360,
											"end": 1431,
											"name": "POP",
											"source": 33
										},
										{
											"begin": 1360,
											"end": 1431,
											"name": "PUSH",
											"source": 33,
											"value": "1F"
										},
										{
											"begin": 1360,
											"end": 1431,
											"name": "NOT",
											"source": 33
										},
										{
											"begin": 1360,
											"end": 1431,
											"name": "PUSH",
											"source": 33,
											"value": "3F"
										},
										{
											"begin": 1360,
											"end": 1431,
											"name": "RETURNDATASIZE",
											"source": 33
										},
										{
											"begin": 1360,
											"end": 1431,
											"name": "ADD",
											"source": 33
										},
										{
											"begin": 1360,
											"end": 1431,
											"name": "AND",
											"source": 33
										},
										{
											"begin": 1360,
											"end": 1431,
											"name": "DUP3",
											"source": 33
										},
										{
											"begin": 1360,
											"end": 1431,
											"name": "ADD",
											"source": 33
										},
										{
											"begin": 1360,
											"end": 1431,
											"name": "PUSH",
											"source": 33,
											"value": "40"
										},
										{
											"begin": 1360,
											"end": 1431,
											"name": "MSTORE",
											"source": 33
										},
										{
											"begin": 1360,
											"end": 1431,
											"name": "RETURNDATASIZE",
											"source": 33
										},
										{
											"begin": 1360,
											"end": 1431,
											"name": "DUP3",
											"source": 33
										},
										{
											"begin": 1360,
											"end": 1431,
											"name": "MSTORE",
											"source": 33
										},
										{
											"begin": 1360,
											"end": 1431,
											"name": "RETURNDATASIZE",
											"source": 33
										},
										{
											"begin": 1360,
											"end": 1431,
											"name": "PUSH",
											"source": 33,
											"value": "0"
										},
										{
											"begin": 1360,
											"end": 1431,
											"name": "PUSH",
											"source": 33,
											"value": "20"
										},
										{
											"begin": 1360,
											"end": 1431,
											"name": "DUP5",
											"source": 33
										},
										{
											"begin": 1360,
											"end": 1431,
											"name": "ADD",
											"source": 33
										},
										{
											"begin": 1360,
											"end": 1431,
											"name": "RETURNDATACOPY",
											"source": 33
										},
										{
											"begin": 1360,
											"end": 1431,
											"name": "PUSH [tag]",
											"source": 33,
											"value": "349"
										},
										{
											"begin": 1360,
											"end": 1431,
											"name": "JUMP",
											"source": 33
										},
										{
											"begin": 1360,
											"end": 1431,
											"name": "tag",
											"source": 33,
											"value": "350"
										},
										{
											"begin": 1360,
											"end": 1431,
											"name": "JUMPDEST",
											"source": 33
										},
										{
											"begin": 1360,
											"end": 1431,
											"name": "PUSH",
											"source": 33,
											"value": "60"
										},
										{
											"begin": 1360,
											"end": 1431,
											"name": "SWAP2",
											"source": 33
										},
										{
											"begin": 1360,
											"end": 1431,
											"name": "POP",
											"source": 33
										},
										{
											"begin": 1360,
											"end": 1431,
											"name": "tag",
											"source": 33,
											"value": "349"
										},
										{
											"begin": 1360,
											"end": 1431,
											"name": "JUMPDEST",
											"source": 33
										},
										{
											"begin": 1360,
											"end": 1431,
											"name": "POP",
											"source": 33
										},
										{
											"begin": 1324,
											"end": 1431,
											"name": "SWAP2",
											"source": 33
										},
										{
											"begin": 1324,
											"end": 1431,
											"name": "POP",
											"source": 33
										},
										{
											"begin": 1324,
											"end": 1431,
											"name": "SWAP2",
											"source": 33
										},
										{
											"begin": 1324,
											"end": 1431,
											"name": "POP",
											"source": 33
										},
										{
											"begin": 1449,
											"end": 1456,
											"name": "DUP2",
											"source": 33
										},
										{
											"begin": 1449,
											"end": 1506,
											"name": "DUP1",
											"source": 33
										},
										{
											"begin": 1449,
											"end": 1506,
											"name": "ISZERO",
											"source": 33
										},
										{
											"begin": 1449,
											"end": 1506,
											"name": "PUSH [tag]",
											"source": 33,
											"value": "352"
										},
										{
											"begin": 1449,
											"end": 1506,
											"name": "JUMPI",
											"source": 33
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1461,
											"end": 1472,
											"name": "DUP1",
											"source": 33
										},
										{
											"begin": 1461,
											"end": 1472,
											"name": "MLOAD",
											"source": 33
										},
										{
											"begin": 1461,
											"end": 1477,
											"name": "ISZERO",
											"source": 33
										},
										{
											"begin": 1461,
											"end": 1477,
											"name": "DUP1",
											"source": 33
										},
										{
											"begin": 1461,
											"end": 1505,
											"name": "PUSH [tag]",
											"source": 33,
											"value": "352"
										},
										{
											"begin": 1461,
											"end": 1505,
											"name": "JUMPI",
											"source": 33
										},
										{
											"begin": 1461,
											"end": 1505,
											"name": "POP",
											"source": 33
										},
										{
											"begin": 1492,
											"end": 1496,
											"name": "DUP1",
											"source": 33
										},
										{
											"begin": 1481,
											"end": 1505,
											"name": "DUP1",
											"source": 33
										},
										{
											"begin": 1481,
											"end": 1505,
											"name": "PUSH",
											"source": 33,
											"value": "20"
										},
										{
											"begin": 1481,
											"end": 1505,
											"name": "ADD",
											"source": 33
										},
										{
											"begin": 1481,
											"end": 1505,
											"name": "SWAP1",
											"source": 33
										},
										{
											"begin": 1481,
											"end": 1505,
											"name": "MLOAD",
											"source": 33
										},
										{
											"begin": 1481,
											"end": 1505,
											"name": "PUSH",
											"source": 33,
											"value": "20"
										},
										{
											"begin": 1481,
											"end": 1505,
											"name": "DUP2",
											"source": 33
										},
										{
											"begin": 1481,
											"end": 1505,
											"name": "LT",
											"source": 33
										},
										{
											"begin": 1481,
											"end": 1505,
											"name": "ISZERO",
											"source": 33
										},
										{
											"begin": 1481,
											"end": 1505,
											"name": "PUSH [tag]",
											"source": 33,
											"value": "353"
										},
										{
											"begin": 1481,
											"end": 1505,
											"name": "JUMPI",
											"source": 33
										},
										{
											"begin": 1481,
											"end": 1505,
											"name": "PUSH",
											"source": 33,
											"value": "0"
										},
										{
											"begin": 1481,
											"end": 1505,
											"name": "DUP1",
											"source": 33
										},
										{
											"begin": 1481,
											"end": 1505,
											"name": "REVERT",
											"source": 33
										},
										{
											"begin": 1481,
											"end": 1505,
											"name": "tag",
											"source": 33,
											"value": "353"
										},
										{
											"begin": 1481,
											"end": 1505,
											"name": "JUMPDEST",
											"source": 33
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1481,
											"end": 1505,
											"name": "MLOAD",
											"source": 33
										},
										{
											"begin": 1461,
											"end": 1505,
											"name": "tag",
											"source": 33,
											"value": "352"
										},
										{
											"begin": 1461,
											"end": 1505,
											"name": "JUMPDEST",
											"source": 33
										},
										{
											"begin": 1441,
											"end": 1513,
											"name": "PUSH [tag]",
											"source": 33,
											"value": "145"
										},
										{
											"begin": 1441,
											"end": 1513,
											"name": "JUMPI",
											"source": 33
										},
										{
											"begin": 1441,
											"end": 1513,
											"name": "PUSH",
											"source": 33,
											"value": "40"
										},
										{
											"begin": 1441,
											"end": 1513,
											"name": "DUP1",
											"source": 33
										},
										{
											"begin": 1441,
											"end": 1513,
											"name": "MLOAD",
											"source": 33
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1441,
											"end": 1513,
											"name": "DUP2",
											"source": 33
										},
										{
											"begin": 1441,
											"end": 1513,
											"name": "MSTORE",
											"source": 33
										},
										{
											"begin": 1441,
											"end": 1513,
											"name": "PUSH",
											"source": 33,
											"value": "20"
										},
										{
											"begin": 1441,
											"end": 1513,
											"name": "PUSH",
											"source": 33,
											"value": "4"
										},
										{
											"begin": 1441,
											"end": 1513,
											"name": "DUP3",
											"source": 33
										},
										{
											"begin": 1441,
											"end": 1513,
											"name": "ADD",
											"source": 33
										},
										{
											"begin": 1441,
											"end": 1513,
											"name": "MSTORE",
											"source": 33
										},
										{
											"begin": 1441,
											"end": 1513,
											"name": "PUSH",
											"source": 33,
											"value": "2"
										},
										{
											"begin": 1441,
											"end": 1513,
											"name": "PUSH",
											"source": 33,
											"value": "24"
										},
										{
											"begin": 1441,
											"end": 1513,
											"name": "DUP3",
											"source": 33
										},
										{
											"begin": 1441,
											"end": 1513,
											"name": "ADD",
											"source": 33
										},
										{
											"begin": 1441,
											"end": 1513,
											"name": "MSTORE",
											"source": 33
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "14D5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "F2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1441,
											"end": 1513,
											"name": "PUSH",
											"source": 33,
											"value": "44"
										},
										{
											"begin": 1441,
											"end": 1513,
											"name": "DUP3",
											"source": 33
										},
										{
											"begin": 1441,
											"end": 1513,
											"name": "ADD",
											"source": 33
										},
										{
											"begin": 1441,
											"end": 1513,
											"name": "MSTORE",
											"source": 33
										},
										{
											"begin": 1441,
											"end": 1513,
											"name": "SWAP1",
											"source": 33
										},
										{
											"begin": 1441,
											"end": 1513,
											"name": "MLOAD",
											"source": 33
										},
										{
											"begin": 1441,
											"end": 1513,
											"name": "SWAP1",
											"source": 33
										},
										{
											"begin": 1441,
											"end": 1513,
											"name": "DUP2",
											"source": 33
										},
										{
											"begin": 1441,
											"end": 1513,
											"name": "SWAP1",
											"source": 33
										},
										{
											"begin": 1441,
											"end": 1513,
											"name": "SUB",
											"source": 33
										},
										{
											"begin": 1441,
											"end": 1513,
											"name": "PUSH",
											"source": 33,
											"value": "64"
										},
										{
											"begin": 1441,
											"end": 1513,
											"name": "ADD",
											"source": 33
										},
										{
											"begin": 1441,
											"end": 1513,
											"name": "SWAP1",
											"source": 33
										},
										{
											"begin": 1441,
											"end": 1513,
											"name": "REVERT",
											"source": 33
										},
										{
											"begin": 1779,
											"end": 2093,
											"name": "tag",
											"source": 31,
											"value": "267"
										},
										{
											"begin": 1779,
											"end": 2093,
											"name": "JUMPDEST",
											"source": 31
										},
										{
											"begin": 1883,
											"end": 1897,
											"name": "PUSH",
											"source": 31,
											"value": "0"
										},
										{
											"begin": 1883,
											"end": 1897,
											"name": "DUP1",
											"source": 31
										},
										{
											"begin": 1883,
											"end": 1897,
											"name": "DUP1",
											"source": 31
										},
										{
											"begin": 1983,
											"end": 2000,
											"name": "PUSH [tag]",
											"source": 31,
											"value": "356"
										},
										{
											"begin": 1983,
											"end": 1987,
											"name": "DUP5",
											"source": 31
										},
										{
											"begin": 1883,
											"end": 1897,
											"name": "DUP3",
											"source": 31
										},
										{
											"begin": 1983,
											"end": 1997,
											"name": "PUSH [tag]",
											"source": 31,
											"value": "357"
										},
										{
											"begin": 1983,
											"end": 2000,
											"name": "JUMP",
											"source": 31,
											"value": "[in]"
										},
										{
											"begin": 1983,
											"end": 2000,
											"name": "tag",
											"source": 31,
											"value": "356"
										},
										{
											"begin": 1983,
											"end": 2000,
											"name": "JUMPDEST",
											"source": 31
										},
										{
											"begin": 1974,
											"end": 2000,
											"name": "SWAP3",
											"source": 31
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2016,
											"end": 2040,
											"name": "PUSH [tag]",
											"source": 31,
											"value": "358"
										},
										{
											"begin": 2016,
											"end": 2020,
											"name": "DUP5",
											"source": 31
										},
										{
											"begin": 304,
											"end": 306,
											"name": "PUSH",
											"source": 31,
											"value": "14"
										},
										{
											"begin": 2016,
											"end": 2029,
											"name": "PUSH [tag]",
											"source": 31,
											"value": "359"
										},
										{
											"begin": 2016,
											"end": 2040,
											"name": "JUMP",
											"source": 31,
											"value": "[in]"
										},
										{
											"begin": 2016,
											"end": 2040,
											"name": "tag",
											"source": 31,
											"value": "358"
										},
										{
											"begin": 2016,
											"end": 2040,
											"name": "JUMPDEST",
											"source": 31
										},
										{
											"begin": 2010,
											"end": 2040,
											"name": "SWAP1",
											"source": 31
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2059,
											"end": 2086,
											"name": "PUSH [tag]",
											"source": 31,
											"value": "360"
										},
										{
											"begin": 2059,
											"end": 2063,
											"name": "DUP5",
											"source": 31
										},
										{
											"begin": 507,
											"end": 527,
											"name": "PUSH",
											"source": 31,
											"value": "17"
										},
										{
											"begin": 2059,
											"end": 2073,
											"name": "PUSH [tag]",
											"source": 31,
											"value": "357"
										},
										{
											"begin": 2059,
											"end": 2086,
											"name": "JUMP",
											"source": 31,
											"value": "[in]"
										},
										{
											"begin": 2059,
											"end": 2086,
											"name": "tag",
											"source": 31,
											"value": "360"
										},
										{
											"begin": 2059,
											"end": 2086,
											"name": "JUMPDEST",
											"source": 31
										},
										{
											"begin": 2050,
											"end": 2086,
											"name": "SWAP2",
											"source": 31
										},
										{
											"begin": 2050,
											"end": 2086,
											"name": "POP",
											"source": 31
										},
										{
											"begin": 1779,
											"end": 2093,
											"name": "SWAP2",
											"source": 31
										},
										{
											"begin": 1779,
											"end": 2093,
											"name": "SWAP4",
											"source": 31
										},
										{
											"begin": 1779,
											"end": 2093,
											"name": "SWAP1",
											"source": 31
										},
										{
											"begin": 1779,
											"end": 2093,
											"name": "SWAP3",
											"source": 31
										},
										{
											"begin": 1779,
											"end": 2093,
											"name": "POP",
											"source": 31
										},
										{
											"begin": 1779,
											"end": 2093,
											"name": "JUMP",
											"source": 31,
											"value": "[out]"
										},
										{
											"begin": 683,
											"end": 942,
											"name": "tag",
											"source": 30,
											"value": "269"
										},
										{
											"begin": 683,
											"end": 942,
											"name": "JUMPDEST",
											"source": 30
										},
										{
											"begin": 829,
											"end": 848,
											"name": "PUSH",
											"source": 30,
											"value": "0"
										},
										{
											"begin": 867,
											"end": 935,
											"name": "PUSH [tag]",
											"source": 30,
											"value": "362"
										},
										{
											"begin": 882,
											"end": 889,
											"name": "DUP6",
											"source": 30
										},
										{
											"begin": 891,
											"end": 934,
											"name": "PUSH [tag]",
											"source": 30,
											"value": "363"
										},
										{
											"begin": 914,
											"end": 920,
											"name": "DUP7",
											"source": 30
										},
										{
											"begin": 922,
											"end": 928,
											"name": "DUP7",
											"source": 30
										},
										{
											"begin": 930,
											"end": 933,
											"name": "DUP7",
											"source": 30
										},
										{
											"begin": 891,
											"end": 913,
											"name": "PUSH [tag]",
											"source": 30,
											"value": "364"
										},
										{
											"begin": 891,
											"end": 934,
											"name": "JUMP",
											"source": 30,
											"value": "[in]"
										},
										{
											"begin": 891,
											"end": 934,
											"name": "tag",
											"source": 30,
											"value": "363"
										},
										{
											"begin": 891,
											"end": 934,
											"name": "JUMPDEST",
											"source": 30
										},
										{
											"begin": 867,
											"end": 881,
											"name": "PUSH [tag]",
											"source": 30,
											"value": "365"
										},
										{
											"begin": 867,
											"end": 935,
											"name": "JUMP",
											"source": 30,
											"value": "[in]"
										},
										{
											"begin": 867,
											"end": 935,
											"name": "tag",
											"source": 30,
											"value": "362"
										},
										{
											"begin": 867,
											"end": 935,
											"name": "JUMPDEST",
											"source": 30
										},
										{
											"begin": 860,
											"end": 935,
											"name": "SWAP6",
											"source": 30
										},
										{
											"begin": 683,
											"end": 942,
											"name": "SWAP5",
											"source": 30
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 683,
											"end": 942,
											"name": "JUMP",
											"source": 30,
											"value": "[out]"
										},
										{
											"begin": 1757,
											"end": 2456,
											"name": "tag",
											"source": 17,
											"value": "274"
										},
										{
											"begin": 1757,
											"end": 2456,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 1904,
											"end": 1909,
											"name": "PUSHIMMUTABLE",
											"source": 17,
											"value": "2083"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1895,
											"end": 1909,
											"name": "AND",
											"source": 17
										},
										{
											"begin": 1895,
											"end": 1900,
											"name": "DUP5",
											"source": 17
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1895,
											"end": 1909,
											"name": "AND",
											"source": 17
										},
										{
											"begin": 1895,
											"end": 1909,
											"name": "EQ",
											"source": 17
										},
										{
											"begin": 1895,
											"end": 1943,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 1895,
											"end": 1943,
											"name": "ISZERO",
											"source": 17
										},
										{
											"begin": 1895,
											"end": 1943,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "367"
										},
										{
											"begin": 1895,
											"end": 1943,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 1895,
											"end": 1943,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 1938,
											"end": 1943,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 1913,
											"end": 1934,
											"name": "SELFBALANCE",
											"source": 17
										},
										{
											"begin": 1913,
											"end": 1943,
											"name": "LT",
											"source": 17
										},
										{
											"begin": 1913,
											"end": 1943,
											"name": "ISZERO",
											"source": 17
										},
										{
											"begin": 1895,
											"end": 1943,
											"name": "tag",
											"source": 17,
											"value": "367"
										},
										{
											"begin": 1895,
											"end": 1943,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 1891,
											"end": 2450,
											"name": "ISZERO",
											"source": 17
										},
										{
											"begin": 1891,
											"end": 2450,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "368"
										},
										{
											"begin": 1891,
											"end": 2450,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 1996,
											"end": 2001,
											"name": "PUSHIMMUTABLE",
											"source": 17,
											"value": "2083"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1989,
											"end": 2010,
											"name": "AND",
											"source": 17
										},
										{
											"begin": 1989,
											"end": 2010,
											"name": "PUSH",
											"source": 17,
											"value": "D0E30DB0"
										},
										{
											"begin": 2018,
											"end": 2023,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 1989,
											"end": 2026,
											"name": "PUSH",
											"source": 17,
											"value": "40"
										},
										{
											"begin": 1989,
											"end": 2026,
											"name": "MLOAD",
											"source": 17
										},
										{
											"begin": 1989,
											"end": 2026,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 1989,
											"end": 2026,
											"name": "PUSH",
											"source": 17,
											"value": "FFFFFFFF"
										},
										{
											"begin": 1989,
											"end": 2026,
											"name": "AND",
											"source": 17
										},
										{
											"begin": 1989,
											"end": 2026,
											"name": "PUSH",
											"source": 17,
											"value": "E0"
										},
										{
											"begin": 1989,
											"end": 2026,
											"name": "SHL",
											"source": 17
										},
										{
											"begin": 1989,
											"end": 2026,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 1989,
											"end": 2026,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 1989,
											"end": 2026,
											"name": "PUSH",
											"source": 17,
											"value": "4"
										},
										{
											"begin": 1989,
											"end": 2026,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 1989,
											"end": 2026,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 1989,
											"end": 2026,
											"name": "PUSH",
											"source": 17,
											"value": "40"
										},
										{
											"begin": 1989,
											"end": 2026,
											"name": "MLOAD",
											"source": 17
										},
										{
											"begin": 1989,
											"end": 2026,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 1989,
											"end": 2026,
											"name": "DUP4",
											"source": 17
										},
										{
											"begin": 1989,
											"end": 2026,
											"name": "SUB",
											"source": 17
										},
										{
											"begin": 1989,
											"end": 2026,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 1989,
											"end": 2026,
											"name": "DUP6",
											"source": 17
										},
										{
											"begin": 1989,
											"end": 2026,
											"name": "DUP9",
											"source": 17
										},
										{
											"begin": 1989,
											"end": 2026,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 1989,
											"end": 2026,
											"name": "EXTCODESIZE",
											"source": 17
										},
										{
											"begin": 1989,
											"end": 2026,
											"name": "ISZERO",
											"source": 17
										},
										{
											"begin": 1989,
											"end": 2026,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 1989,
											"end": 2026,
											"name": "ISZERO",
											"source": 17
										},
										{
											"begin": 1989,
											"end": 2026,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "369"
										},
										{
											"begin": 1989,
											"end": 2026,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 1989,
											"end": 2026,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 1989,
											"end": 2026,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 1989,
											"end": 2026,
											"name": "REVERT",
											"source": 17
										},
										{
											"begin": 1989,
											"end": 2026,
											"name": "tag",
											"source": 17,
											"value": "369"
										},
										{
											"begin": 1989,
											"end": 2026,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 1989,
											"end": 2026,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 1989,
											"end": 2026,
											"name": "GAS",
											"source": 17
										},
										{
											"begin": 1989,
											"end": 2026,
											"name": "CALL",
											"source": 17
										},
										{
											"begin": 1989,
											"end": 2026,
											"name": "ISZERO",
											"source": 17
										},
										{
											"begin": 1989,
											"end": 2026,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 1989,
											"end": 2026,
											"name": "ISZERO",
											"source": 17
										},
										{
											"begin": 1989,
											"end": 2026,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "371"
										},
										{
											"begin": 1989,
											"end": 2026,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 1989,
											"end": 2026,
											"name": "RETURNDATASIZE",
											"source": 17
										},
										{
											"begin": 1989,
											"end": 2026,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 1989,
											"end": 2026,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 1989,
											"end": 2026,
											"name": "RETURNDATACOPY",
											"source": 17
										},
										{
											"begin": 1989,
											"end": 2026,
											"name": "RETURNDATASIZE",
											"source": 17
										},
										{
											"begin": 1989,
											"end": 2026,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 1989,
											"end": 2026,
											"name": "REVERT",
											"source": 17
										},
										{
											"begin": 1989,
											"end": 2026,
											"name": "tag",
											"source": 17,
											"value": "371"
										},
										{
											"begin": 1989,
											"end": 2026,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 1989,
											"end": 2026,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 1989,
											"end": 2026,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 1989,
											"end": 2026,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 1989,
											"end": 2026,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 1989,
											"end": 2026,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 2082,
											"end": 2087,
											"name": "PUSHIMMUTABLE",
											"source": 17,
											"value": "2083"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2075,
											"end": 2097,
											"name": "AND",
											"source": 17
										},
										{
											"begin": 2075,
											"end": 2097,
											"name": "PUSH",
											"source": 17,
											"value": "A9059CBB"
										},
										{
											"begin": 2098,
											"end": 2107,
											"name": "DUP4",
											"source": 17
										},
										{
											"begin": 2109,
											"end": 2114,
											"name": "DUP4",
											"source": 17
										},
										{
											"begin": 2075,
											"end": 2115,
											"name": "PUSH",
											"source": 17,
											"value": "40"
										},
										{
											"begin": 2075,
											"end": 2115,
											"name": "MLOAD",
											"source": 17
										},
										{
											"begin": 2075,
											"end": 2115,
											"name": "DUP4",
											"source": 17
										},
										{
											"begin": 2075,
											"end": 2115,
											"name": "PUSH",
											"source": 17,
											"value": "FFFFFFFF"
										},
										{
											"begin": 2075,
											"end": 2115,
											"name": "AND",
											"source": 17
										},
										{
											"begin": 2075,
											"end": 2115,
											"name": "PUSH",
											"source": 17,
											"value": "E0"
										},
										{
											"begin": 2075,
											"end": 2115,
											"name": "SHL",
											"source": 17
										},
										{
											"begin": 2075,
											"end": 2115,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 2075,
											"end": 2115,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 2075,
											"end": 2115,
											"name": "PUSH",
											"source": 17,
											"value": "4"
										},
										{
											"begin": 2075,
											"end": 2115,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 2075,
											"end": 2115,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 2075,
											"end": 2115,
											"name": "DUP4",
											"source": 17
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2075,
											"end": 2115,
											"name": "AND",
											"source": 17
										},
										{
											"begin": 2075,
											"end": 2115,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 2075,
											"end": 2115,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 2075,
											"end": 2115,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 2075,
											"end": 2115,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 2075,
											"end": 2115,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 2075,
											"end": 2115,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 2075,
											"end": 2115,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 2075,
											"end": 2115,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 2075,
											"end": 2115,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 2075,
											"end": 2115,
											"name": "SWAP3",
											"source": 17
										},
										{
											"begin": 2075,
											"end": 2115,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 2075,
											"end": 2115,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 2075,
											"end": 2115,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 2075,
											"end": 2115,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 2075,
											"end": 2115,
											"name": "PUSH",
											"source": 17,
											"value": "40"
										},
										{
											"begin": 2075,
											"end": 2115,
											"name": "MLOAD",
											"source": 17
										},
										{
											"begin": 2075,
											"end": 2115,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 2075,
											"end": 2115,
											"name": "DUP4",
											"source": 17
										},
										{
											"begin": 2075,
											"end": 2115,
											"name": "SUB",
											"source": 17
										},
										{
											"begin": 2075,
											"end": 2115,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 2075,
											"end": 2115,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 2075,
											"end": 2115,
											"name": "DUP8",
											"source": 17
										},
										{
											"begin": 2075,
											"end": 2115,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 2075,
											"end": 2115,
											"name": "EXTCODESIZE",
											"source": 17
										},
										{
											"begin": 2075,
											"end": 2115,
											"name": "ISZERO",
											"source": 17
										},
										{
											"begin": 2075,
											"end": 2115,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 2075,
											"end": 2115,
											"name": "ISZERO",
											"source": 17
										},
										{
											"begin": 2075,
											"end": 2115,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "372"
										},
										{
											"begin": 2075,
											"end": 2115,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 2075,
											"end": 2115,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 2075,
											"end": 2115,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 2075,
											"end": 2115,
											"name": "REVERT",
											"source": 17
										},
										{
											"begin": 2075,
											"end": 2115,
											"name": "tag",
											"source": 17,
											"value": "372"
										},
										{
											"begin": 2075,
											"end": 2115,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 2075,
											"end": 2115,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 2075,
											"end": 2115,
											"name": "GAS",
											"source": 17
										},
										{
											"begin": 2075,
											"end": 2115,
											"name": "CALL",
											"source": 17
										},
										{
											"begin": 2075,
											"end": 2115,
											"name": "ISZERO",
											"source": 17
										},
										{
											"begin": 2075,
											"end": 2115,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 2075,
											"end": 2115,
											"name": "ISZERO",
											"source": 17
										},
										{
											"begin": 2075,
											"end": 2115,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "374"
										},
										{
											"begin": 2075,
											"end": 2115,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 2075,
											"end": 2115,
											"name": "RETURNDATASIZE",
											"source": 17
										},
										{
											"begin": 2075,
											"end": 2115,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 2075,
											"end": 2115,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 2075,
											"end": 2115,
											"name": "RETURNDATACOPY",
											"source": 17
										},
										{
											"begin": 2075,
											"end": 2115,
											"name": "RETURNDATASIZE",
											"source": 17
										},
										{
											"begin": 2075,
											"end": 2115,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 2075,
											"end": 2115,
											"name": "REVERT",
											"source": 17
										},
										{
											"begin": 2075,
											"end": 2115,
											"name": "tag",
											"source": 17,
											"value": "374"
										},
										{
											"begin": 2075,
											"end": 2115,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 2075,
											"end": 2115,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 2075,
											"end": 2115,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 2075,
											"end": 2115,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 2075,
											"end": 2115,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 2075,
											"end": 2115,
											"name": "PUSH",
											"source": 17,
											"value": "40"
										},
										{
											"begin": 2075,
											"end": 2115,
											"name": "MLOAD",
											"source": 17
										},
										{
											"begin": 2075,
											"end": 2115,
											"name": "RETURNDATASIZE",
											"source": 17
										},
										{
											"begin": 2075,
											"end": 2115,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 2075,
											"end": 2115,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 2075,
											"end": 2115,
											"name": "LT",
											"source": 17
										},
										{
											"begin": 2075,
											"end": 2115,
											"name": "ISZERO",
											"source": 17
										},
										{
											"begin": 2075,
											"end": 2115,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "375"
										},
										{
											"begin": 2075,
											"end": 2115,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 2075,
											"end": 2115,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 2075,
											"end": 2115,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 2075,
											"end": 2115,
											"name": "REVERT",
											"source": 17
										},
										{
											"begin": 2075,
											"end": 2115,
											"name": "tag",
											"source": 17,
											"value": "375"
										},
										{
											"begin": 2075,
											"end": 2115,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1891,
											"end": 2450,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "232"
										},
										{
											"begin": 1891,
											"end": 2450,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1891,
											"end": 2450,
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 1891,
											"end": 2450,
											"name": "tag",
											"source": 17,
											"value": "368"
										},
										{
											"begin": 1891,
											"end": 2450,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2136,
											"end": 2158,
											"name": "DUP4",
											"source": 17
										},
										{
											"begin": 2136,
											"end": 2158,
											"name": "AND",
											"source": 17
										},
										{
											"begin": 2153,
											"end": 2157,
											"name": "ADDRESS",
											"source": 17
										},
										{
											"begin": 2136,
											"end": 2158,
											"name": "EQ",
											"source": 17
										},
										{
											"begin": 2132,
											"end": 2450,
											"name": "ISZERO",
											"source": 17
										},
										{
											"begin": 2132,
											"end": 2450,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "377"
										},
										{
											"begin": 2132,
											"end": 2450,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 2265,
											"end": 2317,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "378"
										},
										{
											"begin": 2293,
											"end": 2298,
											"name": "DUP5",
											"source": 17
										},
										{
											"begin": 2300,
											"end": 2309,
											"name": "DUP4",
											"source": 17
										},
										{
											"begin": 2311,
											"end": 2316,
											"name": "DUP4",
											"source": 17
										},
										{
											"begin": 2265,
											"end": 2292,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "233"
										},
										{
											"begin": 2265,
											"end": 2317,
											"name": "JUMP",
											"source": 17,
											"value": "[in]"
										},
										{
											"begin": 2265,
											"end": 2317,
											"name": "tag",
											"source": 17,
											"value": "378"
										},
										{
											"begin": 2265,
											"end": 2317,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 2132,
											"end": 2450,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "232"
										},
										{
											"begin": 2132,
											"end": 2450,
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 2132,
											"end": 2450,
											"name": "tag",
											"source": 17,
											"value": "377"
										},
										{
											"begin": 2132,
											"end": 2450,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 2376,
											"end": 2439,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "232"
										},
										{
											"begin": 2408,
											"end": 2413,
											"name": "DUP5",
											"source": 17
										},
										{
											"begin": 2415,
											"end": 2420,
											"name": "DUP5",
											"source": 17
										},
										{
											"begin": 2422,
											"end": 2431,
											"name": "DUP5",
											"source": 17
										},
										{
											"begin": 2433,
											"end": 2438,
											"name": "DUP5",
											"source": 17
										},
										{
											"begin": 2376,
											"end": 2407,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "381"
										},
										{
											"begin": 2376,
											"end": 2439,
											"name": "JUMP",
											"source": 17,
											"value": "[in]"
										},
										{
											"begin": 1602,
											"end": 1851,
											"name": "tag",
											"source": 13,
											"value": "297"
										},
										{
											"begin": 1602,
											"end": 1851,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 1715,
											"end": 1729,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 1763,
											"end": 1843,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "383"
										},
										{
											"begin": 1790,
											"end": 1797,
											"name": "PUSHIMMUTABLE",
											"source": 13,
											"value": "2079"
										},
										{
											"begin": 1799,
											"end": 1842,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "384"
										},
										{
											"begin": 1822,
											"end": 1828,
											"name": "DUP7",
											"source": 13
										},
										{
											"begin": 1830,
											"end": 1836,
											"name": "DUP7",
											"source": 13
										},
										{
											"begin": 1838,
											"end": 1841,
											"name": "DUP7",
											"source": 13
										},
										{
											"begin": 1799,
											"end": 1821,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "364"
										},
										{
											"begin": 1799,
											"end": 1842,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 1799,
											"end": 1842,
											"name": "tag",
											"source": 13,
											"value": "384"
										},
										{
											"begin": 1799,
											"end": 1842,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 1763,
											"end": 1789,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "385"
										},
										{
											"begin": 1763,
											"end": 1843,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 1763,
											"end": 1843,
											"name": "tag",
											"source": 13,
											"value": "383"
										},
										{
											"begin": 1763,
											"end": 1843,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 1741,
											"end": 1844,
											"name": "SWAP5",
											"source": 13
										},
										{
											"begin": 1602,
											"end": 1851,
											"name": "SWAP4",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1602,
											"end": 1851,
											"name": "JUMP",
											"source": 13,
											"value": "[out]"
										},
										{
											"begin": 924,
											"end": 1045,
											"name": "tag",
											"source": 11,
											"value": "299"
										},
										{
											"begin": 924,
											"end": 1045,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 976,
											"end": 984,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1004,
											"end": 1005,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 1004,
											"end": 1014,
											"name": "LT",
											"source": 11
										},
										{
											"begin": 996,
											"end": 1015,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "387"
										},
										{
											"begin": 996,
											"end": 1015,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 996,
											"end": 1015,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 996,
											"end": 1015,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 996,
											"end": 1015,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 996,
											"end": 1015,
											"name": "tag",
											"source": 11,
											"value": "387"
										},
										{
											"begin": 996,
											"end": 1015,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1036,
											"end": 1037,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 924,
											"end": 1045,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 399,
											"end": 3406,
											"name": "tag",
											"source": 29,
											"value": "322"
										},
										{
											"begin": 399,
											"end": 3406,
											"name": "JUMPDEST",
											"source": 29
										},
										{
											"begin": 521,
											"end": 533,
											"name": "PUSH",
											"source": 29,
											"value": "60"
										},
										{
											"begin": 569,
											"end": 576,
											"name": "DUP2",
											"source": 29
										},
										{
											"begin": 553,
											"end": 560,
											"name": "DUP3",
											"source": 29
										},
										{
											"begin": 563,
											"end": 565,
											"name": "PUSH",
											"source": 29,
											"value": "1F"
										},
										{
											"begin": 553,
											"end": 565,
											"name": "ADD",
											"source": 29
										},
										{
											"begin": 553,
											"end": 576,
											"name": "LT",
											"source": 29
										},
										{
											"begin": 553,
											"end": 576,
											"name": "ISZERO",
											"source": 29
										},
										{
											"begin": 545,
											"end": 595,
											"name": "PUSH [tag]",
											"source": 29,
											"value": "389"
										},
										{
											"begin": 545,
											"end": 595,
											"name": "JUMPI",
											"source": 29
										},
										{
											"begin": 545,
											"end": 595,
											"name": "PUSH",
											"source": 29,
											"value": "40"
										},
										{
											"begin": 545,
											"end": 595,
											"name": "DUP1",
											"source": 29
										},
										{
											"begin": 545,
											"end": 595,
											"name": "MLOAD",
											"source": 29
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 545,
											"end": 595,
											"name": "DUP2",
											"source": 29
										},
										{
											"begin": 545,
											"end": 595,
											"name": "MSTORE",
											"source": 29
										},
										{
											"begin": 545,
											"end": 595,
											"name": "PUSH",
											"source": 29,
											"value": "20"
										},
										{
											"begin": 545,
											"end": 595,
											"name": "PUSH",
											"source": 29,
											"value": "4"
										},
										{
											"begin": 545,
											"end": 595,
											"name": "DUP3",
											"source": 29
										},
										{
											"begin": 545,
											"end": 595,
											"name": "ADD",
											"source": 29
										},
										{
											"begin": 545,
											"end": 595,
											"name": "MSTORE",
											"source": 29
										},
										{
											"begin": 545,
											"end": 595,
											"name": "PUSH",
											"source": 29,
											"value": "E"
										},
										{
											"begin": 545,
											"end": 595,
											"name": "PUSH",
											"source": 29,
											"value": "24"
										},
										{
											"begin": 545,
											"end": 595,
											"name": "DUP3",
											"source": 29
										},
										{
											"begin": 545,
											"end": 595,
											"name": "ADD",
											"source": 29
										},
										{
											"begin": 545,
											"end": 595,
											"name": "MSTORE",
											"source": 29
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "736C6963655F6F766572666C6F77"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "90"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 545,
											"end": 595,
											"name": "PUSH",
											"source": 29,
											"value": "44"
										},
										{
											"begin": 545,
											"end": 595,
											"name": "DUP3",
											"source": 29
										},
										{
											"begin": 545,
											"end": 595,
											"name": "ADD",
											"source": 29
										},
										{
											"begin": 545,
											"end": 595,
											"name": "MSTORE",
											"source": 29
										},
										{
											"begin": 545,
											"end": 595,
											"name": "SWAP1",
											"source": 29
										},
										{
											"begin": 545,
											"end": 595,
											"name": "MLOAD",
											"source": 29
										},
										{
											"begin": 545,
											"end": 595,
											"name": "SWAP1",
											"source": 29
										},
										{
											"begin": 545,
											"end": 595,
											"name": "DUP2",
											"source": 29
										},
										{
											"begin": 545,
											"end": 595,
											"name": "SWAP1",
											"source": 29
										},
										{
											"begin": 545,
											"end": 595,
											"name": "SUB",
											"source": 29
										},
										{
											"begin": 545,
											"end": 595,
											"name": "PUSH",
											"source": 29,
											"value": "64"
										},
										{
											"begin": 545,
											"end": 595,
											"name": "ADD",
											"source": 29
										},
										{
											"begin": 545,
											"end": 595,
											"name": "SWAP1",
											"source": 29
										},
										{
											"begin": 545,
											"end": 595,
											"name": "REVERT",
											"source": 29
										},
										{
											"begin": 545,
											"end": 595,
											"name": "tag",
											"source": 29,
											"value": "389"
										},
										{
											"begin": 545,
											"end": 595,
											"name": "JUMPDEST",
											"source": 29
										},
										{
											"begin": 633,
											"end": 639,
											"name": "DUP3",
											"source": 29
										},
										{
											"begin": 622,
											"end": 629,
											"name": "DUP3",
											"source": 29
										},
										{
											"begin": 613,
											"end": 619,
											"name": "DUP5",
											"source": 29
										},
										{
											"begin": 613,
											"end": 629,
											"name": "ADD",
											"source": 29
										},
										{
											"begin": 613,
											"end": 639,
											"name": "LT",
											"source": 29
										},
										{
											"begin": 613,
											"end": 639,
											"name": "ISZERO",
											"source": 29
										},
										{
											"begin": 605,
											"end": 658,
											"name": "PUSH [tag]",
											"source": 29,
											"value": "390"
										},
										{
											"begin": 605,
											"end": 658,
											"name": "JUMPI",
											"source": 29
										},
										{
											"begin": 605,
											"end": 658,
											"name": "PUSH",
											"source": 29,
											"value": "40"
										},
										{
											"begin": 605,
											"end": 658,
											"name": "DUP1",
											"source": 29
										},
										{
											"begin": 605,
											"end": 658,
											"name": "MLOAD",
											"source": 29
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 605,
											"end": 658,
											"name": "DUP2",
											"source": 29
										},
										{
											"begin": 605,
											"end": 658,
											"name": "MSTORE",
											"source": 29
										},
										{
											"begin": 605,
											"end": 658,
											"name": "PUSH",
											"source": 29,
											"value": "20"
										},
										{
											"begin": 605,
											"end": 658,
											"name": "PUSH",
											"source": 29,
											"value": "4"
										},
										{
											"begin": 605,
											"end": 658,
											"name": "DUP3",
											"source": 29
										},
										{
											"begin": 605,
											"end": 658,
											"name": "ADD",
											"source": 29
										},
										{
											"begin": 605,
											"end": 658,
											"name": "MSTORE",
											"source": 29
										},
										{
											"begin": 605,
											"end": 658,
											"name": "PUSH",
											"source": 29,
											"value": "E"
										},
										{
											"begin": 605,
											"end": 658,
											"name": "PUSH",
											"source": 29,
											"value": "24"
										},
										{
											"begin": 605,
											"end": 658,
											"name": "DUP3",
											"source": 29
										},
										{
											"begin": 605,
											"end": 658,
											"name": "ADD",
											"source": 29
										},
										{
											"begin": 605,
											"end": 658,
											"name": "MSTORE",
											"source": 29
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "736C6963655F6F766572666C6F77"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "90"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 605,
											"end": 658,
											"name": "PUSH",
											"source": 29,
											"value": "44"
										},
										{
											"begin": 605,
											"end": 658,
											"name": "DUP3",
											"source": 29
										},
										{
											"begin": 605,
											"end": 658,
											"name": "ADD",
											"source": 29
										},
										{
											"begin": 605,
											"end": 658,
											"name": "MSTORE",
											"source": 29
										},
										{
											"begin": 605,
											"end": 658,
											"name": "SWAP1",
											"source": 29
										},
										{
											"begin": 605,
											"end": 658,
											"name": "MLOAD",
											"source": 29
										},
										{
											"begin": 605,
											"end": 658,
											"name": "SWAP1",
											"source": 29
										},
										{
											"begin": 605,
											"end": 658,
											"name": "DUP2",
											"source": 29
										},
										{
											"begin": 605,
											"end": 658,
											"name": "SWAP1",
											"source": 29
										},
										{
											"begin": 605,
											"end": 658,
											"name": "SUB",
											"source": 29
										},
										{
											"begin": 605,
											"end": 658,
											"name": "PUSH",
											"source": 29,
											"value": "64"
										},
										{
											"begin": 605,
											"end": 658,
											"name": "ADD",
											"source": 29
										},
										{
											"begin": 605,
											"end": 658,
											"name": "SWAP1",
											"source": 29
										},
										{
											"begin": 605,
											"end": 658,
											"name": "REVERT",
											"source": 29
										},
										{
											"begin": 605,
											"end": 658,
											"name": "tag",
											"source": 29,
											"value": "390"
										},
										{
											"begin": 605,
											"end": 658,
											"name": "JUMPDEST",
											"source": 29
										},
										{
											"begin": 702,
											"end": 709,
											"name": "DUP2",
											"source": 29
										},
										{
											"begin": 693,
											"end": 699,
											"name": "DUP4",
											"source": 29
										},
										{
											"begin": 693,
											"end": 709,
											"name": "ADD",
											"source": 29
										},
										{
											"begin": 676,
											"end": 682,
											"name": "DUP5",
											"source": 29
										},
										{
											"begin": 676,
											"end": 689,
											"name": "MLOAD",
											"source": 29
										},
										{
											"begin": 676,
											"end": 709,
											"name": "LT",
											"source": 29
										},
										{
											"begin": 676,
											"end": 709,
											"name": "ISZERO",
											"source": 29
										},
										{
											"begin": 668,
											"end": 731,
											"name": "PUSH [tag]",
											"source": 29,
											"value": "391"
										},
										{
											"begin": 668,
											"end": 731,
											"name": "JUMPI",
											"source": 29
										},
										{
											"begin": 668,
											"end": 731,
											"name": "PUSH",
											"source": 29,
											"value": "40"
										},
										{
											"begin": 668,
											"end": 731,
											"name": "DUP1",
											"source": 29
										},
										{
											"begin": 668,
											"end": 731,
											"name": "MLOAD",
											"source": 29
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 668,
											"end": 731,
											"name": "DUP2",
											"source": 29
										},
										{
											"begin": 668,
											"end": 731,
											"name": "MSTORE",
											"source": 29
										},
										{
											"begin": 668,
											"end": 731,
											"name": "PUSH",
											"source": 29,
											"value": "20"
										},
										{
											"begin": 668,
											"end": 731,
											"name": "PUSH",
											"source": 29,
											"value": "4"
										},
										{
											"begin": 668,
											"end": 731,
											"name": "DUP3",
											"source": 29
										},
										{
											"begin": 668,
											"end": 731,
											"name": "ADD",
											"source": 29
										},
										{
											"begin": 668,
											"end": 731,
											"name": "MSTORE",
											"source": 29
										},
										{
											"begin": 668,
											"end": 731,
											"name": "PUSH",
											"source": 29,
											"value": "11"
										},
										{
											"begin": 668,
											"end": 731,
											"name": "PUSH",
											"source": 29,
											"value": "24"
										},
										{
											"begin": 668,
											"end": 731,
											"name": "DUP3",
											"source": 29
										},
										{
											"begin": 668,
											"end": 731,
											"name": "ADD",
											"source": 29
										},
										{
											"begin": 668,
											"end": 731,
											"name": "MSTORE",
											"source": 29
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "736C6963655F6F75744F66426F756E6473"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "78"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 668,
											"end": 731,
											"name": "PUSH",
											"source": 29,
											"value": "44"
										},
										{
											"begin": 668,
											"end": 731,
											"name": "DUP3",
											"source": 29
										},
										{
											"begin": 668,
											"end": 731,
											"name": "ADD",
											"source": 29
										},
										{
											"begin": 668,
											"end": 731,
											"name": "MSTORE",
											"source": 29
										},
										{
											"begin": 668,
											"end": 731,
											"name": "SWAP1",
											"source": 29
										},
										{
											"begin": 668,
											"end": 731,
											"name": "MLOAD",
											"source": 29
										},
										{
											"begin": 668,
											"end": 731,
											"name": "SWAP1",
											"source": 29
										},
										{
											"begin": 668,
											"end": 731,
											"name": "DUP2",
											"source": 29
										},
										{
											"begin": 668,
											"end": 731,
											"name": "SWAP1",
											"source": 29
										},
										{
											"begin": 668,
											"end": 731,
											"name": "SUB",
											"source": 29
										},
										{
											"begin": 668,
											"end": 731,
											"name": "PUSH",
											"source": 29,
											"value": "64"
										},
										{
											"begin": 668,
											"end": 731,
											"name": "ADD",
											"source": 29
										},
										{
											"begin": 668,
											"end": 731,
											"name": "SWAP1",
											"source": 29
										},
										{
											"begin": 668,
											"end": 731,
											"name": "REVERT",
											"source": 29
										},
										{
											"begin": 668,
											"end": 731,
											"name": "tag",
											"source": 29,
											"value": "391"
										},
										{
											"begin": 668,
											"end": 731,
											"name": "JUMPDEST",
											"source": 29
										},
										{
											"begin": 742,
											"end": 764,
											"name": "PUSH",
											"source": 29,
											"value": "60"
										},
										{
											"begin": 805,
											"end": 820,
											"name": "DUP3",
											"source": 29
										},
										{
											"begin": 805,
											"end": 820,
											"name": "ISZERO",
											"source": 29
										},
										{
											"begin": 837,
											"end": 2936,
											"name": "DUP1",
											"source": 29
										},
										{
											"begin": 837,
											"end": 2936,
											"name": "ISZERO",
											"source": 29
										},
										{
											"begin": 837,
											"end": 2936,
											"name": "PUSH [tag]",
											"source": 29,
											"value": "393"
										},
										{
											"begin": 837,
											"end": 2936,
											"name": "JUMPI",
											"source": 29
										},
										{
											"begin": 3089,
											"end": 3093,
											"name": "PUSH",
											"source": 29,
											"value": "40"
										},
										{
											"begin": 3083,
											"end": 3094,
											"name": "MLOAD",
											"source": 29
										},
										{
											"begin": 3070,
											"end": 3094,
											"name": "SWAP2",
											"source": 29
										},
										{
											"begin": 3070,
											"end": 3094,
											"name": "POP",
											"source": 29
										},
										{
											"begin": 3287,
											"end": 3288,
											"name": "PUSH",
											"source": 29,
											"value": "0"
										},
										{
											"begin": 3276,
											"end": 3285,
											"name": "DUP3",
											"source": 29
										},
										{
											"begin": 3269,
											"end": 3289,
											"name": "MSTORE",
											"source": 29
										},
										{
											"begin": 3339,
											"end": 3343,
											"name": "PUSH",
											"source": 29,
											"value": "20"
										},
										{
											"begin": 3328,
											"end": 3337,
											"name": "DUP3",
											"source": 29
										},
										{
											"begin": 3324,
											"end": 3344,
											"name": "ADD",
											"source": 29
										},
										{
											"begin": 3318,
											"end": 3322,
											"name": "PUSH",
											"source": 29,
											"value": "40"
										},
										{
											"begin": 3311,
											"end": 3345,
											"name": "MSTORE",
											"source": 29
										},
										{
											"begin": 798,
											"end": 3363,
											"name": "PUSH [tag]",
											"source": 29,
											"value": "392"
										},
										{
											"begin": 798,
											"end": 3363,
											"name": "JUMP",
											"source": 29
										},
										{
											"begin": 837,
											"end": 2936,
											"name": "tag",
											"source": 29,
											"value": "393"
										},
										{
											"begin": 837,
											"end": 2936,
											"name": "JUMPDEST",
											"source": 29
										},
										{
											"begin": 1031,
											"end": 1035,
											"name": "PUSH",
											"source": 29,
											"value": "40"
										},
										{
											"begin": 1025,
											"end": 1036,
											"name": "MLOAD",
											"source": 29
										},
										{
											"begin": 1012,
											"end": 1036,
											"name": "SWAP2",
											"source": 29
										},
										{
											"begin": 1012,
											"end": 1036,
											"name": "POP",
											"source": 29
										},
										{
											"begin": 1726,
											"end": 1728,
											"name": "PUSH",
											"source": 29,
											"value": "1F"
										},
										{
											"begin": 1717,
											"end": 1724,
											"name": "DUP5",
											"source": 29
										},
										{
											"begin": 1713,
											"end": 1729,
											"name": "AND",
											"source": 29
										},
										{
											"begin": 2128,
											"end": 2137,
											"name": "DUP1",
											"source": 29
										},
										{
											"begin": 2121,
											"end": 2138,
											"name": "ISZERO",
											"source": 29
										},
										{
											"begin": 2115,
											"end": 2119,
											"name": "PUSH",
											"source": 29,
											"value": "20"
										},
										{
											"begin": 2111,
											"end": 2139,
											"name": "MUL",
											"source": 29
										},
										{
											"begin": 2099,
											"end": 2108,
											"name": "DUP2",
											"source": 29
										},
										{
											"begin": 2088,
											"end": 2097,
											"name": "DUP5",
											"source": 29
										},
										{
											"begin": 2084,
											"end": 2109,
											"name": "ADD",
											"source": 29
										},
										{
											"begin": 2080,
											"end": 2140,
											"name": "ADD",
											"source": 29
										},
										{
											"begin": 2180,
											"end": 2187,
											"name": "DUP6",
											"source": 29
										},
										{
											"begin": 2176,
											"end": 2178,
											"name": "DUP2",
											"source": 29
										},
										{
											"begin": 2172,
											"end": 2188,
											"name": "ADD",
											"source": 29
										},
										{
											"begin": 2448,
											"end": 2454,
											"name": "DUP8",
											"source": 29
										},
										{
											"begin": 2434,
											"end": 2443,
											"name": "DUP4",
											"source": 29
										},
										{
											"begin": 2427,
											"end": 2444,
											"name": "ISZERO",
											"source": 29
										},
										{
											"begin": 2421,
											"end": 2425,
											"name": "PUSH",
											"source": 29,
											"value": "20"
										},
										{
											"begin": 2417,
											"end": 2445,
											"name": "MUL",
											"source": 29
										},
										{
											"begin": 2405,
											"end": 2414,
											"name": "DUP5",
											"source": 29
										},
										{
											"begin": 2397,
											"end": 2403,
											"name": "DUP12",
											"source": 29
										},
										{
											"begin": 2393,
											"end": 2415,
											"name": "ADD",
											"source": 29
										},
										{
											"begin": 2389,
											"end": 2446,
											"name": "ADD",
											"source": 29
										},
										{
											"begin": 2385,
											"end": 2455,
											"name": "ADD",
											"source": 29
										},
										{
											"begin": 2210,
											"end": 2671,
											"name": "tag",
											"source": 29,
											"value": "394"
										},
										{
											"begin": 2210,
											"end": 2671,
											"name": "JUMPDEST",
											"source": 29
										},
										{
											"begin": 2485,
											"end": 2488,
											"name": "DUP2",
											"source": 29
										},
										{
											"begin": 2481,
											"end": 2483,
											"name": "DUP4",
											"source": 29
										},
										{
											"begin": 2478,
											"end": 2489,
											"name": "LT",
											"source": 29
										},
										{
											"begin": 2210,
											"end": 2671,
											"name": "ISZERO",
											"source": 29
										},
										{
											"begin": 2210,
											"end": 2671,
											"name": "PUSH [tag]",
											"source": 29,
											"value": "396"
										},
										{
											"begin": 2210,
											"end": 2671,
											"name": "JUMPI",
											"source": 29
										},
										{
											"begin": 2639,
											"end": 2648,
											"name": "DUP1",
											"source": 29
										},
										{
											"begin": 2639,
											"end": 2648,
											"name": "MLOAD",
											"source": 29
										},
										{
											"begin": 2628,
											"end": 2649,
											"name": "DUP4",
											"source": 29
										},
										{
											"begin": 2628,
											"end": 2649,
											"name": "MSTORE",
											"source": 29
										},
										{
											"begin": 2530,
											"end": 2534,
											"name": "PUSH",
											"source": 29,
											"value": "20"
										},
										{
											"begin": 2522,
											"end": 2535,
											"name": "SWAP3",
											"source": 29
										},
										{
											"begin": 2522,
											"end": 2535,
											"name": "DUP4",
											"source": 29
										},
										{
											"begin": 2522,
											"end": 2535,
											"name": "ADD",
											"source": 29
										},
										{
											"begin": 2522,
											"end": 2535,
											"name": "SWAP3",
											"source": 29
										},
										{
											"begin": 2566,
											"end": 2579,
											"name": "ADD",
											"source": 29
										},
										{
											"begin": 2210,
											"end": 2671,
											"name": "PUSH [tag]",
											"source": 29,
											"value": "394"
										},
										{
											"begin": 2210,
											"end": 2671,
											"name": "JUMP",
											"source": 29
										},
										{
											"begin": 2210,
											"end": 2671,
											"name": "tag",
											"source": 29,
											"value": "396"
										},
										{
											"begin": 2210,
											"end": 2671,
											"name": "JUMPDEST",
											"source": 29
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2693,
											"end": 2719,
											"name": "DUP6",
											"source": 29
										},
										{
											"begin": 2693,
											"end": 2719,
											"name": "DUP5",
											"source": 29
										},
										{
											"begin": 2693,
											"end": 2719,
											"name": "MSTORE",
											"source": 29
										},
										{
											"begin": 2913,
											"end": 2915,
											"name": "PUSH",
											"source": 29,
											"value": "1F"
										},
										{
											"begin": 2896,
											"end": 2907,
											"name": "ADD",
											"source": 29
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 2892,
											"end": 2917,
											"name": "AND",
											"source": 29
										},
										{
											"begin": 2886,
											"end": 2890,
											"name": "PUSH",
											"source": 29,
											"value": "40"
										},
										{
											"begin": 2879,
											"end": 2918,
											"name": "MSTORE",
											"source": 29
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 798,
											"end": 3363,
											"name": "tag",
											"source": 29,
											"value": "392"
										},
										{
											"begin": 798,
											"end": 3363,
											"name": "JUMPDEST",
											"source": 29
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3390,
											"end": 3399,
											"name": "SWAP5",
											"source": 29
										},
										{
											"begin": 399,
											"end": 3406,
											"name": "SWAP4",
											"source": 29
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 399,
											"end": 3406,
											"name": "JUMP",
											"source": 29,
											"value": "[out]"
										},
										{
											"begin": 3412,
											"end": 3828,
											"name": "tag",
											"source": 29,
											"value": "357"
										},
										{
											"begin": 3412,
											"end": 3828,
											"name": "JUMPDEST",
											"source": 29
										},
										{
											"begin": 3491,
											"end": 3498,
											"name": "PUSH",
											"source": 29,
											"value": "0"
										},
										{
											"begin": 3533,
											"end": 3539,
											"name": "DUP2",
											"source": 29
										},
										{
											"begin": 3518,
											"end": 3524,
											"name": "DUP3",
											"source": 29
										},
										{
											"begin": 3527,
											"end": 3529,
											"name": "PUSH",
											"source": 29,
											"value": "14"
										},
										{
											"begin": 3518,
											"end": 3529,
											"name": "ADD",
											"source": 29
										},
										{
											"begin": 3518,
											"end": 3539,
											"name": "LT",
											"source": 29
										},
										{
											"begin": 3518,
											"end": 3539,
											"name": "ISZERO",
											"source": 29
										},
										{
											"begin": 3510,
											"end": 3562,
											"name": "PUSH [tag]",
											"source": 29,
											"value": "398"
										},
										{
											"begin": 3510,
											"end": 3562,
											"name": "JUMPI",
											"source": 29
										},
										{
											"begin": 3510,
											"end": 3562,
											"name": "PUSH",
											"source": 29,
											"value": "40"
										},
										{
											"begin": 3510,
											"end": 3562,
											"name": "DUP1",
											"source": 29
										},
										{
											"begin": 3510,
											"end": 3562,
											"name": "MLOAD",
											"source": 29
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3510,
											"end": 3562,
											"name": "DUP2",
											"source": 29
										},
										{
											"begin": 3510,
											"end": 3562,
											"name": "MSTORE",
											"source": 29
										},
										{
											"begin": 3510,
											"end": 3562,
											"name": "PUSH",
											"source": 29,
											"value": "20"
										},
										{
											"begin": 3510,
											"end": 3562,
											"name": "PUSH",
											"source": 29,
											"value": "4"
										},
										{
											"begin": 3510,
											"end": 3562,
											"name": "DUP3",
											"source": 29
										},
										{
											"begin": 3510,
											"end": 3562,
											"name": "ADD",
											"source": 29
										},
										{
											"begin": 3510,
											"end": 3562,
											"name": "MSTORE",
											"source": 29
										},
										{
											"begin": 3510,
											"end": 3562,
											"name": "PUSH",
											"source": 29,
											"value": "12"
										},
										{
											"begin": 3510,
											"end": 3562,
											"name": "PUSH",
											"source": 29,
											"value": "24"
										},
										{
											"begin": 3510,
											"end": 3562,
											"name": "DUP3",
											"source": 29
										},
										{
											"begin": 3510,
											"end": 3562,
											"name": "ADD",
											"source": 29
										},
										{
											"begin": 3510,
											"end": 3562,
											"name": "MSTORE",
											"source": 29
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "746F416464726573735F6F766572666C6F77"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "70"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3510,
											"end": 3562,
											"name": "PUSH",
											"source": 29,
											"value": "44"
										},
										{
											"begin": 3510,
											"end": 3562,
											"name": "DUP3",
											"source": 29
										},
										{
											"begin": 3510,
											"end": 3562,
											"name": "ADD",
											"source": 29
										},
										{
											"begin": 3510,
											"end": 3562,
											"name": "MSTORE",
											"source": 29
										},
										{
											"begin": 3510,
											"end": 3562,
											"name": "SWAP1",
											"source": 29
										},
										{
											"begin": 3510,
											"end": 3562,
											"name": "MLOAD",
											"source": 29
										},
										{
											"begin": 3510,
											"end": 3562,
											"name": "SWAP1",
											"source": 29
										},
										{
											"begin": 3510,
											"end": 3562,
											"name": "DUP2",
											"source": 29
										},
										{
											"begin": 3510,
											"end": 3562,
											"name": "SWAP1",
											"source": 29
										},
										{
											"begin": 3510,
											"end": 3562,
											"name": "SUB",
											"source": 29
										},
										{
											"begin": 3510,
											"end": 3562,
											"name": "PUSH",
											"source": 29,
											"value": "64"
										},
										{
											"begin": 3510,
											"end": 3562,
											"name": "ADD",
											"source": 29
										},
										{
											"begin": 3510,
											"end": 3562,
											"name": "SWAP1",
											"source": 29
										},
										{
											"begin": 3510,
											"end": 3562,
											"name": "REVERT",
											"source": 29
										},
										{
											"begin": 3510,
											"end": 3562,
											"name": "tag",
											"source": 29,
											"value": "398"
										},
										{
											"begin": 3510,
											"end": 3562,
											"name": "JUMPDEST",
											"source": 29
										},
										{
											"begin": 3597,
											"end": 3603,
											"name": "DUP2",
											"source": 29
										},
										{
											"begin": 3606,
											"end": 3608,
											"name": "PUSH",
											"source": 29,
											"value": "14"
										},
										{
											"begin": 3597,
											"end": 3608,
											"name": "ADD",
											"source": 29
										},
										{
											"begin": 3580,
											"end": 3586,
											"name": "DUP4",
											"source": 29
										},
										{
											"begin": 3580,
											"end": 3593,
											"name": "MLOAD",
											"source": 29
										},
										{
											"begin": 3580,
											"end": 3608,
											"name": "LT",
											"source": 29
										},
										{
											"begin": 3580,
											"end": 3608,
											"name": "ISZERO",
											"source": 29
										},
										{
											"begin": 3572,
											"end": 3634,
											"name": "PUSH [tag]",
											"source": 29,
											"value": "399"
										},
										{
											"begin": 3572,
											"end": 3634,
											"name": "JUMPI",
											"source": 29
										},
										{
											"begin": 3572,
											"end": 3634,
											"name": "PUSH",
											"source": 29,
											"value": "40"
										},
										{
											"begin": 3572,
											"end": 3634,
											"name": "DUP1",
											"source": 29
										},
										{
											"begin": 3572,
											"end": 3634,
											"name": "MLOAD",
											"source": 29
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3572,
											"end": 3634,
											"name": "DUP2",
											"source": 29
										},
										{
											"begin": 3572,
											"end": 3634,
											"name": "MSTORE",
											"source": 29
										},
										{
											"begin": 3572,
											"end": 3634,
											"name": "PUSH",
											"source": 29,
											"value": "20"
										},
										{
											"begin": 3572,
											"end": 3634,
											"name": "PUSH",
											"source": 29,
											"value": "4"
										},
										{
											"begin": 3572,
											"end": 3634,
											"name": "DUP3",
											"source": 29
										},
										{
											"begin": 3572,
											"end": 3634,
											"name": "ADD",
											"source": 29
										},
										{
											"begin": 3572,
											"end": 3634,
											"name": "MSTORE",
											"source": 29
										},
										{
											"begin": 3572,
											"end": 3634,
											"name": "PUSH",
											"source": 29,
											"value": "15"
										},
										{
											"begin": 3572,
											"end": 3634,
											"name": "PUSH",
											"source": 29,
											"value": "24"
										},
										{
											"begin": 3572,
											"end": 3634,
											"name": "DUP3",
											"source": 29
										},
										{
											"begin": 3572,
											"end": 3634,
											"name": "ADD",
											"source": 29
										},
										{
											"begin": 3572,
											"end": 3634,
											"name": "MSTORE",
											"source": 29
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "746F416464726573735F6F75744F66426F756E6473"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "58"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3572,
											"end": 3634,
											"name": "PUSH",
											"source": 29,
											"value": "44"
										},
										{
											"begin": 3572,
											"end": 3634,
											"name": "DUP3",
											"source": 29
										},
										{
											"begin": 3572,
											"end": 3634,
											"name": "ADD",
											"source": 29
										},
										{
											"begin": 3572,
											"end": 3634,
											"name": "MSTORE",
											"source": 29
										},
										{
											"begin": 3572,
											"end": 3634,
											"name": "SWAP1",
											"source": 29
										},
										{
											"begin": 3572,
											"end": 3634,
											"name": "MLOAD",
											"source": 29
										},
										{
											"begin": 3572,
											"end": 3634,
											"name": "SWAP1",
											"source": 29
										},
										{
											"begin": 3572,
											"end": 3634,
											"name": "DUP2",
											"source": 29
										},
										{
											"begin": 3572,
											"end": 3634,
											"name": "SWAP1",
											"source": 29
										},
										{
											"begin": 3572,
											"end": 3634,
											"name": "SUB",
											"source": 29
										},
										{
											"begin": 3572,
											"end": 3634,
											"name": "PUSH",
											"source": 29,
											"value": "64"
										},
										{
											"begin": 3572,
											"end": 3634,
											"name": "ADD",
											"source": 29
										},
										{
											"begin": 3572,
											"end": 3634,
											"name": "SWAP1",
											"source": 29
										},
										{
											"begin": 3572,
											"end": 3634,
											"name": "REVERT",
											"source": 29
										},
										{
											"begin": 3572,
											"end": 3634,
											"name": "tag",
											"source": 29,
											"value": "399"
										},
										{
											"begin": 3572,
											"end": 3634,
											"name": "JUMPDEST",
											"source": 29
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3722,
											"end": 3752,
											"name": "ADD",
											"source": 29
										},
										{
											"begin": 3738,
											"end": 3742,
											"name": "PUSH",
											"source": 29,
											"value": "20"
										},
										{
											"begin": 3722,
											"end": 3752,
											"name": "ADD",
											"source": 29
										},
										{
											"begin": 3716,
											"end": 3753,
											"name": "MLOAD",
											"source": 29
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "60"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3712,
											"end": 3783,
											"name": "SWAP1",
											"source": 29
										},
										{
											"begin": 3712,
											"end": 3783,
											"name": "DIV",
											"source": 29
										},
										{
											"begin": 3712,
											"end": 3783,
											"name": "SWAP1",
											"source": 29
										},
										{
											"begin": 3412,
											"end": 3828,
											"name": "JUMP",
											"source": 29,
											"value": "[out]"
										},
										{
											"begin": 3834,
											"end": 4199,
											"name": "tag",
											"source": 29,
											"value": "359"
										},
										{
											"begin": 3834,
											"end": 4199,
											"name": "JUMPDEST",
											"source": 29
										},
										{
											"begin": 3912,
											"end": 3918,
											"name": "PUSH",
											"source": 29,
											"value": "0"
										},
										{
											"begin": 3952,
											"end": 3958,
											"name": "DUP2",
											"source": 29
										},
										{
											"begin": 3938,
											"end": 3944,
											"name": "DUP3",
											"source": 29
										},
										{
											"begin": 3947,
											"end": 3948,
											"name": "PUSH",
											"source": 29,
											"value": "3"
										},
										{
											"begin": 3938,
											"end": 3948,
											"name": "ADD",
											"source": 29
										},
										{
											"begin": 3938,
											"end": 3958,
											"name": "LT",
											"source": 29
										},
										{
											"begin": 3938,
											"end": 3958,
											"name": "ISZERO",
											"source": 29
										},
										{
											"begin": 3930,
											"end": 3980,
											"name": "PUSH [tag]",
											"source": 29,
											"value": "401"
										},
										{
											"begin": 3930,
											"end": 3980,
											"name": "JUMPI",
											"source": 29
										},
										{
											"begin": 3930,
											"end": 3980,
											"name": "PUSH",
											"source": 29,
											"value": "40"
										},
										{
											"begin": 3930,
											"end": 3980,
											"name": "DUP1",
											"source": 29
										},
										{
											"begin": 3930,
											"end": 3980,
											"name": "MLOAD",
											"source": 29
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3930,
											"end": 3980,
											"name": "DUP2",
											"source": 29
										},
										{
											"begin": 3930,
											"end": 3980,
											"name": "MSTORE",
											"source": 29
										},
										{
											"begin": 3930,
											"end": 3980,
											"name": "PUSH",
											"source": 29,
											"value": "20"
										},
										{
											"begin": 3930,
											"end": 3980,
											"name": "PUSH",
											"source": 29,
											"value": "4"
										},
										{
											"begin": 3930,
											"end": 3980,
											"name": "DUP3",
											"source": 29
										},
										{
											"begin": 3930,
											"end": 3980,
											"name": "ADD",
											"source": 29
										},
										{
											"begin": 3930,
											"end": 3980,
											"name": "MSTORE",
											"source": 29
										},
										{
											"begin": 3930,
											"end": 3980,
											"name": "PUSH",
											"source": 29,
											"value": "11"
										},
										{
											"begin": 3930,
											"end": 3980,
											"name": "PUSH",
											"source": 29,
											"value": "24"
										},
										{
											"begin": 3930,
											"end": 3980,
											"name": "DUP3",
											"source": 29
										},
										{
											"begin": 3930,
											"end": 3980,
											"name": "ADD",
											"source": 29
										},
										{
											"begin": 3930,
											"end": 3980,
											"name": "MSTORE",
											"source": 29
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "746F55696E7432345F6F766572666C6F77"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "78"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3930,
											"end": 3980,
											"name": "PUSH",
											"source": 29,
											"value": "44"
										},
										{
											"begin": 3930,
											"end": 3980,
											"name": "DUP3",
											"source": 29
										},
										{
											"begin": 3930,
											"end": 3980,
											"name": "ADD",
											"source": 29
										},
										{
											"begin": 3930,
											"end": 3980,
											"name": "MSTORE",
											"source": 29
										},
										{
											"begin": 3930,
											"end": 3980,
											"name": "SWAP1",
											"source": 29
										},
										{
											"begin": 3930,
											"end": 3980,
											"name": "MLOAD",
											"source": 29
										},
										{
											"begin": 3930,
											"end": 3980,
											"name": "SWAP1",
											"source": 29
										},
										{
											"begin": 3930,
											"end": 3980,
											"name": "DUP2",
											"source": 29
										},
										{
											"begin": 3930,
											"end": 3980,
											"name": "SWAP1",
											"source": 29
										},
										{
											"begin": 3930,
											"end": 3980,
											"name": "SUB",
											"source": 29
										},
										{
											"begin": 3930,
											"end": 3980,
											"name": "PUSH",
											"source": 29,
											"value": "64"
										},
										{
											"begin": 3930,
											"end": 3980,
											"name": "ADD",
											"source": 29
										},
										{
											"begin": 3930,
											"end": 3980,
											"name": "SWAP1",
											"source": 29
										},
										{
											"begin": 3930,
											"end": 3980,
											"name": "REVERT",
											"source": 29
										},
										{
											"begin": 3930,
											"end": 3980,
											"name": "tag",
											"source": 29,
											"value": "401"
										},
										{
											"begin": 3930,
											"end": 3980,
											"name": "JUMPDEST",
											"source": 29
										},
										{
											"begin": 4015,
											"end": 4021,
											"name": "DUP2",
											"source": 29
										},
										{
											"begin": 4024,
											"end": 4025,
											"name": "PUSH",
											"source": 29,
											"value": "3"
										},
										{
											"begin": 4015,
											"end": 4025,
											"name": "ADD",
											"source": 29
										},
										{
											"begin": 3998,
											"end": 4004,
											"name": "DUP4",
											"source": 29
										},
										{
											"begin": 3998,
											"end": 4011,
											"name": "MLOAD",
											"source": 29
										},
										{
											"begin": 3998,
											"end": 4025,
											"name": "LT",
											"source": 29
										},
										{
											"begin": 3998,
											"end": 4025,
											"name": "ISZERO",
											"source": 29
										},
										{
											"begin": 3990,
											"end": 4050,
											"name": "PUSH [tag]",
											"source": 29,
											"value": "402"
										},
										{
											"begin": 3990,
											"end": 4050,
											"name": "JUMPI",
											"source": 29
										},
										{
											"begin": 3990,
											"end": 4050,
											"name": "PUSH",
											"source": 29,
											"value": "40"
										},
										{
											"begin": 3990,
											"end": 4050,
											"name": "DUP1",
											"source": 29
										},
										{
											"begin": 3990,
											"end": 4050,
											"name": "MLOAD",
											"source": 29
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3990,
											"end": 4050,
											"name": "DUP2",
											"source": 29
										},
										{
											"begin": 3990,
											"end": 4050,
											"name": "MSTORE",
											"source": 29
										},
										{
											"begin": 3990,
											"end": 4050,
											"name": "PUSH",
											"source": 29,
											"value": "20"
										},
										{
											"begin": 3990,
											"end": 4050,
											"name": "PUSH",
											"source": 29,
											"value": "4"
										},
										{
											"begin": 3990,
											"end": 4050,
											"name": "DUP3",
											"source": 29
										},
										{
											"begin": 3990,
											"end": 4050,
											"name": "ADD",
											"source": 29
										},
										{
											"begin": 3990,
											"end": 4050,
											"name": "MSTORE",
											"source": 29
										},
										{
											"begin": 3990,
											"end": 4050,
											"name": "PUSH",
											"source": 29,
											"value": "14"
										},
										{
											"begin": 3990,
											"end": 4050,
											"name": "PUSH",
											"source": 29,
											"value": "24"
										},
										{
											"begin": 3990,
											"end": 4050,
											"name": "DUP3",
											"source": 29
										},
										{
											"begin": 3990,
											"end": 4050,
											"name": "ADD",
											"source": 29
										},
										{
											"begin": 3990,
											"end": 4050,
											"name": "MSTORE",
											"source": 29
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "746F55696E7432345F6F75744F66426F756E6473"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "60"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3990,
											"end": 4050,
											"name": "PUSH",
											"source": 29,
											"value": "44"
										},
										{
											"begin": 3990,
											"end": 4050,
											"name": "DUP3",
											"source": 29
										},
										{
											"begin": 3990,
											"end": 4050,
											"name": "ADD",
											"source": 29
										},
										{
											"begin": 3990,
											"end": 4050,
											"name": "MSTORE",
											"source": 29
										},
										{
											"begin": 3990,
											"end": 4050,
											"name": "SWAP1",
											"source": 29
										},
										{
											"begin": 3990,
											"end": 4050,
											"name": "MLOAD",
											"source": 29
										},
										{
											"begin": 3990,
											"end": 4050,
											"name": "SWAP1",
											"source": 29
										},
										{
											"begin": 3990,
											"end": 4050,
											"name": "DUP2",
											"source": 29
										},
										{
											"begin": 3990,
											"end": 4050,
											"name": "SWAP1",
											"source": 29
										},
										{
											"begin": 3990,
											"end": 4050,
											"name": "SUB",
											"source": 29
										},
										{
											"begin": 3990,
											"end": 4050,
											"name": "PUSH",
											"source": 29,
											"value": "64"
										},
										{
											"begin": 3990,
											"end": 4050,
											"name": "ADD",
											"source": 29
										},
										{
											"begin": 3990,
											"end": 4050,
											"name": "SWAP1",
											"source": 29
										},
										{
											"begin": 3990,
											"end": 4050,
											"name": "REVERT",
											"source": 29
										},
										{
											"begin": 3990,
											"end": 4050,
											"name": "tag",
											"source": 29,
											"value": "402"
										},
										{
											"begin": 3990,
											"end": 4050,
											"name": "JUMPDEST",
											"source": 29
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4127,
											"end": 4156,
											"name": "ADD",
											"source": 29
										},
										{
											"begin": 4143,
											"end": 4146,
											"name": "PUSH",
											"source": 29,
											"value": "3"
										},
										{
											"begin": 4127,
											"end": 4156,
											"name": "ADD",
											"source": 29
										},
										{
											"begin": 4121,
											"end": 4157,
											"name": "MLOAD",
											"source": 29
										},
										{
											"begin": 4121,
											"end": 4157,
											"name": "SWAP1",
											"source": 29
										},
										{
											"begin": 3834,
											"end": 4199,
											"name": "JUMP",
											"source": 29,
											"value": "[out]"
										},
										{
											"begin": 784,
											"end": 1058,
											"name": "tag",
											"source": 32,
											"value": "364"
										},
										{
											"begin": 784,
											"end": 1058,
											"name": "JUMPDEST",
											"source": 32
										},
										{
											"begin": 901,
											"end": 915,
											"name": "PUSH [tag]",
											"source": 32,
											"value": "403"
										},
										{
											"begin": 901,
											"end": 915,
											"name": "PUSH [tag]",
											"source": 32,
											"value": "404"
										},
										{
											"begin": 901,
											"end": 915,
											"name": "JUMP",
											"source": 32,
											"value": "[in]"
										},
										{
											"begin": 901,
											"end": 915,
											"name": "tag",
											"source": 32,
											"value": "403"
										},
										{
											"begin": 901,
											"end": 915,
											"name": "JUMPDEST",
											"source": 32
										},
										{
											"begin": 940,
											"end": 946,
											"name": "DUP3",
											"source": 32
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 931,
											"end": 946,
											"name": "AND",
											"source": 32
										},
										{
											"begin": 931,
											"end": 937,
											"name": "DUP5",
											"source": 32
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 931,
											"end": 946,
											"name": "AND",
											"source": 32
										},
										{
											"begin": 931,
											"end": 946,
											"name": "GT",
											"source": 32
										},
										{
											"begin": 927,
											"end": 983,
											"name": "ISZERO",
											"source": 32
										},
										{
											"begin": 927,
											"end": 983,
											"name": "PUSH [tag]",
											"source": 32,
											"value": "406"
										},
										{
											"begin": 927,
											"end": 983,
											"name": "JUMPI",
											"source": 32
										},
										{
											"begin": 968,
											"end": 974,
											"name": "SWAP2",
											"source": 32
										},
										{
											"begin": 968,
											"end": 974,
											"name": "SWAP3",
											"source": 32
										},
										{
											"begin": 976,
											"end": 982,
											"name": "SWAP2",
											"source": 32
										},
										{
											"begin": 927,
											"end": 983,
											"name": "tag",
											"source": 32,
											"value": "406"
										},
										{
											"begin": 927,
											"end": 983,
											"name": "JUMPDEST",
											"source": 32
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1000,
											"end": 1051,
											"name": "PUSH",
											"source": 32,
											"value": "40"
										},
										{
											"begin": 1000,
											"end": 1051,
											"name": "DUP1",
											"source": 32
										},
										{
											"begin": 1000,
											"end": 1051,
											"name": "MLOAD",
											"source": 32
										},
										{
											"begin": 1000,
											"end": 1051,
											"name": "PUSH",
											"source": 32,
											"value": "60"
										},
										{
											"begin": 1000,
											"end": 1051,
											"name": "DUP2",
											"source": 32
										},
										{
											"begin": 1000,
											"end": 1051,
											"name": "ADD",
											"source": 32
										},
										{
											"begin": 1000,
											"end": 1051,
											"name": "DUP3",
											"source": 32
										},
										{
											"begin": 1000,
											"end": 1051,
											"name": "MSTORE",
											"source": 32
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1000,
											"end": 1051,
											"name": "SWAP5",
											"source": 32
										},
										{
											"begin": 1000,
											"end": 1051,
											"name": "DUP6",
											"source": 32
										},
										{
											"begin": 1000,
											"end": 1051,
											"name": "AND",
											"source": 32
										},
										{
											"begin": 1000,
											"end": 1051,
											"name": "DUP2",
											"source": 32
										},
										{
											"begin": 1000,
											"end": 1051,
											"name": "MSTORE",
											"source": 32
										},
										{
											"begin": 1000,
											"end": 1051,
											"name": "SWAP3",
											"source": 32
										},
										{
											"begin": 1000,
											"end": 1051,
											"name": "SWAP1",
											"source": 32
										},
										{
											"begin": 1000,
											"end": 1051,
											"name": "SWAP4",
											"source": 32
										},
										{
											"begin": 1000,
											"end": 1051,
											"name": "AND",
											"source": 32
										},
										{
											"begin": 1000,
											"end": 1051,
											"name": "PUSH",
											"source": 32,
											"value": "20"
										},
										{
											"begin": 1000,
											"end": 1051,
											"name": "DUP4",
											"source": 32
										},
										{
											"begin": 1000,
											"end": 1051,
											"name": "ADD",
											"source": 32
										},
										{
											"begin": 1000,
											"end": 1051,
											"name": "MSTORE",
											"source": 32
										},
										{
											"begin": 1000,
											"end": 1051,
											"name": "PUSH",
											"source": 32,
											"value": "FFFFFF"
										},
										{
											"begin": 1000,
											"end": 1051,
											"name": "AND",
											"source": 32
										},
										{
											"begin": 1000,
											"end": 1051,
											"name": "SWAP2",
											"source": 32
										},
										{
											"begin": 1000,
											"end": 1051,
											"name": "DUP2",
											"source": 32
										},
										{
											"begin": 1000,
											"end": 1051,
											"name": "ADD",
											"source": 32
										},
										{
											"begin": 1000,
											"end": 1051,
											"name": "SWAP2",
											"source": 32
										},
										{
											"begin": 1000,
											"end": 1051,
											"name": "SWAP1",
											"source": 32
										},
										{
											"begin": 1000,
											"end": 1051,
											"name": "SWAP2",
											"source": 32
										},
										{
											"begin": 1000,
											"end": 1051,
											"name": "MSTORE",
											"source": 32
										},
										{
											"begin": 1000,
											"end": 1051,
											"name": "SWAP1",
											"source": 32
										},
										{
											"begin": 784,
											"end": 1058,
											"name": "JUMP",
											"source": 32,
											"value": "[out]"
										},
										{
											"begin": 1189,
											"end": 1468,
											"name": "tag",
											"source": 30,
											"value": "365"
										},
										{
											"begin": 1189,
											"end": 1468,
											"name": "JUMPDEST",
											"source": 30
										},
										{
											"begin": 1313,
											"end": 1332,
											"name": "PUSH",
											"source": 30,
											"value": "0"
										},
										{
											"begin": 1370,
											"end": 1414,
											"name": "PUSH [tag]",
											"source": 30,
											"value": "408"
										},
										{
											"begin": 1397,
											"end": 1404,
											"name": "DUP4",
											"source": 30
										},
										{
											"begin": 1406,
											"end": 1413,
											"name": "DUP4",
											"source": 30
										},
										{
											"begin": 1370,
											"end": 1396,
											"name": "PUSH [tag]",
											"source": 30,
											"value": "385"
										},
										{
											"begin": 1370,
											"end": 1414,
											"name": "JUMP",
											"source": 30,
											"value": "[in]"
										},
										{
											"begin": 1370,
											"end": 1414,
											"name": "tag",
											"source": 30,
											"value": "408"
										},
										{
											"begin": 1370,
											"end": 1414,
											"name": "JUMPDEST",
											"source": 30
										},
										{
											"begin": 1348,
											"end": 1415,
											"name": "SWAP1",
											"source": 30
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1433,
											"end": 1443,
											"name": "CALLER",
											"source": 30
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1433,
											"end": 1460,
											"name": "DUP3",
											"source": 30
										},
										{
											"begin": 1433,
											"end": 1460,
											"name": "AND",
											"source": 30
										},
										{
											"begin": 1433,
											"end": 1460,
											"name": "EQ",
											"source": 30
										},
										{
											"begin": 1425,
											"end": 1461,
											"name": "PUSH [tag]",
											"source": 30,
											"value": "318"
										},
										{
											"begin": 1425,
											"end": 1461,
											"name": "JUMPI",
											"source": 30
										},
										{
											"begin": 1425,
											"end": 1461,
											"name": "PUSH",
											"source": 30,
											"value": "0"
										},
										{
											"begin": 1425,
											"end": 1461,
											"name": "DUP1",
											"source": 30
										},
										{
											"begin": 1425,
											"end": 1461,
											"name": "REVERT",
											"source": 30
										},
										{
											"begin": 561,
											"end": 919,
											"name": "tag",
											"source": 33,
											"value": "381"
										},
										{
											"begin": 561,
											"end": 919,
											"name": "JUMPDEST",
											"source": 33
										},
										{
											"begin": 759,
											"end": 828,
											"name": "PUSH",
											"source": 33,
											"value": "40"
										},
										{
											"begin": 759,
											"end": 828,
											"name": "DUP1",
											"source": 33
										},
										{
											"begin": 759,
											"end": 828,
											"name": "MLOAD",
											"source": 33
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 759,
											"end": 828,
											"name": "DUP6",
											"source": 33
										},
										{
											"begin": 759,
											"end": 828,
											"name": "DUP2",
											"source": 33
										},
										{
											"begin": 759,
											"end": 828,
											"name": "AND",
											"source": 33
										},
										{
											"begin": 759,
											"end": 828,
											"name": "PUSH",
											"source": 33,
											"value": "24"
										},
										{
											"begin": 759,
											"end": 828,
											"name": "DUP4",
											"source": 33
										},
										{
											"begin": 759,
											"end": 828,
											"name": "ADD",
											"source": 33
										},
										{
											"begin": 759,
											"end": 828,
											"name": "MSTORE",
											"source": 33
										},
										{
											"begin": 759,
											"end": 828,
											"name": "DUP5",
											"source": 33
										},
										{
											"begin": 759,
											"end": 828,
											"name": "DUP2",
											"source": 33
										},
										{
											"begin": 759,
											"end": 828,
											"name": "AND",
											"source": 33
										},
										{
											"begin": 759,
											"end": 828,
											"name": "PUSH",
											"source": 33,
											"value": "44"
										},
										{
											"begin": 759,
											"end": 828,
											"name": "DUP4",
											"source": 33
										},
										{
											"begin": 759,
											"end": 828,
											"name": "ADD",
											"source": 33
										},
										{
											"begin": 759,
											"end": 828,
											"name": "MSTORE",
											"source": 33
										},
										{
											"begin": 759,
											"end": 828,
											"name": "PUSH",
											"source": 33,
											"value": "64"
										},
										{
											"begin": 759,
											"end": 828,
											"name": "DUP1",
											"source": 33
										},
										{
											"begin": 759,
											"end": 828,
											"name": "DUP4",
											"source": 33
										},
										{
											"begin": 759,
											"end": 828,
											"name": "ADD",
											"source": 33
										},
										{
											"begin": 759,
											"end": 828,
											"name": "DUP6",
											"source": 33
										},
										{
											"begin": 759,
											"end": 828,
											"name": "SWAP1",
											"source": 33
										},
										{
											"begin": 759,
											"end": 828,
											"name": "MSTORE",
											"source": 33
										},
										{
											"begin": 759,
											"end": 828,
											"name": "DUP4",
											"source": 33
										},
										{
											"begin": 759,
											"end": 828,
											"name": "MLOAD",
											"source": 33
										},
										{
											"begin": 759,
											"end": 828,
											"name": "DUP1",
											"source": 33
										},
										{
											"begin": 759,
											"end": 828,
											"name": "DUP5",
											"source": 33
										},
										{
											"begin": 759,
											"end": 828,
											"name": "SUB",
											"source": 33
										},
										{
											"begin": 759,
											"end": 828,
											"name": "SWAP1",
											"source": 33
										},
										{
											"begin": 759,
											"end": 828,
											"name": "SWAP2",
											"source": 33
										},
										{
											"begin": 759,
											"end": 828,
											"name": "ADD",
											"source": 33
										},
										{
											"begin": 759,
											"end": 828,
											"name": "DUP2",
											"source": 33
										},
										{
											"begin": 759,
											"end": 828,
											"name": "MSTORE",
											"source": 33
										},
										{
											"begin": 759,
											"end": 828,
											"name": "PUSH",
											"source": 33,
											"value": "84"
										},
										{
											"begin": 759,
											"end": 828,
											"name": "SWAP1",
											"source": 33
										},
										{
											"begin": 759,
											"end": 828,
											"name": "SWAP3",
											"source": 33
										},
										{
											"begin": 759,
											"end": 828,
											"name": "ADD",
											"source": 33
										},
										{
											"begin": 759,
											"end": 828,
											"name": "DUP4",
											"source": 33
										},
										{
											"begin": 759,
											"end": 828,
											"name": "MSTORE",
											"source": 33
										},
										{
											"begin": 759,
											"end": 828,
											"name": "PUSH",
											"source": 33,
											"value": "20"
										},
										{
											"begin": 759,
											"end": 828,
											"name": "DUP3",
											"source": 33
										},
										{
											"begin": 759,
											"end": 828,
											"name": "ADD",
											"source": 33
										},
										{
											"begin": 759,
											"end": 828,
											"name": "DUP1",
											"source": 33
										},
										{
											"begin": 759,
											"end": 828,
											"name": "MLOAD",
											"source": 33
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 759,
											"end": 828,
											"name": "AND",
											"source": 33
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "23B872DD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 759,
											"end": 828,
											"name": "OR",
											"source": 33
										},
										{
											"begin": 759,
											"end": 828,
											"name": "DUP2",
											"source": 33
										},
										{
											"begin": 759,
											"end": 828,
											"name": "MSTORE",
											"source": 33
										},
										{
											"begin": 748,
											"end": 829,
											"name": "SWAP3",
											"source": 33
										},
										{
											"begin": 748,
											"end": 829,
											"name": "MLOAD",
											"source": 33
										},
										{
											"begin": 748,
											"end": 829,
											"name": "DUP3",
											"source": 33
										},
										{
											"begin": 748,
											"end": 829,
											"name": "MLOAD",
											"source": 33
										},
										{
											"begin": 701,
											"end": 713,
											"name": "PUSH",
											"source": 33,
											"value": "0"
										},
										{
											"begin": 701,
											"end": 713,
											"name": "SWAP5",
											"source": 33
										},
										{
											"begin": 701,
											"end": 713,
											"name": "DUP6",
											"source": 33
										},
										{
											"begin": 701,
											"end": 713,
											"name": "SWAP5",
											"source": 33
										},
										{
											"begin": 748,
											"end": 758,
											"name": "SWAP4",
											"source": 33
										},
										{
											"begin": 748,
											"end": 758,
											"name": "DUP11",
											"source": 33
										},
										{
											"begin": 748,
											"end": 758,
											"name": "AND",
											"source": 33
										},
										{
											"begin": 748,
											"end": 758,
											"name": "SWAP4",
											"source": 33
										},
										{
											"begin": 759,
											"end": 828,
											"name": "SWAP3",
											"source": 33
										},
										{
											"begin": 748,
											"end": 829,
											"name": "SWAP2",
											"source": 33
										},
										{
											"begin": 748,
											"end": 829,
											"name": "DUP3",
											"source": 33
										},
										{
											"begin": 748,
											"end": 829,
											"name": "SWAP2",
											"source": 33
										},
										{
											"begin": 759,
											"end": 828,
											"name": "SWAP1",
											"source": 33
										},
										{
											"begin": 748,
											"end": 829,
											"name": "DUP1",
											"source": 33
										},
										{
											"begin": 748,
											"end": 829,
											"name": "DUP4",
											"source": 33
										},
										{
											"begin": 759,
											"end": 828,
											"name": "DUP4",
											"source": 33
										},
										{
											"begin": 748,
											"end": 829,
											"name": "tag",
											"source": 33,
											"value": "411"
										},
										{
											"begin": 748,
											"end": 829,
											"name": "JUMPDEST",
											"source": 33
										},
										{
											"begin": 748,
											"end": 829,
											"name": "PUSH",
											"source": 33,
											"value": "20"
										},
										{
											"begin": 748,
											"end": 829,
											"name": "DUP4",
											"source": 33
										},
										{
											"begin": 748,
											"end": 829,
											"name": "LT",
											"source": 33
										},
										{
											"begin": 748,
											"end": 829,
											"name": "PUSH [tag]",
											"source": 33,
											"value": "413"
										},
										{
											"begin": 748,
											"end": 829,
											"name": "JUMPI",
											"source": 33
										},
										{
											"begin": 748,
											"end": 829,
											"name": "DUP1",
											"source": 33
										},
										{
											"begin": 748,
											"end": 829,
											"name": "MLOAD",
											"source": 33
										},
										{
											"begin": 748,
											"end": 829,
											"name": "DUP3",
											"source": 33
										},
										{
											"begin": 748,
											"end": 829,
											"name": "MSTORE",
											"source": 33
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 748,
											"end": 829,
											"name": "SWAP1",
											"source": 33
										},
										{
											"begin": 748,
											"end": 829,
											"name": "SWAP3",
											"source": 33
										},
										{
											"begin": 748,
											"end": 829,
											"name": "ADD",
											"source": 33
										},
										{
											"begin": 748,
											"end": 829,
											"name": "SWAP2",
											"source": 33
										},
										{
											"begin": 748,
											"end": 829,
											"name": "PUSH",
											"source": 33,
											"value": "20"
										},
										{
											"begin": 748,
											"end": 829,
											"name": "SWAP2",
											"source": 33
										},
										{
											"begin": 748,
											"end": 829,
											"name": "DUP3",
											"source": 33
										},
										{
											"begin": 748,
											"end": 829,
											"name": "ADD",
											"source": 33
										},
										{
											"begin": 748,
											"end": 829,
											"name": "SWAP2",
											"source": 33
										},
										{
											"begin": 748,
											"end": 829,
											"name": "ADD",
											"source": 33
										},
										{
											"begin": 748,
											"end": 829,
											"name": "PUSH [tag]",
											"source": 33,
											"value": "411"
										},
										{
											"begin": 748,
											"end": 829,
											"name": "JUMP",
											"source": 33
										},
										{
											"begin": 748,
											"end": 829,
											"name": "tag",
											"source": 33,
											"value": "413"
										},
										{
											"begin": 748,
											"end": 829,
											"name": "JUMPDEST",
											"source": 33
										},
										{
											"begin": 748,
											"end": 829,
											"name": "PUSH",
											"source": 33,
											"value": "1"
										},
										{
											"begin": 748,
											"end": 829,
											"name": "DUP4",
											"source": 33
										},
										{
											"begin": 748,
											"end": 829,
											"name": "PUSH",
											"source": 33,
											"value": "20"
										},
										{
											"begin": 748,
											"end": 829,
											"name": "SUB",
											"source": 33
										},
										{
											"begin": 748,
											"end": 829,
											"name": "PUSH",
											"source": 33,
											"value": "100"
										},
										{
											"begin": 748,
											"end": 829,
											"name": "EXP",
											"source": 33
										},
										{
											"begin": 748,
											"end": 829,
											"name": "SUB",
											"source": 33
										},
										{
											"begin": 748,
											"end": 829,
											"name": "DUP1",
											"source": 33
										},
										{
											"begin": 748,
											"end": 829,
											"name": "NOT",
											"source": 33
										},
										{
											"begin": 748,
											"end": 829,
											"name": "DUP3",
											"source": 33
										},
										{
											"begin": 748,
											"end": 829,
											"name": "MLOAD",
											"source": 33
										},
										{
											"begin": 748,
											"end": 829,
											"name": "AND",
											"source": 33
										},
										{
											"begin": 748,
											"end": 829,
											"name": "DUP2",
											"source": 33
										},
										{
											"begin": 748,
											"end": 829,
											"name": "DUP5",
											"source": 33
										},
										{
											"begin": 748,
											"end": 829,
											"name": "MLOAD",
											"source": 33
										},
										{
											"begin": 748,
											"end": 829,
											"name": "AND",
											"source": 33
										},
										{
											"begin": 748,
											"end": 829,
											"name": "DUP1",
											"source": 33
										},
										{
											"begin": 748,
											"end": 829,
											"name": "DUP3",
											"source": 33
										},
										{
											"begin": 748,
											"end": 829,
											"name": "OR",
											"source": 33
										},
										{
											"begin": 748,
											"end": 829,
											"name": "DUP6",
											"source": 33
										},
										{
											"begin": 748,
											"end": 829,
											"name": "MSTORE",
											"source": 33
										},
										{
											"begin": 748,
											"end": 829,
											"name": "POP",
											"source": 33
										},
										{
											"begin": 748,
											"end": 829,
											"name": "POP",
											"source": 33
										},
										{
											"begin": 748,
											"end": 829,
											"name": "POP",
											"source": 33
										},
										{
											"begin": 748,
											"end": 829,
											"name": "POP",
											"source": 33
										},
										{
											"begin": 748,
											"end": 829,
											"name": "POP",
											"source": 33
										},
										{
											"begin": 748,
											"end": 829,
											"name": "POP",
											"source": 33
										},
										{
											"begin": 748,
											"end": 829,
											"name": "SWAP1",
											"source": 33
										},
										{
											"begin": 748,
											"end": 829,
											"name": "POP",
											"source": 33
										},
										{
											"begin": 748,
											"end": 829,
											"name": "ADD",
											"source": 33
										},
										{
											"begin": 748,
											"end": 829,
											"name": "SWAP2",
											"source": 33
										},
										{
											"begin": 748,
											"end": 829,
											"name": "POP",
											"source": 33
										},
										{
											"begin": 748,
											"end": 829,
											"name": "POP",
											"source": 33
										},
										{
											"begin": 748,
											"end": 829,
											"name": "PUSH",
											"source": 33,
											"value": "0"
										},
										{
											"begin": 748,
											"end": 829,
											"name": "PUSH",
											"source": 33,
											"value": "40"
										},
										{
											"begin": 748,
											"end": 829,
											"name": "MLOAD",
											"source": 33
										},
										{
											"begin": 748,
											"end": 829,
											"name": "DUP1",
											"source": 33
										},
										{
											"begin": 748,
											"end": 829,
											"name": "DUP4",
											"source": 33
										},
										{
											"begin": 748,
											"end": 829,
											"name": "SUB",
											"source": 33
										},
										{
											"begin": 748,
											"end": 829,
											"name": "DUP2",
											"source": 33
										},
										{
											"begin": 748,
											"end": 829,
											"name": "PUSH",
											"source": 33,
											"value": "0"
										},
										{
											"begin": 748,
											"end": 829,
											"name": "DUP7",
											"source": 33
										},
										{
											"begin": 748,
											"end": 829,
											"name": "GAS",
											"source": 33
										},
										{
											"begin": 748,
											"end": 829,
											"name": "CALL",
											"source": 33
										},
										{
											"begin": 748,
											"end": 829,
											"name": "SWAP2",
											"source": 33
										},
										{
											"begin": 748,
											"end": 829,
											"name": "POP",
											"source": 33
										},
										{
											"begin": 748,
											"end": 829,
											"name": "POP",
											"source": 33
										},
										{
											"begin": 748,
											"end": 829,
											"name": "RETURNDATASIZE",
											"source": 33
										},
										{
											"begin": 748,
											"end": 829,
											"name": "DUP1",
											"source": 33
										},
										{
											"begin": 748,
											"end": 829,
											"name": "PUSH",
											"source": 33,
											"value": "0"
										},
										{
											"begin": 748,
											"end": 829,
											"name": "DUP2",
											"source": 33
										},
										{
											"begin": 748,
											"end": 829,
											"name": "EQ",
											"source": 33
										},
										{
											"begin": 748,
											"end": 829,
											"name": "PUSH [tag]",
											"source": 33,
											"value": "416"
										},
										{
											"begin": 748,
											"end": 829,
											"name": "JUMPI",
											"source": 33
										},
										{
											"begin": 748,
											"end": 829,
											"name": "PUSH",
											"source": 33,
											"value": "40"
										},
										{
											"begin": 748,
											"end": 829,
											"name": "MLOAD",
											"source": 33
										},
										{
											"begin": 748,
											"end": 829,
											"name": "SWAP2",
											"source": 33
										},
										{
											"begin": 748,
											"end": 829,
											"name": "POP",
											"source": 33
										},
										{
											"begin": 748,
											"end": 829,
											"name": "PUSH",
											"source": 33,
											"value": "1F"
										},
										{
											"begin": 748,
											"end": 829,
											"name": "NOT",
											"source": 33
										},
										{
											"begin": 748,
											"end": 829,
											"name": "PUSH",
											"source": 33,
											"value": "3F"
										},
										{
											"begin": 748,
											"end": 829,
											"name": "RETURNDATASIZE",
											"source": 33
										},
										{
											"begin": 748,
											"end": 829,
											"name": "ADD",
											"source": 33
										},
										{
											"begin": 748,
											"end": 829,
											"name": "AND",
											"source": 33
										},
										{
											"begin": 748,
											"end": 829,
											"name": "DUP3",
											"source": 33
										},
										{
											"begin": 748,
											"end": 829,
											"name": "ADD",
											"source": 33
										},
										{
											"begin": 748,
											"end": 829,
											"name": "PUSH",
											"source": 33,
											"value": "40"
										},
										{
											"begin": 748,
											"end": 829,
											"name": "MSTORE",
											"source": 33
										},
										{
											"begin": 748,
											"end": 829,
											"name": "RETURNDATASIZE",
											"source": 33
										},
										{
											"begin": 748,
											"end": 829,
											"name": "DUP3",
											"source": 33
										},
										{
											"begin": 748,
											"end": 829,
											"name": "MSTORE",
											"source": 33
										},
										{
											"begin": 748,
											"end": 829,
											"name": "RETURNDATASIZE",
											"source": 33
										},
										{
											"begin": 748,
											"end": 829,
											"name": "PUSH",
											"source": 33,
											"value": "0"
										},
										{
											"begin": 748,
											"end": 829,
											"name": "PUSH",
											"source": 33,
											"value": "20"
										},
										{
											"begin": 748,
											"end": 829,
											"name": "DUP5",
											"source": 33
										},
										{
											"begin": 748,
											"end": 829,
											"name": "ADD",
											"source": 33
										},
										{
											"begin": 748,
											"end": 829,
											"name": "RETURNDATACOPY",
											"source": 33
										},
										{
											"begin": 748,
											"end": 829,
											"name": "PUSH [tag]",
											"source": 33,
											"value": "415"
										},
										{
											"begin": 748,
											"end": 829,
											"name": "JUMP",
											"source": 33
										},
										{
											"begin": 748,
											"end": 829,
											"name": "tag",
											"source": 33,
											"value": "416"
										},
										{
											"begin": 748,
											"end": 829,
											"name": "JUMPDEST",
											"source": 33
										},
										{
											"begin": 748,
											"end": 829,
											"name": "PUSH",
											"source": 33,
											"value": "60"
										},
										{
											"begin": 748,
											"end": 829,
											"name": "SWAP2",
											"source": 33
										},
										{
											"begin": 748,
											"end": 829,
											"name": "POP",
											"source": 33
										},
										{
											"begin": 748,
											"end": 829,
											"name": "tag",
											"source": 33,
											"value": "415"
										},
										{
											"begin": 748,
											"end": 829,
											"name": "JUMPDEST",
											"source": 33
										},
										{
											"begin": 748,
											"end": 829,
											"name": "POP",
											"source": 33
										},
										{
											"begin": 700,
											"end": 829,
											"name": "SWAP2",
											"source": 33
										},
										{
											"begin": 700,
											"end": 829,
											"name": "POP",
											"source": 33
										},
										{
											"begin": 700,
											"end": 829,
											"name": "SWAP2",
											"source": 33
										},
										{
											"begin": 700,
											"end": 829,
											"name": "POP",
											"source": 33
										},
										{
											"begin": 847,
											"end": 854,
											"name": "DUP2",
											"source": 33
										},
										{
											"begin": 847,
											"end": 904,
											"name": "DUP1",
											"source": 33
										},
										{
											"begin": 847,
											"end": 904,
											"name": "ISZERO",
											"source": 33
										},
										{
											"begin": 847,
											"end": 904,
											"name": "PUSH [tag]",
											"source": 33,
											"value": "418"
										},
										{
											"begin": 847,
											"end": 904,
											"name": "JUMPI",
											"source": 33
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 859,
											"end": 870,
											"name": "DUP1",
											"source": 33
										},
										{
											"begin": 859,
											"end": 870,
											"name": "MLOAD",
											"source": 33
										},
										{
											"begin": 859,
											"end": 875,
											"name": "ISZERO",
											"source": 33
										},
										{
											"begin": 859,
											"end": 875,
											"name": "DUP1",
											"source": 33
										},
										{
											"begin": 859,
											"end": 903,
											"name": "PUSH [tag]",
											"source": 33,
											"value": "418"
										},
										{
											"begin": 859,
											"end": 903,
											"name": "JUMPI",
											"source": 33
										},
										{
											"begin": 859,
											"end": 903,
											"name": "POP",
											"source": 33
										},
										{
											"begin": 890,
											"end": 894,
											"name": "DUP1",
											"source": 33
										},
										{
											"begin": 879,
											"end": 903,
											"name": "DUP1",
											"source": 33
										},
										{
											"begin": 879,
											"end": 903,
											"name": "PUSH",
											"source": 33,
											"value": "20"
										},
										{
											"begin": 879,
											"end": 903,
											"name": "ADD",
											"source": 33
										},
										{
											"begin": 879,
											"end": 903,
											"name": "SWAP1",
											"source": 33
										},
										{
											"begin": 879,
											"end": 903,
											"name": "MLOAD",
											"source": 33
										},
										{
											"begin": 879,
											"end": 903,
											"name": "PUSH",
											"source": 33,
											"value": "20"
										},
										{
											"begin": 879,
											"end": 903,
											"name": "DUP2",
											"source": 33
										},
										{
											"begin": 879,
											"end": 903,
											"name": "LT",
											"source": 33
										},
										{
											"begin": 879,
											"end": 903,
											"name": "ISZERO",
											"source": 33
										},
										{
											"begin": 879,
											"end": 903,
											"name": "PUSH [tag]",
											"source": 33,
											"value": "419"
										},
										{
											"begin": 879,
											"end": 903,
											"name": "JUMPI",
											"source": 33
										},
										{
											"begin": 879,
											"end": 903,
											"name": "PUSH",
											"source": 33,
											"value": "0"
										},
										{
											"begin": 879,
											"end": 903,
											"name": "DUP1",
											"source": 33
										},
										{
											"begin": 879,
											"end": 903,
											"name": "REVERT",
											"source": 33
										},
										{
											"begin": 879,
											"end": 903,
											"name": "tag",
											"source": 33,
											"value": "419"
										},
										{
											"begin": 879,
											"end": 903,
											"name": "JUMPDEST",
											"source": 33
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 879,
											"end": 903,
											"name": "MLOAD",
											"source": 33
										},
										{
											"begin": 859,
											"end": 903,
											"name": "tag",
											"source": 33,
											"value": "418"
										},
										{
											"begin": 859,
											"end": 903,
											"name": "JUMPDEST",
											"source": 33
										},
										{
											"begin": 839,
											"end": 912,
											"name": "PUSH [tag]",
											"source": 33,
											"value": "154"
										},
										{
											"begin": 839,
											"end": 912,
											"name": "JUMPI",
											"source": 33
										},
										{
											"begin": 839,
											"end": 912,
											"name": "PUSH",
											"source": 33,
											"value": "40"
										},
										{
											"begin": 839,
											"end": 912,
											"name": "DUP1",
											"source": 33
										},
										{
											"begin": 839,
											"end": 912,
											"name": "MLOAD",
											"source": 33
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 839,
											"end": 912,
											"name": "DUP2",
											"source": 33
										},
										{
											"begin": 839,
											"end": 912,
											"name": "MSTORE",
											"source": 33
										},
										{
											"begin": 839,
											"end": 912,
											"name": "PUSH",
											"source": 33,
											"value": "20"
										},
										{
											"begin": 839,
											"end": 912,
											"name": "PUSH",
											"source": 33,
											"value": "4"
										},
										{
											"begin": 839,
											"end": 912,
											"name": "DUP3",
											"source": 33
										},
										{
											"begin": 839,
											"end": 912,
											"name": "ADD",
											"source": 33
										},
										{
											"begin": 839,
											"end": 912,
											"name": "MSTORE",
											"source": 33
										},
										{
											"begin": 839,
											"end": 912,
											"name": "PUSH",
											"source": 33,
											"value": "3"
										},
										{
											"begin": 839,
											"end": 912,
											"name": "PUSH",
											"source": 33,
											"value": "24"
										},
										{
											"begin": 839,
											"end": 912,
											"name": "DUP3",
											"source": 33
										},
										{
											"begin": 839,
											"end": 912,
											"name": "ADD",
											"source": 33
										},
										{
											"begin": 839,
											"end": 912,
											"name": "MSTORE",
											"source": 33
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "29AA23"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E9"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 839,
											"end": 912,
											"name": "PUSH",
											"source": 33,
											"value": "44"
										},
										{
											"begin": 839,
											"end": 912,
											"name": "DUP3",
											"source": 33
										},
										{
											"begin": 839,
											"end": 912,
											"name": "ADD",
											"source": 33
										},
										{
											"begin": 839,
											"end": 912,
											"name": "MSTORE",
											"source": 33
										},
										{
											"begin": 839,
											"end": 912,
											"name": "SWAP1",
											"source": 33
										},
										{
											"begin": 839,
											"end": 912,
											"name": "MLOAD",
											"source": 33
										},
										{
											"begin": 839,
											"end": 912,
											"name": "SWAP1",
											"source": 33
										},
										{
											"begin": 839,
											"end": 912,
											"name": "DUP2",
											"source": 33
										},
										{
											"begin": 839,
											"end": 912,
											"name": "SWAP1",
											"source": 33
										},
										{
											"begin": 839,
											"end": 912,
											"name": "SUB",
											"source": 33
										},
										{
											"begin": 839,
											"end": 912,
											"name": "PUSH",
											"source": 33,
											"value": "64"
										},
										{
											"begin": 839,
											"end": 912,
											"name": "ADD",
											"source": 33
										},
										{
											"begin": 839,
											"end": 912,
											"name": "SWAP1",
											"source": 33
										},
										{
											"begin": 839,
											"end": 912,
											"name": "REVERT",
											"source": 33
										},
										{
											"begin": 1305,
											"end": 1817,
											"name": "tag",
											"source": 32,
											"value": "385"
										},
										{
											"begin": 1305,
											"end": 1817,
											"name": "JUMPDEST",
											"source": 32
										},
										{
											"begin": 1389,
											"end": 1401,
											"name": "PUSH",
											"source": 32,
											"value": "0"
										},
										{
											"begin": 1434,
											"end": 1437,
											"name": "DUP2",
											"source": 32
										},
										{
											"begin": 1434,
											"end": 1444,
											"name": "PUSH",
											"source": 32,
											"value": "20"
										},
										{
											"begin": 1434,
											"end": 1444,
											"name": "ADD",
											"source": 32
										},
										{
											"begin": 1434,
											"end": 1444,
											"name": "MLOAD",
											"source": 32
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1421,
											"end": 1444,
											"name": "AND",
											"source": 32
										},
										{
											"begin": 1421,
											"end": 1424,
											"name": "DUP3",
											"source": 32
										},
										{
											"begin": 1421,
											"end": 1431,
											"name": "PUSH",
											"source": 32,
											"value": "0"
										},
										{
											"begin": 1421,
											"end": 1431,
											"name": "ADD",
											"source": 32
										},
										{
											"begin": 1421,
											"end": 1431,
											"name": "MLOAD",
											"source": 32
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1421,
											"end": 1444,
											"name": "AND",
											"source": 32
										},
										{
											"begin": 1421,
											"end": 1444,
											"name": "LT",
											"source": 32
										},
										{
											"begin": 1413,
											"end": 1445,
											"name": "PUSH [tag]",
											"source": 32,
											"value": "422"
										},
										{
											"begin": 1413,
											"end": 1445,
											"name": "JUMPI",
											"source": 32
										},
										{
											"begin": 1413,
											"end": 1445,
											"name": "PUSH",
											"source": 32,
											"value": "0"
										},
										{
											"begin": 1413,
											"end": 1445,
											"name": "DUP1",
											"source": 32
										},
										{
											"begin": 1413,
											"end": 1445,
											"name": "REVERT",
											"source": 32
										},
										{
											"begin": 1413,
											"end": 1445,
											"name": "tag",
											"source": 32,
											"value": "422"
										},
										{
											"begin": 1413,
											"end": 1445,
											"name": "JUMPDEST",
											"source": 32
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1668,
											"end": 1678,
											"name": "DUP1",
											"source": 32
										},
										{
											"begin": 1668,
											"end": 1678,
											"name": "MLOAD",
											"source": 32
										},
										{
											"begin": 1680,
											"end": 1690,
											"name": "PUSH",
											"source": 32,
											"value": "20"
										},
										{
											"begin": 1680,
											"end": 1690,
											"name": "DUP1",
											"source": 32
										},
										{
											"begin": 1680,
											"end": 1690,
											"name": "DUP4",
											"source": 32
										},
										{
											"begin": 1680,
											"end": 1690,
											"name": "ADD",
											"source": 32
										},
										{
											"begin": 1680,
											"end": 1690,
											"name": "MLOAD",
											"source": 32
										},
										{
											"begin": 1692,
											"end": 1699,
											"name": "PUSH",
											"source": 32,
											"value": "40"
										},
										{
											"begin": 1692,
											"end": 1699,
											"name": "SWAP4",
											"source": 32
										},
										{
											"begin": 1692,
											"end": 1699,
											"name": "DUP5",
											"source": 32
										},
										{
											"begin": 1692,
											"end": 1699,
											"name": "ADD",
											"source": 32
										},
										{
											"begin": 1692,
											"end": 1699,
											"name": "MLOAD",
											"source": 32
										},
										{
											"begin": 1657,
											"end": 1700,
											"name": "DUP5",
											"source": 32
										},
										{
											"begin": 1657,
											"end": 1700,
											"name": "MLOAD",
											"source": 32
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1657,
											"end": 1700,
											"name": "SWAP5",
											"source": 32
										},
										{
											"begin": 1657,
											"end": 1700,
											"name": "DUP6",
											"source": 32
										},
										{
											"begin": 1657,
											"end": 1700,
											"name": "AND",
											"source": 32
										},
										{
											"begin": 1657,
											"end": 1700,
											"name": "DUP2",
											"source": 32
										},
										{
											"begin": 1657,
											"end": 1700,
											"name": "DUP6",
											"source": 32
										},
										{
											"begin": 1657,
											"end": 1700,
											"name": "ADD",
											"source": 32
										},
										{
											"begin": 1657,
											"end": 1700,
											"name": "MSTORE",
											"source": 32
										},
										{
											"begin": 1657,
											"end": 1700,
											"name": "SWAP4",
											"source": 32
										},
										{
											"begin": 1657,
											"end": 1700,
											"name": "SWAP1",
											"source": 32
										},
										{
											"begin": 1657,
											"end": 1700,
											"name": "SWAP2",
											"source": 32
										},
										{
											"begin": 1657,
											"end": 1700,
											"name": "AND",
											"source": 32
										},
										{
											"begin": 1657,
											"end": 1700,
											"name": "DUP4",
											"source": 32
										},
										{
											"begin": 1657,
											"end": 1700,
											"name": "DUP6",
											"source": 32
										},
										{
											"begin": 1657,
											"end": 1700,
											"name": "ADD",
											"source": 32
										},
										{
											"begin": 1657,
											"end": 1700,
											"name": "MSTORE",
											"source": 32
										},
										{
											"begin": 1657,
											"end": 1700,
											"name": "PUSH",
											"source": 32,
											"value": "FFFFFF"
										},
										{
											"begin": 1657,
											"end": 1700,
											"name": "AND",
											"source": 32
										},
										{
											"begin": 1657,
											"end": 1700,
											"name": "PUSH",
											"source": 32,
											"value": "60"
										},
										{
											"begin": 1657,
											"end": 1700,
											"name": "DUP1",
											"source": 32
										},
										{
											"begin": 1657,
											"end": 1700,
											"name": "DUP5",
											"source": 32
										},
										{
											"begin": 1657,
											"end": 1700,
											"name": "ADD",
											"source": 32
										},
										{
											"begin": 1657,
											"end": 1700,
											"name": "SWAP2",
											"source": 32
										},
										{
											"begin": 1657,
											"end": 1700,
											"name": "SWAP1",
											"source": 32
										},
										{
											"begin": 1657,
											"end": 1700,
											"name": "SWAP2",
											"source": 32
										},
										{
											"begin": 1657,
											"end": 1700,
											"name": "MSTORE",
											"source": 32
										},
										{
											"begin": 1657,
											"end": 1700,
											"name": "DUP4",
											"source": 32
										},
										{
											"begin": 1657,
											"end": 1700,
											"name": "MLOAD",
											"source": 32
										},
										{
											"begin": 1657,
											"end": 1700,
											"name": "DUP1",
											"source": 32
										},
										{
											"begin": 1657,
											"end": 1700,
											"name": "DUP5",
											"source": 32
										},
										{
											"begin": 1657,
											"end": 1700,
											"name": "SUB",
											"source": 32
										},
										{
											"begin": 1657,
											"end": 1700,
											"name": "DUP3",
											"source": 32
										},
										{
											"begin": 1657,
											"end": 1700,
											"name": "ADD",
											"source": 32
										},
										{
											"begin": 1657,
											"end": 1700,
											"name": "DUP2",
											"source": 32
										},
										{
											"begin": 1657,
											"end": 1700,
											"name": "MSTORE",
											"source": 32
										},
										{
											"begin": 1657,
											"end": 1700,
											"name": "PUSH",
											"source": 32,
											"value": "80"
										},
										{
											"begin": 1657,
											"end": 1700,
											"name": "DUP5",
											"source": 32
										},
										{
											"begin": 1657,
											"end": 1700,
											"name": "ADD",
											"source": 32
										},
										{
											"begin": 1657,
											"end": 1700,
											"name": "DUP6",
											"source": 32
										},
										{
											"begin": 1657,
											"end": 1700,
											"name": "MSTORE",
											"source": 32
										},
										{
											"begin": 1647,
											"end": 1701,
											"name": "DUP1",
											"source": 32
										},
										{
											"begin": 1647,
											"end": 1701,
											"name": "MLOAD",
											"source": 32
										},
										{
											"begin": 1647,
											"end": 1701,
											"name": "SWAP1",
											"source": 32
										},
										{
											"begin": 1647,
											"end": 1701,
											"name": "DUP4",
											"source": 32
										},
										{
											"begin": 1647,
											"end": 1701,
											"name": "ADD",
											"source": 32
										},
										{
											"begin": 1647,
											"end": 1701,
											"name": "KECCAK256",
											"source": 32
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "F8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 1539,
											"end": 1768,
											"name": "PUSH",
											"source": 32,
											"value": "A0"
										},
										{
											"begin": 1539,
											"end": 1768,
											"name": "DUP6",
											"source": 32
										},
										{
											"begin": 1539,
											"end": 1768,
											"name": "ADD",
											"source": 32
										},
										{
											"begin": 1539,
											"end": 1768,
											"name": "MSTORE",
											"source": 32
										},
										{
											"begin": 1539,
											"end": 1768,
											"name": "SWAP5",
											"source": 32
										},
										{
											"begin": 1539,
											"end": 1768,
											"name": "SWAP1",
											"source": 32
										},
										{
											"begin": 1539,
											"end": 1768,
											"name": "SHL",
											"source": 32
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 1539,
											"end": 1768,
											"name": "AND",
											"source": 32
										},
										{
											"begin": 1539,
											"end": 1768,
											"name": "PUSH",
											"source": 32,
											"value": "A1"
										},
										{
											"begin": 1539,
											"end": 1768,
											"name": "DUP4",
											"source": 32
										},
										{
											"begin": 1539,
											"end": 1768,
											"name": "ADD",
											"source": 32
										},
										{
											"begin": 1539,
											"end": 1768,
											"name": "MSTORE",
											"source": 32
										},
										{
											"begin": 1539,
											"end": 1768,
											"name": "PUSH",
											"source": 32,
											"value": "B5"
										},
										{
											"begin": 1539,
											"end": 1768,
											"name": "DUP3",
											"source": 32
										},
										{
											"begin": 1539,
											"end": 1768,
											"name": "ADD",
											"source": 32
										},
										{
											"begin": 1539,
											"end": 1768,
											"name": "SWAP4",
											"source": 32
										},
										{
											"begin": 1539,
											"end": 1768,
											"name": "SWAP1",
											"source": 32
										},
										{
											"begin": 1539,
											"end": 1768,
											"name": "SWAP4",
											"source": 32
										},
										{
											"begin": 1539,
											"end": 1768,
											"name": "MSTORE",
											"source": 32
										},
										{
											"begin": 241,
											"end": 307,
											"name": "PUSH",
											"source": 32,
											"value": "E34F199B19B2B4F47F68442619D555527D244F78A3297EA89325F843F87B8B54"
										},
										{
											"begin": 1539,
											"end": 1768,
											"name": "PUSH",
											"source": 32,
											"value": "D5"
										},
										{
											"begin": 1539,
											"end": 1768,
											"name": "DUP1",
											"source": 32
										},
										{
											"begin": 1539,
											"end": 1768,
											"name": "DUP4",
											"source": 32
										},
										{
											"begin": 1539,
											"end": 1768,
											"name": "ADD",
											"source": 32
										},
										{
											"begin": 1539,
											"end": 1768,
											"name": "SWAP2",
											"source": 32
										},
										{
											"begin": 1539,
											"end": 1768,
											"name": "SWAP1",
											"source": 32
										},
										{
											"begin": 1539,
											"end": 1768,
											"name": "SWAP2",
											"source": 32
										},
										{
											"begin": 1539,
											"end": 1768,
											"name": "MSTORE",
											"source": 32
										},
										{
											"begin": 1539,
											"end": 1768,
											"name": "DUP3",
											"source": 32
										},
										{
											"begin": 1539,
											"end": 1768,
											"name": "MLOAD",
											"source": 32
										},
										{
											"begin": 1539,
											"end": 1768,
											"name": "DUP1",
											"source": 32
										},
										{
											"begin": 1539,
											"end": 1768,
											"name": "DUP4",
											"source": 32
										},
										{
											"begin": 1539,
											"end": 1768,
											"name": "SUB",
											"source": 32
										},
										{
											"begin": 1539,
											"end": 1768,
											"name": "SWAP1",
											"source": 32
										},
										{
											"begin": 1539,
											"end": 1768,
											"name": "SWAP2",
											"source": 32
										},
										{
											"begin": 1539,
											"end": 1768,
											"name": "ADD",
											"source": 32
										},
										{
											"begin": 1539,
											"end": 1768,
											"name": "DUP2",
											"source": 32
										},
										{
											"begin": 1539,
											"end": 1768,
											"name": "MSTORE",
											"source": 32
										},
										{
											"begin": 1539,
											"end": 1768,
											"name": "PUSH",
											"source": 32,
											"value": "F5"
										},
										{
											"begin": 1539,
											"end": 1768,
											"name": "SWAP1",
											"source": 32
										},
										{
											"begin": 1539,
											"end": 1768,
											"name": "SWAP2",
											"source": 32
										},
										{
											"begin": 1539,
											"end": 1768,
											"name": "ADD",
											"source": 32
										},
										{
											"begin": 1539,
											"end": 1768,
											"name": "SWAP1",
											"source": 32
										},
										{
											"begin": 1539,
											"end": 1768,
											"name": "SWAP2",
											"source": 32
										},
										{
											"begin": 1539,
											"end": 1768,
											"name": "MSTORE",
											"source": 32
										},
										{
											"begin": 1508,
											"end": 1786,
											"name": "DUP1",
											"source": 32
										},
										{
											"begin": 1508,
											"end": 1786,
											"name": "MLOAD",
											"source": 32
										},
										{
											"begin": 1508,
											"end": 1786,
											"name": "SWAP2",
											"source": 32
										},
										{
											"begin": 1508,
											"end": 1786,
											"name": "ADD",
											"source": 32
										},
										{
											"begin": 1508,
											"end": 1786,
											"name": "KECCAK256",
											"source": 32
										},
										{
											"begin": 1508,
											"end": 1786,
											"name": "SWAP1",
											"source": 32
										},
										{
											"begin": 1305,
											"end": 1817,
											"name": "JUMP",
											"source": 32,
											"value": "[out]"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "tag",
											"source": -1,
											"value": "404"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "60"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMP",
											"source": -1,
											"value": "[out]"
										},
										{
											"begin": 14,
											"end": 152,
											"name": "tag",
											"source": 34,
											"value": "424"
										},
										{
											"begin": 14,
											"end": 152,
											"name": "JUMPDEST",
											"source": 34
										},
										{
											"begin": 84,
											"end": 104,
											"name": "DUP1",
											"source": 34
										},
										{
											"begin": 84,
											"end": 104,
											"name": "CALLDATALOAD",
											"source": 34
										},
										{
											"begin": 113,
											"end": 146,
											"name": "PUSH [tag]",
											"source": 34,
											"value": "319"
										},
										{
											"begin": 84,
											"end": 104,
											"name": "DUP2",
											"source": 34
										},
										{
											"begin": 113,
											"end": 146,
											"name": "PUSH [tag]",
											"source": 34,
											"value": "427"
										},
										{
											"begin": 113,
											"end": 146,
											"name": "JUMP",
											"source": 34,
											"value": "[in]"
										},
										{
											"begin": 157,
											"end": 642,
											"name": "tag",
											"source": 34,
											"value": "428"
										},
										{
											"begin": 157,
											"end": 642,
											"name": "JUMPDEST",
											"source": 34
										},
										{
											"begin": 157,
											"end": 642,
											"name": "PUSH",
											"source": 34,
											"value": "0"
										},
										{
											"begin": 254,
											"end": 257,
											"name": "DUP3",
											"source": 34
										},
										{
											"begin": 247,
											"end": 251,
											"name": "PUSH",
											"source": 34,
											"value": "1F"
										},
										{
											"begin": 239,
											"end": 245,
											"name": "DUP4",
											"source": 34
										},
										{
											"begin": 235,
											"end": 252,
											"name": "ADD",
											"source": 34
										},
										{
											"begin": 231,
											"end": 258,
											"name": "SLT",
											"source": 34
										},
										{
											"begin": 221,
											"end": 223,
											"name": "PUSH [tag]",
											"source": 34,
											"value": "430"
										},
										{
											"begin": 221,
											"end": 223,
											"name": "JUMPI",
											"source": 34
										},
										{
											"begin": 276,
											"end": 281,
											"name": "DUP1",
											"source": 34
										},
										{
											"begin": 269,
											"end": 274,
											"name": "DUP2",
											"source": 34
										},
										{
											"begin": 262,
											"end": 282,
											"name": "REVERT",
											"source": 34
										},
										{
											"begin": 221,
											"end": 223,
											"name": "tag",
											"source": 34,
											"value": "430"
										},
										{
											"begin": 221,
											"end": 223,
											"name": "JUMPDEST",
											"source": 34
										},
										{
											"begin": 316,
											"end": 322,
											"name": "DUP2",
											"source": 34
										},
										{
											"begin": 303,
											"end": 323,
											"name": "CALLDATALOAD",
											"source": 34
										},
										{
											"begin": 347,
											"end": 396,
											"name": "PUSH [tag]",
											"source": 34,
											"value": "431"
										},
										{
											"begin": 362,
											"end": 395,
											"name": "PUSH [tag]",
											"source": 34,
											"value": "432"
										},
										{
											"begin": 392,
											"end": 394,
											"name": "DUP3",
											"source": 34
										},
										{
											"begin": 362,
											"end": 395,
											"name": "PUSH [tag]",
											"source": 34,
											"value": "433"
										},
										{
											"begin": 362,
											"end": 395,
											"name": "JUMP",
											"source": 34,
											"value": "[in]"
										},
										{
											"begin": 362,
											"end": 395,
											"name": "tag",
											"source": 34,
											"value": "432"
										},
										{
											"begin": 362,
											"end": 395,
											"name": "JUMPDEST",
											"source": 34
										},
										{
											"begin": 347,
											"end": 396,
											"name": "PUSH [tag]",
											"source": 34,
											"value": "434"
										},
										{
											"begin": 347,
											"end": 396,
											"name": "JUMP",
											"source": 34,
											"value": "[in]"
										},
										{
											"begin": 347,
											"end": 396,
											"name": "tag",
											"source": 34,
											"value": "431"
										},
										{
											"begin": 347,
											"end": 396,
											"name": "JUMPDEST",
											"source": 34
										},
										{
											"begin": 421,
											"end": 423,
											"name": "DUP2",
											"source": 34
										},
										{
											"begin": 412,
											"end": 419,
											"name": "DUP2",
											"source": 34
										},
										{
											"begin": 405,
											"end": 424,
											"name": "MSTORE",
											"source": 34
										},
										{
											"begin": 467,
											"end": 470,
											"name": "DUP5",
											"source": 34
										},
										{
											"begin": 460,
											"end": 464,
											"name": "PUSH",
											"source": 34,
											"value": "20"
										},
										{
											"begin": 455,
											"end": 457,
											"name": "DUP4",
											"source": 34
										},
										{
											"begin": 447,
											"end": 453,
											"name": "DUP7",
											"source": 34
										},
										{
											"begin": 443,
											"end": 458,
											"name": "ADD",
											"source": 34
										},
										{
											"begin": 439,
											"end": 465,
											"name": "ADD",
											"source": 34
										},
										{
											"begin": 436,
											"end": 471,
											"name": "GT",
											"source": 34
										},
										{
											"begin": 433,
											"end": 435,
											"name": "ISZERO",
											"source": 34
										},
										{
											"begin": 433,
											"end": 435,
											"name": "PUSH [tag]",
											"source": 34,
											"value": "435"
										},
										{
											"begin": 433,
											"end": 435,
											"name": "JUMPI",
											"source": 34
										},
										{
											"begin": 488,
											"end": 493,
											"name": "DUP3",
											"source": 34
										},
										{
											"begin": 481,
											"end": 486,
											"name": "DUP4",
											"source": 34
										},
										{
											"begin": 474,
											"end": 494,
											"name": "REVERT",
											"source": 34
										},
										{
											"begin": 433,
											"end": 435,
											"name": "tag",
											"source": 34,
											"value": "435"
										},
										{
											"begin": 433,
											"end": 435,
											"name": "JUMPDEST",
											"source": 34
										},
										{
											"begin": 557,
											"end": 559,
											"name": "DUP2",
											"source": 34
										},
										{
											"begin": 550,
											"end": 554,
											"name": "PUSH",
											"source": 34,
											"value": "20"
										},
										{
											"begin": 542,
											"end": 548,
											"name": "DUP6",
											"source": 34
										},
										{
											"begin": 538,
											"end": 555,
											"name": "ADD",
											"source": 34
										},
										{
											"begin": 531,
											"end": 535,
											"name": "PUSH",
											"source": 34,
											"value": "20"
										},
										{
											"begin": 522,
											"end": 529,
											"name": "DUP4",
											"source": 34
										},
										{
											"begin": 518,
											"end": 536,
											"name": "ADD",
											"source": 34
										},
										{
											"begin": 505,
											"end": 560,
											"name": "CALLDATACOPY",
											"source": 34
										},
										{
											"begin": 580,
											"end": 596,
											"name": "SWAP1",
											"source": 34
										},
										{
											"begin": 580,
											"end": 596,
											"name": "DUP2",
											"source": 34
										},
										{
											"begin": 580,
											"end": 596,
											"name": "ADD",
											"source": 34
										},
										{
											"begin": 598,
											"end": 602,
											"name": "PUSH",
											"source": 34,
											"value": "20"
										},
										{
											"begin": 576,
											"end": 603,
											"name": "ADD",
											"source": 34
										},
										{
											"begin": 569,
											"end": 611,
											"name": "SWAP2",
											"source": 34
										},
										{
											"begin": 569,
											"end": 611,
											"name": "SWAP1",
											"source": 34
										},
										{
											"begin": 569,
											"end": 611,
											"name": "SWAP2",
											"source": 34
										},
										{
											"begin": 569,
											"end": 611,
											"name": "MSTORE",
											"source": 34
										},
										{
											"begin": 584,
											"end": 591,
											"name": "SWAP3",
											"source": 34
										},
										{
											"begin": 211,
											"end": 642,
											"name": "SWAP2",
											"source": 34
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 211,
											"end": 642,
											"name": "JUMP",
											"source": 34,
											"value": "[out]"
										},
										{
											"begin": 647,
											"end": 829,
											"name": "tag",
											"source": 34,
											"value": "436"
										},
										{
											"begin": 647,
											"end": 829,
											"name": "JUMPDEST",
											"source": 34
										},
										{
											"begin": 647,
											"end": 829,
											"name": "PUSH",
											"source": 34,
											"value": "0"
										},
										{
											"begin": 770,
											"end": 773,
											"name": "PUSH",
											"source": 34,
											"value": "100"
										},
										{
											"begin": 761,
											"end": 767,
											"name": "DUP3",
											"source": 34
										},
										{
											"begin": 756,
											"end": 759,
											"name": "DUP5",
											"source": 34
										},
										{
											"begin": 752,
											"end": 768,
											"name": "SUB",
											"source": 34
										},
										{
											"begin": 748,
											"end": 774,
											"name": "SLT",
											"source": 34
										},
										{
											"begin": 745,
											"end": 747,
											"name": "ISZERO",
											"source": 34
										},
										{
											"begin": 745,
											"end": 747,
											"name": "PUSH [tag]",
											"source": 34,
											"value": "119"
										},
										{
											"begin": 745,
											"end": 747,
											"name": "JUMPI",
											"source": 34
										},
										{
											"begin": 791,
											"end": 796,
											"name": "DUP1",
											"source": 34
										},
										{
											"begin": 784,
											"end": 789,
											"name": "DUP2",
											"source": 34
										},
										{
											"begin": 777,
											"end": 797,
											"name": "REVERT",
											"source": 34
										},
										{
											"begin": 834,
											"end": 1093,
											"name": "tag",
											"source": 34,
											"value": "109"
										},
										{
											"begin": 834,
											"end": 1093,
											"name": "JUMPDEST",
											"source": 34
										},
										{
											"begin": 834,
											"end": 1093,
											"name": "PUSH",
											"source": 34,
											"value": "0"
										},
										{
											"begin": 946,
											"end": 948,
											"name": "PUSH",
											"source": 34,
											"value": "20"
										},
										{
											"begin": 934,
											"end": 943,
											"name": "DUP3",
											"source": 34
										},
										{
											"begin": 925,
											"end": 932,
											"name": "DUP5",
											"source": 34
										},
										{
											"begin": 921,
											"end": 944,
											"name": "SUB",
											"source": 34
										},
										{
											"begin": 917,
											"end": 949,
											"name": "SLT",
											"source": 34
										},
										{
											"begin": 914,
											"end": 916,
											"name": "ISZERO",
											"source": 34
										},
										{
											"begin": 914,
											"end": 916,
											"name": "PUSH [tag]",
											"source": 34,
											"value": "440"
										},
										{
											"begin": 914,
											"end": 916,
											"name": "JUMPI",
											"source": 34
										},
										{
											"begin": 967,
											"end": 973,
											"name": "DUP1",
											"source": 34
										},
										{
											"begin": 959,
											"end": 965,
											"name": "DUP2",
											"source": 34
										},
										{
											"begin": 952,
											"end": 974,
											"name": "REVERT",
											"source": 34
										},
										{
											"begin": 914,
											"end": 916,
											"name": "tag",
											"source": 34,
											"value": "440"
										},
										{
											"begin": 914,
											"end": 916,
											"name": "JUMPDEST",
											"source": 34
										},
										{
											"begin": 1011,
											"end": 1020,
											"name": "DUP2",
											"source": 34
										},
										{
											"begin": 998,
											"end": 1021,
											"name": "CALLDATALOAD",
											"source": 34
										},
										{
											"begin": 1030,
											"end": 1063,
											"name": "PUSH [tag]",
											"source": 34,
											"value": "441"
										},
										{
											"begin": 1057,
											"end": 1062,
											"name": "DUP2",
											"source": 34
										},
										{
											"begin": 1030,
											"end": 1063,
											"name": "PUSH [tag]",
											"source": 34,
											"value": "427"
										},
										{
											"begin": 1030,
											"end": 1063,
											"name": "JUMP",
											"source": 34,
											"value": "[in]"
										},
										{
											"begin": 1030,
											"end": 1063,
											"name": "tag",
											"source": 34,
											"value": "441"
										},
										{
											"begin": 1030,
											"end": 1063,
											"name": "JUMPDEST",
											"source": 34
										},
										{
											"begin": 1082,
											"end": 1087,
											"name": "SWAP4",
											"source": 34
										},
										{
											"begin": 904,
											"end": 1093,
											"name": "SWAP3",
											"source": 34
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 904,
											"end": 1093,
											"name": "JUMP",
											"source": 34,
											"value": "[out]"
										},
										{
											"begin": 1098,
											"end": 1568,
											"name": "tag",
											"source": 34,
											"value": "79"
										},
										{
											"begin": 1098,
											"end": 1568,
											"name": "JUMPDEST",
											"source": 34
										},
										{
											"begin": 1098,
											"end": 1568,
											"name": "PUSH",
											"source": 34,
											"value": "0"
										},
										{
											"begin": 1098,
											"end": 1568,
											"name": "DUP1",
											"source": 34
										},
										{
											"begin": 1098,
											"end": 1568,
											"name": "PUSH",
											"source": 34,
											"value": "0"
										},
										{
											"begin": 1244,
											"end": 1246,
											"name": "PUSH",
											"source": 34,
											"value": "60"
										},
										{
											"begin": 1232,
											"end": 1241,
											"name": "DUP5",
											"source": 34
										},
										{
											"begin": 1223,
											"end": 1230,
											"name": "DUP7",
											"source": 34
										},
										{
											"begin": 1219,
											"end": 1242,
											"name": "SUB",
											"source": 34
										},
										{
											"begin": 1215,
											"end": 1247,
											"name": "SLT",
											"source": 34
										},
										{
											"begin": 1212,
											"end": 1214,
											"name": "ISZERO",
											"source": 34
										},
										{
											"begin": 1212,
											"end": 1214,
											"name": "PUSH [tag]",
											"source": 34,
											"value": "443"
										},
										{
											"begin": 1212,
											"end": 1214,
											"name": "JUMPI",
											"source": 34
										},
										{
											"begin": 1265,
											"end": 1271,
											"name": "DUP2",
											"source": 34
										},
										{
											"begin": 1257,
											"end": 1263,
											"name": "DUP3",
											"source": 34
										},
										{
											"begin": 1250,
											"end": 1272,
											"name": "REVERT",
											"source": 34
										},
										{
											"begin": 1212,
											"end": 1214,
											"name": "tag",
											"source": 34,
											"value": "443"
										},
										{
											"begin": 1212,
											"end": 1214,
											"name": "JUMPDEST",
											"source": 34
										},
										{
											"begin": 1309,
											"end": 1318,
											"name": "DUP4",
											"source": 34
										},
										{
											"begin": 1296,
											"end": 1319,
											"name": "CALLDATALOAD",
											"source": 34
										},
										{
											"begin": 1328,
											"end": 1361,
											"name": "PUSH [tag]",
											"source": 34,
											"value": "444"
										},
										{
											"begin": 1355,
											"end": 1360,
											"name": "DUP2",
											"source": 34
										},
										{
											"begin": 1328,
											"end": 1361,
											"name": "PUSH [tag]",
											"source": 34,
											"value": "427"
										},
										{
											"begin": 1328,
											"end": 1361,
											"name": "JUMP",
											"source": 34,
											"value": "[in]"
										},
										{
											"begin": 1328,
											"end": 1361,
											"name": "tag",
											"source": 34,
											"value": "444"
										},
										{
											"begin": 1328,
											"end": 1361,
											"name": "JUMPDEST",
											"source": 34
										},
										{
											"begin": 1380,
											"end": 1385,
											"name": "SWAP3",
											"source": 34
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1432,
											"end": 1434,
											"name": "PUSH",
											"source": 34,
											"value": "20"
										},
										{
											"begin": 1417,
											"end": 1435,
											"name": "DUP5",
											"source": 34
										},
										{
											"begin": 1417,
											"end": 1435,
											"name": "ADD",
											"source": 34
										},
										{
											"begin": 1404,
											"end": 1436,
											"name": "CALLDATALOAD",
											"source": 34
										},
										{
											"begin": 1404,
											"end": 1436,
											"name": "SWAP2",
											"source": 34
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1488,
											"end": 1490,
											"name": "PUSH",
											"source": 34,
											"value": "40"
										},
										{
											"begin": 1473,
											"end": 1491,
											"name": "DUP5",
											"source": 34
										},
										{
											"begin": 1473,
											"end": 1491,
											"name": "ADD",
											"source": 34
										},
										{
											"begin": 1460,
											"end": 1492,
											"name": "CALLDATALOAD",
											"source": 34
										},
										{
											"begin": 1501,
											"end": 1536,
											"name": "PUSH [tag]",
											"source": 34,
											"value": "445"
										},
										{
											"begin": 1460,
											"end": 1492,
											"name": "DUP2",
											"source": 34
										},
										{
											"begin": 1501,
											"end": 1536,
											"name": "PUSH [tag]",
											"source": 34,
											"value": "427"
										},
										{
											"begin": 1501,
											"end": 1536,
											"name": "JUMP",
											"source": 34,
											"value": "[in]"
										},
										{
											"begin": 1501,
											"end": 1536,
											"name": "tag",
											"source": 34,
											"value": "445"
										},
										{
											"begin": 1501,
											"end": 1536,
											"name": "JUMPDEST",
											"source": 34
										},
										{
											"begin": 1555,
											"end": 1562,
											"name": "DUP1",
											"source": 34
										},
										{
											"begin": 1545,
											"end": 1562,
											"name": "SWAP2",
											"source": 34
										},
										{
											"begin": 1545,
											"end": 1562,
											"name": "POP",
											"source": 34
										},
										{
											"begin": 1545,
											"end": 1562,
											"name": "POP",
											"source": 34
										},
										{
											"begin": 1202,
											"end": 1568,
											"name": "SWAP3",
											"source": 34
										},
										{
											"begin": 1202,
											"end": 1568,
											"name": "POP",
											"source": 34
										},
										{
											"begin": 1202,
											"end": 1568,
											"name": "SWAP3",
											"source": 34
										},
										{
											"begin": 1202,
											"end": 1568,
											"name": "POP",
											"source": 34
										},
										{
											"begin": 1202,
											"end": 1568,
											"name": "SWAP3",
											"source": 34
										},
										{
											"begin": 1202,
											"end": 1568,
											"name": "JUMP",
											"source": 34,
											"value": "[out]"
										},
										{
											"begin": 1573,
											"end": 2256,
											"name": "tag",
											"source": 34,
											"value": "83"
										},
										{
											"begin": 1573,
											"end": 2256,
											"name": "JUMPDEST",
											"source": 34
										},
										{
											"begin": 1573,
											"end": 2256,
											"name": "PUSH",
											"source": 34,
											"value": "0"
										},
										{
											"begin": 1573,
											"end": 2256,
											"name": "DUP1",
											"source": 34
										},
										{
											"begin": 1573,
											"end": 2256,
											"name": "PUSH",
											"source": 34,
											"value": "0"
										},
										{
											"begin": 1573,
											"end": 2256,
											"name": "DUP1",
											"source": 34
										},
										{
											"begin": 1573,
											"end": 2256,
											"name": "PUSH",
											"source": 34,
											"value": "0"
										},
										{
											"begin": 1753,
											"end": 1756,
											"name": "PUSH",
											"source": 34,
											"value": "A0"
										},
										{
											"begin": 1741,
											"end": 1750,
											"name": "DUP7",
											"source": 34
										},
										{
											"begin": 1732,
											"end": 1739,
											"name": "DUP9",
											"source": 34
										},
										{
											"begin": 1728,
											"end": 1751,
											"name": "SUB",
											"source": 34
										},
										{
											"begin": 1724,
											"end": 1757,
											"name": "SLT",
											"source": 34
										},
										{
											"begin": 1721,
											"end": 1723,
											"name": "ISZERO",
											"source": 34
										},
										{
											"begin": 1721,
											"end": 1723,
											"name": "PUSH [tag]",
											"source": 34,
											"value": "447"
										},
										{
											"begin": 1721,
											"end": 1723,
											"name": "JUMPI",
											"source": 34
										},
										{
											"begin": 1775,
											"end": 1781,
											"name": "DUP1",
											"source": 34
										},
										{
											"begin": 1767,
											"end": 1773,
											"name": "DUP2",
											"source": 34
										},
										{
											"begin": 1760,
											"end": 1782,
											"name": "REVERT",
											"source": 34
										},
										{
											"begin": 1721,
											"end": 1723,
											"name": "tag",
											"source": 34,
											"value": "447"
										},
										{
											"begin": 1721,
											"end": 1723,
											"name": "JUMPDEST",
											"source": 34
										},
										{
											"begin": 1819,
											"end": 1828,
											"name": "DUP6",
											"source": 34
										},
										{
											"begin": 1806,
											"end": 1829,
											"name": "CALLDATALOAD",
											"source": 34
										},
										{
											"begin": 1838,
											"end": 1871,
											"name": "PUSH [tag]",
											"source": 34,
											"value": "448"
										},
										{
											"begin": 1865,
											"end": 1870,
											"name": "DUP2",
											"source": 34
										},
										{
											"begin": 1838,
											"end": 1871,
											"name": "PUSH [tag]",
											"source": 34,
											"value": "427"
										},
										{
											"begin": 1838,
											"end": 1871,
											"name": "JUMP",
											"source": 34,
											"value": "[in]"
										},
										{
											"begin": 1838,
											"end": 1871,
											"name": "tag",
											"source": 34,
											"value": "448"
										},
										{
											"begin": 1838,
											"end": 1871,
											"name": "JUMPDEST",
											"source": 34
										},
										{
											"begin": 1890,
											"end": 1895,
											"name": "SWAP5",
											"source": 34
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1942,
											"end": 1944,
											"name": "PUSH",
											"source": 34,
											"value": "20"
										},
										{
											"begin": 1927,
											"end": 1945,
											"name": "DUP7",
											"source": 34
										},
										{
											"begin": 1927,
											"end": 1945,
											"name": "ADD",
											"source": 34
										},
										{
											"begin": 1914,
											"end": 1946,
											"name": "CALLDATALOAD",
											"source": 34
										},
										{
											"begin": 1914,
											"end": 1946,
											"name": "SWAP4",
											"source": 34
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1998,
											"end": 2000,
											"name": "PUSH",
											"source": 34,
											"value": "40"
										},
										{
											"begin": 1983,
											"end": 2001,
											"name": "DUP7",
											"source": 34
										},
										{
											"begin": 1983,
											"end": 2001,
											"name": "ADD",
											"source": 34
										},
										{
											"begin": 1970,
											"end": 2002,
											"name": "CALLDATALOAD",
											"source": 34
										},
										{
											"begin": 2011,
											"end": 2046,
											"name": "PUSH [tag]",
											"source": 34,
											"value": "449"
										},
										{
											"begin": 1970,
											"end": 2002,
											"name": "DUP2",
											"source": 34
										},
										{
											"begin": 2011,
											"end": 2046,
											"name": "PUSH [tag]",
											"source": 34,
											"value": "427"
										},
										{
											"begin": 2011,
											"end": 2046,
											"name": "JUMP",
											"source": 34,
											"value": "[in]"
										},
										{
											"begin": 2011,
											"end": 2046,
											"name": "tag",
											"source": 34,
											"value": "449"
										},
										{
											"begin": 2011,
											"end": 2046,
											"name": "JUMPDEST",
											"source": 34
										},
										{
											"begin": 2065,
											"end": 2072,
											"name": "SWAP3",
											"source": 34
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2119,
											"end": 2121,
											"name": "PUSH",
											"source": 34,
											"value": "60"
										},
										{
											"begin": 2104,
											"end": 2122,
											"name": "DUP7",
											"source": 34
										},
										{
											"begin": 2104,
											"end": 2122,
											"name": "ADD",
											"source": 34
										},
										{
											"begin": 2091,
											"end": 2123,
											"name": "CALLDATALOAD",
											"source": 34
										},
										{
											"begin": 2091,
											"end": 2123,
											"name": "SWAP2",
											"source": 34
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2175,
											"end": 2178,
											"name": "PUSH",
											"source": 34,
											"value": "80"
										},
										{
											"begin": 2160,
											"end": 2179,
											"name": "DUP7",
											"source": 34
										},
										{
											"begin": 2160,
											"end": 2179,
											"name": "ADD",
											"source": 34
										},
										{
											"begin": 2147,
											"end": 2180,
											"name": "CALLDATALOAD",
											"source": 34
										},
										{
											"begin": 2189,
											"end": 2224,
											"name": "PUSH [tag]",
											"source": 34,
											"value": "450"
										},
										{
											"begin": 2147,
											"end": 2180,
											"name": "DUP2",
											"source": 34
										},
										{
											"begin": 2189,
											"end": 2224,
											"name": "PUSH [tag]",
											"source": 34,
											"value": "427"
										},
										{
											"begin": 2189,
											"end": 2224,
											"name": "JUMP",
											"source": 34,
											"value": "[in]"
										},
										{
											"begin": 2189,
											"end": 2224,
											"name": "tag",
											"source": 34,
											"value": "450"
										},
										{
											"begin": 2189,
											"end": 2224,
											"name": "JUMPDEST",
											"source": 34
										},
										{
											"begin": 2243,
											"end": 2250,
											"name": "DUP1",
											"source": 34
										},
										{
											"begin": 2233,
											"end": 2250,
											"name": "SWAP2",
											"source": 34
										},
										{
											"begin": 2233,
											"end": 2250,
											"name": "POP",
											"source": 34
										},
										{
											"begin": 2233,
											"end": 2250,
											"name": "POP",
											"source": 34
										},
										{
											"begin": 1711,
											"end": 2256,
											"name": "SWAP3",
											"source": 34
										},
										{
											"begin": 1711,
											"end": 2256,
											"name": "SWAP6",
											"source": 34
										},
										{
											"begin": 1711,
											"end": 2256,
											"name": "POP",
											"source": 34
										},
										{
											"begin": 1711,
											"end": 2256,
											"name": "SWAP3",
											"source": 34
										},
										{
											"begin": 1711,
											"end": 2256,
											"name": "SWAP6",
											"source": 34
										},
										{
											"begin": 1711,
											"end": 2256,
											"name": "SWAP1",
											"source": 34
										},
										{
											"begin": 1711,
											"end": 2256,
											"name": "SWAP4",
											"source": 34
										},
										{
											"begin": 1711,
											"end": 2256,
											"name": "POP",
											"source": 34
										},
										{
											"begin": 1711,
											"end": 2256,
											"name": "JUMP",
											"source": 34,
											"value": "[out]"
										},
										{
											"begin": 2261,
											"end": 2970,
											"name": "tag",
											"source": 34,
											"value": "36"
										},
										{
											"begin": 2261,
											"end": 2970,
											"name": "JUMPDEST",
											"source": 34
										},
										{
											"begin": 2261,
											"end": 2970,
											"name": "PUSH",
											"source": 34,
											"value": "0"
										},
										{
											"begin": 2261,
											"end": 2970,
											"name": "DUP1",
											"source": 34
										},
										{
											"begin": 2261,
											"end": 2970,
											"name": "PUSH",
											"source": 34,
											"value": "0"
										},
										{
											"begin": 2261,
											"end": 2970,
											"name": "DUP1",
											"source": 34
										},
										{
											"begin": 2261,
											"end": 2970,
											"name": "PUSH",
											"source": 34,
											"value": "0"
										},
										{
											"begin": 2261,
											"end": 2970,
											"name": "DUP1",
											"source": 34
										},
										{
											"begin": 2456,
											"end": 2459,
											"name": "PUSH",
											"source": 34,
											"value": "C0"
										},
										{
											"begin": 2444,
											"end": 2453,
											"name": "DUP8",
											"source": 34
										},
										{
											"begin": 2435,
											"end": 2442,
											"name": "DUP10",
											"source": 34
										},
										{
											"begin": 2431,
											"end": 2454,
											"name": "SUB",
											"source": 34
										},
										{
											"begin": 2427,
											"end": 2460,
											"name": "SLT",
											"source": 34
										},
										{
											"begin": 2424,
											"end": 2426,
											"name": "ISZERO",
											"source": 34
										},
										{
											"begin": 2424,
											"end": 2426,
											"name": "PUSH [tag]",
											"source": 34,
											"value": "452"
										},
										{
											"begin": 2424,
											"end": 2426,
											"name": "JUMPI",
											"source": 34
										},
										{
											"begin": 2478,
											"end": 2484,
											"name": "DUP1",
											"source": 34
										},
										{
											"begin": 2470,
											"end": 2476,
											"name": "DUP2",
											"source": 34
										},
										{
											"begin": 2463,
											"end": 2485,
											"name": "REVERT",
											"source": 34
										},
										{
											"begin": 2424,
											"end": 2426,
											"name": "tag",
											"source": 34,
											"value": "452"
										},
										{
											"begin": 2424,
											"end": 2426,
											"name": "JUMPDEST",
											"source": 34
										},
										{
											"begin": 2522,
											"end": 2531,
											"name": "DUP7",
											"source": 34
										},
										{
											"begin": 2509,
											"end": 2532,
											"name": "CALLDATALOAD",
											"source": 34
										},
										{
											"begin": 2541,
											"end": 2574,
											"name": "PUSH [tag]",
											"source": 34,
											"value": "453"
										},
										{
											"begin": 2568,
											"end": 2573,
											"name": "DUP2",
											"source": 34
										},
										{
											"begin": 2541,
											"end": 2574,
											"name": "PUSH [tag]",
											"source": 34,
											"value": "427"
										},
										{
											"begin": 2541,
											"end": 2574,
											"name": "JUMP",
											"source": 34,
											"value": "[in]"
										},
										{
											"begin": 2541,
											"end": 2574,
											"name": "tag",
											"source": 34,
											"value": "453"
										},
										{
											"begin": 2541,
											"end": 2574,
											"name": "JUMPDEST",
											"source": 34
										},
										{
											"begin": 2593,
											"end": 2598,
											"name": "SWAP6",
											"source": 34
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2645,
											"end": 2647,
											"name": "PUSH",
											"source": 34,
											"value": "20"
										},
										{
											"begin": 2630,
											"end": 2648,
											"name": "DUP8",
											"source": 34
										},
										{
											"begin": 2630,
											"end": 2648,
											"name": "ADD",
											"source": 34
										},
										{
											"begin": 2617,
											"end": 2649,
											"name": "CALLDATALOAD",
											"source": 34
										},
										{
											"begin": 2617,
											"end": 2649,
											"name": "SWAP5",
											"source": 34
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2696,
											"end": 2698,
											"name": "PUSH",
											"source": 34,
											"value": "40"
										},
										{
											"begin": 2681,
											"end": 2699,
											"name": "DUP8",
											"source": 34
										},
										{
											"begin": 2681,
											"end": 2699,
											"name": "ADD",
											"source": 34
										},
										{
											"begin": 2668,
											"end": 2700,
											"name": "CALLDATALOAD",
											"source": 34
										},
										{
											"begin": 2668,
											"end": 2700,
											"name": "SWAP4",
											"source": 34
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2752,
											"end": 2754,
											"name": "PUSH",
											"source": 34,
											"value": "60"
										},
										{
											"begin": 2737,
											"end": 2755,
											"name": "DUP8",
											"source": 34
										},
										{
											"begin": 2737,
											"end": 2755,
											"name": "ADD",
											"source": 34
										},
										{
											"begin": 2724,
											"end": 2756,
											"name": "CALLDATALOAD",
											"source": 34
										},
										{
											"begin": 2800,
											"end": 2804,
											"name": "PUSH",
											"source": 34,
											"value": "FF"
										},
										{
											"begin": 2787,
											"end": 2805,
											"name": "DUP2",
											"source": 34
										},
										{
											"begin": 2787,
											"end": 2805,
											"name": "AND",
											"source": 34
										},
										{
											"begin": 2775,
											"end": 2806,
											"name": "DUP2",
											"source": 34
										},
										{
											"begin": 2775,
											"end": 2806,
											"name": "EQ",
											"source": 34
										},
										{
											"begin": 2765,
											"end": 2767,
											"name": "PUSH [tag]",
											"source": 34,
											"value": "454"
										},
										{
											"begin": 2765,
											"end": 2767,
											"name": "JUMPI",
											"source": 34
										},
										{
											"begin": 2825,
											"end": 2831,
											"name": "DUP2",
											"source": 34
										},
										{
											"begin": 2817,
											"end": 2823,
											"name": "DUP3",
											"source": 34
										},
										{
											"begin": 2810,
											"end": 2832,
											"name": "REVERT",
											"source": 34
										},
										{
											"begin": 2765,
											"end": 2767,
											"name": "tag",
											"source": 34,
											"value": "454"
										},
										{
											"begin": 2765,
											"end": 2767,
											"name": "JUMPDEST",
											"source": 34
										},
										{
											"begin": 2414,
											"end": 2970,
											"name": "SWAP6",
											"source": 34
										},
										{
											"begin": 2414,
											"end": 2970,
											"name": "SWAP9",
											"source": 34
										},
										{
											"begin": 2414,
											"end": 2970,
											"name": "SWAP5",
											"source": 34
										},
										{
											"begin": 2414,
											"end": 2970,
											"name": "SWAP8",
											"source": 34
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2414,
											"end": 2970,
											"name": "SWAP3",
											"source": 34
										},
										{
											"begin": 2414,
											"end": 2970,
											"name": "SWAP6",
											"source": 34
										},
										{
											"begin": 2907,
											"end": 2910,
											"name": "PUSH",
											"source": 34,
											"value": "80"
										},
										{
											"begin": 2892,
											"end": 2911,
											"name": "DUP2",
											"source": 34
										},
										{
											"begin": 2892,
											"end": 2911,
											"name": "ADD",
											"source": 34
										},
										{
											"begin": 2879,
											"end": 2912,
											"name": "CALLDATALOAD",
											"source": 34
										},
										{
											"begin": 2879,
											"end": 2912,
											"name": "SWAP5",
											"source": 34
										},
										{
											"begin": 2959,
											"end": 2962,
											"name": "PUSH",
											"source": 34,
											"value": "A0"
										},
										{
											"begin": 2944,
											"end": 2963,
											"name": "SWAP1",
											"source": 34
										},
										{
											"begin": 2944,
											"end": 2963,
											"name": "SWAP2",
											"source": 34
										},
										{
											"begin": 2944,
											"end": 2963,
											"name": "ADD",
											"source": 34
										},
										{
											"begin": 2931,
											"end": 2964,
											"name": "CALLDATALOAD",
											"source": 34
										},
										{
											"begin": 2931,
											"end": 2964,
											"name": "SWAP4",
											"source": 34
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2414,
											"end": 2970,
											"name": "SWAP2",
											"source": 34
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2414,
											"end": 2970,
											"name": "JUMP",
											"source": 34,
											"value": "[out]"
										},
										{
											"begin": 2975,
											"end": 3652,
											"name": "tag",
											"source": 34,
											"value": "56"
										},
										{
											"begin": 2975,
											"end": 3652,
											"name": "JUMPDEST",
											"source": 34
										},
										{
											"begin": 2975,
											"end": 3652,
											"name": "PUSH",
											"source": 34,
											"value": "0"
										},
										{
											"begin": 2975,
											"end": 3652,
											"name": "DUP1",
											"source": 34
										},
										{
											"begin": 3133,
											"end": 3135,
											"name": "PUSH",
											"source": 34,
											"value": "20"
										},
										{
											"begin": 3121,
											"end": 3130,
											"name": "DUP4",
											"source": 34
										},
										{
											"begin": 3112,
											"end": 3119,
											"name": "DUP6",
											"source": 34
										},
										{
											"begin": 3108,
											"end": 3131,
											"name": "SUB",
											"source": 34
										},
										{
											"begin": 3104,
											"end": 3136,
											"name": "SLT",
											"source": 34
										},
										{
											"begin": 3101,
											"end": 3103,
											"name": "ISZERO",
											"source": 34
										},
										{
											"begin": 3101,
											"end": 3103,
											"name": "PUSH [tag]",
											"source": 34,
											"value": "456"
										},
										{
											"begin": 3101,
											"end": 3103,
											"name": "JUMPI",
											"source": 34
										},
										{
											"begin": 3154,
											"end": 3160,
											"name": "DUP2",
											"source": 34
										},
										{
											"begin": 3146,
											"end": 3152,
											"name": "DUP3",
											"source": 34
										},
										{
											"begin": 3139,
											"end": 3161,
											"name": "REVERT",
											"source": 34
										},
										{
											"begin": 3101,
											"end": 3103,
											"name": "tag",
											"source": 34,
											"value": "456"
										},
										{
											"begin": 3101,
											"end": 3103,
											"name": "JUMPDEST",
											"source": 34
										},
										{
											"begin": 3199,
											"end": 3208,
											"name": "DUP3",
											"source": 34
										},
										{
											"begin": 3186,
											"end": 3209,
											"name": "CALLDATALOAD",
											"source": 34
										},
										{
											"begin": 3228,
											"end": 3246,
											"name": "PUSH",
											"source": 34,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3269,
											"end": 3271,
											"name": "DUP1",
											"source": 34
										},
										{
											"begin": 3261,
											"end": 3267,
											"name": "DUP3",
											"source": 34
										},
										{
											"begin": 3258,
											"end": 3272,
											"name": "GT",
											"source": 34
										},
										{
											"begin": 3255,
											"end": 3257,
											"name": "ISZERO",
											"source": 34
										},
										{
											"begin": 3255,
											"end": 3257,
											"name": "PUSH [tag]",
											"source": 34,
											"value": "457"
										},
										{
											"begin": 3255,
											"end": 3257,
											"name": "JUMPI",
											"source": 34
										},
										{
											"begin": 3290,
											"end": 3296,
											"name": "DUP4",
											"source": 34
										},
										{
											"begin": 3282,
											"end": 3288,
											"name": "DUP5",
											"source": 34
										},
										{
											"begin": 3275,
											"end": 3297,
											"name": "REVERT",
											"source": 34
										},
										{
											"begin": 3255,
											"end": 3257,
											"name": "tag",
											"source": 34,
											"value": "457"
										},
										{
											"begin": 3255,
											"end": 3257,
											"name": "JUMPDEST",
											"source": 34
										},
										{
											"begin": 3333,
											"end": 3339,
											"name": "DUP2",
											"source": 34
										},
										{
											"begin": 3322,
											"end": 3331,
											"name": "DUP6",
											"source": 34
										},
										{
											"begin": 3318,
											"end": 3340,
											"name": "ADD",
											"source": 34
										},
										{
											"begin": 3308,
											"end": 3340,
											"name": "SWAP2",
											"source": 34
										},
										{
											"begin": 3308,
											"end": 3340,
											"name": "POP",
											"source": 34
										},
										{
											"begin": 3378,
											"end": 3385,
											"name": "DUP6",
											"source": 34
										},
										{
											"begin": 3371,
											"end": 3375,
											"name": "PUSH",
											"source": 34,
											"value": "1F"
										},
										{
											"begin": 3367,
											"end": 3369,
											"name": "DUP4",
											"source": 34
										},
										{
											"begin": 3363,
											"end": 3376,
											"name": "ADD",
											"source": 34
										},
										{
											"begin": 3359,
											"end": 3386,
											"name": "SLT",
											"source": 34
										},
										{
											"begin": 3349,
											"end": 3351,
											"name": "PUSH [tag]",
											"source": 34,
											"value": "458"
										},
										{
											"begin": 3349,
											"end": 3351,
											"name": "JUMPI",
											"source": 34
										},
										{
											"begin": 3405,
											"end": 3411,
											"name": "DUP4",
											"source": 34
										},
										{
											"begin": 3397,
											"end": 3403,
											"name": "DUP5",
											"source": 34
										},
										{
											"begin": 3390,
											"end": 3412,
											"name": "REVERT",
											"source": 34
										},
										{
											"begin": 3349,
											"end": 3351,
											"name": "tag",
											"source": 34,
											"value": "458"
										},
										{
											"begin": 3349,
											"end": 3351,
											"name": "JUMPDEST",
											"source": 34
										},
										{
											"begin": 3450,
											"end": 3452,
											"name": "DUP2",
											"source": 34
										},
										{
											"begin": 3437,
											"end": 3453,
											"name": "CALLDATALOAD",
											"source": 34
										},
										{
											"begin": 3476,
											"end": 3478,
											"name": "DUP2",
											"source": 34
										},
										{
											"begin": 3468,
											"end": 3474,
											"name": "DUP2",
											"source": 34
										},
										{
											"begin": 3465,
											"end": 3479,
											"name": "GT",
											"source": 34
										},
										{
											"begin": 3462,
											"end": 3464,
											"name": "ISZERO",
											"source": 34
										},
										{
											"begin": 3462,
											"end": 3464,
											"name": "PUSH [tag]",
											"source": 34,
											"value": "459"
										},
										{
											"begin": 3462,
											"end": 3464,
											"name": "JUMPI",
											"source": 34
										},
										{
											"begin": 3497,
											"end": 3503,
											"name": "DUP5",
											"source": 34
										},
										{
											"begin": 3489,
											"end": 3495,
											"name": "DUP6",
											"source": 34
										},
										{
											"begin": 3482,
											"end": 3504,
											"name": "REVERT",
											"source": 34
										},
										{
											"begin": 3462,
											"end": 3464,
											"name": "tag",
											"source": 34,
											"value": "459"
										},
										{
											"begin": 3462,
											"end": 3464,
											"name": "JUMPDEST",
											"source": 34
										},
										{
											"begin": 3556,
											"end": 3563,
											"name": "DUP7",
											"source": 34
										},
										{
											"begin": 3551,
											"end": 3553,
											"name": "PUSH",
											"source": 34,
											"value": "20"
										},
										{
											"begin": 3545,
											"end": 3547,
											"name": "DUP1",
											"source": 34
										},
										{
											"begin": 3537,
											"end": 3543,
											"name": "DUP4",
											"source": 34
										},
										{
											"begin": 3533,
											"end": 3548,
											"name": "MUL",
											"source": 34
										},
										{
											"begin": 3529,
											"end": 3531,
											"name": "DUP6",
											"source": 34
										},
										{
											"begin": 3525,
											"end": 3549,
											"name": "ADD",
											"source": 34
										},
										{
											"begin": 3521,
											"end": 3554,
											"name": "ADD",
											"source": 34
										},
										{
											"begin": 3518,
											"end": 3564,
											"name": "GT",
											"source": 34
										},
										{
											"begin": 3515,
											"end": 3517,
											"name": "ISZERO",
											"source": 34
										},
										{
											"begin": 3515,
											"end": 3517,
											"name": "PUSH [tag]",
											"source": 34,
											"value": "460"
										},
										{
											"begin": 3515,
											"end": 3517,
											"name": "JUMPI",
											"source": 34
										},
										{
											"begin": 3582,
											"end": 3588,
											"name": "DUP5",
											"source": 34
										},
										{
											"begin": 3574,
											"end": 3580,
											"name": "DUP6",
											"source": 34
										},
										{
											"begin": 3567,
											"end": 3589,
											"name": "REVERT",
											"source": 34
										},
										{
											"begin": 3515,
											"end": 3517,
											"name": "tag",
											"source": 34,
											"value": "460"
										},
										{
											"begin": 3515,
											"end": 3517,
											"name": "JUMPDEST",
											"source": 34
										},
										{
											"begin": 3618,
											"end": 3620,
											"name": "PUSH",
											"source": 34,
											"value": "20"
										},
										{
											"begin": 3610,
											"end": 3621,
											"name": "SWAP3",
											"source": 34
										},
										{
											"begin": 3610,
											"end": 3621,
											"name": "SWAP1",
											"source": 34
										},
										{
											"begin": 3610,
											"end": 3621,
											"name": "SWAP3",
											"source": 34
										},
										{
											"begin": 3610,
											"end": 3621,
											"name": "ADD",
											"source": 34
										},
										{
											"begin": 3610,
											"end": 3621,
											"name": "SWAP7",
											"source": 34
										},
										{
											"begin": 3640,
											"end": 3646,
											"name": "SWAP2",
											"source": 34
										},
										{
											"begin": 3640,
											"end": 3646,
											"name": "SWAP6",
											"source": 34
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3091,
											"end": 3652,
											"name": "SWAP1",
											"source": 34
										},
										{
											"begin": 3091,
											"end": 3652,
											"name": "SWAP4",
											"source": 34
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3091,
											"end": 3652,
											"name": "JUMP",
											"source": 34,
											"value": "[out]"
										},
										{
											"begin": 3657,
											"end": 3910,
											"name": "tag",
											"source": 34,
											"value": "312"
										},
										{
											"begin": 3657,
											"end": 3910,
											"name": "JUMPDEST",
											"source": 34
										},
										{
											"begin": 3657,
											"end": 3910,
											"name": "PUSH",
											"source": 34,
											"value": "0"
										},
										{
											"begin": 3657,
											"end": 3910,
											"name": "DUP1",
											"source": 34
										},
										{
											"begin": 3795,
											"end": 3797,
											"name": "PUSH",
											"source": 34,
											"value": "40"
										},
										{
											"begin": 3783,
											"end": 3792,
											"name": "DUP4",
											"source": 34
										},
										{
											"begin": 3774,
											"end": 3781,
											"name": "DUP6",
											"source": 34
										},
										{
											"begin": 3770,
											"end": 3793,
											"name": "SUB",
											"source": 34
										},
										{
											"begin": 3766,
											"end": 3798,
											"name": "SLT",
											"source": 34
										},
										{
											"begin": 3763,
											"end": 3765,
											"name": "ISZERO",
											"source": 34
										},
										{
											"begin": 3763,
											"end": 3765,
											"name": "PUSH [tag]",
											"source": 34,
											"value": "462"
										},
										{
											"begin": 3763,
											"end": 3765,
											"name": "JUMPI",
											"source": 34
										},
										{
											"begin": 3816,
											"end": 3822,
											"name": "DUP2",
											"source": 34
										},
										{
											"begin": 3808,
											"end": 3814,
											"name": "DUP3",
											"source": 34
										},
										{
											"begin": 3801,
											"end": 3823,
											"name": "REVERT",
											"source": 34
										},
										{
											"begin": 3763,
											"end": 3765,
											"name": "tag",
											"source": 34,
											"value": "462"
										},
										{
											"begin": 3763,
											"end": 3765,
											"name": "JUMPDEST",
											"source": 34
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3844,
											"end": 3860,
											"name": "DUP1",
											"source": 34
										},
										{
											"begin": 3844,
											"end": 3860,
											"name": "MLOAD",
											"source": 34
										},
										{
											"begin": 3900,
											"end": 3902,
											"name": "PUSH",
											"source": 34,
											"value": "20"
										},
										{
											"begin": 3885,
											"end": 3903,
											"name": "SWAP1",
											"source": 34
										},
										{
											"begin": 3885,
											"end": 3903,
											"name": "SWAP2",
											"source": 34
										},
										{
											"begin": 3885,
											"end": 3903,
											"name": "ADD",
											"source": 34
										},
										{
											"begin": 3879,
											"end": 3904,
											"name": "MLOAD",
											"source": 34
										},
										{
											"begin": 3844,
											"end": 3860,
											"name": "SWAP1",
											"source": 34
										},
										{
											"begin": 3844,
											"end": 3860,
											"name": "SWAP3",
											"source": 34
										},
										{
											"begin": 3879,
											"end": 3904,
											"name": "SWAP1",
											"source": 34
										},
										{
											"begin": 3879,
											"end": 3904,
											"name": "SWAP2",
											"source": 34
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3753,
											"end": 3910,
											"name": "JUMP",
											"source": 34,
											"value": "[out]"
										},
										{
											"begin": 3915,
											"end": 4690,
											"name": "tag",
											"source": 34,
											"value": "96"
										},
										{
											"begin": 3915,
											"end": 4690,
											"name": "JUMPDEST",
											"source": 34
										},
										{
											"begin": 3915,
											"end": 4690,
											"name": "PUSH",
											"source": 34,
											"value": "0"
										},
										{
											"begin": 3915,
											"end": 4690,
											"name": "DUP1",
											"source": 34
										},
										{
											"begin": 3915,
											"end": 4690,
											"name": "PUSH",
											"source": 34,
											"value": "0"
										},
										{
											"begin": 3915,
											"end": 4690,
											"name": "DUP1",
											"source": 34
										},
										{
											"begin": 4078,
											"end": 4080,
											"name": "PUSH",
											"source": 34,
											"value": "60"
										},
										{
											"begin": 4066,
											"end": 4075,
											"name": "DUP6",
											"source": 34
										},
										{
											"begin": 4057,
											"end": 4064,
											"name": "DUP8",
											"source": 34
										},
										{
											"begin": 4053,
											"end": 4076,
											"name": "SUB",
											"source": 34
										},
										{
											"begin": 4049,
											"end": 4081,
											"name": "SLT",
											"source": 34
										},
										{
											"begin": 4046,
											"end": 4048,
											"name": "ISZERO",
											"source": 34
										},
										{
											"begin": 4046,
											"end": 4048,
											"name": "PUSH [tag]",
											"source": 34,
											"value": "464"
										},
										{
											"begin": 4046,
											"end": 4048,
											"name": "JUMPI",
											"source": 34
										},
										{
											"begin": 4099,
											"end": 4105,
											"name": "DUP2",
											"source": 34
										},
										{
											"begin": 4091,
											"end": 4097,
											"name": "DUP3",
											"source": 34
										},
										{
											"begin": 4084,
											"end": 4106,
											"name": "REVERT",
											"source": 34
										},
										{
											"begin": 4046,
											"end": 4048,
											"name": "tag",
											"source": 34,
											"value": "464"
										},
										{
											"begin": 4046,
											"end": 4048,
											"name": "JUMPDEST",
											"source": 34
										},
										{
											"begin": 4140,
											"end": 4149,
											"name": "DUP5",
											"source": 34
										},
										{
											"begin": 4127,
											"end": 4150,
											"name": "CALLDATALOAD",
											"source": 34
										},
										{
											"begin": 4117,
											"end": 4150,
											"name": "SWAP4",
											"source": 34
										},
										{
											"begin": 4117,
											"end": 4150,
											"name": "POP",
											"source": 34
										},
										{
											"begin": 4197,
											"end": 4199,
											"name": "PUSH",
											"source": 34,
											"value": "20"
										},
										{
											"begin": 4186,
											"end": 4195,
											"name": "DUP6",
											"source": 34
										},
										{
											"begin": 4182,
											"end": 4200,
											"name": "ADD",
											"source": 34
										},
										{
											"begin": 4169,
											"end": 4201,
											"name": "CALLDATALOAD",
											"source": 34
										},
										{
											"begin": 4159,
											"end": 4201,
											"name": "SWAP3",
											"source": 34
										},
										{
											"begin": 4159,
											"end": 4201,
											"name": "POP",
											"source": 34
										},
										{
											"begin": 4252,
											"end": 4254,
											"name": "PUSH",
											"source": 34,
											"value": "40"
										},
										{
											"begin": 4241,
											"end": 4250,
											"name": "DUP6",
											"source": 34
										},
										{
											"begin": 4237,
											"end": 4255,
											"name": "ADD",
											"source": 34
										},
										{
											"begin": 4224,
											"end": 4256,
											"name": "CALLDATALOAD",
											"source": 34
										},
										{
											"begin": 4275,
											"end": 4293,
											"name": "PUSH",
											"source": 34,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4316,
											"end": 4318,
											"name": "DUP1",
											"source": 34
										},
										{
											"begin": 4308,
											"end": 4314,
											"name": "DUP3",
											"source": 34
										},
										{
											"begin": 4305,
											"end": 4319,
											"name": "GT",
											"source": 34
										},
										{
											"begin": 4302,
											"end": 4304,
											"name": "ISZERO",
											"source": 34
										},
										{
											"begin": 4302,
											"end": 4304,
											"name": "PUSH [tag]",
											"source": 34,
											"value": "465"
										},
										{
											"begin": 4302,
											"end": 4304,
											"name": "JUMPI",
											"source": 34
										},
										{
											"begin": 4337,
											"end": 4343,
											"name": "DUP4",
											"source": 34
										},
										{
											"begin": 4329,
											"end": 4335,
											"name": "DUP5",
											"source": 34
										},
										{
											"begin": 4322,
											"end": 4344,
											"name": "REVERT",
											"source": 34
										},
										{
											"begin": 4302,
											"end": 4304,
											"name": "tag",
											"source": 34,
											"value": "465"
										},
										{
											"begin": 4302,
											"end": 4304,
											"name": "JUMPDEST",
											"source": 34
										},
										{
											"begin": 4380,
											"end": 4386,
											"name": "DUP2",
											"source": 34
										},
										{
											"begin": 4369,
											"end": 4378,
											"name": "DUP8",
											"source": 34
										},
										{
											"begin": 4365,
											"end": 4387,
											"name": "ADD",
											"source": 34
										},
										{
											"begin": 4355,
											"end": 4387,
											"name": "SWAP2",
											"source": 34
										},
										{
											"begin": 4355,
											"end": 4387,
											"name": "POP",
											"source": 34
										},
										{
											"begin": 4425,
											"end": 4432,
											"name": "DUP8",
											"source": 34
										},
										{
											"begin": 4418,
											"end": 4422,
											"name": "PUSH",
											"source": 34,
											"value": "1F"
										},
										{
											"begin": 4414,
											"end": 4416,
											"name": "DUP4",
											"source": 34
										},
										{
											"begin": 4410,
											"end": 4423,
											"name": "ADD",
											"source": 34
										},
										{
											"begin": 4406,
											"end": 4433,
											"name": "SLT",
											"source": 34
										},
										{
											"begin": 4396,
											"end": 4398,
											"name": "PUSH [tag]",
											"source": 34,
											"value": "466"
										},
										{
											"begin": 4396,
											"end": 4398,
											"name": "JUMPI",
											"source": 34
										},
										{
											"begin": 4452,
											"end": 4458,
											"name": "DUP4",
											"source": 34
										},
										{
											"begin": 4444,
											"end": 4450,
											"name": "DUP5",
											"source": 34
										},
										{
											"begin": 4437,
											"end": 4459,
											"name": "REVERT",
											"source": 34
										},
										{
											"begin": 4396,
											"end": 4398,
											"name": "tag",
											"source": 34,
											"value": "466"
										},
										{
											"begin": 4396,
											"end": 4398,
											"name": "JUMPDEST",
											"source": 34
										},
										{
											"begin": 4497,
											"end": 4499,
											"name": "DUP2",
											"source": 34
										},
										{
											"begin": 4484,
											"end": 4500,
											"name": "CALLDATALOAD",
											"source": 34
										},
										{
											"begin": 4523,
											"end": 4525,
											"name": "DUP2",
											"source": 34
										},
										{
											"begin": 4515,
											"end": 4521,
											"name": "DUP2",
											"source": 34
										},
										{
											"begin": 4512,
											"end": 4526,
											"name": "GT",
											"source": 34
										},
										{
											"begin": 4509,
											"end": 4511,
											"name": "ISZERO",
											"source": 34
										},
										{
											"begin": 4509,
											"end": 4511,
											"name": "PUSH [tag]",
											"source": 34,
											"value": "467"
										},
										{
											"begin": 4509,
											"end": 4511,
											"name": "JUMPI",
											"source": 34
										},
										{
											"begin": 4544,
											"end": 4550,
											"name": "DUP5",
											"source": 34
										},
										{
											"begin": 4536,
											"end": 4542,
											"name": "DUP6",
											"source": 34
										},
										{
											"begin": 4529,
											"end": 4551,
											"name": "REVERT",
											"source": 34
										},
										{
											"begin": 4509,
											"end": 4511,
											"name": "tag",
											"source": 34,
											"value": "467"
										},
										{
											"begin": 4509,
											"end": 4511,
											"name": "JUMPDEST",
											"source": 34
										},
										{
											"begin": 4594,
											"end": 4601,
											"name": "DUP9",
											"source": 34
										},
										{
											"begin": 4589,
											"end": 4591,
											"name": "PUSH",
											"source": 34,
											"value": "20"
										},
										{
											"begin": 4580,
											"end": 4586,
											"name": "DUP3",
											"source": 34
										},
										{
											"begin": 4576,
											"end": 4578,
											"name": "DUP6",
											"source": 34
										},
										{
											"begin": 4572,
											"end": 4587,
											"name": "ADD",
											"source": 34
										},
										{
											"begin": 4568,
											"end": 4592,
											"name": "ADD",
											"source": 34
										},
										{
											"begin": 4565,
											"end": 4602,
											"name": "GT",
											"source": 34
										},
										{
											"begin": 4562,
											"end": 4564,
											"name": "ISZERO",
											"source": 34
										},
										{
											"begin": 4562,
											"end": 4564,
											"name": "PUSH [tag]",
											"source": 34,
											"value": "468"
										},
										{
											"begin": 4562,
											"end": 4564,
											"name": "JUMPI",
											"source": 34
										},
										{
											"begin": 4620,
											"end": 4626,
											"name": "DUP5",
											"source": 34
										},
										{
											"begin": 4612,
											"end": 4618,
											"name": "DUP6",
											"source": 34
										},
										{
											"begin": 4605,
											"end": 4627,
											"name": "REVERT",
											"source": 34
										},
										{
											"begin": 4562,
											"end": 4564,
											"name": "tag",
											"source": 34,
											"value": "468"
										},
										{
											"begin": 4562,
											"end": 4564,
											"name": "JUMPDEST",
											"source": 34
										},
										{
											"begin": 4036,
											"end": 4690,
											"name": "SWAP6",
											"source": 34
										},
										{
											"begin": 4036,
											"end": 4690,
											"name": "SWAP9",
											"source": 34
										},
										{
											"begin": 4036,
											"end": 4690,
											"name": "SWAP5",
											"source": 34
										},
										{
											"begin": 4036,
											"end": 4690,
											"name": "SWAP8",
											"source": 34
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4656,
											"end": 4658,
											"name": "PUSH",
											"source": 34,
											"value": "20"
										},
										{
											"begin": 4648,
											"end": 4659,
											"name": "ADD",
											"source": 34
										},
										{
											"begin": 4648,
											"end": 4659,
											"name": "SWAP5",
											"source": 34
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4036,
											"end": 4690,
											"name": "JUMP",
											"source": 34,
											"value": "[out]"
										},
										{
											"begin": 4695,
											"end": 5371,
											"name": "tag",
											"source": 34,
											"value": "180"
										},
										{
											"begin": 4695,
											"end": 5371,
											"name": "JUMPDEST",
											"source": 34
										},
										{
											"begin": 4695,
											"end": 5371,
											"name": "PUSH",
											"source": 34,
											"value": "0"
										},
										{
											"begin": 4828,
											"end": 4830,
											"name": "PUSH",
											"source": 34,
											"value": "20"
										},
										{
											"begin": 4816,
											"end": 4825,
											"name": "DUP3",
											"source": 34
										},
										{
											"begin": 4807,
											"end": 4814,
											"name": "DUP5",
											"source": 34
										},
										{
											"begin": 4803,
											"end": 4826,
											"name": "SUB",
											"source": 34
										},
										{
											"begin": 4799,
											"end": 4831,
											"name": "SLT",
											"source": 34
										},
										{
											"begin": 4796,
											"end": 4798,
											"name": "ISZERO",
											"source": 34
										},
										{
											"begin": 4796,
											"end": 4798,
											"name": "PUSH [tag]",
											"source": 34,
											"value": "470"
										},
										{
											"begin": 4796,
											"end": 4798,
											"name": "JUMPI",
											"source": 34
										},
										{
											"begin": 4849,
											"end": 4855,
											"name": "DUP1",
											"source": 34
										},
										{
											"begin": 4841,
											"end": 4847,
											"name": "DUP2",
											"source": 34
										},
										{
											"begin": 4834,
											"end": 4856,
											"name": "REVERT",
											"source": 34
										},
										{
											"begin": 4796,
											"end": 4798,
											"name": "tag",
											"source": 34,
											"value": "470"
										},
										{
											"begin": 4796,
											"end": 4798,
											"name": "JUMPDEST",
											"source": 34
										},
										{
											"begin": 4887,
											"end": 4896,
											"name": "DUP2",
											"source": 34
										},
										{
											"begin": 4881,
											"end": 4897,
											"name": "MLOAD",
											"source": 34
										},
										{
											"begin": 4920,
											"end": 4938,
											"name": "PUSH",
											"source": 34,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4912,
											"end": 4918,
											"name": "DUP2",
											"source": 34
										},
										{
											"begin": 4909,
											"end": 4939,
											"name": "GT",
											"source": 34
										},
										{
											"begin": 4906,
											"end": 4908,
											"name": "ISZERO",
											"source": 34
										},
										{
											"begin": 4906,
											"end": 4908,
											"name": "PUSH [tag]",
											"source": 34,
											"value": "471"
										},
										{
											"begin": 4906,
											"end": 4908,
											"name": "JUMPI",
											"source": 34
										},
										{
											"begin": 4957,
											"end": 4963,
											"name": "DUP2",
											"source": 34
										},
										{
											"begin": 4949,
											"end": 4955,
											"name": "DUP3",
											"source": 34
										},
										{
											"begin": 4942,
											"end": 4964,
											"name": "REVERT",
											"source": 34
										},
										{
											"begin": 4906,
											"end": 4908,
											"name": "tag",
											"source": 34,
											"value": "471"
										},
										{
											"begin": 4906,
											"end": 4908,
											"name": "JUMPDEST",
											"source": 34
										},
										{
											"begin": 4985,
											"end": 5007,
											"name": "DUP3",
											"source": 34
										},
										{
											"begin": 4985,
											"end": 5007,
											"name": "ADD",
											"source": 34
										},
										{
											"begin": 5038,
											"end": 5042,
											"name": "PUSH",
											"source": 34,
											"value": "1F"
										},
										{
											"begin": 5030,
											"end": 5043,
											"name": "DUP2",
											"source": 34
										},
										{
											"begin": 5030,
											"end": 5043,
											"name": "ADD",
											"source": 34
										},
										{
											"begin": 5026,
											"end": 5053,
											"name": "DUP5",
											"source": 34
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SGT",
											"source": -1
										},
										{
											"begin": 5016,
											"end": 5018,
											"name": "PUSH [tag]",
											"source": 34,
											"value": "472"
										},
										{
											"begin": 5016,
											"end": 5018,
											"name": "JUMPI",
											"source": 34
										},
										{
											"begin": 5072,
											"end": 5078,
											"name": "DUP2",
											"source": 34
										},
										{
											"begin": 5064,
											"end": 5070,
											"name": "DUP3",
											"source": 34
										},
										{
											"begin": 5057,
											"end": 5079,
											"name": "REVERT",
											"source": 34
										},
										{
											"begin": 5016,
											"end": 5018,
											"name": "tag",
											"source": 34,
											"value": "472"
										},
										{
											"begin": 5016,
											"end": 5018,
											"name": "JUMPDEST",
											"source": 34
										},
										{
											"begin": 5106,
											"end": 5108,
											"name": "DUP1",
											"source": 34
										},
										{
											"begin": 5100,
											"end": 5109,
											"name": "MLOAD",
											"source": 34
										},
										{
											"begin": 5131,
											"end": 5180,
											"name": "PUSH [tag]",
											"source": 34,
											"value": "473"
										},
										{
											"begin": 5146,
											"end": 5179,
											"name": "PUSH [tag]",
											"source": 34,
											"value": "432"
										},
										{
											"begin": 5176,
											"end": 5178,
											"name": "DUP3",
											"source": 34
										},
										{
											"begin": 5146,
											"end": 5179,
											"name": "PUSH [tag]",
											"source": 34,
											"value": "433"
										},
										{
											"begin": 5146,
											"end": 5179,
											"name": "JUMP",
											"source": 34,
											"value": "[in]"
										},
										{
											"begin": 5131,
											"end": 5180,
											"name": "tag",
											"source": 34,
											"value": "473"
										},
										{
											"begin": 5131,
											"end": 5180,
											"name": "JUMPDEST",
											"source": 34
										},
										{
											"begin": 5203,
											"end": 5205,
											"name": "DUP2",
											"source": 34
										},
										{
											"begin": 5196,
											"end": 5201,
											"name": "DUP2",
											"source": 34
										},
										{
											"begin": 5189,
											"end": 5206,
											"name": "MSTORE",
											"source": 34
										},
										{
											"begin": 5243,
											"end": 5250,
											"name": "DUP6",
											"source": 34
										},
										{
											"begin": 5238,
											"end": 5240,
											"name": "PUSH",
											"source": 34,
											"value": "20"
										},
										{
											"begin": 5233,
											"end": 5235,
											"name": "DUP4",
											"source": 34
										},
										{
											"begin": 5229,
											"end": 5231,
											"name": "DUP6",
											"source": 34
										},
										{
											"begin": 5225,
											"end": 5236,
											"name": "ADD",
											"source": 34
										},
										{
											"begin": 5221,
											"end": 5241,
											"name": "ADD",
											"source": 34
										},
										{
											"begin": 5218,
											"end": 5251,
											"name": "GT",
											"source": 34
										},
										{
											"begin": 5215,
											"end": 5217,
											"name": "ISZERO",
											"source": 34
										},
										{
											"begin": 5215,
											"end": 5217,
											"name": "PUSH [tag]",
											"source": 34,
											"value": "475"
										},
										{
											"begin": 5215,
											"end": 5217,
											"name": "JUMPI",
											"source": 34
										},
										{
											"begin": 5269,
											"end": 5275,
											"name": "DUP4",
											"source": 34
										},
										{
											"begin": 5261,
											"end": 5267,
											"name": "DUP5",
											"source": 34
										},
										{
											"begin": 5254,
											"end": 5276,
											"name": "REVERT",
											"source": 34
										},
										{
											"begin": 5215,
											"end": 5217,
											"name": "tag",
											"source": 34,
											"value": "475"
										},
										{
											"begin": 5215,
											"end": 5217,
											"name": "JUMPDEST",
											"source": 34
										},
										{
											"begin": 5287,
											"end": 5341,
											"name": "PUSH [tag]",
											"source": 34,
											"value": "362"
										},
										{
											"begin": 5338,
											"end": 5340,
											"name": "DUP3",
											"source": 34
										},
										{
											"begin": 5333,
											"end": 5335,
											"name": "PUSH",
											"source": 34,
											"value": "20"
										},
										{
											"begin": 5326,
											"end": 5331,
											"name": "DUP4",
											"source": 34
										},
										{
											"begin": 5322,
											"end": 5336,
											"name": "ADD",
											"source": 34
										},
										{
											"begin": 5317,
											"end": 5319,
											"name": "PUSH",
											"source": 34,
											"value": "20"
										},
										{
											"begin": 5313,
											"end": 5315,
											"name": "DUP7",
											"source": 34
										},
										{
											"begin": 5309,
											"end": 5320,
											"name": "ADD",
											"source": 34
										},
										{
											"begin": 5287,
											"end": 5341,
											"name": "PUSH [tag]",
											"source": 34,
											"value": "477"
										},
										{
											"begin": 5287,
											"end": 5341,
											"name": "JUMP",
											"source": 34,
											"value": "[in]"
										},
										{
											"begin": 5376,
											"end": 6418,
											"name": "tag",
											"source": 34,
											"value": "62"
										},
										{
											"begin": 5376,
											"end": 6418,
											"name": "JUMPDEST",
											"source": 34
										},
										{
											"begin": 5376,
											"end": 6418,
											"name": "PUSH",
											"source": 34,
											"value": "0"
										},
										{
											"begin": 5522,
											"end": 5524,
											"name": "PUSH",
											"source": 34,
											"value": "20"
										},
										{
											"begin": 5510,
											"end": 5519,
											"name": "DUP3",
											"source": 34
										},
										{
											"begin": 5501,
											"end": 5508,
											"name": "DUP5",
											"source": 34
										},
										{
											"begin": 5497,
											"end": 5520,
											"name": "SUB",
											"source": 34
										},
										{
											"begin": 5493,
											"end": 5525,
											"name": "SLT",
											"source": 34
										},
										{
											"begin": 5490,
											"end": 5492,
											"name": "ISZERO",
											"source": 34
										},
										{
											"begin": 5490,
											"end": 5492,
											"name": "PUSH [tag]",
											"source": 34,
											"value": "479"
										},
										{
											"begin": 5490,
											"end": 5492,
											"name": "JUMPI",
											"source": 34
										},
										{
											"begin": 5543,
											"end": 5549,
											"name": "DUP1",
											"source": 34
										},
										{
											"begin": 5535,
											"end": 5541,
											"name": "DUP2",
											"source": 34
										},
										{
											"begin": 5528,
											"end": 5550,
											"name": "REVERT",
											"source": 34
										},
										{
											"begin": 5490,
											"end": 5492,
											"name": "tag",
											"source": 34,
											"value": "479"
										},
										{
											"begin": 5490,
											"end": 5492,
											"name": "JUMPDEST",
											"source": 34
										},
										{
											"begin": 5588,
											"end": 5597,
											"name": "DUP2",
											"source": 34
										},
										{
											"begin": 5575,
											"end": 5598,
											"name": "CALLDATALOAD",
											"source": 34
										},
										{
											"begin": 5617,
											"end": 5635,
											"name": "PUSH",
											"source": 34,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5658,
											"end": 5660,
											"name": "DUP1",
											"source": 34
										},
										{
											"begin": 5650,
											"end": 5656,
											"name": "DUP3",
											"source": 34
										},
										{
											"begin": 5647,
											"end": 5661,
											"name": "GT",
											"source": 34
										},
										{
											"begin": 5644,
											"end": 5646,
											"name": "ISZERO",
											"source": 34
										},
										{
											"begin": 5644,
											"end": 5646,
											"name": "PUSH [tag]",
											"source": 34,
											"value": "480"
										},
										{
											"begin": 5644,
											"end": 5646,
											"name": "JUMPI",
											"source": 34
										},
										{
											"begin": 5679,
											"end": 5685,
											"name": "DUP3",
											"source": 34
										},
										{
											"begin": 5671,
											"end": 5677,
											"name": "DUP4",
											"source": 34
										},
										{
											"begin": 5664,
											"end": 5686,
											"name": "REVERT",
											"source": 34
										},
										{
											"begin": 5644,
											"end": 5646,
											"name": "tag",
											"source": 34,
											"value": "480"
										},
										{
											"begin": 5644,
											"end": 5646,
											"name": "JUMPDEST",
											"source": 34
										},
										{
											"begin": 5707,
											"end": 5729,
											"name": "SWAP1",
											"source": 34
										},
										{
											"begin": 5707,
											"end": 5729,
											"name": "DUP4",
											"source": 34
										},
										{
											"begin": 5707,
											"end": 5729,
											"name": "ADD",
											"source": 34
										},
										{
											"begin": 5707,
											"end": 5729,
											"name": "SWAP1",
											"source": 34
										},
										{
											"begin": 5763,
											"end": 5767,
											"name": "PUSH",
											"source": 34,
											"value": "A0"
										},
										{
											"begin": 5745,
											"end": 5761,
											"name": "DUP3",
											"source": 34
										},
										{
											"begin": 5745,
											"end": 5761,
											"name": "DUP7",
											"source": 34
										},
										{
											"begin": 5745,
											"end": 5761,
											"name": "SUB",
											"source": 34
										},
										{
											"begin": 5741,
											"end": 5768,
											"name": "SLT",
											"source": 34
										},
										{
											"begin": 5738,
											"end": 5740,
											"name": "ISZERO",
											"source": 34
										},
										{
											"begin": 5738,
											"end": 5740,
											"name": "PUSH [tag]",
											"source": 34,
											"value": "481"
										},
										{
											"begin": 5738,
											"end": 5740,
											"name": "JUMPI",
											"source": 34
										},
										{
											"begin": 5786,
											"end": 5792,
											"name": "DUP3",
											"source": 34
										},
										{
											"begin": 5778,
											"end": 5784,
											"name": "DUP4",
											"source": 34
										},
										{
											"begin": 5771,
											"end": 5793,
											"name": "REVERT",
											"source": 34
										},
										{
											"begin": 5738,
											"end": 5740,
											"name": "tag",
											"source": 34,
											"value": "481"
										},
										{
											"begin": 5738,
											"end": 5740,
											"name": "JUMPDEST",
											"source": 34
										},
										{
											"begin": 5824,
											"end": 5826,
											"name": "PUSH",
											"source": 34,
											"value": "40"
										},
										{
											"begin": 5818,
											"end": 5827,
											"name": "MLOAD",
											"source": 34
										},
										{
											"begin": 5866,
											"end": 5870,
											"name": "PUSH",
											"source": 34,
											"value": "A0"
										},
										{
											"begin": 5858,
											"end": 5864,
											"name": "DUP2",
											"source": 34
										},
										{
											"begin": 5854,
											"end": 5871,
											"name": "ADD",
											"source": 34
										},
										{
											"begin": 5921,
											"end": 5927,
											"name": "DUP2",
											"source": 34
										},
										{
											"begin": 5909,
											"end": 5919,
											"name": "DUP2",
											"source": 34
										},
										{
											"begin": 5906,
											"end": 5928,
											"name": "LT",
											"source": 34
										},
										{
											"begin": 5901,
											"end": 5903,
											"name": "DUP4",
											"source": 34
										},
										{
											"begin": 5889,
											"end": 5899,
											"name": "DUP3",
											"source": 34
										},
										{
											"begin": 5886,
											"end": 5904,
											"name": "GT",
											"source": 34
										},
										{
											"begin": 5883,
											"end": 5929,
											"name": "OR",
											"source": 34
										},
										{
											"begin": 5880,
											"end": 5882,
											"name": "ISZERO",
											"source": 34
										},
										{
											"begin": 5880,
											"end": 5882,
											"name": "PUSH [tag]",
											"source": 34,
											"value": "482"
										},
										{
											"begin": 5880,
											"end": 5882,
											"name": "JUMPI",
											"source": 34
										},
										{
											"begin": 5932,
											"end": 5941,
											"name": "INVALID",
											"source": 34
										},
										{
											"begin": 5880,
											"end": 5882,
											"name": "tag",
											"source": 34,
											"value": "482"
										},
										{
											"begin": 5880,
											"end": 5882,
											"name": "JUMPDEST",
											"source": 34
										},
										{
											"begin": 5959,
											"end": 5961,
											"name": "PUSH",
											"source": 34,
											"value": "40"
										},
										{
											"begin": 5952,
											"end": 5974,
											"name": "MSTORE",
											"source": 34
										},
										{
											"begin": 5999,
											"end": 6015,
											"name": "DUP3",
											"source": 34
										},
										{
											"begin": 5999,
											"end": 6015,
											"name": "CALLDATALOAD",
											"source": 34
										},
										{
											"begin": 6027,
											"end": 6043,
											"name": "DUP3",
											"source": 34
										},
										{
											"begin": 6027,
											"end": 6043,
											"name": "DUP2",
											"source": 34
										},
										{
											"begin": 6027,
											"end": 6043,
											"name": "GT",
											"source": 34
										},
										{
											"begin": 6024,
											"end": 6026,
											"name": "ISZERO",
											"source": 34
										},
										{
											"begin": 6024,
											"end": 6026,
											"name": "PUSH [tag]",
											"source": 34,
											"value": "483"
										},
										{
											"begin": 6024,
											"end": 6026,
											"name": "JUMPI",
											"source": 34
										},
										{
											"begin": 6061,
											"end": 6067,
											"name": "DUP5",
											"source": 34
										},
										{
											"begin": 6053,
											"end": 6059,
											"name": "DUP6",
											"source": 34
										},
										{
											"begin": 6046,
											"end": 6068,
											"name": "REVERT",
											"source": 34
										},
										{
											"begin": 6024,
											"end": 6026,
											"name": "tag",
											"source": 34,
											"value": "483"
										},
										{
											"begin": 6024,
											"end": 6026,
											"name": "JUMPDEST",
											"source": 34
										},
										{
											"begin": 6094,
											"end": 6140,
											"name": "PUSH [tag]",
											"source": 34,
											"value": "484"
										},
										{
											"begin": 6132,
											"end": 6139,
											"name": "DUP8",
											"source": 34
										},
										{
											"begin": 6121,
											"end": 6129,
											"name": "DUP3",
											"source": 34
										},
										{
											"begin": 6117,
											"end": 6119,
											"name": "DUP7",
											"source": 34
										},
										{
											"begin": 6113,
											"end": 6130,
											"name": "ADD",
											"source": 34
										},
										{
											"begin": 6094,
											"end": 6140,
											"name": "PUSH [tag]",
											"source": 34,
											"value": "428"
										},
										{
											"begin": 6094,
											"end": 6140,
											"name": "JUMP",
											"source": 34,
											"value": "[in]"
										},
										{
											"begin": 6094,
											"end": 6140,
											"name": "tag",
											"source": 34,
											"value": "484"
										},
										{
											"begin": 6094,
											"end": 6140,
											"name": "JUMPDEST",
											"source": 34
										},
										{
											"begin": 6086,
											"end": 6092,
											"name": "DUP3",
											"source": 34
										},
										{
											"begin": 6079,
											"end": 6141,
											"name": "MSTORE",
											"source": 34
										},
										{
											"begin": 6079,
											"end": 6141,
											"name": "POP",
											"source": 34
										},
										{
											"begin": 6174,
											"end": 6207,
											"name": "PUSH [tag]",
											"source": 34,
											"value": "485"
										},
										{
											"begin": 6203,
											"end": 6205,
											"name": "PUSH",
											"source": 34,
											"value": "20"
										},
										{
											"begin": 6199,
											"end": 6201,
											"name": "DUP5",
											"source": 34
										},
										{
											"begin": 6195,
											"end": 6206,
											"name": "ADD",
											"source": 34
										},
										{
											"begin": 6174,
											"end": 6207,
											"name": "PUSH [tag]",
											"source": 34,
											"value": "424"
										},
										{
											"begin": 6174,
											"end": 6207,
											"name": "JUMP",
											"source": 34,
											"value": "[in]"
										},
										{
											"begin": 6174,
											"end": 6207,
											"name": "tag",
											"source": 34,
											"value": "485"
										},
										{
											"begin": 6174,
											"end": 6207,
											"name": "JUMPDEST",
											"source": 34
										},
										{
											"begin": 6169,
											"end": 6171,
											"name": "PUSH",
											"source": 34,
											"value": "20"
										},
										{
											"begin": 6161,
											"end": 6167,
											"name": "DUP3",
											"source": 34
										},
										{
											"begin": 6157,
											"end": 6172,
											"name": "ADD",
											"source": 34
										},
										{
											"begin": 6150,
											"end": 6208,
											"name": "MSTORE",
											"source": 34
										},
										{
											"begin": 6262,
											"end": 6264,
											"name": "PUSH",
											"source": 34,
											"value": "40"
										},
										{
											"begin": 6258,
											"end": 6260,
											"name": "DUP4",
											"source": 34
										},
										{
											"begin": 6254,
											"end": 6265,
											"name": "ADD",
											"source": 34
										},
										{
											"begin": 6241,
											"end": 6266,
											"name": "CALLDATALOAD",
											"source": 34
										},
										{
											"begin": 6236,
											"end": 6238,
											"name": "PUSH",
											"source": 34,
											"value": "40"
										},
										{
											"begin": 6228,
											"end": 6234,
											"name": "DUP3",
											"source": 34
										},
										{
											"begin": 6224,
											"end": 6239,
											"name": "ADD",
											"source": 34
										},
										{
											"begin": 6217,
											"end": 6267,
											"name": "MSTORE",
											"source": 34
										},
										{
											"begin": 6321,
											"end": 6323,
											"name": "PUSH",
											"source": 34,
											"value": "60"
										},
										{
											"begin": 6317,
											"end": 6319,
											"name": "DUP4",
											"source": 34
										},
										{
											"begin": 6313,
											"end": 6324,
											"name": "ADD",
											"source": 34
										},
										{
											"begin": 6300,
											"end": 6325,
											"name": "CALLDATALOAD",
											"source": 34
										},
										{
											"begin": 6295,
											"end": 6297,
											"name": "PUSH",
											"source": 34,
											"value": "60"
										},
										{
											"begin": 6287,
											"end": 6293,
											"name": "DUP3",
											"source": 34
										},
										{
											"begin": 6283,
											"end": 6298,
											"name": "ADD",
											"source": 34
										},
										{
											"begin": 6276,
											"end": 6326,
											"name": "MSTORE",
											"source": 34
										},
										{
											"begin": 6381,
											"end": 6384,
											"name": "PUSH",
											"source": 34,
											"value": "80"
										},
										{
											"begin": 6377,
											"end": 6379,
											"name": "DUP4",
											"source": 34
										},
										{
											"begin": 6373,
											"end": 6385,
											"name": "ADD",
											"source": 34
										},
										{
											"begin": 6360,
											"end": 6386,
											"name": "CALLDATALOAD",
											"source": 34
										},
										{
											"begin": 6354,
											"end": 6357,
											"name": "PUSH",
											"source": 34,
											"value": "80"
										},
										{
											"begin": 6346,
											"end": 6352,
											"name": "DUP3",
											"source": 34
										},
										{
											"begin": 6342,
											"end": 6358,
											"name": "ADD",
											"source": 34
										},
										{
											"begin": 6335,
											"end": 6387,
											"name": "MSTORE",
											"source": 34
										},
										{
											"begin": 6406,
											"end": 6412,
											"name": "DUP1",
											"source": 34
										},
										{
											"begin": 6396,
											"end": 6412,
											"name": "SWAP4",
											"source": 34
										},
										{
											"begin": 6396,
											"end": 6412,
											"name": "POP",
											"source": 34
										},
										{
											"begin": 6396,
											"end": 6412,
											"name": "POP",
											"source": 34
										},
										{
											"begin": 6396,
											"end": 6412,
											"name": "POP",
											"source": 34
										},
										{
											"begin": 6396,
											"end": 6412,
											"name": "POP",
											"source": 34
										},
										{
											"begin": 5480,
											"end": 6418,
											"name": "SWAP3",
											"source": 34
										},
										{
											"begin": 5480,
											"end": 6418,
											"name": "SWAP2",
											"source": 34
										},
										{
											"begin": 5480,
											"end": 6418,
											"name": "POP",
											"source": 34
										},
										{
											"begin": 5480,
											"end": 6418,
											"name": "POP",
											"source": 34
										},
										{
											"begin": 5480,
											"end": 6418,
											"name": "JUMP",
											"source": 34,
											"value": "[out]"
										},
										{
											"begin": 6423,
											"end": 6705,
											"name": "tag",
											"source": 34,
											"value": "30"
										},
										{
											"begin": 6423,
											"end": 6705,
											"name": "JUMPDEST",
											"source": 34
										},
										{
											"begin": 6423,
											"end": 6705,
											"name": "PUSH",
											"source": 34,
											"value": "0"
										},
										{
											"begin": 6577,
											"end": 6580,
											"name": "PUSH",
											"source": 34,
											"value": "100"
										},
										{
											"begin": 6565,
											"end": 6574,
											"name": "DUP3",
											"source": 34
										},
										{
											"begin": 6556,
											"end": 6563,
											"name": "DUP5",
											"source": 34
										},
										{
											"begin": 6552,
											"end": 6575,
											"name": "SUB",
											"source": 34
										},
										{
											"begin": 6548,
											"end": 6581,
											"name": "SLT",
											"source": 34
										},
										{
											"begin": 6545,
											"end": 6547,
											"name": "ISZERO",
											"source": 34
										},
										{
											"begin": 6545,
											"end": 6547,
											"name": "PUSH [tag]",
											"source": 34,
											"value": "487"
										},
										{
											"begin": 6545,
											"end": 6547,
											"name": "JUMPI",
											"source": 34
										},
										{
											"begin": 6599,
											"end": 6605,
											"name": "DUP1",
											"source": 34
										},
										{
											"begin": 6591,
											"end": 6597,
											"name": "DUP2",
											"source": 34
										},
										{
											"begin": 6584,
											"end": 6606,
											"name": "REVERT",
											"source": 34
										},
										{
											"begin": 6545,
											"end": 6547,
											"name": "tag",
											"source": 34,
											"value": "487"
										},
										{
											"begin": 6545,
											"end": 6547,
											"name": "JUMPDEST",
											"source": 34
										},
										{
											"begin": 6627,
											"end": 6699,
											"name": "PUSH [tag]",
											"source": 34,
											"value": "441"
										},
										{
											"begin": 6691,
											"end": 6698,
											"name": "DUP4",
											"source": 34
										},
										{
											"begin": 6680,
											"end": 6689,
											"name": "DUP4",
											"source": 34
										},
										{
											"begin": 6627,
											"end": 6699,
											"name": "PUSH [tag]",
											"source": 34,
											"value": "436"
										},
										{
											"begin": 6627,
											"end": 6699,
											"name": "JUMP",
											"source": 34,
											"value": "[in]"
										},
										{
											"begin": 6710,
											"end": 7137,
											"name": "tag",
											"source": 34,
											"value": "87"
										},
										{
											"begin": 6710,
											"end": 7137,
											"name": "JUMPDEST",
											"source": 34
										},
										{
											"begin": 6710,
											"end": 7137,
											"name": "PUSH",
											"source": 34,
											"value": "0"
										},
										{
											"begin": 6859,
											"end": 6861,
											"name": "PUSH",
											"source": 34,
											"value": "20"
										},
										{
											"begin": 6847,
											"end": 6856,
											"name": "DUP3",
											"source": 34
										},
										{
											"begin": 6838,
											"end": 6845,
											"name": "DUP5",
											"source": 34
										},
										{
											"begin": 6834,
											"end": 6857,
											"name": "SUB",
											"source": 34
										},
										{
											"begin": 6830,
											"end": 6862,
											"name": "SLT",
											"source": 34
										},
										{
											"begin": 6827,
											"end": 6829,
											"name": "ISZERO",
											"source": 34
										},
										{
											"begin": 6827,
											"end": 6829,
											"name": "PUSH [tag]",
											"source": 34,
											"value": "490"
										},
										{
											"begin": 6827,
											"end": 6829,
											"name": "JUMPI",
											"source": 34
										},
										{
											"begin": 6880,
											"end": 6886,
											"name": "DUP1",
											"source": 34
										},
										{
											"begin": 6872,
											"end": 6878,
											"name": "DUP2",
											"source": 34
										},
										{
											"begin": 6865,
											"end": 6887,
											"name": "REVERT",
											"source": 34
										},
										{
											"begin": 6827,
											"end": 6829,
											"name": "tag",
											"source": 34,
											"value": "490"
										},
										{
											"begin": 6827,
											"end": 6829,
											"name": "JUMPDEST",
											"source": 34
										},
										{
											"begin": 6925,
											"end": 6934,
											"name": "DUP2",
											"source": 34
										},
										{
											"begin": 6912,
											"end": 6935,
											"name": "CALLDATALOAD",
											"source": 34
										},
										{
											"begin": 6958,
											"end": 6976,
											"name": "PUSH",
											"source": 34,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6950,
											"end": 6956,
											"name": "DUP2",
											"source": 34
										},
										{
											"begin": 6947,
											"end": 6977,
											"name": "GT",
											"source": 34
										},
										{
											"begin": 6944,
											"end": 6946,
											"name": "ISZERO",
											"source": 34
										},
										{
											"begin": 6944,
											"end": 6946,
											"name": "PUSH [tag]",
											"source": 34,
											"value": "491"
										},
										{
											"begin": 6944,
											"end": 6946,
											"name": "JUMPI",
											"source": 34
										},
										{
											"begin": 6995,
											"end": 7001,
											"name": "DUP2",
											"source": 34
										},
										{
											"begin": 6987,
											"end": 6993,
											"name": "DUP3",
											"source": 34
										},
										{
											"begin": 6980,
											"end": 7002,
											"name": "REVERT",
											"source": 34
										},
										{
											"begin": 6944,
											"end": 6946,
											"name": "tag",
											"source": 34,
											"value": "491"
										},
										{
											"begin": 6944,
											"end": 6946,
											"name": "JUMPDEST",
											"source": 34
										},
										{
											"begin": 7023,
											"end": 7045,
											"name": "DUP3",
											"source": 34
										},
										{
											"begin": 7023,
											"end": 7045,
											"name": "ADD",
											"source": 34
										},
										{
											"begin": 7079,
											"end": 7082,
											"name": "PUSH",
											"source": 34,
											"value": "A0"
										},
										{
											"begin": 7061,
											"end": 7077,
											"name": "DUP2",
											"source": 34
										},
										{
											"begin": 7061,
											"end": 7077,
											"name": "DUP6",
											"source": 34
										},
										{
											"begin": 7061,
											"end": 7077,
											"name": "SUB",
											"source": 34
										},
										{
											"begin": 7057,
											"end": 7083,
											"name": "SLT",
											"source": 34
										},
										{
											"begin": 7054,
											"end": 7056,
											"name": "ISZERO",
											"source": 34
										},
										{
											"begin": 7054,
											"end": 7056,
											"name": "PUSH [tag]",
											"source": 34,
											"value": "441"
										},
										{
											"begin": 7054,
											"end": 7056,
											"name": "JUMPI",
											"source": 34
										},
										{
											"begin": 7101,
											"end": 7107,
											"name": "DUP2",
											"source": 34
										},
										{
											"begin": 7093,
											"end": 7099,
											"name": "DUP3",
											"source": 34
										},
										{
											"begin": 7086,
											"end": 7108,
											"name": "REVERT",
											"source": 34
										},
										{
											"begin": 7430,
											"end": 8358,
											"name": "tag",
											"source": 34,
											"value": "265"
										},
										{
											"begin": 7430,
											"end": 8358,
											"name": "JUMPDEST",
											"source": 34
										},
										{
											"begin": 7430,
											"end": 8358,
											"name": "PUSH",
											"source": 34,
											"value": "0"
										},
										{
											"begin": 7576,
											"end": 7578,
											"name": "PUSH",
											"source": 34,
											"value": "20"
										},
										{
											"begin": 7564,
											"end": 7573,
											"name": "DUP3",
											"source": 34
										},
										{
											"begin": 7555,
											"end": 7562,
											"name": "DUP5",
											"source": 34
										},
										{
											"begin": 7551,
											"end": 7574,
											"name": "SUB",
											"source": 34
										},
										{
											"begin": 7547,
											"end": 7579,
											"name": "SLT",
											"source": 34
										},
										{
											"begin": 7544,
											"end": 7546,
											"name": "ISZERO",
											"source": 34
										},
										{
											"begin": 7544,
											"end": 7546,
											"name": "PUSH [tag]",
											"source": 34,
											"value": "497"
										},
										{
											"begin": 7544,
											"end": 7546,
											"name": "JUMPI",
											"source": 34
										},
										{
											"begin": 7597,
											"end": 7603,
											"name": "DUP1",
											"source": 34
										},
										{
											"begin": 7589,
											"end": 7595,
											"name": "DUP2",
											"source": 34
										},
										{
											"begin": 7582,
											"end": 7604,
											"name": "REVERT",
											"source": 34
										},
										{
											"begin": 7544,
											"end": 7546,
											"name": "tag",
											"source": 34,
											"value": "497"
										},
										{
											"begin": 7544,
											"end": 7546,
											"name": "JUMPDEST",
											"source": 34
										},
										{
											"begin": 7642,
											"end": 7651,
											"name": "DUP2",
											"source": 34
										},
										{
											"begin": 7629,
											"end": 7652,
											"name": "CALLDATALOAD",
											"source": 34
										},
										{
											"begin": 7671,
											"end": 7689,
											"name": "PUSH",
											"source": 34,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7712,
											"end": 7714,
											"name": "DUP1",
											"source": 34
										},
										{
											"begin": 7704,
											"end": 7710,
											"name": "DUP3",
											"source": 34
										},
										{
											"begin": 7701,
											"end": 7715,
											"name": "GT",
											"source": 34
										},
										{
											"begin": 7698,
											"end": 7700,
											"name": "ISZERO",
											"source": 34
										},
										{
											"begin": 7698,
											"end": 7700,
											"name": "PUSH [tag]",
											"source": 34,
											"value": "498"
										},
										{
											"begin": 7698,
											"end": 7700,
											"name": "JUMPI",
											"source": 34
										},
										{
											"begin": 7733,
											"end": 7739,
											"name": "DUP3",
											"source": 34
										},
										{
											"begin": 7725,
											"end": 7731,
											"name": "DUP4",
											"source": 34
										},
										{
											"begin": 7718,
											"end": 7740,
											"name": "REVERT",
											"source": 34
										},
										{
											"begin": 7698,
											"end": 7700,
											"name": "tag",
											"source": 34,
											"value": "498"
										},
										{
											"begin": 7698,
											"end": 7700,
											"name": "JUMPDEST",
											"source": 34
										},
										{
											"begin": 7761,
											"end": 7783,
											"name": "SWAP1",
											"source": 34
										},
										{
											"begin": 7761,
											"end": 7783,
											"name": "DUP4",
											"source": 34
										},
										{
											"begin": 7761,
											"end": 7783,
											"name": "ADD",
											"source": 34
										},
										{
											"begin": 7761,
											"end": 7783,
											"name": "SWAP1",
											"source": 34
										},
										{
											"begin": 7817,
											"end": 7821,
											"name": "PUSH",
											"source": 34,
											"value": "40"
										},
										{
											"begin": 7799,
											"end": 7815,
											"name": "DUP3",
											"source": 34
										},
										{
											"begin": 7799,
											"end": 7815,
											"name": "DUP7",
											"source": 34
										},
										{
											"begin": 7799,
											"end": 7815,
											"name": "SUB",
											"source": 34
										},
										{
											"begin": 7795,
											"end": 7822,
											"name": "SLT",
											"source": 34
										},
										{
											"begin": 7792,
											"end": 7794,
											"name": "ISZERO",
											"source": 34
										},
										{
											"begin": 7792,
											"end": 7794,
											"name": "PUSH [tag]",
											"source": 34,
											"value": "499"
										},
										{
											"begin": 7792,
											"end": 7794,
											"name": "JUMPI",
											"source": 34
										},
										{
											"begin": 7840,
											"end": 7846,
											"name": "DUP3",
											"source": 34
										},
										{
											"begin": 7832,
											"end": 7838,
											"name": "DUP4",
											"source": 34
										},
										{
											"begin": 7825,
											"end": 7847,
											"name": "REVERT",
											"source": 34
										},
										{
											"begin": 7792,
											"end": 7794,
											"name": "tag",
											"source": 34,
											"value": "499"
										},
										{
											"begin": 7792,
											"end": 7794,
											"name": "JUMPDEST",
											"source": 34
										},
										{
											"begin": 7878,
											"end": 7882,
											"name": "PUSH",
											"source": 34,
											"value": "40"
										},
										{
											"begin": 7872,
											"end": 7883,
											"name": "MLOAD",
											"source": 34
										},
										{
											"begin": 7922,
											"end": 7926,
											"name": "PUSH",
											"source": 34,
											"value": "40"
										},
										{
											"begin": 7914,
											"end": 7920,
											"name": "DUP2",
											"source": 34
										},
										{
											"begin": 7910,
											"end": 7927,
											"name": "ADD",
											"source": 34
										},
										{
											"begin": 7977,
											"end": 7983,
											"name": "DUP2",
											"source": 34
										},
										{
											"begin": 7965,
											"end": 7975,
											"name": "DUP2",
											"source": 34
										},
										{
											"begin": 7962,
											"end": 7984,
											"name": "LT",
											"source": 34
										},
										{
											"begin": 7957,
											"end": 7959,
											"name": "DUP4",
											"source": 34
										},
										{
											"begin": 7945,
											"end": 7955,
											"name": "DUP3",
											"source": 34
										},
										{
											"begin": 7942,
											"end": 7960,
											"name": "GT",
											"source": 34
										},
										{
											"begin": 7939,
											"end": 7985,
											"name": "OR",
											"source": 34
										},
										{
											"begin": 7936,
											"end": 7938,
											"name": "ISZERO",
											"source": 34
										},
										{
											"begin": 7936,
											"end": 7938,
											"name": "PUSH [tag]",
											"source": 34,
											"value": "500"
										},
										{
											"begin": 7936,
											"end": 7938,
											"name": "JUMPI",
											"source": 34
										},
										{
											"begin": 7988,
											"end": 7997,
											"name": "INVALID",
											"source": 34
										},
										{
											"begin": 7936,
											"end": 7938,
											"name": "tag",
											"source": 34,
											"value": "500"
										},
										{
											"begin": 7936,
											"end": 7938,
											"name": "JUMPDEST",
											"source": 34
										},
										{
											"begin": 8015,
											"end": 8019,
											"name": "PUSH",
											"source": 34,
											"value": "40"
										},
										{
											"begin": 8008,
											"end": 8032,
											"name": "MSTORE",
											"source": 34
										},
										{
											"begin": 8057,
											"end": 8073,
											"name": "DUP3",
											"source": 34
										},
										{
											"begin": 8057,
											"end": 8073,
											"name": "CALLDATALOAD",
											"source": 34
										},
										{
											"begin": 8085,
											"end": 8101,
											"name": "DUP3",
											"source": 34
										},
										{
											"begin": 8085,
											"end": 8101,
											"name": "DUP2",
											"source": 34
										},
										{
											"begin": 8085,
											"end": 8101,
											"name": "GT",
											"source": 34
										},
										{
											"begin": 8082,
											"end": 8084,
											"name": "ISZERO",
											"source": 34
										},
										{
											"begin": 8082,
											"end": 8084,
											"name": "PUSH [tag]",
											"source": 34,
											"value": "501"
										},
										{
											"begin": 8082,
											"end": 8084,
											"name": "JUMPI",
											"source": 34
										},
										{
											"begin": 8119,
											"end": 8125,
											"name": "DUP5",
											"source": 34
										},
										{
											"begin": 8111,
											"end": 8117,
											"name": "DUP6",
											"source": 34
										},
										{
											"begin": 8104,
											"end": 8126,
											"name": "REVERT",
											"source": 34
										},
										{
											"begin": 8082,
											"end": 8084,
											"name": "tag",
											"source": 34,
											"value": "501"
										},
										{
											"begin": 8082,
											"end": 8084,
											"name": "JUMPDEST",
											"source": 34
										},
										{
											"begin": 8152,
											"end": 8198,
											"name": "PUSH [tag]",
											"source": 34,
											"value": "502"
										},
										{
											"begin": 8190,
											"end": 8197,
											"name": "DUP8",
											"source": 34
										},
										{
											"begin": 8179,
											"end": 8187,
											"name": "DUP3",
											"source": 34
										},
										{
											"begin": 8175,
											"end": 8177,
											"name": "DUP7",
											"source": 34
										},
										{
											"begin": 8171,
											"end": 8188,
											"name": "ADD",
											"source": 34
										},
										{
											"begin": 8152,
											"end": 8198,
											"name": "PUSH [tag]",
											"source": 34,
											"value": "428"
										},
										{
											"begin": 8152,
											"end": 8198,
											"name": "JUMP",
											"source": 34,
											"value": "[in]"
										},
										{
											"begin": 8152,
											"end": 8198,
											"name": "tag",
											"source": 34,
											"value": "502"
										},
										{
											"begin": 8152,
											"end": 8198,
											"name": "JUMPDEST",
											"source": 34
										},
										{
											"begin": 8144,
											"end": 8150,
											"name": "DUP3",
											"source": 34
										},
										{
											"begin": 8137,
											"end": 8199,
											"name": "MSTORE",
											"source": 34
										},
										{
											"begin": 8137,
											"end": 8199,
											"name": "POP",
											"source": 34
										},
										{
											"begin": 8242,
											"end": 8244,
											"name": "PUSH",
											"source": 34,
											"value": "20"
										},
										{
											"begin": 8238,
											"end": 8240,
											"name": "DUP4",
											"source": 34
										},
										{
											"begin": 8234,
											"end": 8245,
											"name": "ADD",
											"source": 34
										},
										{
											"begin": 8221,
											"end": 8246,
											"name": "CALLDATALOAD",
											"source": 34
										},
										{
											"begin": 8208,
											"end": 8246,
											"name": "SWAP3",
											"source": 34
										},
										{
											"begin": 8208,
											"end": 8246,
											"name": "POP",
											"source": 34
										},
										{
											"begin": 8255,
											"end": 8288,
											"name": "PUSH [tag]",
											"source": 34,
											"value": "503"
										},
										{
											"begin": 8282,
											"end": 8287,
											"name": "DUP4",
											"source": 34
										},
										{
											"begin": 8255,
											"end": 8288,
											"name": "PUSH [tag]",
											"source": 34,
											"value": "427"
										},
										{
											"begin": 8255,
											"end": 8288,
											"name": "JUMP",
											"source": 34,
											"value": "[in]"
										},
										{
											"begin": 8255,
											"end": 8288,
											"name": "tag",
											"source": 34,
											"value": "503"
										},
										{
											"begin": 8255,
											"end": 8288,
											"name": "JUMPDEST",
											"source": 34
										},
										{
											"begin": 8316,
											"end": 8318,
											"name": "PUSH",
											"source": 34,
											"value": "20"
										},
										{
											"begin": 8304,
											"end": 8319,
											"name": "DUP2",
											"source": 34
										},
										{
											"begin": 8304,
											"end": 8319,
											"name": "ADD",
											"source": 34
										},
										{
											"begin": 8297,
											"end": 8327,
											"name": "SWAP3",
											"source": 34
										},
										{
											"begin": 8297,
											"end": 8327,
											"name": "SWAP1",
											"source": 34
										},
										{
											"begin": 8297,
											"end": 8327,
											"name": "SWAP3",
											"source": 34
										},
										{
											"begin": 8297,
											"end": 8327,
											"name": "MSTORE",
											"source": 34
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 8308,
											"end": 8314,
											"name": "SWAP4",
											"source": 34
										},
										{
											"begin": 7534,
											"end": 8358,
											"name": "SWAP3",
											"source": 34
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 7534,
											"end": 8358,
											"name": "JUMP",
											"source": 34,
											"value": "[out]"
										},
										{
											"begin": 8627,
											"end": 8921,
											"name": "tag",
											"source": 34,
											"value": "114"
										},
										{
											"begin": 8627,
											"end": 8921,
											"name": "JUMPDEST",
											"source": 34
										},
										{
											"begin": 8627,
											"end": 8921,
											"name": "PUSH",
											"source": 34,
											"value": "0"
										},
										{
											"begin": 8738,
											"end": 8740,
											"name": "PUSH",
											"source": 34,
											"value": "20"
										},
										{
											"begin": 8726,
											"end": 8735,
											"name": "DUP3",
											"source": 34
										},
										{
											"begin": 8717,
											"end": 8724,
											"name": "DUP5",
											"source": 34
										},
										{
											"begin": 8713,
											"end": 8736,
											"name": "SUB",
											"source": 34
										},
										{
											"begin": 8709,
											"end": 8741,
											"name": "SLT",
											"source": 34
										},
										{
											"begin": 8706,
											"end": 8708,
											"name": "ISZERO",
											"source": 34
										},
										{
											"begin": 8706,
											"end": 8708,
											"name": "PUSH [tag]",
											"source": 34,
											"value": "508"
										},
										{
											"begin": 8706,
											"end": 8708,
											"name": "JUMPI",
											"source": 34
										},
										{
											"begin": 8759,
											"end": 8765,
											"name": "DUP1",
											"source": 34
										},
										{
											"begin": 8751,
											"end": 8757,
											"name": "DUP2",
											"source": 34
										},
										{
											"begin": 8744,
											"end": 8766,
											"name": "REVERT",
											"source": 34
										},
										{
											"begin": 8706,
											"end": 8708,
											"name": "tag",
											"source": 34,
											"value": "508"
										},
										{
											"begin": 8706,
											"end": 8708,
											"name": "JUMPDEST",
											"source": 34
										},
										{
											"begin": 8803,
											"end": 8812,
											"name": "DUP2",
											"source": 34
										},
										{
											"begin": 8790,
											"end": 8813,
											"name": "CALLDATALOAD",
											"source": 34
										},
										{
											"begin": 8853,
											"end": 8861,
											"name": "PUSH",
											"source": 34,
											"value": "FFFFFF"
										},
										{
											"begin": 8846,
											"end": 8851,
											"name": "DUP2",
											"source": 34
										},
										{
											"begin": 8842,
											"end": 8862,
											"name": "AND",
											"source": 34
										},
										{
											"begin": 8835,
											"end": 8840,
											"name": "DUP2",
											"source": 34
										},
										{
											"begin": 8832,
											"end": 8863,
											"name": "EQ",
											"source": 34
										},
										{
											"begin": 8822,
											"end": 8824,
											"name": "PUSH [tag]",
											"source": 34,
											"value": "441"
										},
										{
											"begin": 8822,
											"end": 8824,
											"name": "JUMPI",
											"source": 34
										},
										{
											"begin": 8882,
											"end": 8888,
											"name": "DUP2",
											"source": 34
										},
										{
											"begin": 8874,
											"end": 8880,
											"name": "DUP3",
											"source": 34
										},
										{
											"begin": 8867,
											"end": 8889,
											"name": "REVERT",
											"source": 34
										},
										{
											"begin": 8926,
											"end": 9253,
											"name": "tag",
											"source": 34,
											"value": "40"
										},
										{
											"begin": 8926,
											"end": 9253,
											"name": "JUMPDEST",
											"source": 34
										},
										{
											"begin": 8926,
											"end": 9253,
											"name": "PUSH",
											"source": 34,
											"value": "0"
										},
										{
											"begin": 8926,
											"end": 9253,
											"name": "DUP1",
											"source": 34
										},
										{
											"begin": 9055,
											"end": 9057,
											"name": "PUSH",
											"source": 34,
											"value": "40"
										},
										{
											"begin": 9043,
											"end": 9052,
											"name": "DUP4",
											"source": 34
										},
										{
											"begin": 9034,
											"end": 9041,
											"name": "DUP6",
											"source": 34
										},
										{
											"begin": 9030,
											"end": 9053,
											"name": "SUB",
											"source": 34
										},
										{
											"begin": 9026,
											"end": 9058,
											"name": "SLT",
											"source": 34
										},
										{
											"begin": 9023,
											"end": 9025,
											"name": "ISZERO",
											"source": 34
										},
										{
											"begin": 9023,
											"end": 9025,
											"name": "PUSH [tag]",
											"source": 34,
											"value": "511"
										},
										{
											"begin": 9023,
											"end": 9025,
											"name": "JUMPI",
											"source": 34
										},
										{
											"begin": 9076,
											"end": 9082,
											"name": "DUP2",
											"source": 34
										},
										{
											"begin": 9068,
											"end": 9074,
											"name": "DUP3",
											"source": 34
										},
										{
											"begin": 9061,
											"end": 9083,
											"name": "REVERT",
											"source": 34
										},
										{
											"begin": 9023,
											"end": 9025,
											"name": "tag",
											"source": 34,
											"value": "511"
										},
										{
											"begin": 9023,
											"end": 9025,
											"name": "JUMPDEST",
											"source": 34
										},
										{
											"begin": 9117,
											"end": 9126,
											"name": "DUP3",
											"source": 34
										},
										{
											"begin": 9104,
											"end": 9127,
											"name": "CALLDATALOAD",
											"source": 34
										},
										{
											"begin": 9094,
											"end": 9127,
											"name": "SWAP2",
											"source": 34
										},
										{
											"begin": 9094,
											"end": 9127,
											"name": "POP",
											"source": 34
										},
										{
											"begin": 9177,
											"end": 9179,
											"name": "PUSH",
											"source": 34,
											"value": "20"
										},
										{
											"begin": 9166,
											"end": 9175,
											"name": "DUP4",
											"source": 34
										},
										{
											"begin": 9162,
											"end": 9180,
											"name": "ADD",
											"source": 34
										},
										{
											"begin": 9149,
											"end": 9181,
											"name": "CALLDATALOAD",
											"source": 34
										},
										{
											"begin": 9190,
											"end": 9223,
											"name": "PUSH [tag]",
											"source": 34,
											"value": "512"
										},
										{
											"begin": 9217,
											"end": 9222,
											"name": "DUP2",
											"source": 34
										},
										{
											"begin": 9190,
											"end": 9223,
											"name": "PUSH [tag]",
											"source": 34,
											"value": "427"
										},
										{
											"begin": 9190,
											"end": 9223,
											"name": "JUMP",
											"source": 34,
											"value": "[in]"
										},
										{
											"begin": 9190,
											"end": 9223,
											"name": "tag",
											"source": 34,
											"value": "512"
										},
										{
											"begin": 9190,
											"end": 9223,
											"name": "JUMPDEST",
											"source": 34
										},
										{
											"begin": 9242,
											"end": 9247,
											"name": "DUP1",
											"source": 34
										},
										{
											"begin": 9232,
											"end": 9247,
											"name": "SWAP2",
											"source": 34
										},
										{
											"begin": 9232,
											"end": 9247,
											"name": "POP",
											"source": 34
										},
										{
											"begin": 9232,
											"end": 9247,
											"name": "POP",
											"source": 34
										},
										{
											"begin": 9013,
											"end": 9253,
											"name": "SWAP3",
											"source": 34
										},
										{
											"begin": 9013,
											"end": 9253,
											"name": "POP",
											"source": 34
										},
										{
											"begin": 9013,
											"end": 9253,
											"name": "SWAP3",
											"source": 34
										},
										{
											"begin": 9013,
											"end": 9253,
											"name": "SWAP1",
											"source": 34
										},
										{
											"begin": 9013,
											"end": 9253,
											"name": "POP",
											"source": 34
										},
										{
											"begin": 9013,
											"end": 9253,
											"name": "JUMP",
											"source": 34,
											"value": "[out]"
										},
										{
											"begin": 9258,
											"end": 9797,
											"name": "tag",
											"source": 34,
											"value": "49"
										},
										{
											"begin": 9258,
											"end": 9797,
											"name": "JUMPDEST",
											"source": 34
										},
										{
											"begin": 9258,
											"end": 9797,
											"name": "PUSH",
											"source": 34,
											"value": "0"
										},
										{
											"begin": 9258,
											"end": 9797,
											"name": "DUP1",
											"source": 34
										},
										{
											"begin": 9258,
											"end": 9797,
											"name": "PUSH",
											"source": 34,
											"value": "0"
										},
										{
											"begin": 9258,
											"end": 9797,
											"name": "DUP1",
											"source": 34
										},
										{
											"begin": 9421,
											"end": 9424,
											"name": "PUSH",
											"source": 34,
											"value": "80"
										},
										{
											"begin": 9409,
											"end": 9418,
											"name": "DUP6",
											"source": 34
										},
										{
											"begin": 9400,
											"end": 9407,
											"name": "DUP8",
											"source": 34
										},
										{
											"begin": 9396,
											"end": 9419,
											"name": "SUB",
											"source": 34
										},
										{
											"begin": 9392,
											"end": 9425,
											"name": "SLT",
											"source": 34
										},
										{
											"begin": 9389,
											"end": 9391,
											"name": "ISZERO",
											"source": 34
										},
										{
											"begin": 9389,
											"end": 9391,
											"name": "PUSH [tag]",
											"source": 34,
											"value": "514"
										},
										{
											"begin": 9389,
											"end": 9391,
											"name": "JUMPI",
											"source": 34
										},
										{
											"begin": 9443,
											"end": 9449,
											"name": "DUP2",
											"source": 34
										},
										{
											"begin": 9435,
											"end": 9441,
											"name": "DUP3",
											"source": 34
										},
										{
											"begin": 9428,
											"end": 9450,
											"name": "REVERT",
											"source": 34
										},
										{
											"begin": 9389,
											"end": 9391,
											"name": "tag",
											"source": 34,
											"value": "514"
										},
										{
											"begin": 9389,
											"end": 9391,
											"name": "JUMPDEST",
											"source": 34
										},
										{
											"begin": 9484,
											"end": 9493,
											"name": "DUP5",
											"source": 34
										},
										{
											"begin": 9471,
											"end": 9494,
											"name": "CALLDATALOAD",
											"source": 34
										},
										{
											"begin": 9461,
											"end": 9494,
											"name": "SWAP4",
											"source": 34
										},
										{
											"begin": 9461,
											"end": 9494,
											"name": "POP",
											"source": 34
										},
										{
											"begin": 9544,
											"end": 9546,
											"name": "PUSH",
											"source": 34,
											"value": "20"
										},
										{
											"begin": 9533,
											"end": 9542,
											"name": "DUP6",
											"source": 34
										},
										{
											"begin": 9529,
											"end": 9547,
											"name": "ADD",
											"source": 34
										},
										{
											"begin": 9516,
											"end": 9548,
											"name": "CALLDATALOAD",
											"source": 34
										},
										{
											"begin": 9557,
											"end": 9590,
											"name": "PUSH [tag]",
											"source": 34,
											"value": "515"
										},
										{
											"begin": 9584,
											"end": 9589,
											"name": "DUP2",
											"source": 34
										},
										{
											"begin": 9557,
											"end": 9590,
											"name": "PUSH [tag]",
											"source": 34,
											"value": "427"
										},
										{
											"begin": 9557,
											"end": 9590,
											"name": "JUMP",
											"source": 34,
											"value": "[in]"
										},
										{
											"begin": 9557,
											"end": 9590,
											"name": "tag",
											"source": 34,
											"value": "515"
										},
										{
											"begin": 9557,
											"end": 9590,
											"name": "JUMPDEST",
											"source": 34
										},
										{
											"begin": 9609,
											"end": 9614,
											"name": "SWAP3",
											"source": 34
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 9661,
											"end": 9663,
											"name": "PUSH",
											"source": 34,
											"value": "40"
										},
										{
											"begin": 9646,
											"end": 9664,
											"name": "DUP6",
											"source": 34
										},
										{
											"begin": 9646,
											"end": 9664,
											"name": "ADD",
											"source": 34
										},
										{
											"begin": 9633,
											"end": 9665,
											"name": "CALLDATALOAD",
											"source": 34
										},
										{
											"begin": 9633,
											"end": 9665,
											"name": "SWAP2",
											"source": 34
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 9717,
											"end": 9719,
											"name": "PUSH",
											"source": 34,
											"value": "60"
										},
										{
											"begin": 9702,
											"end": 9720,
											"name": "DUP6",
											"source": 34
										},
										{
											"begin": 9702,
											"end": 9720,
											"name": "ADD",
											"source": 34
										},
										{
											"begin": 9689,
											"end": 9721,
											"name": "CALLDATALOAD",
											"source": 34
										},
										{
											"begin": 9730,
											"end": 9765,
											"name": "PUSH [tag]",
											"source": 34,
											"value": "516"
										},
										{
											"begin": 9689,
											"end": 9721,
											"name": "DUP2",
											"source": 34
										},
										{
											"begin": 9730,
											"end": 9765,
											"name": "PUSH [tag]",
											"source": 34,
											"value": "427"
										},
										{
											"begin": 9730,
											"end": 9765,
											"name": "JUMP",
											"source": 34,
											"value": "[in]"
										},
										{
											"begin": 9730,
											"end": 9765,
											"name": "tag",
											"source": 34,
											"value": "516"
										},
										{
											"begin": 9730,
											"end": 9765,
											"name": "JUMPDEST",
											"source": 34
										},
										{
											"begin": 9379,
											"end": 9797,
											"name": "SWAP4",
											"source": 34
										},
										{
											"begin": 9379,
											"end": 9797,
											"name": "SWAP7",
											"source": 34
										},
										{
											"begin": 9379,
											"end": 9797,
											"name": "SWAP3",
											"source": 34
										},
										{
											"begin": 9379,
											"end": 9797,
											"name": "SWAP6",
											"source": 34
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 9379,
											"end": 9797,
											"name": "SWAP1",
											"source": 34
										},
										{
											"begin": 9379,
											"end": 9797,
											"name": "SWAP4",
											"source": 34
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 9379,
											"end": 9797,
											"name": "JUMP",
											"source": 34,
											"value": "[out]"
										},
										{
											"begin": 9802,
											"end": 10061,
											"name": "tag",
											"source": 34,
											"value": "517"
										},
										{
											"begin": 9802,
											"end": 10061,
											"name": "JUMPDEST",
											"source": 34
										},
										{
											"begin": 9802,
											"end": 10061,
											"name": "PUSH",
											"source": 34,
											"value": "0"
										},
										{
											"begin": 9883,
											"end": 9888,
											"name": "DUP2",
											"source": 34
										},
										{
											"begin": 9877,
											"end": 9889,
											"name": "MLOAD",
											"source": 34
										},
										{
											"begin": 9910,
											"end": 9916,
											"name": "DUP1",
											"source": 34
										},
										{
											"begin": 9905,
											"end": 9908,
											"name": "DUP5",
											"source": 34
										},
										{
											"begin": 9898,
											"end": 9917,
											"name": "MSTORE",
											"source": 34
										},
										{
											"begin": 9926,
											"end": 9989,
											"name": "PUSH [tag]",
											"source": 34,
											"value": "519"
										},
										{
											"begin": 9982,
											"end": 9988,
											"name": "DUP2",
											"source": 34
										},
										{
											"begin": 9975,
											"end": 9979,
											"name": "PUSH",
											"source": 34,
											"value": "20"
										},
										{
											"begin": 9970,
											"end": 9973,
											"name": "DUP7",
											"source": 34
										},
										{
											"begin": 9966,
											"end": 9980,
											"name": "ADD",
											"source": 34
										},
										{
											"begin": 9959,
											"end": 9963,
											"name": "PUSH",
											"source": 34,
											"value": "20"
										},
										{
											"begin": 9952,
											"end": 9957,
											"name": "DUP7",
											"source": 34
										},
										{
											"begin": 9948,
											"end": 9964,
											"name": "ADD",
											"source": 34
										},
										{
											"begin": 9926,
											"end": 9989,
											"name": "PUSH [tag]",
											"source": 34,
											"value": "477"
										},
										{
											"begin": 9926,
											"end": 9989,
											"name": "JUMP",
											"source": 34,
											"value": "[in]"
										},
										{
											"begin": 9926,
											"end": 9989,
											"name": "tag",
											"source": 34,
											"value": "519"
										},
										{
											"begin": 9926,
											"end": 9989,
											"name": "JUMPDEST",
											"source": 34
										},
										{
											"begin": 10043,
											"end": 10045,
											"name": "PUSH",
											"source": 34,
											"value": "1F"
										},
										{
											"begin": 10022,
											"end": 10037,
											"name": "ADD",
											"source": 34
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 10018,
											"end": 10047,
											"name": "AND",
											"source": 34
										},
										{
											"begin": 10009,
											"end": 10048,
											"name": "SWAP3",
											"source": 34
										},
										{
											"begin": 10009,
											"end": 10048,
											"name": "SWAP1",
											"source": 34
										},
										{
											"begin": 10009,
											"end": 10048,
											"name": "SWAP3",
											"source": 34
										},
										{
											"begin": 10009,
											"end": 10048,
											"name": "ADD",
											"source": 34
										},
										{
											"begin": 10050,
											"end": 10054,
											"name": "PUSH",
											"source": 34,
											"value": "20"
										},
										{
											"begin": 10005,
											"end": 10055,
											"name": "ADD",
											"source": 34
										},
										{
											"begin": 10005,
											"end": 10055,
											"name": "SWAP3",
											"source": 34
										},
										{
											"begin": 9853,
											"end": 10061,
											"name": "SWAP2",
											"source": 34
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 9853,
											"end": 10061,
											"name": "JUMP",
											"source": 34,
											"value": "[out]"
										},
										{
											"begin": 10066,
											"end": 10497,
											"name": "tag",
											"source": 34,
											"value": "117"
										},
										{
											"begin": 10066,
											"end": 10497,
											"name": "JUMPDEST",
											"source": 34
										},
										{
											"begin": 10319,
											"end": 10321,
											"name": "PUSH",
											"source": 34,
											"value": "60"
										},
										{
											"begin": 10315,
											"end": 10330,
											"name": "SWAP4",
											"source": 34
										},
										{
											"begin": 10315,
											"end": 10330,
											"name": "DUP5",
											"source": 34
										},
										{
											"begin": 10315,
											"end": 10330,
											"name": "SHL",
											"source": 34
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 10311,
											"end": 10335,
											"name": "SWAP1",
											"source": 34
										},
										{
											"begin": 10311,
											"end": 10335,
											"name": "DUP2",
											"source": 34
										},
										{
											"begin": 10311,
											"end": 10335,
											"name": "AND",
											"source": 34
										},
										{
											"begin": 10299,
											"end": 10336,
											"name": "DUP3",
											"source": 34
										},
										{
											"begin": 10299,
											"end": 10336,
											"name": "MSTORE",
											"source": 34
										},
										{
											"begin": 10392,
											"end": 10395,
											"name": "PUSH",
											"source": 34,
											"value": "E8"
										},
										{
											"begin": 10370,
											"end": 10386,
											"name": "SWAP4",
											"source": 34
										},
										{
											"begin": 10370,
											"end": 10386,
											"name": "SWAP1",
											"source": 34
										},
										{
											"begin": 10370,
											"end": 10386,
											"name": "SWAP4",
											"source": 34
										},
										{
											"begin": 10370,
											"end": 10386,
											"name": "SHL",
											"source": 34
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 10366,
											"end": 10407,
											"name": "AND",
											"source": 34
										},
										{
											"begin": 10361,
											"end": 10363,
											"name": "PUSH",
											"source": 34,
											"value": "14"
										},
										{
											"begin": 10352,
											"end": 10364,
											"name": "DUP3",
											"source": 34
										},
										{
											"begin": 10352,
											"end": 10364,
											"name": "ADD",
											"source": 34
										},
										{
											"begin": 10345,
											"end": 10408,
											"name": "MSTORE",
											"source": 34
										},
										{
											"begin": 10442,
											"end": 10457,
											"name": "SWAP3",
											"source": 34
										},
										{
											"begin": 10442,
											"end": 10457,
											"name": "SHL",
											"source": 34
										},
										{
											"begin": 10438,
											"end": 10462,
											"name": "AND",
											"source": 34
										},
										{
											"begin": 10433,
											"end": 10435,
											"name": "PUSH",
											"source": 34,
											"value": "17"
										},
										{
											"begin": 10424,
											"end": 10436,
											"name": "DUP3",
											"source": 34
										},
										{
											"begin": 10424,
											"end": 10436,
											"name": "ADD",
											"source": 34
										},
										{
											"begin": 10417,
											"end": 10463,
											"name": "MSTORE",
											"source": 34
										},
										{
											"begin": 10488,
											"end": 10490,
											"name": "PUSH",
											"source": 34,
											"value": "2B"
										},
										{
											"begin": 10479,
											"end": 10491,
											"name": "ADD",
											"source": 34
										},
										{
											"begin": 10479,
											"end": 10491,
											"name": "SWAP1",
											"source": 34
										},
										{
											"begin": 10239,
											"end": 10497,
											"name": "JUMP",
											"source": 34,
											"value": "[out]"
										},
										{
											"begin": 10502,
											"end": 10775,
											"name": "tag",
											"source": 34,
											"value": "173"
										},
										{
											"begin": 10502,
											"end": 10775,
											"name": "JUMPDEST",
											"source": 34
										},
										{
											"begin": 10502,
											"end": 10775,
											"name": "PUSH",
											"source": 34,
											"value": "0"
										},
										{
											"begin": 10685,
											"end": 10691,
											"name": "DUP3",
											"source": 34
										},
										{
											"begin": 10677,
											"end": 10683,
											"name": "DUP5",
											"source": 34
										},
										{
											"begin": 10672,
											"end": 10675,
											"name": "DUP4",
											"source": 34
										},
										{
											"begin": 10659,
											"end": 10692,
											"name": "CALLDATACOPY",
											"source": 34
										},
										{
											"begin": 10711,
											"end": 10727,
											"name": "SWAP2",
											"source": 34
										},
										{
											"begin": 10711,
											"end": 10727,
											"name": "ADD",
											"source": 34
										},
										{
											"begin": 10736,
											"end": 10751,
											"name": "SWAP1",
											"source": 34
										},
										{
											"begin": 10736,
											"end": 10751,
											"name": "DUP2",
											"source": 34
										},
										{
											"begin": 10736,
											"end": 10751,
											"name": "MSTORE",
											"source": 34
										},
										{
											"begin": 10711,
											"end": 10727,
											"name": "SWAP2",
											"source": 34
										},
										{
											"begin": 10649,
											"end": 10775,
											"name": "SWAP1",
											"source": 34
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 10649,
											"end": 10775,
											"name": "JUMP",
											"source": 34,
											"value": "[out]"
										},
										{
											"begin": 10780,
											"end": 10983,
											"name": "tag",
											"source": 34,
											"value": "46"
										},
										{
											"begin": 10780,
											"end": 10983,
											"name": "JUMPDEST",
											"source": 34
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 10944,
											"end": 10976,
											"name": "SWAP2",
											"source": 34
										},
										{
											"begin": 10944,
											"end": 10976,
											"name": "SWAP1",
											"source": 34
										},
										{
											"begin": 10944,
											"end": 10976,
											"name": "SWAP2",
											"source": 34
										},
										{
											"begin": 10944,
											"end": 10976,
											"name": "AND",
											"source": 34
										},
										{
											"begin": 10926,
											"end": 10977,
											"name": "DUP2",
											"source": 34
										},
										{
											"begin": 10926,
											"end": 10977,
											"name": "MSTORE",
											"source": 34
										},
										{
											"begin": 10914,
											"end": 10916,
											"name": "PUSH",
											"source": 34,
											"value": "20"
										},
										{
											"begin": 10899,
											"end": 10917,
											"name": "ADD",
											"source": 34
										},
										{
											"begin": 10899,
											"end": 10917,
											"name": "SWAP1",
											"source": 34
										},
										{
											"begin": 10881,
											"end": 10983,
											"name": "JUMP",
											"source": 34,
											"value": "[out]"
										},
										{
											"begin": 10988,
											"end": 11558,
											"name": "tag",
											"source": 34,
											"value": "307"
										},
										{
											"begin": 10988,
											"end": 11558,
											"name": "JUMPDEST",
											"source": 34
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 11277,
											"end": 11292,
											"name": "DUP7",
											"source": 34
										},
										{
											"begin": 11277,
											"end": 11292,
											"name": "DUP2",
											"source": 34
										},
										{
											"begin": 11277,
											"end": 11292,
											"name": "AND",
											"source": 34
										},
										{
											"begin": 11259,
											"end": 11293,
											"name": "DUP3",
											"source": 34
										},
										{
											"begin": 11259,
											"end": 11293,
											"name": "MSTORE",
											"source": 34
										},
										{
											"begin": 11336,
											"end": 11350,
											"name": "DUP6",
											"source": 34
										},
										{
											"begin": 11336,
											"end": 11350,
											"name": "ISZERO",
											"source": 34
										},
										{
											"begin": 11329,
											"end": 11351,
											"name": "ISZERO",
											"source": 34
										},
										{
											"begin": 11324,
											"end": 11326,
											"name": "PUSH",
											"source": 34,
											"value": "20"
										},
										{
											"begin": 11309,
											"end": 11327,
											"name": "DUP4",
											"source": 34
										},
										{
											"begin": 11309,
											"end": 11327,
											"name": "ADD",
											"source": 34
										},
										{
											"begin": 11302,
											"end": 11352,
											"name": "MSTORE",
											"source": 34
										},
										{
											"begin": 11383,
											"end": 11385,
											"name": "PUSH",
											"source": 34,
											"value": "40"
										},
										{
											"begin": 11368,
											"end": 11386,
											"name": "DUP3",
											"source": 34
										},
										{
											"begin": 11368,
											"end": 11386,
											"name": "ADD",
											"source": 34
										},
										{
											"begin": 11361,
											"end": 11395,
											"name": "DUP6",
											"source": 34
										},
										{
											"begin": 11361,
											"end": 11395,
											"name": "SWAP1",
											"source": 34
										},
										{
											"begin": 11361,
											"end": 11395,
											"name": "MSTORE",
											"source": 34
										},
										{
											"begin": 11431,
											"end": 11446,
											"name": "DUP4",
											"source": 34
										},
										{
											"begin": 11431,
											"end": 11446,
											"name": "AND",
											"source": 34
										},
										{
											"begin": 11426,
											"end": 11428,
											"name": "PUSH",
											"source": 34,
											"value": "60"
										},
										{
											"begin": 11411,
											"end": 11429,
											"name": "DUP3",
											"source": 34
										},
										{
											"begin": 11411,
											"end": 11429,
											"name": "ADD",
											"source": 34
										},
										{
											"begin": 11404,
											"end": 11447,
											"name": "MSTORE",
											"source": 34
										},
										{
											"begin": 11239,
											"end": 11242,
											"name": "PUSH",
											"source": 34,
											"value": "A0"
										},
										{
											"begin": 11478,
											"end": 11481,
											"name": "PUSH",
											"source": 34,
											"value": "80"
										},
										{
											"begin": 11463,
											"end": 11482,
											"name": "DUP3",
											"source": 34
										},
										{
											"begin": 11463,
											"end": 11482,
											"name": "ADD",
											"source": 34
										},
										{
											"begin": 11456,
											"end": 11488,
											"name": "DUP2",
											"source": 34
										},
										{
											"begin": 11456,
											"end": 11488,
											"name": "SWAP1",
											"source": 34
										},
										{
											"begin": 11456,
											"end": 11488,
											"name": "MSTORE",
											"source": 34
										},
										{
											"begin": 10988,
											"end": 11558,
											"name": "PUSH",
											"source": 34,
											"value": "0"
										},
										{
											"begin": 10988,
											"end": 11558,
											"name": "SWAP1",
											"source": 34
										},
										{
											"begin": 11505,
											"end": 11552,
											"name": "PUSH [tag]",
											"source": 34,
											"value": "524"
										},
										{
											"begin": 11505,
											"end": 11552,
											"name": "SWAP1",
											"source": 34
										},
										{
											"begin": 11532,
											"end": 11551,
											"name": "DUP4",
											"source": 34
										},
										{
											"begin": 11532,
											"end": 11551,
											"name": "ADD",
											"source": 34
										},
										{
											"begin": 11524,
											"end": 11530,
											"name": "DUP5",
											"source": 34
										},
										{
											"begin": 11505,
											"end": 11552,
											"name": "PUSH [tag]",
											"source": 34,
											"value": "517"
										},
										{
											"begin": 11505,
											"end": 11552,
											"name": "JUMP",
											"source": 34,
											"value": "[in]"
										},
										{
											"begin": 11505,
											"end": 11552,
											"name": "tag",
											"source": 34,
											"value": "524"
										},
										{
											"begin": 11505,
											"end": 11552,
											"name": "JUMPDEST",
											"source": 34
										},
										{
											"begin": 11497,
											"end": 11552,
											"name": "SWAP8",
											"source": 34
										},
										{
											"begin": 11211,
											"end": 11558,
											"name": "SWAP7",
											"source": 34
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 11211,
											"end": 11558,
											"name": "JUMP",
											"source": 34,
											"value": "[out]"
										},
										{
											"begin": 11563,
											"end": 12369,
											"name": "tag",
											"source": 34,
											"value": "59"
										},
										{
											"begin": 11563,
											"end": 12369,
											"name": "JUMPDEST",
											"source": 34
										},
										{
											"begin": 11563,
											"end": 12369,
											"name": "PUSH",
											"source": 34,
											"value": "0"
										},
										{
											"begin": 11752,
											"end": 11754,
											"name": "PUSH",
											"source": 34,
											"value": "20"
										},
										{
											"begin": 11792,
											"end": 11794,
											"name": "DUP1",
											"source": 34
										},
										{
											"begin": 11781,
											"end": 11790,
											"name": "DUP4",
											"source": 34
										},
										{
											"begin": 11777,
											"end": 11795,
											"name": "ADD",
											"source": 34
										},
										{
											"begin": 11822,
											"end": 11824,
											"name": "DUP2",
											"source": 34
										},
										{
											"begin": 11811,
											"end": 11820,
											"name": "DUP5",
											"source": 34
										},
										{
											"begin": 11804,
											"end": 11825,
											"name": "MSTORE",
											"source": 34
										},
										{
											"begin": 11845,
											"end": 11851,
											"name": "DUP1",
											"source": 34
										},
										{
											"begin": 11880,
											"end": 11886,
											"name": "DUP6",
											"source": 34
										},
										{
											"begin": 11874,
											"end": 11887,
											"name": "MLOAD",
											"source": 34
										},
										{
											"begin": 11911,
											"end": 11917,
											"name": "DUP1",
											"source": 34
										},
										{
											"begin": 11903,
											"end": 11909,
											"name": "DUP4",
											"source": 34
										},
										{
											"begin": 11896,
											"end": 11918,
											"name": "MSTORE",
											"source": 34
										},
										{
											"begin": 11949,
											"end": 11951,
											"name": "PUSH",
											"source": 34,
											"value": "40"
										},
										{
											"begin": 11938,
											"end": 11947,
											"name": "DUP7",
											"source": 34
										},
										{
											"begin": 11934,
											"end": 11952,
											"name": "ADD",
											"source": 34
										},
										{
											"begin": 11927,
											"end": 11952,
											"name": "SWAP2",
											"source": 34
										},
										{
											"begin": 11927,
											"end": 11952,
											"name": "POP",
											"source": 34
										},
										{
											"begin": 12012,
											"end": 12014,
											"name": "PUSH",
											"source": 34,
											"value": "40"
										},
										{
											"begin": 12006,
											"end": 12008,
											"name": "DUP5",
											"source": 34
										},
										{
											"begin": 11998,
											"end": 12004,
											"name": "DUP3",
											"source": 34
										},
										{
											"begin": 11994,
											"end": 12009,
											"name": "MUL",
											"source": 34
										},
										{
											"begin": 11983,
											"end": 11992,
											"name": "DUP8",
											"source": 34
										},
										{
											"begin": 11979,
											"end": 12010,
											"name": "ADD",
											"source": 34
										},
										{
											"begin": 11975,
											"end": 12015,
											"name": "ADD",
											"source": 34
										},
										{
											"begin": 11961,
											"end": 12015,
											"name": "SWAP3",
											"source": 34
										},
										{
											"begin": 11961,
											"end": 12015,
											"name": "POP",
											"source": 34
										},
										{
											"begin": 12050,
											"end": 12052,
											"name": "DUP4",
											"source": 34
										},
										{
											"begin": 12042,
											"end": 12048,
											"name": "DUP8",
											"source": 34
										},
										{
											"begin": 12038,
											"end": 12053,
											"name": "ADD",
											"source": 34
										},
										{
											"begin": 12071,
											"end": 12075,
											"name": "DUP6",
											"source": 34
										},
										{
											"begin": 12084,
											"end": 12340,
											"name": "tag",
											"source": 34,
											"value": "526"
										},
										{
											"begin": 12084,
											"end": 12340,
											"name": "JUMPDEST",
											"source": 34
										},
										{
											"begin": 12098,
											"end": 12104,
											"name": "DUP3",
											"source": 34
										},
										{
											"begin": 12095,
											"end": 12096,
											"name": "DUP2",
											"source": 34
										},
										{
											"begin": 12092,
											"end": 12105,
											"name": "LT",
											"source": 34
										},
										{
											"begin": 12084,
											"end": 12340,
											"name": "ISZERO",
											"source": 34
										},
										{
											"begin": 12084,
											"end": 12340,
											"name": "PUSH [tag]",
											"source": 34,
											"value": "528"
										},
										{
											"begin": 12084,
											"end": 12340,
											"name": "JUMPI",
											"source": 34
										},
										{
											"begin": 12191,
											"end": 12193,
											"name": "PUSH",
											"source": 34,
											"value": "3F"
										},
										{
											"begin": 12187,
											"end": 12194,
											"name": "NOT",
											"source": 34
										},
										{
											"begin": 12175,
											"end": 12184,
											"name": "DUP9",
											"source": 34
										},
										{
											"begin": 12167,
											"end": 12173,
											"name": "DUP7",
											"source": 34
										},
										{
											"begin": 12163,
											"end": 12185,
											"name": "SUB",
											"source": 34
										},
										{
											"begin": 12159,
											"end": 12195,
											"name": "ADD",
											"source": 34
										},
										{
											"begin": 12154,
											"end": 12157,
											"name": "DUP5",
											"source": 34
										},
										{
											"begin": 12147,
											"end": 12196,
											"name": "MSTORE",
											"source": 34
										},
										{
											"begin": 12219,
											"end": 12260,
											"name": "PUSH [tag]",
											"source": 34,
											"value": "529"
										},
										{
											"begin": 12253,
											"end": 12259,
											"name": "DUP6",
											"source": 34
										},
										{
											"begin": 12244,
											"end": 12250,
											"name": "DUP4",
											"source": 34
										},
										{
											"begin": 12238,
											"end": 12251,
											"name": "MLOAD",
											"source": 34
										},
										{
											"begin": 12219,
											"end": 12260,
											"name": "PUSH [tag]",
											"source": 34,
											"value": "517"
										},
										{
											"begin": 12219,
											"end": 12260,
											"name": "JUMP",
											"source": 34,
											"value": "[in]"
										},
										{
											"begin": 12219,
											"end": 12260,
											"name": "tag",
											"source": 34,
											"value": "529"
										},
										{
											"begin": 12219,
											"end": 12260,
											"name": "JUMPDEST",
											"source": 34
										},
										{
											"begin": 12209,
											"end": 12260,
											"name": "SWAP5",
											"source": 34
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 12318,
											"end": 12330,
											"name": "SWAP3",
											"source": 34
										},
										{
											"begin": 12318,
											"end": 12330,
											"name": "DUP6",
											"source": 34
										},
										{
											"begin": 12318,
											"end": 12330,
											"name": "ADD",
											"source": 34
										},
										{
											"begin": 12318,
											"end": 12330,
											"name": "SWAP3",
											"source": 34
										},
										{
											"begin": 12283,
											"end": 12298,
											"name": "SWAP1",
											"source": 34
										},
										{
											"begin": 12283,
											"end": 12298,
											"name": "DUP6",
											"source": 34
										},
										{
											"begin": 12283,
											"end": 12298,
											"name": "ADD",
											"source": 34
										},
										{
											"begin": 12283,
											"end": 12298,
											"name": "SWAP1",
											"source": 34
										},
										{
											"begin": 12120,
											"end": 12121,
											"name": "PUSH",
											"source": 34,
											"value": "1"
										},
										{
											"begin": 12113,
											"end": 12122,
											"name": "ADD",
											"source": 34
										},
										{
											"begin": 12084,
											"end": 12340,
											"name": "PUSH [tag]",
											"source": 34,
											"value": "526"
										},
										{
											"begin": 12084,
											"end": 12340,
											"name": "JUMP",
											"source": 34
										},
										{
											"begin": 12084,
											"end": 12340,
											"name": "tag",
											"source": 34,
											"value": "528"
										},
										{
											"begin": 12084,
											"end": 12340,
											"name": "JUMPDEST",
											"source": 34
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 12357,
											"end": 12363,
											"name": "SWAP3",
											"source": 34
										},
										{
											"begin": 12357,
											"end": 12363,
											"name": "SWAP8",
											"source": 34
										},
										{
											"begin": 11732,
											"end": 12369,
											"name": "SWAP7",
											"source": 34
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 11732,
											"end": 12369,
											"name": "JUMP",
											"source": 34,
											"value": "[out]"
										},
										{
											"begin": 12374,
											"end": 12595,
											"name": "tag",
											"source": 34,
											"value": "182"
										},
										{
											"begin": 12374,
											"end": 12595,
											"name": "JUMPDEST",
											"source": 34
										},
										{
											"begin": 12374,
											"end": 12595,
											"name": "PUSH",
											"source": 34,
											"value": "0"
										},
										{
											"begin": 12523,
											"end": 12525,
											"name": "PUSH",
											"source": 34,
											"value": "20"
										},
										{
											"begin": 12512,
											"end": 12521,
											"name": "DUP3",
											"source": 34
										},
										{
											"begin": 12505,
											"end": 12526,
											"name": "MSTORE",
											"source": 34
										},
										{
											"begin": 12543,
											"end": 12589,
											"name": "PUSH [tag]",
											"source": 34,
											"value": "441"
										},
										{
											"begin": 12585,
											"end": 12587,
											"name": "PUSH",
											"source": 34,
											"value": "20"
										},
										{
											"begin": 12574,
											"end": 12583,
											"name": "DUP4",
											"source": 34
										},
										{
											"begin": 12570,
											"end": 12588,
											"name": "ADD",
											"source": 34
										},
										{
											"begin": 12562,
											"end": 12568,
											"name": "DUP5",
											"source": 34
										},
										{
											"begin": 12543,
											"end": 12589,
											"name": "PUSH [tag]",
											"source": 34,
											"value": "517"
										},
										{
											"begin": 12543,
											"end": 12589,
											"name": "JUMP",
											"source": 34,
											"value": "[in]"
										},
										{
											"begin": 12600,
											"end": 12942,
											"name": "tag",
											"source": 34,
											"value": "224"
										},
										{
											"begin": 12600,
											"end": 12942,
											"name": "JUMPDEST",
											"source": 34
										},
										{
											"begin": 12802,
											"end": 12804,
											"name": "PUSH",
											"source": 34,
											"value": "20"
										},
										{
											"begin": 12784,
											"end": 12805,
											"name": "DUP1",
											"source": 34
										},
										{
											"begin": 12784,
											"end": 12805,
											"name": "DUP3",
											"source": 34
										},
										{
											"begin": 12784,
											"end": 12805,
											"name": "MSTORE",
											"source": 34
										},
										{
											"begin": 12841,
											"end": 12843,
											"name": "PUSH",
											"source": 34,
											"value": "12"
										},
										{
											"begin": 12821,
											"end": 12839,
											"name": "SWAP1",
											"source": 34
										},
										{
											"begin": 12821,
											"end": 12839,
											"name": "DUP3",
											"source": 34
										},
										{
											"begin": 12821,
											"end": 12839,
											"name": "ADD",
											"source": 34
										},
										{
											"begin": 12814,
											"end": 12844,
											"name": "MSTORE",
											"source": 34
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "151BDBC81B5D58DA081C995C5D595CDD1959"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "72"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 12875,
											"end": 12877,
											"name": "PUSH",
											"source": 34,
											"value": "40"
										},
										{
											"begin": 12860,
											"end": 12878,
											"name": "DUP3",
											"source": 34
										},
										{
											"begin": 12860,
											"end": 12878,
											"name": "ADD",
											"source": 34
										},
										{
											"begin": 12853,
											"end": 12901,
											"name": "MSTORE",
											"source": 34
										},
										{
											"begin": 12933,
											"end": 12935,
											"name": "PUSH",
											"source": 34,
											"value": "60"
										},
										{
											"begin": 12918,
											"end": 12936,
											"name": "ADD",
											"source": 34
										},
										{
											"begin": 12918,
											"end": 12936,
											"name": "SWAP1",
											"source": 34
										},
										{
											"begin": 12774,
											"end": 12942,
											"name": "JUMP",
											"source": 34,
											"value": "[out]"
										},
										{
											"begin": 12947,
											"end": 13290,
											"name": "tag",
											"source": 34,
											"value": "121"
										},
										{
											"begin": 12947,
											"end": 13290,
											"name": "JUMPDEST",
											"source": 34
										},
										{
											"begin": 13149,
											"end": 13151,
											"name": "PUSH",
											"source": 34,
											"value": "20"
										},
										{
											"begin": 13131,
											"end": 13152,
											"name": "DUP1",
											"source": 34
										},
										{
											"begin": 13131,
											"end": 13152,
											"name": "DUP3",
											"source": 34
										},
										{
											"begin": 13131,
											"end": 13152,
											"name": "MSTORE",
											"source": 34
										},
										{
											"begin": 13188,
											"end": 13190,
											"name": "PUSH",
											"source": 34,
											"value": "13"
										},
										{
											"begin": 13168,
											"end": 13186,
											"name": "SWAP1",
											"source": 34
										},
										{
											"begin": 13168,
											"end": 13186,
											"name": "DUP3",
											"source": 34
										},
										{
											"begin": 13168,
											"end": 13186,
											"name": "ADD",
											"source": 34
										},
										{
											"begin": 13161,
											"end": 13191,
											"name": "MSTORE",
											"source": 34
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "151BDBC81B1A5D1D1B19481C9958D95A5D9959"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "6A"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 13222,
											"end": 13224,
											"name": "PUSH",
											"source": 34,
											"value": "40"
										},
										{
											"begin": 13207,
											"end": 13225,
											"name": "DUP3",
											"source": 34
										},
										{
											"begin": 13207,
											"end": 13225,
											"name": "ADD",
											"source": 34
										},
										{
											"begin": 13200,
											"end": 13249,
											"name": "MSTORE",
											"source": 34
										},
										{
											"begin": 13281,
											"end": 13283,
											"name": "PUSH",
											"source": 34,
											"value": "60"
										},
										{
											"begin": 13266,
											"end": 13284,
											"name": "ADD",
											"source": 34
										},
										{
											"begin": 13266,
											"end": 13284,
											"name": "SWAP1",
											"source": 34
										},
										{
											"begin": 13121,
											"end": 13290,
											"name": "JUMP",
											"source": 34,
											"value": "[out]"
										},
										{
											"begin": 13295,
											"end": 13769,
											"name": "tag",
											"source": 34,
											"value": "305"
										},
										{
											"begin": 13295,
											"end": 13769,
											"name": "JUMPDEST",
											"source": 34
										},
										{
											"begin": 13295,
											"end": 13769,
											"name": "PUSH",
											"source": 34,
											"value": "0"
										},
										{
											"begin": 13492,
											"end": 13494,
											"name": "PUSH",
											"source": 34,
											"value": "20"
										},
										{
											"begin": 13481,
											"end": 13490,
											"name": "DUP3",
											"source": 34
										},
										{
											"begin": 13474,
											"end": 13495,
											"name": "MSTORE",
											"source": 34
										},
										{
											"begin": 13530,
											"end": 13536,
											"name": "DUP3",
											"source": 34
										},
										{
											"begin": 13524,
											"end": 13537,
											"name": "MLOAD",
											"source": 34
										},
										{
											"begin": 13573,
											"end": 13577,
											"name": "PUSH",
											"source": 34,
											"value": "40"
										},
										{
											"begin": 13568,
											"end": 13570,
											"name": "PUSH",
											"source": 34,
											"value": "20"
										},
										{
											"begin": 13557,
											"end": 13566,
											"name": "DUP5",
											"source": 34
										},
										{
											"begin": 13553,
											"end": 13571,
											"name": "ADD",
											"source": 34
										},
										{
											"begin": 13546,
											"end": 13578,
											"name": "MSTORE",
											"source": 34
										},
										{
											"begin": 13601,
											"end": 13653,
											"name": "PUSH [tag]",
											"source": 34,
											"value": "535"
										},
										{
											"begin": 13649,
											"end": 13651,
											"name": "PUSH",
											"source": 34,
											"value": "60"
										},
										{
											"begin": 13638,
											"end": 13647,
											"name": "DUP5",
											"source": 34
										},
										{
											"begin": 13634,
											"end": 13652,
											"name": "ADD",
											"source": 34
										},
										{
											"begin": 13620,
											"end": 13632,
											"name": "DUP3",
											"source": 34
										},
										{
											"begin": 13601,
											"end": 13653,
											"name": "PUSH [tag]",
											"source": 34,
											"value": "517"
										},
										{
											"begin": 13601,
											"end": 13653,
											"name": "JUMP",
											"source": 34,
											"value": "[in]"
										},
										{
											"begin": 13601,
											"end": 13653,
											"name": "tag",
											"source": 34,
											"value": "535"
										},
										{
											"begin": 13601,
											"end": 13653,
											"name": "JUMPDEST",
											"source": 34
										},
										{
											"begin": 13713,
											"end": 13715,
											"name": "PUSH",
											"source": 34,
											"value": "20"
										},
										{
											"begin": 13701,
											"end": 13716,
											"name": "SWAP5",
											"source": 34
										},
										{
											"begin": 13701,
											"end": 13716,
											"name": "SWAP1",
											"source": 34
										},
										{
											"begin": 13701,
											"end": 13716,
											"name": "SWAP5",
											"source": 34
										},
										{
											"begin": 13701,
											"end": 13716,
											"name": "ADD",
											"source": 34
										},
										{
											"begin": 13695,
											"end": 13717,
											"name": "MLOAD",
											"source": 34
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 13691,
											"end": 13739,
											"name": "AND",
											"source": 34
										},
										{
											"begin": 13684,
											"end": 13688,
											"name": "PUSH",
											"source": 34,
											"value": "40"
										},
										{
											"begin": 13669,
											"end": 13689,
											"name": "SWAP4",
											"source": 34
										},
										{
											"begin": 13669,
											"end": 13689,
											"name": "SWAP1",
											"source": 34
										},
										{
											"begin": 13669,
											"end": 13689,
											"name": "SWAP4",
											"source": 34
										},
										{
											"begin": 13669,
											"end": 13689,
											"name": "ADD",
											"source": 34
										},
										{
											"begin": 13662,
											"end": 13740,
											"name": "SWAP3",
											"source": 34
										},
										{
											"begin": 13662,
											"end": 13740,
											"name": "SWAP1",
											"source": 34
										},
										{
											"begin": 13662,
											"end": 13740,
											"name": "SWAP3",
											"source": 34
										},
										{
											"begin": 13662,
											"end": 13740,
											"name": "MSTORE",
											"source": 34
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 13587,
											"end": 13653,
											"name": "SWAP1",
											"source": 34
										},
										{
											"begin": 13587,
											"end": 13653,
											"name": "SWAP2",
											"source": 34
										},
										{
											"begin": 13464,
											"end": 13769,
											"name": "SWAP1",
											"source": 34
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 13464,
											"end": 13769,
											"name": "JUMP",
											"source": 34,
											"value": "[out]"
										},
										{
											"begin": 13774,
											"end": 13951,
											"name": "tag",
											"source": 34,
											"value": "33"
										},
										{
											"begin": 13774,
											"end": 13951,
											"name": "JUMPDEST",
											"source": 34
										},
										{
											"begin": 13920,
											"end": 13945,
											"name": "SWAP1",
											"source": 34
										},
										{
											"begin": 13920,
											"end": 13945,
											"name": "DUP2",
											"source": 34
										},
										{
											"begin": 13920,
											"end": 13945,
											"name": "MSTORE",
											"source": 34
										},
										{
											"begin": 13908,
											"end": 13910,
											"name": "PUSH",
											"source": 34,
											"value": "20"
										},
										{
											"begin": 13893,
											"end": 13911,
											"name": "ADD",
											"source": 34
										},
										{
											"begin": 13893,
											"end": 13911,
											"name": "SWAP1",
											"source": 34
										},
										{
											"begin": 13875,
											"end": 13951,
											"name": "JUMP",
											"source": 34,
											"value": "[out]"
										},
										{
											"begin": 13956,
											"end": 14489,
											"name": "tag",
											"source": 34,
											"value": "171"
										},
										{
											"begin": 13956,
											"end": 14489,
											"name": "JUMPDEST",
											"source": 34
										},
										{
											"begin": 13956,
											"end": 14489,
											"name": "PUSH",
											"source": 34,
											"value": "0"
										},
										{
											"begin": 13956,
											"end": 14489,
											"name": "DUP1",
											"source": 34
										},
										{
											"begin": 14099,
											"end": 14110,
											"name": "DUP4",
											"source": 34
										},
										{
											"begin": 14086,
											"end": 14111,
											"name": "CALLDATALOAD",
											"source": 34
										},
										{
											"begin": 14193,
											"end": 14195,
											"name": "PUSH",
											"source": 34,
											"value": "1E"
										},
										{
											"begin": 14189,
											"end": 14196,
											"name": "NOT",
											"source": 34
										},
										{
											"begin": 14178,
											"end": 14186,
											"name": "DUP5",
											"source": 34
										},
										{
											"begin": 14162,
											"end": 14176,
											"name": "CALLDATASIZE",
											"source": 34
										},
										{
											"begin": 14158,
											"end": 14187,
											"name": "SUB",
											"source": 34
										},
										{
											"begin": 14154,
											"end": 14197,
											"name": "ADD",
											"source": 34
										},
										{
											"begin": 14134,
											"end": 14152,
											"name": "DUP2",
											"source": 34
										},
										{
											"begin": 14130,
											"end": 14198,
											"name": "SLT",
											"source": 34
										},
										{
											"begin": 14120,
											"end": 14122,
											"name": "PUSH [tag]",
											"source": 34,
											"value": "538"
										},
										{
											"begin": 14120,
											"end": 14122,
											"name": "JUMPI",
											"source": 34
										},
										{
											"begin": 14215,
											"end": 14219,
											"name": "DUP3",
											"source": 34
										},
										{
											"begin": 14209,
											"end": 14213,
											"name": "DUP4",
											"source": 34
										},
										{
											"begin": 14202,
											"end": 14220,
											"name": "REVERT",
											"source": 34
										},
										{
											"begin": 14120,
											"end": 14122,
											"name": "tag",
											"source": 34,
											"value": "538"
										},
										{
											"begin": 14120,
											"end": 14122,
											"name": "JUMPDEST",
											"source": 34
										},
										{
											"begin": 14245,
											"end": 14278,
											"name": "DUP4",
											"source": 34
										},
										{
											"begin": 14245,
											"end": 14278,
											"name": "ADD",
											"source": 34
										},
										{
											"begin": 14297,
											"end": 14317,
											"name": "DUP1",
											"source": 34
										},
										{
											"begin": 14297,
											"end": 14317,
											"name": "CALLDATALOAD",
											"source": 34
										},
										{
											"begin": 14297,
											"end": 14317,
											"name": "SWAP2",
											"source": 34
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 14340,
											"end": 14358,
											"name": "PUSH",
											"source": 34,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 14329,
											"end": 14359,
											"name": "DUP3",
											"source": 34
										},
										{
											"begin": 14329,
											"end": 14359,
											"name": "GT",
											"source": 34
										},
										{
											"begin": 14326,
											"end": 14328,
											"name": "ISZERO",
											"source": 34
										},
										{
											"begin": 14326,
											"end": 14328,
											"name": "PUSH [tag]",
											"source": 34,
											"value": "539"
										},
										{
											"begin": 14326,
											"end": 14328,
											"name": "JUMPI",
											"source": 34
										},
										{
											"begin": 14375,
											"end": 14379,
											"name": "DUP3",
											"source": 34
										},
										{
											"begin": 14369,
											"end": 14373,
											"name": "DUP4",
											"source": 34
										},
										{
											"begin": 14362,
											"end": 14380,
											"name": "REVERT",
											"source": 34
										},
										{
											"begin": 14326,
											"end": 14328,
											"name": "tag",
											"source": 34,
											"value": "539"
										},
										{
											"begin": 14326,
											"end": 14328,
											"name": "JUMPDEST",
											"source": 34
										},
										{
											"begin": 14411,
											"end": 14415,
											"name": "PUSH",
											"source": 34,
											"value": "20"
										},
										{
											"begin": 14399,
											"end": 14416,
											"name": "ADD",
											"source": 34
										},
										{
											"begin": 14399,
											"end": 14416,
											"name": "SWAP2",
											"source": 34
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 14442,
											"end": 14456,
											"name": "CALLDATASIZE",
											"source": 34
										},
										{
											"begin": 14438,
											"end": 14465,
											"name": "DUP2",
											"source": 34
										},
										{
											"begin": 14438,
											"end": 14465,
											"name": "SWAP1",
											"source": 34
										},
										{
											"begin": 14438,
											"end": 14465,
											"name": "SUB",
											"source": 34
										},
										{
											"begin": 14428,
											"end": 14466,
											"name": "DUP3",
											"source": 34
										},
										{
											"begin": 14428,
											"end": 14466,
											"name": "SGT",
											"source": 34
										},
										{
											"begin": 14425,
											"end": 14427,
											"name": "ISZERO",
											"source": 34
										},
										{
											"begin": 14425,
											"end": 14427,
											"name": "PUSH [tag]",
											"source": 34,
											"value": "540"
										},
										{
											"begin": 14425,
											"end": 14427,
											"name": "JUMPI",
											"source": 34
										},
										{
											"begin": 14479,
											"end": 14480,
											"name": "PUSH",
											"source": 34,
											"value": "0"
										},
										{
											"begin": 14476,
											"end": 14477,
											"name": "DUP1",
											"source": 34
										},
										{
											"begin": 14469,
											"end": 14481,
											"name": "REVERT",
											"source": 34
										},
										{
											"begin": 14425,
											"end": 14427,
											"name": "tag",
											"source": 34,
											"value": "540"
										},
										{
											"begin": 14425,
											"end": 14427,
											"name": "JUMPDEST",
											"source": 34
										},
										{
											"begin": 14050,
											"end": 14489,
											"name": "SWAP3",
											"source": 34
										},
										{
											"begin": 14050,
											"end": 14489,
											"name": "POP",
											"source": 34
										},
										{
											"begin": 14050,
											"end": 14489,
											"name": "SWAP3",
											"source": 34
										},
										{
											"begin": 14050,
											"end": 14489,
											"name": "SWAP1",
											"source": 34
										},
										{
											"begin": 14050,
											"end": 14489,
											"name": "POP",
											"source": 34
										},
										{
											"begin": 14050,
											"end": 14489,
											"name": "JUMP",
											"source": 34,
											"value": "[out]"
										},
										{
											"begin": 14494,
											"end": 14736,
											"name": "tag",
											"source": 34,
											"value": "434"
										},
										{
											"begin": 14494,
											"end": 14736,
											"name": "JUMPDEST",
											"source": 34
										},
										{
											"begin": 14564,
											"end": 14566,
											"name": "PUSH",
											"source": 34,
											"value": "40"
										},
										{
											"begin": 14558,
											"end": 14567,
											"name": "MLOAD",
											"source": 34
										},
										{
											"begin": 14594,
											"end": 14611,
											"name": "DUP2",
											"source": 34
										},
										{
											"begin": 14594,
											"end": 14611,
											"name": "DUP2",
											"source": 34
										},
										{
											"begin": 14594,
											"end": 14611,
											"name": "ADD",
											"source": 34
										},
										{
											"begin": 14641,
											"end": 14659,
											"name": "PUSH",
											"source": 34,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 14626,
											"end": 14660,
											"name": "DUP2",
											"source": 34
										},
										{
											"begin": 14626,
											"end": 14660,
											"name": "GT",
											"source": 34
										},
										{
											"begin": 14662,
											"end": 14684,
											"name": "DUP3",
											"source": 34
										},
										{
											"begin": 14662,
											"end": 14684,
											"name": "DUP3",
											"source": 34
										},
										{
											"begin": 14662,
											"end": 14684,
											"name": "LT",
											"source": 34
										},
										{
											"begin": 14623,
											"end": 14685,
											"name": "OR",
											"source": 34
										},
										{
											"begin": 14620,
											"end": 14622,
											"name": "ISZERO",
											"source": 34
										},
										{
											"begin": 14620,
											"end": 14622,
											"name": "PUSH [tag]",
											"source": 34,
											"value": "542"
										},
										{
											"begin": 14620,
											"end": 14622,
											"name": "JUMPI",
											"source": 34
										},
										{
											"begin": 14688,
											"end": 14697,
											"name": "INVALID",
											"source": 34
										},
										{
											"begin": 14620,
											"end": 14622,
											"name": "tag",
											"source": 34,
											"value": "542"
										},
										{
											"begin": 14620,
											"end": 14622,
											"name": "JUMPDEST",
											"source": 34
										},
										{
											"begin": 14715,
											"end": 14717,
											"name": "PUSH",
											"source": 34,
											"value": "40"
										},
										{
											"begin": 14708,
											"end": 14730,
											"name": "MSTORE",
											"source": 34
										},
										{
											"begin": 14538,
											"end": 14736,
											"name": "SWAP2",
											"source": 34
										},
										{
											"begin": 14538,
											"end": 14736,
											"name": "SWAP1",
											"source": 34
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 14538,
											"end": 14736,
											"name": "JUMP",
											"source": 34,
											"value": "[out]"
										},
										{
											"begin": 14741,
											"end": 14922,
											"name": "tag",
											"source": 34,
											"value": "433"
										},
										{
											"begin": 14741,
											"end": 14922,
											"name": "JUMPDEST",
											"source": 34
										},
										{
											"begin": 14741,
											"end": 14922,
											"name": "PUSH",
											"source": 34,
											"value": "0"
										},
										{
											"begin": 14824,
											"end": 14842,
											"name": "PUSH",
											"source": 34,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 14816,
											"end": 14822,
											"name": "DUP3",
											"source": 34
										},
										{
											"begin": 14813,
											"end": 14843,
											"name": "GT",
											"source": 34
										},
										{
											"begin": 14810,
											"end": 14812,
											"name": "ISZERO",
											"source": 34
										},
										{
											"begin": 14810,
											"end": 14812,
											"name": "PUSH [tag]",
											"source": 34,
											"value": "544"
										},
										{
											"begin": 14810,
											"end": 14812,
											"name": "JUMPI",
											"source": 34
										},
										{
											"begin": 14846,
											"end": 14855,
											"name": "INVALID",
											"source": 34
										},
										{
											"begin": 14810,
											"end": 14812,
											"name": "tag",
											"source": 34,
											"value": "544"
										},
										{
											"begin": 14810,
											"end": 14812,
											"name": "JUMPDEST",
											"source": 34
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 14905,
											"end": 14907,
											"name": "PUSH",
											"source": 34,
											"value": "1F"
										},
										{
											"begin": 14882,
											"end": 14899,
											"name": "ADD",
											"source": 34
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 14878,
											"end": 14909,
											"name": "AND",
											"source": 34
										},
										{
											"begin": 14911,
											"end": 14915,
											"name": "PUSH",
											"source": 34,
											"value": "20"
										},
										{
											"begin": 14874,
											"end": 14916,
											"name": "ADD",
											"source": 34
										},
										{
											"begin": 14874,
											"end": 14916,
											"name": "SWAP1",
											"source": 34
										},
										{
											"begin": 14800,
											"end": 14922,
											"name": "JUMP",
											"source": 34,
											"value": "[out]"
										},
										{
											"begin": 14927,
											"end": 15185,
											"name": "tag",
											"source": 34,
											"value": "477"
										},
										{
											"begin": 14927,
											"end": 15185,
											"name": "JUMPDEST",
											"source": 34
										},
										{
											"begin": 14999,
											"end": 15000,
											"name": "PUSH",
											"source": 34,
											"value": "0"
										},
										{
											"begin": 15009,
											"end": 15122,
											"name": "tag",
											"source": 34,
											"value": "546"
										},
										{
											"begin": 15009,
											"end": 15122,
											"name": "JUMPDEST",
											"source": 34
										},
										{
											"begin": 15023,
											"end": 15029,
											"name": "DUP4",
											"source": 34
										},
										{
											"begin": 15020,
											"end": 15021,
											"name": "DUP2",
											"source": 34
										},
										{
											"begin": 15017,
											"end": 15030,
											"name": "LT",
											"source": 34
										},
										{
											"begin": 15009,
											"end": 15122,
											"name": "ISZERO",
											"source": 34
										},
										{
											"begin": 15009,
											"end": 15122,
											"name": "PUSH [tag]",
											"source": 34,
											"value": "548"
										},
										{
											"begin": 15009,
											"end": 15122,
											"name": "JUMPI",
											"source": 34
										},
										{
											"begin": 15099,
											"end": 15110,
											"name": "DUP2",
											"source": 34
										},
										{
											"begin": 15099,
											"end": 15110,
											"name": "DUP2",
											"source": 34
										},
										{
											"begin": 15099,
											"end": 15110,
											"name": "ADD",
											"source": 34
										},
										{
											"begin": 15093,
											"end": 15111,
											"name": "MLOAD",
											"source": 34
										},
										{
											"begin": 15080,
											"end": 15091,
											"name": "DUP4",
											"source": 34
										},
										{
											"begin": 15080,
											"end": 15091,
											"name": "DUP3",
											"source": 34
										},
										{
											"begin": 15080,
											"end": 15091,
											"name": "ADD",
											"source": 34
										},
										{
											"begin": 15073,
											"end": 15112,
											"name": "MSTORE",
											"source": 34
										},
										{
											"begin": 15045,
											"end": 15047,
											"name": "PUSH",
											"source": 34,
											"value": "20"
										},
										{
											"begin": 15038,
											"end": 15048,
											"name": "ADD",
											"source": 34
										},
										{
											"begin": 15009,
											"end": 15122,
											"name": "PUSH [tag]",
											"source": 34,
											"value": "546"
										},
										{
											"begin": 15009,
											"end": 15122,
											"name": "JUMP",
											"source": 34
										},
										{
											"begin": 15009,
											"end": 15122,
											"name": "tag",
											"source": 34,
											"value": "548"
										},
										{
											"begin": 15009,
											"end": 15122,
											"name": "JUMPDEST",
											"source": 34
										},
										{
											"begin": 15140,
											"end": 15146,
											"name": "DUP4",
											"source": 34
										},
										{
											"begin": 15137,
											"end": 15138,
											"name": "DUP2",
											"source": 34
										},
										{
											"begin": 15134,
											"end": 15147,
											"name": "GT",
											"source": 34
										},
										{
											"begin": 15131,
											"end": 15133,
											"name": "ISZERO",
											"source": 34
										},
										{
											"begin": 15131,
											"end": 15133,
											"name": "PUSH [tag]",
											"source": 34,
											"value": "232"
										},
										{
											"begin": 15131,
											"end": 15133,
											"name": "JUMPI",
											"source": 34
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 15175,
											"end": 15176,
											"name": "PUSH",
											"source": 34,
											"value": "0"
										},
										{
											"begin": 15157,
											"end": 15173,
											"name": "SWAP2",
											"source": 34
										},
										{
											"begin": 15157,
											"end": 15173,
											"name": "ADD",
											"source": 34
										},
										{
											"begin": 15150,
											"end": 15177,
											"name": "MSTORE",
											"source": 34
										},
										{
											"begin": 14980,
											"end": 15185,
											"name": "JUMP",
											"source": 34,
											"value": "[out]"
										},
										{
											"begin": 15190,
											"end": 15323,
											"name": "tag",
											"source": 34,
											"value": "427"
										},
										{
											"begin": 15190,
											"end": 15323,
											"name": "JUMPDEST",
											"source": 34
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 15267,
											"end": 15298,
											"name": "DUP2",
											"source": 34
										},
										{
											"begin": 15267,
											"end": 15298,
											"name": "AND",
											"source": 34
										},
										{
											"begin": 15257,
											"end": 15299,
											"name": "DUP2",
											"source": 34
										},
										{
											"begin": 15257,
											"end": 15299,
											"name": "EQ",
											"source": 34
										},
										{
											"begin": 15247,
											"end": 15249,
											"name": "PUSH [tag]",
											"source": 34,
											"value": "551"
										},
										{
											"begin": 15247,
											"end": 15249,
											"name": "JUMPI",
											"source": 34
										},
										{
											"begin": 15313,
											"end": 15314,
											"name": "PUSH",
											"source": 34,
											"value": "0"
										},
										{
											"begin": 15310,
											"end": 15311,
											"name": "DUP1",
											"source": 34
										},
										{
											"begin": 15303,
											"end": 15315,
											"name": "REVERT",
											"source": 34
										},
										{
											"begin": 15247,
											"end": 15249,
											"name": "tag",
											"source": 34,
											"value": "551"
										},
										{
											"begin": 15247,
											"end": 15249,
											"name": "JUMPDEST",
											"source": 34
										},
										{
											"begin": 15237,
											"end": 15323,
											"name": "POP",
											"source": 34
										},
										{
											"begin": 15237,
											"end": 15323,
											"name": "JUMP",
											"source": 34,
											"value": "[out]"
										}
									]
								}
							}
						},
						"methodIdentifiers": {
							"WETH9()": "4aa4a4fc",
							"exactInput((bytes,address,uint256,uint256,uint256))": "c04b8d59",
							"exactInputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))": "414bf389",
							"exactOutput((bytes,address,uint256,uint256,uint256))": "f28c0498",
							"exactOutputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))": "db3e2198",
							"factory()": "c45a0155",
							"multicall(bytes[])": "ac9650d8",
							"refundETH()": "12210e8a",
							"selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)": "f3995c67",
							"selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)": "4659a494",
							"selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)": "a4a78f0c",
							"selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)": "c2e3140a",
							"sweepToken(address,uint256,address)": "df2ab5bb",
							"sweepTokenWithFee(address,uint256,address,uint256,address)": "e0e189a0",
							"uniswapV3SwapCallback(int256,int256,bytes)": "fa461e33",
							"unwrapWETH9(uint256,address)": "49404b7c",
							"unwrapWETH9WithFee(uint256,address,uint256,address)": "9b2c0a37"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_WETH9\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"WETH9\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"path\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMinimum\",\"type\":\"uint256\"}],\"internalType\":\"struct ISwapRouter.ExactInputParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"exactInput\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMinimum\",\"type\":\"uint256\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceLimitX96\",\"type\":\"uint160\"}],\"internalType\":\"struct ISwapRouter.ExactInputSingleParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"exactInputSingle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"path\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMaximum\",\"type\":\"uint256\"}],\"internalType\":\"struct ISwapRouter.ExactOutputParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"exactOutput\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMaximum\",\"type\":\"uint256\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceLimitX96\",\"type\":\"uint160\"}],\"internalType\":\"struct ISwapRouter.ExactOutputSingleParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"exactOutputSingle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refundETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"selfPermit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"selfPermitAllowed\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"selfPermitAllowedIfNecessary\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"selfPermitIfNecessary\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountMinimum\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"sweepToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountMinimum\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeBips\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"feeRecipient\",\"type\":\"address\"}],\"name\":\"sweepTokenWithFee\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"amount0Delta\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"amount1Delta\",\"type\":\"int256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"uniswapV3SwapCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountMinimum\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"unwrapWETH9\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountMinimum\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeBips\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"feeRecipient\",\"type\":\"address\"}],\"name\":\"unwrapWETH9WithFee\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"exactInput((bytes,address,uint256,uint256,uint256))\":{\"params\":{\"params\":\"The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\"},\"returns\":{\"amountOut\":\"The amount of the received token\"}},\"exactInputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))\":{\"params\":{\"params\":\"The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\"},\"returns\":{\"amountOut\":\"The amount of the received token\"}},\"exactOutput((bytes,address,uint256,uint256,uint256))\":{\"params\":{\"params\":\"The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\"},\"returns\":{\"amountIn\":\"The amount of the input token\"}},\"exactOutputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))\":{\"params\":{\"params\":\"The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\"},\"returns\":{\"amountIn\":\"The amount of the input token\"}},\"multicall(bytes[])\":{\"details\":\"The `msg.value` should not be trusted for any method callable from multicall.\",\"params\":{\"data\":\"The encoded function data for each of the calls to make to this contract\"},\"returns\":{\"results\":\"The results from each of the calls passed in via data\"}},\"refundETH()\":{\"details\":\"Useful for bundling with mint or increase liquidity that uses ether, or exact output swaps that use ether for the input amount\"},\"selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"The `owner` is always msg.sender and the `spender` is always address(this).\",\"params\":{\"deadline\":\"A timestamp, the current blocktime must be less than or equal to this timestamp\",\"r\":\"Must produce valid secp256k1 signature from the holder along with `v` and `s`\",\"s\":\"Must produce valid secp256k1 signature from the holder along with `r` and `v`\",\"token\":\"The address of the token spent\",\"v\":\"Must produce valid secp256k1 signature from the holder along with `r` and `s`\",\"value\":\"The amount that can be spent of token\"}},\"selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"The `owner` is always msg.sender and the `spender` is always address(this)\",\"params\":{\"expiry\":\"The timestamp at which the permit is no longer valid\",\"nonce\":\"The current nonce of the owner\",\"r\":\"Must produce valid secp256k1 signature from the holder along with `v` and `s`\",\"s\":\"Must produce valid secp256k1 signature from the holder along with `r` and `v`\",\"token\":\"The address of the token spent\",\"v\":\"Must produce valid secp256k1 signature from the holder along with `r` and `s`\"}},\"selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"The `owner` is always msg.sender and the `spender` is always address(this) Can be used instead of #selfPermitAllowed to prevent calls from failing due to a frontrun of a call to #selfPermitAllowed.\",\"params\":{\"expiry\":\"The timestamp at which the permit is no longer valid\",\"nonce\":\"The current nonce of the owner\",\"r\":\"Must produce valid secp256k1 signature from the holder along with `v` and `s`\",\"s\":\"Must produce valid secp256k1 signature from the holder along with `r` and `v`\",\"token\":\"The address of the token spent\",\"v\":\"Must produce valid secp256k1 signature from the holder along with `r` and `s`\"}},\"selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"The `owner` is always msg.sender and the `spender` is always address(this). Can be used instead of #selfPermit to prevent calls from failing due to a frontrun of a call to #selfPermit\",\"params\":{\"deadline\":\"A timestamp, the current blocktime must be less than or equal to this timestamp\",\"r\":\"Must produce valid secp256k1 signature from the holder along with `v` and `s`\",\"s\":\"Must produce valid secp256k1 signature from the holder along with `r` and `v`\",\"token\":\"The address of the token spent\",\"v\":\"Must produce valid secp256k1 signature from the holder along with `r` and `s`\",\"value\":\"The amount that can be spent of token\"}},\"sweepToken(address,uint256,address)\":{\"details\":\"The amountMinimum parameter prevents malicious contracts from stealing the token from users\",\"params\":{\"amountMinimum\":\"The minimum amount of token required for a transfer\",\"recipient\":\"The destination address of the token\",\"token\":\"The contract address of the token which will be transferred to `recipient`\"}},\"sweepTokenWithFee(address,uint256,address,uint256,address)\":{\"details\":\"The amountMinimum parameter prevents malicious contracts from stealing the token from users\"},\"uniswapV3SwapCallback(int256,int256,bytes)\":{\"details\":\"In the implementation you must pay the pool tokens owed for the swap. The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory. amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\",\"params\":{\"amount0Delta\":\"The amount of token0 that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token0 to the pool.\",\"amount1Delta\":\"The amount of token1 that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token1 to the pool.\",\"data\":\"Any data passed through by the caller via the IUniswapV3PoolActions#swap call\"}},\"unwrapWETH9(uint256,address)\":{\"details\":\"The amountMinimum parameter prevents malicious contracts from stealing WETH9 from users.\",\"params\":{\"amountMinimum\":\"The minimum amount of WETH9 to unwrap\",\"recipient\":\"The address receiving ETH\"}},\"unwrapWETH9WithFee(uint256,address,uint256,address)\":{\"details\":\"The amountMinimum parameter prevents malicious contracts from stealing WETH9 from users.\"}},\"stateVariables\":{\"DEFAULT_AMOUNT_IN_CACHED\":{\"details\":\"Used as the placeholder value for amountInCached, because the computed amount in for an exact output swap can never actually be this value\"},\"amountInCached\":{\"details\":\"Transient storage variable used for returning the computed amount in for an exact output swap.\"}},\"title\":\"Uniswap V3 Swap Router\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"exactInput((bytes,address,uint256,uint256,uint256))\":{\"notice\":\"Swaps `amountIn` of one token for as much as possible of another along the specified path\"},\"exactInputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))\":{\"notice\":\"Swaps `amountIn` of one token for as much as possible of another token\"},\"exactOutput((bytes,address,uint256,uint256,uint256))\":{\"notice\":\"Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\"},\"exactOutputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))\":{\"notice\":\"Swaps as little as possible of one token for `amountOut` of another token\"},\"multicall(bytes[])\":{\"notice\":\"Call multiple functions in the current contract and return the data from all of them if they all succeed\"},\"refundETH()\":{\"notice\":\"Refunds any ETH balance held by this contract to the `msg.sender`\"},\"selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Permits this contract to spend a given token from `msg.sender`\"},\"selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Permits this contract to spend the sender's tokens for permit signatures that have the `allowed` parameter\"},\"selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Permits this contract to spend the sender's tokens for permit signatures that have the `allowed` parameter\"},\"selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Permits this contract to spend a given token from `msg.sender`\"},\"sweepToken(address,uint256,address)\":{\"notice\":\"Transfers the full amount of a token held by this contract to recipient\"},\"sweepTokenWithFee(address,uint256,address,uint256,address)\":{\"notice\":\"Transfers the full amount of a token held by this contract to recipient, with a percentage between 0 (exclusive) and 1 (inclusive) going to feeRecipient\"},\"uniswapV3SwapCallback(int256,int256,bytes)\":{\"notice\":\"Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\"},\"unwrapWETH9(uint256,address)\":{\"notice\":\"Unwraps the contract's WETH9 balance and sends it to recipient as ETH.\"},\"unwrapWETH9WithFee(uint256,address,uint256,address)\":{\"notice\":\"Unwraps the contract's WETH9 balance and sends it to recipient as ETH, with a percentage between 0 (exclusive), and 1 (inclusive) going to feeRecipient\"}},\"notice\":\"Router for stateless execution of swaps against Uniswap V3\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SwapRouter.sol\":\"SwapRouter\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/drafts/IERC20Permit.sol\":{\"keccak256\":\"0x1aab7754719ba764a8a05bec47e975001400f62986474945eb3dbee6d871259f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8c14e8ff1b384bdb68f262669364b1e79fbbd82b85938b7ce788a1395c40c6a2\",\"dweb:/ipfs/QmUKLXfSeEuRUXkeWLBhjHTKeSFoNBCS1RaMXv1AmHXYzn\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xbd74f587ab9b9711801baf667db1426e4a03fd2d7f15af33e0e0d0394e7cef76\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2d0913dfbfce90d170df0d496ad7596c0778518e5fa7aba6c32562522546f66b\",\"dweb:/ipfs/QmR6B8nLj2PJf5e1JWD9Nk7ErkAwkqUwadCnvE82FJr1RU\"]},\"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol\":{\"keccak256\":\"0xfe6113d518466cd6652c85b111e01f33eb62157f49ae5ed7d5a3947a2044adb1\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://1c42b9e6f5902ac38dd43e25750939baa7e0c1425dc75afd717c4412731065d5\",\"dweb:/ipfs/QmWaoacnzsucTvBME2o7YgZBZMhaHv7fkj83htHMVWJKWh\"]},\"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol\":{\"keccak256\":\"0x3f485fb1a44e8fbeadefb5da07d66edab3cfe809f0ac4074b1e54e3eb3c4cf69\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://095ce0626b41318c772b3ebf19d548282607f6a8f3d6c41c13edfbd5370c8652\",\"dweb:/ipfs/QmVDZfJJ89UUCE1hMyzqpkZAtQ8jUsBgZNE5AMRG7RzRFS\"]},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol\":{\"keccak256\":\"0x9453dd0e7442188667d01d9b65de3f1e14e9511ff3e303179a15f6fc267f7634\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://982f4328f956c3e60e67501e759eb292ac487f76460c774c50e9ae4fcc92aae5\",\"dweb:/ipfs/QmRnzEDsaqtd9PJEVcgQi7p5aV5pMSvRUoGZJAdwFUJxgZ\"]},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol\":{\"keccak256\":\"0xe603ac5b17ecdee73ba2b27efdf386c257a19c14206e87eee77e2017b742d9e5\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://8febc9bdb399a4d94bb89f5377732652e2400e4a8dee808201ade6848f9004e7\",\"dweb:/ipfs/QmaKDqYYFU4d2W2iN77aDHptfbFmYZRrMYXHeGpJmM8C1c\"]},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol\":{\"keccak256\":\"0x8071514d0fe5d17d6fbd31c191cdfb703031c24e0ece3621d88ab10e871375cd\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://d0b571930cc7488b1d546a7e9cea7c52d8b3c4e207da657ed0e0db7343b8cd03\",\"dweb:/ipfs/QmaGK6vVwB95QSTR1XMYvrh7ivYAYZxi3fD7v6VMA4jZ39\"]},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol\":{\"keccak256\":\"0xf6e5d2cd1139c4c276bdbc8e1d2b256e456c866a91f1b868da265c6d2685c3f7\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://b99c8c9ae8e27ee6559e5866bea82cbc9ffc8247f8d15b7422a4deb287d4d047\",\"dweb:/ipfs/QmfL8gaqt3ffAnm6nVj5ksuNpLygXuL3xq5VBqrkwC2JJ3\"]},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol\":{\"keccak256\":\"0x759b78a2918af9e99e246dc3af084f654e48ef32bb4e4cb8a966aa3dcaece235\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://64144fb96e1c7fdba87305acadb98a198d26a3d46c097cb3a666e567f6f29735\",\"dweb:/ipfs/QmUnWVwN9FKB9uV5Pr8YfLpWZnYM2DENnRMaadZ492JS9u\"]},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol\":{\"keccak256\":\"0x852dc1f5df7dcf7f11e7bb3eed79f0cea72ad4b25f6a9d2c35aafb48925fd49f\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://ed63907c38ff36b0e22bc9ffc53e791ea74f0d4f0e7c257fdfb5aaf8825b1f0f\",\"dweb:/ipfs/QmSQrckghEjs6HVsA5GVgpNpZWvTXMY5eQLF7cN6deFeEg\"]},\"@uniswap/v3-core/contracts/libraries/LowGasSafeMath.sol\":{\"keccak256\":\"0x86715eb960f18e01ac94e3bba4614ed51a887fa3c5bd1c43bf80aa98e019cf2d\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://bfc1d5d58e59015086b0e65a6c3a2ddad312e2350480510f6c0c8167f3d71a37\",\"dweb:/ipfs/QmQndULYjFsHKHjMAKLMfc12vWbVB5FawtioHtvwcWRJZp\"]},\"@uniswap/v3-core/contracts/libraries/SafeCast.sol\":{\"keccak256\":\"0x4c12bf820c0b011f5490a209960ca34dd8af34660ef9e01de0438393d15e3fd8\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://fed11489e218e55d087d42b4f350a30e10cd2aedec8f432bd3cc712f648d5869\",\"dweb:/ipfs/QmWfRnRxyXwHUDcTQPazxYYk5jxErGeQqdvnYtyg5nBPbU\"]},\"@uniswap/v3-core/contracts/libraries/TickMath.sol\":{\"keccak256\":\"0x1f864a2bf61ba05f3173eaf2e3f94c5e1da4bec0554757527b6d1ef1fe439e4e\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://5139b586df546a9d1c46804ca400b1cb9ce87236eaf212ebd64edee6747a172a\",\"dweb:/ipfs/QmVa2kcRw3VyuB6j1EVWXACKnkbQZgfXYXNi5voq3XkYG8\"]},\"contracts/SwapRouter.sol\":{\"keccak256\":\"0x7b0de62901711c029f094d5c31cda2200c81ee0945902efb7571cd1e2ed48bf6\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://7ffa62215bc50d5d9540f36e7913034c8ca2dcbbb9c085d70a23c5092498df73\",\"dweb:/ipfs/QmU2rUvEAkfsbkRk3yvMvrh5CVMzcbwLHxSo5QW9KU48iu\"]},\"contracts/base/BlockTimestamp.sol\":{\"keccak256\":\"0x1aa66f71234064a0c0976f62233f2edbd69554e5ad817dc97f318bc8e11f4da6\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://b3a40450e9d6b0f9cb91b40ffd6215612505bd74e7d954529958f4edc6ee7b93\",\"dweb:/ipfs/QmewsUCHK5N5KhNtqEwK8JgsXFADyFBrQRS5HoDWM5gi3b\"]},\"contracts/base/Multicall.sol\":{\"keccak256\":\"0xfcfd78c62d2145634a791d5680a1af7055fbd301c415d29c09333c99c37d9037\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://0d1c8f4a18cec8ad49e5269c5b07c7f6fd497dfc1b7b777f8ddcfb8055efd803\",\"dweb:/ipfs/QmdeCTnfHM3RGtQuo3DMX9m7gPspGGwQp7ho6m9cJjjnER\"]},\"contracts/base/PeripheryImmutableState.sol\":{\"keccak256\":\"0xd43c2355a7d5659b1fa1fb322647f760722d73a6a5e62ede53d426f3b406b795\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://657920576878ca936157383782a97b74166c303a3932c0d72eac3a2d057c3a96\",\"dweb:/ipfs/Qma71Ska1ZbPBnYpeE5S2EAeEtwGfHEMHo3SnDwY1fVmm5\"]},\"contracts/base/PeripheryPayments.sol\":{\"keccak256\":\"0xd6129c6c9605d84b2a205eaec18a25090c4002be7c54da3cee61b84a882b820b\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://db1a47eaa47416ee2d1f4b9a988e02687579ac2280bd1ce28a52758e7eaabc44\",\"dweb:/ipfs/QmcWrSBBRCay6SqWTt1kh4gfDFn2jQBtNZGQ6zk7vfZdNy\"]},\"contracts/base/PeripheryPaymentsWithFee.sol\":{\"keccak256\":\"0x741fce65e52728144c6ebee5380418b9e70a59e04725f2dd7e922a82fd794651\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://6ed09cd710995191d01a51af53b9cb557337f623f061663a6d6d2ead74f18fc2\",\"dweb:/ipfs/QmQDFQshWiHJZAKWKGAzo8vpjfRgmq9uoMp7NHnJdsAZEu\"]},\"contracts/base/PeripheryValidation.sol\":{\"keccak256\":\"0xc736bab599912d6212e8414ee4ba7af0c1e08ff6aa11caa85f5f6e07f7d421c3\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://06f6c13a86900c71fa486fc029a59d1b7eb96162bb42885b5f845d995294893e\",\"dweb:/ipfs/QmUcBxMsmncw9n6eXhzzwSasGBvBGKH5FT8HSrAxrsXV4A\"]},\"contracts/base/SelfPermit.sol\":{\"keccak256\":\"0xe75aedfc1eff6c84adac82b2bc41d197127a74530f0c344a7a122a6c8ec186be\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://05150ae691e10f2c9c82ad46de86c8b6683d8eba995e6f9ff82eaefc064902e9\",\"dweb:/ipfs/QmdKxxmxCPxV7qe11MbRhpaQXDAnnKWH1BoTMmEXYPAA7g\"]},\"contracts/interfaces/IMulticall.sol\":{\"keccak256\":\"0xa8f9d0061ee730a522dc4bae6bd5cabb3e997e2c5983da183e912bdca93dfa7b\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://496b68d4f72d58cc83cf51bd9cc9c99aaa46dc3c3df7c951a9e50ba29ee33016\",\"dweb:/ipfs/Qmc3bkXwuRP8mDpcKgvLgbCKn8tD8PGCaBjnLHSPMJCRGD\"]},\"contracts/interfaces/IPeripheryImmutableState.sol\":{\"keccak256\":\"0x7affcfeb5127c0925a71d6a65345e117c33537523aeca7bc98085ead8452519d\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://e16b291294210e71cb0f20cd0afe62ae2dc6878d627f5ccc19c4dc9cd80aec3f\",\"dweb:/ipfs/QmQGitSyBr26nour81BZmpmDMyJpvZRqHQZvnCD1Acb127\"]},\"contracts/interfaces/IPeripheryPayments.sol\":{\"keccak256\":\"0xb547e10f1e69bed03621a62b73a503e260643066c6b4054867a4d1fef47eb274\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://f9a90f58f5fd5fb42f7811f4094113b532f307b14a73764c91f977590747f407\",\"dweb:/ipfs/QmSeNH2mfiDMKf3Q6V2sqtNxx1s72JNuA1VVxRM9HoMqYp\"]},\"contracts/interfaces/IPeripheryPaymentsWithFee.sol\":{\"keccak256\":\"0x23ebe0ced112c7ca3869868874b691fcbb50f90c482580dc9ebe718bda34edfc\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://689ebfcb90a26bf31af6e35456e41940c23d145cfc59d1ae5f6fa060945dd768\",\"dweb:/ipfs/QmZxVsaUWqnEEsRcphuWBvuEExQxznztSmFUkMa5ks8AHY\"]},\"contracts/interfaces/ISelfPermit.sol\":{\"keccak256\":\"0xe1a1c072855e687c90317c15b9b6ce81cc683723f73d70e47b40f2f9bad0c2be\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://53b0881a1c55254d157054bd3d1c86982c0f5429bd2a9986c15479f6b71ef678\",\"dweb:/ipfs/Qmc9WZqXzQmqsA3xYxojbx9nXcG3FGuwAjM3opEmRGSnBb\"]},\"contracts/interfaces/ISwapRouter.sol\":{\"keccak256\":\"0x9bfaf1feb32814623e627ab70f2409760b15d95f1f9b058e2b3399a8bb732975\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://a8a2c3e55965b61bcd91993d8e1d5d34b8b8a63e0fdfce87a85f6af92526fd53\",\"dweb:/ipfs/QmQj2CSCSwqDSU4KMNWxGsN2336Cy64WgpV1X1EHXNZWxM\"]},\"contracts/interfaces/external/IERC20PermitAllowed.sol\":{\"keccak256\":\"0x8c4c1b8e724e0a78cb691d703dd37cd91b8bd6600537fb227807a194025a792d\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://783be851155842a02cdb0483c3a69ecc0e7ae8545f65cec1d4aeb355b2026a7d\",\"dweb:/ipfs/QmZNBQosTjpGNKB3Eo2K6Zzye7FYiLVoEki5iPB2Y69jz2\"]},\"contracts/interfaces/external/IWETH9.sol\":{\"keccak256\":\"0x6d7a8eb484e84bceb1d84c7be431c5b8120d519b0c2a7b4c7064c814635dea4c\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://8c3c81eb23b88076475e8ddd4edccb007358fa64911fc7e671a00adaf2006e75\",\"dweb:/ipfs/QmPbrPJ4w3UDPioJCvgtxMRaWNRa7tKHqDLtU17DTZPHBB\"]},\"contracts/libraries/BytesLib.sol\":{\"keccak256\":\"0x68629e5b1a30b6490c6ae721c28117f6f963745462b007da0769758eb67f10d4\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://370e31ceab1a7504f98dec122f65d9b8c6fc6420fd8cdd171b3dd57c4d5d21fc\",\"dweb:/ipfs/QmcquKATbnopgs92RdM5bKewt7GdCpgGhVY4hxmv1KjnnH\"]},\"contracts/libraries/CallbackValidation.sol\":{\"keccak256\":\"0x490c80ca7f4a0ee0514041ddec0867e8a52b24febf1670991797af8fed9f3eec\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://f775ba8ad52041a351fbd7000801266d5a10be2f1a53d13c6c9862b2baa935bd\",\"dweb:/ipfs/Qmcaxyr6VutZeaymeBNVcZrBVAHhyJ11sjhWpgj2GX6D5K\"]},\"contracts/libraries/Path.sol\":{\"keccak256\":\"0xb22c562b5175d50dbcc2224325666090d985f052abdcfe275c8dfc884e34de61\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://27aeff27314476ab3c77313ae1f0c5b2442b86315f5ce741cb2150a87c3cbad3\",\"dweb:/ipfs/QmQNno2g1CJvjnH6ych4LuHr1UZDEZPACgYG4XvivxGrqV\"]},\"contracts/libraries/PoolAddress.sol\":{\"keccak256\":\"0x5edd84eb8ba7c12fd8cb6cffe52e1e9f3f6464514ee5f539c2283826209035a2\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://f375d0e6d5ea3674e1aa6f112b021e9a86721a6a2f3cb22d673378b30cf0e840\",\"dweb:/ipfs/QmWJir2qnJyp963mU6U3jEEx9i3H3V5BgKawAfSnG1pC8w\"]},\"contracts/libraries/TransferHelper.sol\":{\"keccak256\":\"0x9af98b0908c96320ca6d08b22f0efca864742f6adbe5794cafe2d1d2e808b0cd\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://da1d1e81e5bf534f0bf2934b3193db6cb1933f91ec006d2b88e9ad10a617a2d2\",\"dweb:/ipfs/QmcPBk47QLMFWcX2y2S9eMFsJgoYWBd3R8ey55Bgmv6w6v\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 1351,
								"contract": "contracts/SwapRouter.sol:SwapRouter",
								"label": "amountInCached",
								"offset": 0,
								"slot": "0",
								"type": "t_uint256"
							}
						],
						"types": {
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"exactInput((bytes,address,uint256,uint256,uint256))": {
								"notice": "Swaps `amountIn` of one token for as much as possible of another along the specified path"
							},
							"exactInputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))": {
								"notice": "Swaps `amountIn` of one token for as much as possible of another token"
							},
							"exactOutput((bytes,address,uint256,uint256,uint256))": {
								"notice": "Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)"
							},
							"exactOutputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))": {
								"notice": "Swaps as little as possible of one token for `amountOut` of another token"
							},
							"multicall(bytes[])": {
								"notice": "Call multiple functions in the current contract and return the data from all of them if they all succeed"
							},
							"refundETH()": {
								"notice": "Refunds any ETH balance held by this contract to the `msg.sender`"
							},
							"selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)": {
								"notice": "Permits this contract to spend a given token from `msg.sender`"
							},
							"selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)": {
								"notice": "Permits this contract to spend the sender's tokens for permit signatures that have the `allowed` parameter"
							},
							"selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)": {
								"notice": "Permits this contract to spend the sender's tokens for permit signatures that have the `allowed` parameter"
							},
							"selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)": {
								"notice": "Permits this contract to spend a given token from `msg.sender`"
							},
							"sweepToken(address,uint256,address)": {
								"notice": "Transfers the full amount of a token held by this contract to recipient"
							},
							"sweepTokenWithFee(address,uint256,address,uint256,address)": {
								"notice": "Transfers the full amount of a token held by this contract to recipient, with a percentage between 0 (exclusive) and 1 (inclusive) going to feeRecipient"
							},
							"uniswapV3SwapCallback(int256,int256,bytes)": {
								"notice": "Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap."
							},
							"unwrapWETH9(uint256,address)": {
								"notice": "Unwraps the contract's WETH9 balance and sends it to recipient as ETH."
							},
							"unwrapWETH9WithFee(uint256,address,uint256,address)": {
								"notice": "Unwraps the contract's WETH9 balance and sends it to recipient as ETH, with a percentage between 0 (exclusive), and 1 (inclusive) going to feeRecipient"
							}
						},
						"notice": "Router for stateless execution of swaps against Uniswap V3",
						"version": 1
					}
				}
			},
			"contracts/base/BlockTimestamp.sol": {
				"BlockTimestamp": {
					"abi": [],
					"devdoc": {
						"details": "Base contract that is overridden for tests",
						"kind": "dev",
						"methods": {},
						"title": "Function for getting block timestamp",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Base contract that is overridden for tests\",\"kind\":\"dev\",\"methods\":{},\"title\":\"Function for getting block timestamp\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/base/BlockTimestamp.sol\":\"BlockTimestamp\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/base/BlockTimestamp.sol\":{\"keccak256\":\"0x1aa66f71234064a0c0976f62233f2edbd69554e5ad817dc97f318bc8e11f4da6\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://b3a40450e9d6b0f9cb91b40ffd6215612505bd74e7d954529958f4edc6ee7b93\",\"dweb:/ipfs/QmewsUCHK5N5KhNtqEwK8JgsXFADyFBrQRS5HoDWM5gi3b\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/base/Multicall.sol": {
				"Multicall": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "bytes[]",
									"name": "data",
									"type": "bytes[]"
								}
							],
							"name": "multicall",
							"outputs": [
								{
									"internalType": "bytes[]",
									"name": "results",
									"type": "bytes[]"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"multicall(bytes[])": {
								"details": "The `msg.value` should not be trusted for any method callable from multicall.",
								"params": {
									"data": "The encoded function data for each of the calls to make to this contract"
								},
								"returns": {
									"results": "The results from each of the calls passed in via data"
								}
							}
						},
						"title": "Multicall",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"multicall(bytes[])": "ac9650d8"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"multicall(bytes[])\":{\"details\":\"The `msg.value` should not be trusted for any method callable from multicall.\",\"params\":{\"data\":\"The encoded function data for each of the calls to make to this contract\"},\"returns\":{\"results\":\"The results from each of the calls passed in via data\"}}},\"title\":\"Multicall\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"multicall(bytes[])\":{\"notice\":\"Call multiple functions in the current contract and return the data from all of them if they all succeed\"}},\"notice\":\"Enables calling multiple methods in a single call to the contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/base/Multicall.sol\":\"Multicall\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/base/Multicall.sol\":{\"keccak256\":\"0xfcfd78c62d2145634a791d5680a1af7055fbd301c415d29c09333c99c37d9037\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://0d1c8f4a18cec8ad49e5269c5b07c7f6fd497dfc1b7b777f8ddcfb8055efd803\",\"dweb:/ipfs/QmdeCTnfHM3RGtQuo3DMX9m7gPspGGwQp7ho6m9cJjjnER\"]},\"contracts/interfaces/IMulticall.sol\":{\"keccak256\":\"0xa8f9d0061ee730a522dc4bae6bd5cabb3e997e2c5983da183e912bdca93dfa7b\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://496b68d4f72d58cc83cf51bd9cc9c99aaa46dc3c3df7c951a9e50ba29ee33016\",\"dweb:/ipfs/Qmc3bkXwuRP8mDpcKgvLgbCKn8tD8PGCaBjnLHSPMJCRGD\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"multicall(bytes[])": {
								"notice": "Call multiple functions in the current contract and return the data from all of them if they all succeed"
							}
						},
						"notice": "Enables calling multiple methods in a single call to the contract",
						"version": 1
					}
				}
			},
			"contracts/base/PeripheryImmutableState.sol": {
				"PeripheryImmutableState": {
					"abi": [
						{
							"inputs": [],
							"name": "WETH9",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "factory",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"stateVariables": {
							"WETH9": {
								"return": "Returns the address of WETH9"
							},
							"factory": {
								"return": "Returns the address of the Uniswap V3 factory"
							}
						},
						"title": "Immutable state",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"WETH9()": "4aa4a4fc",
							"factory()": "c45a0155"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"WETH9\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"WETH9\":{\"return\":\"Returns the address of WETH9\"},\"factory\":{\"return\":\"Returns the address of the Uniswap V3 factory\"}},\"title\":\"Immutable state\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Immutable state used by periphery contracts\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/base/PeripheryImmutableState.sol\":\"PeripheryImmutableState\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/base/PeripheryImmutableState.sol\":{\"keccak256\":\"0xd43c2355a7d5659b1fa1fb322647f760722d73a6a5e62ede53d426f3b406b795\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://657920576878ca936157383782a97b74166c303a3932c0d72eac3a2d057c3a96\",\"dweb:/ipfs/Qma71Ska1ZbPBnYpeE5S2EAeEtwGfHEMHo3SnDwY1fVmm5\"]},\"contracts/interfaces/IPeripheryImmutableState.sol\":{\"keccak256\":\"0x7affcfeb5127c0925a71d6a65345e117c33537523aeca7bc98085ead8452519d\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://e16b291294210e71cb0f20cd0afe62ae2dc6878d627f5ccc19c4dc9cd80aec3f\",\"dweb:/ipfs/QmQGitSyBr26nour81BZmpmDMyJpvZRqHQZvnCD1Acb127\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"notice": "Immutable state used by periphery contracts",
						"version": 1
					}
				}
			},
			"contracts/base/PeripheryPayments.sol": {
				"PeripheryPayments": {
					"abi": [
						{
							"inputs": [],
							"name": "WETH9",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "factory",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "refundETH",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amountMinimum",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								}
							],
							"name": "sweepToken",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "amountMinimum",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								}
							],
							"name": "unwrapWETH9",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"stateMutability": "payable",
							"type": "receive"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"refundETH()": {
								"details": "Useful for bundling with mint or increase liquidity that uses ether, or exact output swaps that use ether for the input amount"
							},
							"sweepToken(address,uint256,address)": {
								"details": "The amountMinimum parameter prevents malicious contracts from stealing the token from users",
								"params": {
									"amountMinimum": "The minimum amount of token required for a transfer",
									"recipient": "The destination address of the token",
									"token": "The contract address of the token which will be transferred to `recipient`"
								}
							},
							"unwrapWETH9(uint256,address)": {
								"details": "The amountMinimum parameter prevents malicious contracts from stealing WETH9 from users.",
								"params": {
									"amountMinimum": "The minimum amount of WETH9 to unwrap",
									"recipient": "The address receiving ETH"
								}
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"WETH9()": "4aa4a4fc",
							"factory()": "c45a0155",
							"refundETH()": "12210e8a",
							"sweepToken(address,uint256,address)": "df2ab5bb",
							"unwrapWETH9(uint256,address)": "49404b7c"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"WETH9\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refundETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountMinimum\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"sweepToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountMinimum\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"unwrapWETH9\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"refundETH()\":{\"details\":\"Useful for bundling with mint or increase liquidity that uses ether, or exact output swaps that use ether for the input amount\"},\"sweepToken(address,uint256,address)\":{\"details\":\"The amountMinimum parameter prevents malicious contracts from stealing the token from users\",\"params\":{\"amountMinimum\":\"The minimum amount of token required for a transfer\",\"recipient\":\"The destination address of the token\",\"token\":\"The contract address of the token which will be transferred to `recipient`\"}},\"unwrapWETH9(uint256,address)\":{\"details\":\"The amountMinimum parameter prevents malicious contracts from stealing WETH9 from users.\",\"params\":{\"amountMinimum\":\"The minimum amount of WETH9 to unwrap\",\"recipient\":\"The address receiving ETH\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"refundETH()\":{\"notice\":\"Refunds any ETH balance held by this contract to the `msg.sender`\"},\"sweepToken(address,uint256,address)\":{\"notice\":\"Transfers the full amount of a token held by this contract to recipient\"},\"unwrapWETH9(uint256,address)\":{\"notice\":\"Unwraps the contract's WETH9 balance and sends it to recipient as ETH.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/base/PeripheryPayments.sol\":\"PeripheryPayments\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xbd74f587ab9b9711801baf667db1426e4a03fd2d7f15af33e0e0d0394e7cef76\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2d0913dfbfce90d170df0d496ad7596c0778518e5fa7aba6c32562522546f66b\",\"dweb:/ipfs/QmR6B8nLj2PJf5e1JWD9Nk7ErkAwkqUwadCnvE82FJr1RU\"]},\"contracts/base/PeripheryImmutableState.sol\":{\"keccak256\":\"0xd43c2355a7d5659b1fa1fb322647f760722d73a6a5e62ede53d426f3b406b795\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://657920576878ca936157383782a97b74166c303a3932c0d72eac3a2d057c3a96\",\"dweb:/ipfs/Qma71Ska1ZbPBnYpeE5S2EAeEtwGfHEMHo3SnDwY1fVmm5\"]},\"contracts/base/PeripheryPayments.sol\":{\"keccak256\":\"0xd6129c6c9605d84b2a205eaec18a25090c4002be7c54da3cee61b84a882b820b\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://db1a47eaa47416ee2d1f4b9a988e02687579ac2280bd1ce28a52758e7eaabc44\",\"dweb:/ipfs/QmcWrSBBRCay6SqWTt1kh4gfDFn2jQBtNZGQ6zk7vfZdNy\"]},\"contracts/interfaces/IPeripheryImmutableState.sol\":{\"keccak256\":\"0x7affcfeb5127c0925a71d6a65345e117c33537523aeca7bc98085ead8452519d\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://e16b291294210e71cb0f20cd0afe62ae2dc6878d627f5ccc19c4dc9cd80aec3f\",\"dweb:/ipfs/QmQGitSyBr26nour81BZmpmDMyJpvZRqHQZvnCD1Acb127\"]},\"contracts/interfaces/IPeripheryPayments.sol\":{\"keccak256\":\"0xb547e10f1e69bed03621a62b73a503e260643066c6b4054867a4d1fef47eb274\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://f9a90f58f5fd5fb42f7811f4094113b532f307b14a73764c91f977590747f407\",\"dweb:/ipfs/QmSeNH2mfiDMKf3Q6V2sqtNxx1s72JNuA1VVxRM9HoMqYp\"]},\"contracts/interfaces/external/IWETH9.sol\":{\"keccak256\":\"0x6d7a8eb484e84bceb1d84c7be431c5b8120d519b0c2a7b4c7064c814635dea4c\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://8c3c81eb23b88076475e8ddd4edccb007358fa64911fc7e671a00adaf2006e75\",\"dweb:/ipfs/QmPbrPJ4w3UDPioJCvgtxMRaWNRa7tKHqDLtU17DTZPHBB\"]},\"contracts/libraries/TransferHelper.sol\":{\"keccak256\":\"0x9af98b0908c96320ca6d08b22f0efca864742f6adbe5794cafe2d1d2e808b0cd\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://da1d1e81e5bf534f0bf2934b3193db6cb1933f91ec006d2b88e9ad10a617a2d2\",\"dweb:/ipfs/QmcPBk47QLMFWcX2y2S9eMFsJgoYWBd3R8ey55Bgmv6w6v\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"refundETH()": {
								"notice": "Refunds any ETH balance held by this contract to the `msg.sender`"
							},
							"sweepToken(address,uint256,address)": {
								"notice": "Transfers the full amount of a token held by this contract to recipient"
							},
							"unwrapWETH9(uint256,address)": {
								"notice": "Unwraps the contract's WETH9 balance and sends it to recipient as ETH."
							}
						},
						"version": 1
					}
				}
			},
			"contracts/base/PeripheryPaymentsWithFee.sol": {
				"PeripheryPaymentsWithFee": {
					"abi": [
						{
							"inputs": [],
							"name": "WETH9",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "factory",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "refundETH",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amountMinimum",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								}
							],
							"name": "sweepToken",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amountMinimum",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "feeBips",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "feeRecipient",
									"type": "address"
								}
							],
							"name": "sweepTokenWithFee",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "amountMinimum",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								}
							],
							"name": "unwrapWETH9",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "amountMinimum",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "feeBips",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "feeRecipient",
									"type": "address"
								}
							],
							"name": "unwrapWETH9WithFee",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"stateMutability": "payable",
							"type": "receive"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"refundETH()": {
								"details": "Useful for bundling with mint or increase liquidity that uses ether, or exact output swaps that use ether for the input amount"
							},
							"sweepToken(address,uint256,address)": {
								"details": "The amountMinimum parameter prevents malicious contracts from stealing the token from users",
								"params": {
									"amountMinimum": "The minimum amount of token required for a transfer",
									"recipient": "The destination address of the token",
									"token": "The contract address of the token which will be transferred to `recipient`"
								}
							},
							"sweepTokenWithFee(address,uint256,address,uint256,address)": {
								"details": "The amountMinimum parameter prevents malicious contracts from stealing the token from users"
							},
							"unwrapWETH9(uint256,address)": {
								"details": "The amountMinimum parameter prevents malicious contracts from stealing WETH9 from users.",
								"params": {
									"amountMinimum": "The minimum amount of WETH9 to unwrap",
									"recipient": "The address receiving ETH"
								}
							},
							"unwrapWETH9WithFee(uint256,address,uint256,address)": {
								"details": "The amountMinimum parameter prevents malicious contracts from stealing WETH9 from users."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"WETH9()": "4aa4a4fc",
							"factory()": "c45a0155",
							"refundETH()": "12210e8a",
							"sweepToken(address,uint256,address)": "df2ab5bb",
							"sweepTokenWithFee(address,uint256,address,uint256,address)": "e0e189a0",
							"unwrapWETH9(uint256,address)": "49404b7c",
							"unwrapWETH9WithFee(uint256,address,uint256,address)": "9b2c0a37"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"WETH9\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refundETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountMinimum\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"sweepToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountMinimum\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeBips\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"feeRecipient\",\"type\":\"address\"}],\"name\":\"sweepTokenWithFee\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountMinimum\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"unwrapWETH9\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountMinimum\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeBips\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"feeRecipient\",\"type\":\"address\"}],\"name\":\"unwrapWETH9WithFee\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"refundETH()\":{\"details\":\"Useful for bundling with mint or increase liquidity that uses ether, or exact output swaps that use ether for the input amount\"},\"sweepToken(address,uint256,address)\":{\"details\":\"The amountMinimum parameter prevents malicious contracts from stealing the token from users\",\"params\":{\"amountMinimum\":\"The minimum amount of token required for a transfer\",\"recipient\":\"The destination address of the token\",\"token\":\"The contract address of the token which will be transferred to `recipient`\"}},\"sweepTokenWithFee(address,uint256,address,uint256,address)\":{\"details\":\"The amountMinimum parameter prevents malicious contracts from stealing the token from users\"},\"unwrapWETH9(uint256,address)\":{\"details\":\"The amountMinimum parameter prevents malicious contracts from stealing WETH9 from users.\",\"params\":{\"amountMinimum\":\"The minimum amount of WETH9 to unwrap\",\"recipient\":\"The address receiving ETH\"}},\"unwrapWETH9WithFee(uint256,address,uint256,address)\":{\"details\":\"The amountMinimum parameter prevents malicious contracts from stealing WETH9 from users.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"refundETH()\":{\"notice\":\"Refunds any ETH balance held by this contract to the `msg.sender`\"},\"sweepToken(address,uint256,address)\":{\"notice\":\"Transfers the full amount of a token held by this contract to recipient\"},\"sweepTokenWithFee(address,uint256,address,uint256,address)\":{\"notice\":\"Transfers the full amount of a token held by this contract to recipient, with a percentage between 0 (exclusive) and 1 (inclusive) going to feeRecipient\"},\"unwrapWETH9(uint256,address)\":{\"notice\":\"Unwraps the contract's WETH9 balance and sends it to recipient as ETH.\"},\"unwrapWETH9WithFee(uint256,address,uint256,address)\":{\"notice\":\"Unwraps the contract's WETH9 balance and sends it to recipient as ETH, with a percentage between 0 (exclusive), and 1 (inclusive) going to feeRecipient\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/base/PeripheryPaymentsWithFee.sol\":\"PeripheryPaymentsWithFee\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xbd74f587ab9b9711801baf667db1426e4a03fd2d7f15af33e0e0d0394e7cef76\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2d0913dfbfce90d170df0d496ad7596c0778518e5fa7aba6c32562522546f66b\",\"dweb:/ipfs/QmR6B8nLj2PJf5e1JWD9Nk7ErkAwkqUwadCnvE82FJr1RU\"]},\"@uniswap/v3-core/contracts/libraries/LowGasSafeMath.sol\":{\"keccak256\":\"0x86715eb960f18e01ac94e3bba4614ed51a887fa3c5bd1c43bf80aa98e019cf2d\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://bfc1d5d58e59015086b0e65a6c3a2ddad312e2350480510f6c0c8167f3d71a37\",\"dweb:/ipfs/QmQndULYjFsHKHjMAKLMfc12vWbVB5FawtioHtvwcWRJZp\"]},\"contracts/base/PeripheryImmutableState.sol\":{\"keccak256\":\"0xd43c2355a7d5659b1fa1fb322647f760722d73a6a5e62ede53d426f3b406b795\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://657920576878ca936157383782a97b74166c303a3932c0d72eac3a2d057c3a96\",\"dweb:/ipfs/Qma71Ska1ZbPBnYpeE5S2EAeEtwGfHEMHo3SnDwY1fVmm5\"]},\"contracts/base/PeripheryPayments.sol\":{\"keccak256\":\"0xd6129c6c9605d84b2a205eaec18a25090c4002be7c54da3cee61b84a882b820b\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://db1a47eaa47416ee2d1f4b9a988e02687579ac2280bd1ce28a52758e7eaabc44\",\"dweb:/ipfs/QmcWrSBBRCay6SqWTt1kh4gfDFn2jQBtNZGQ6zk7vfZdNy\"]},\"contracts/base/PeripheryPaymentsWithFee.sol\":{\"keccak256\":\"0x741fce65e52728144c6ebee5380418b9e70a59e04725f2dd7e922a82fd794651\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://6ed09cd710995191d01a51af53b9cb557337f623f061663a6d6d2ead74f18fc2\",\"dweb:/ipfs/QmQDFQshWiHJZAKWKGAzo8vpjfRgmq9uoMp7NHnJdsAZEu\"]},\"contracts/interfaces/IPeripheryImmutableState.sol\":{\"keccak256\":\"0x7affcfeb5127c0925a71d6a65345e117c33537523aeca7bc98085ead8452519d\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://e16b291294210e71cb0f20cd0afe62ae2dc6878d627f5ccc19c4dc9cd80aec3f\",\"dweb:/ipfs/QmQGitSyBr26nour81BZmpmDMyJpvZRqHQZvnCD1Acb127\"]},\"contracts/interfaces/IPeripheryPayments.sol\":{\"keccak256\":\"0xb547e10f1e69bed03621a62b73a503e260643066c6b4054867a4d1fef47eb274\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://f9a90f58f5fd5fb42f7811f4094113b532f307b14a73764c91f977590747f407\",\"dweb:/ipfs/QmSeNH2mfiDMKf3Q6V2sqtNxx1s72JNuA1VVxRM9HoMqYp\"]},\"contracts/interfaces/IPeripheryPaymentsWithFee.sol\":{\"keccak256\":\"0x23ebe0ced112c7ca3869868874b691fcbb50f90c482580dc9ebe718bda34edfc\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://689ebfcb90a26bf31af6e35456e41940c23d145cfc59d1ae5f6fa060945dd768\",\"dweb:/ipfs/QmZxVsaUWqnEEsRcphuWBvuEExQxznztSmFUkMa5ks8AHY\"]},\"contracts/interfaces/external/IWETH9.sol\":{\"keccak256\":\"0x6d7a8eb484e84bceb1d84c7be431c5b8120d519b0c2a7b4c7064c814635dea4c\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://8c3c81eb23b88076475e8ddd4edccb007358fa64911fc7e671a00adaf2006e75\",\"dweb:/ipfs/QmPbrPJ4w3UDPioJCvgtxMRaWNRa7tKHqDLtU17DTZPHBB\"]},\"contracts/libraries/TransferHelper.sol\":{\"keccak256\":\"0x9af98b0908c96320ca6d08b22f0efca864742f6adbe5794cafe2d1d2e808b0cd\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://da1d1e81e5bf534f0bf2934b3193db6cb1933f91ec006d2b88e9ad10a617a2d2\",\"dweb:/ipfs/QmcPBk47QLMFWcX2y2S9eMFsJgoYWBd3R8ey55Bgmv6w6v\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"refundETH()": {
								"notice": "Refunds any ETH balance held by this contract to the `msg.sender`"
							},
							"sweepToken(address,uint256,address)": {
								"notice": "Transfers the full amount of a token held by this contract to recipient"
							},
							"sweepTokenWithFee(address,uint256,address,uint256,address)": {
								"notice": "Transfers the full amount of a token held by this contract to recipient, with a percentage between 0 (exclusive) and 1 (inclusive) going to feeRecipient"
							},
							"unwrapWETH9(uint256,address)": {
								"notice": "Unwraps the contract's WETH9 balance and sends it to recipient as ETH."
							},
							"unwrapWETH9WithFee(uint256,address,uint256,address)": {
								"notice": "Unwraps the contract's WETH9 balance and sends it to recipient as ETH, with a percentage between 0 (exclusive), and 1 (inclusive) going to feeRecipient"
							}
						},
						"version": 1
					}
				}
			},
			"contracts/base/PeripheryValidation.sol": {
				"PeripheryValidation": {
					"abi": [],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/base/PeripheryValidation.sol\":\"PeripheryValidation\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/base/BlockTimestamp.sol\":{\"keccak256\":\"0x1aa66f71234064a0c0976f62233f2edbd69554e5ad817dc97f318bc8e11f4da6\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://b3a40450e9d6b0f9cb91b40ffd6215612505bd74e7d954529958f4edc6ee7b93\",\"dweb:/ipfs/QmewsUCHK5N5KhNtqEwK8JgsXFADyFBrQRS5HoDWM5gi3b\"]},\"contracts/base/PeripheryValidation.sol\":{\"keccak256\":\"0xc736bab599912d6212e8414ee4ba7af0c1e08ff6aa11caa85f5f6e07f7d421c3\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://06f6c13a86900c71fa486fc029a59d1b7eb96162bb42885b5f845d995294893e\",\"dweb:/ipfs/QmUcBxMsmncw9n6eXhzzwSasGBvBGKH5FT8HSrAxrsXV4A\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/base/SelfPermit.sol": {
				"SelfPermit": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "deadline",
									"type": "uint256"
								},
								{
									"internalType": "uint8",
									"name": "v",
									"type": "uint8"
								},
								{
									"internalType": "bytes32",
									"name": "r",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "s",
									"type": "bytes32"
								}
							],
							"name": "selfPermit",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "nonce",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "expiry",
									"type": "uint256"
								},
								{
									"internalType": "uint8",
									"name": "v",
									"type": "uint8"
								},
								{
									"internalType": "bytes32",
									"name": "r",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "s",
									"type": "bytes32"
								}
							],
							"name": "selfPermitAllowed",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "nonce",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "expiry",
									"type": "uint256"
								},
								{
									"internalType": "uint8",
									"name": "v",
									"type": "uint8"
								},
								{
									"internalType": "bytes32",
									"name": "r",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "s",
									"type": "bytes32"
								}
							],
							"name": "selfPermitAllowedIfNecessary",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "deadline",
									"type": "uint256"
								},
								{
									"internalType": "uint8",
									"name": "v",
									"type": "uint8"
								},
								{
									"internalType": "bytes32",
									"name": "r",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "s",
									"type": "bytes32"
								}
							],
							"name": "selfPermitIfNecessary",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "These functions are expected to be embedded in multicalls to allow EOAs to approve a contract and call a function that requires an approval in a single transaction.",
						"kind": "dev",
						"methods": {
							"selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)": {
								"details": "The `owner` is always msg.sender and the `spender` is always address(this).",
								"params": {
									"deadline": "A timestamp, the current blocktime must be less than or equal to this timestamp",
									"r": "Must produce valid secp256k1 signature from the holder along with `v` and `s`",
									"s": "Must produce valid secp256k1 signature from the holder along with `r` and `v`",
									"token": "The address of the token spent",
									"v": "Must produce valid secp256k1 signature from the holder along with `r` and `s`",
									"value": "The amount that can be spent of token"
								}
							},
							"selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)": {
								"details": "The `owner` is always msg.sender and the `spender` is always address(this)",
								"params": {
									"expiry": "The timestamp at which the permit is no longer valid",
									"nonce": "The current nonce of the owner",
									"r": "Must produce valid secp256k1 signature from the holder along with `v` and `s`",
									"s": "Must produce valid secp256k1 signature from the holder along with `r` and `v`",
									"token": "The address of the token spent",
									"v": "Must produce valid secp256k1 signature from the holder along with `r` and `s`"
								}
							},
							"selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)": {
								"details": "The `owner` is always msg.sender and the `spender` is always address(this) Can be used instead of #selfPermitAllowed to prevent calls from failing due to a frontrun of a call to #selfPermitAllowed.",
								"params": {
									"expiry": "The timestamp at which the permit is no longer valid",
									"nonce": "The current nonce of the owner",
									"r": "Must produce valid secp256k1 signature from the holder along with `v` and `s`",
									"s": "Must produce valid secp256k1 signature from the holder along with `r` and `v`",
									"token": "The address of the token spent",
									"v": "Must produce valid secp256k1 signature from the holder along with `r` and `s`"
								}
							},
							"selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)": {
								"details": "The `owner` is always msg.sender and the `spender` is always address(this). Can be used instead of #selfPermit to prevent calls from failing due to a frontrun of a call to #selfPermit",
								"params": {
									"deadline": "A timestamp, the current blocktime must be less than or equal to this timestamp",
									"r": "Must produce valid secp256k1 signature from the holder along with `v` and `s`",
									"s": "Must produce valid secp256k1 signature from the holder along with `r` and `v`",
									"token": "The address of the token spent",
									"v": "Must produce valid secp256k1 signature from the holder along with `r` and `s`",
									"value": "The amount that can be spent of token"
								}
							}
						},
						"title": "Self Permit",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)": "f3995c67",
							"selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)": "4659a494",
							"selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)": "a4a78f0c",
							"selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)": "c2e3140a"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"selfPermit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"selfPermitAllowed\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"selfPermitAllowedIfNecessary\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"selfPermitIfNecessary\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"These functions are expected to be embedded in multicalls to allow EOAs to approve a contract and call a function that requires an approval in a single transaction.\",\"kind\":\"dev\",\"methods\":{\"selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"The `owner` is always msg.sender and the `spender` is always address(this).\",\"params\":{\"deadline\":\"A timestamp, the current blocktime must be less than or equal to this timestamp\",\"r\":\"Must produce valid secp256k1 signature from the holder along with `v` and `s`\",\"s\":\"Must produce valid secp256k1 signature from the holder along with `r` and `v`\",\"token\":\"The address of the token spent\",\"v\":\"Must produce valid secp256k1 signature from the holder along with `r` and `s`\",\"value\":\"The amount that can be spent of token\"}},\"selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"The `owner` is always msg.sender and the `spender` is always address(this)\",\"params\":{\"expiry\":\"The timestamp at which the permit is no longer valid\",\"nonce\":\"The current nonce of the owner\",\"r\":\"Must produce valid secp256k1 signature from the holder along with `v` and `s`\",\"s\":\"Must produce valid secp256k1 signature from the holder along with `r` and `v`\",\"token\":\"The address of the token spent\",\"v\":\"Must produce valid secp256k1 signature from the holder along with `r` and `s`\"}},\"selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"The `owner` is always msg.sender and the `spender` is always address(this) Can be used instead of #selfPermitAllowed to prevent calls from failing due to a frontrun of a call to #selfPermitAllowed.\",\"params\":{\"expiry\":\"The timestamp at which the permit is no longer valid\",\"nonce\":\"The current nonce of the owner\",\"r\":\"Must produce valid secp256k1 signature from the holder along with `v` and `s`\",\"s\":\"Must produce valid secp256k1 signature from the holder along with `r` and `v`\",\"token\":\"The address of the token spent\",\"v\":\"Must produce valid secp256k1 signature from the holder along with `r` and `s`\"}},\"selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"The `owner` is always msg.sender and the `spender` is always address(this). Can be used instead of #selfPermit to prevent calls from failing due to a frontrun of a call to #selfPermit\",\"params\":{\"deadline\":\"A timestamp, the current blocktime must be less than or equal to this timestamp\",\"r\":\"Must produce valid secp256k1 signature from the holder along with `v` and `s`\",\"s\":\"Must produce valid secp256k1 signature from the holder along with `r` and `v`\",\"token\":\"The address of the token spent\",\"v\":\"Must produce valid secp256k1 signature from the holder along with `r` and `s`\",\"value\":\"The amount that can be spent of token\"}}},\"title\":\"Self Permit\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Permits this contract to spend a given token from `msg.sender`\"},\"selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Permits this contract to spend the sender's tokens for permit signatures that have the `allowed` parameter\"},\"selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Permits this contract to spend the sender's tokens for permit signatures that have the `allowed` parameter\"},\"selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Permits this contract to spend a given token from `msg.sender`\"}},\"notice\":\"Functionality to call permit on any EIP-2612-compliant token for use in the route\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/base/SelfPermit.sol\":\"SelfPermit\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/drafts/IERC20Permit.sol\":{\"keccak256\":\"0x1aab7754719ba764a8a05bec47e975001400f62986474945eb3dbee6d871259f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8c14e8ff1b384bdb68f262669364b1e79fbbd82b85938b7ce788a1395c40c6a2\",\"dweb:/ipfs/QmUKLXfSeEuRUXkeWLBhjHTKeSFoNBCS1RaMXv1AmHXYzn\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xbd74f587ab9b9711801baf667db1426e4a03fd2d7f15af33e0e0d0394e7cef76\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2d0913dfbfce90d170df0d496ad7596c0778518e5fa7aba6c32562522546f66b\",\"dweb:/ipfs/QmR6B8nLj2PJf5e1JWD9Nk7ErkAwkqUwadCnvE82FJr1RU\"]},\"contracts/base/SelfPermit.sol\":{\"keccak256\":\"0xe75aedfc1eff6c84adac82b2bc41d197127a74530f0c344a7a122a6c8ec186be\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://05150ae691e10f2c9c82ad46de86c8b6683d8eba995e6f9ff82eaefc064902e9\",\"dweb:/ipfs/QmdKxxmxCPxV7qe11MbRhpaQXDAnnKWH1BoTMmEXYPAA7g\"]},\"contracts/interfaces/ISelfPermit.sol\":{\"keccak256\":\"0xe1a1c072855e687c90317c15b9b6ce81cc683723f73d70e47b40f2f9bad0c2be\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://53b0881a1c55254d157054bd3d1c86982c0f5429bd2a9986c15479f6b71ef678\",\"dweb:/ipfs/Qmc9WZqXzQmqsA3xYxojbx9nXcG3FGuwAjM3opEmRGSnBb\"]},\"contracts/interfaces/external/IERC20PermitAllowed.sol\":{\"keccak256\":\"0x8c4c1b8e724e0a78cb691d703dd37cd91b8bd6600537fb227807a194025a792d\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://783be851155842a02cdb0483c3a69ecc0e7ae8545f65cec1d4aeb355b2026a7d\",\"dweb:/ipfs/QmZNBQosTjpGNKB3Eo2K6Zzye7FYiLVoEki5iPB2Y69jz2\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)": {
								"notice": "Permits this contract to spend a given token from `msg.sender`"
							},
							"selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)": {
								"notice": "Permits this contract to spend the sender's tokens for permit signatures that have the `allowed` parameter"
							},
							"selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)": {
								"notice": "Permits this contract to spend the sender's tokens for permit signatures that have the `allowed` parameter"
							},
							"selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)": {
								"notice": "Permits this contract to spend a given token from `msg.sender`"
							}
						},
						"notice": "Functionality to call permit on any EIP-2612-compliant token for use in the route",
						"version": 1
					}
				}
			},
			"contracts/interfaces/IMulticall.sol": {
				"IMulticall": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "bytes[]",
									"name": "data",
									"type": "bytes[]"
								}
							],
							"name": "multicall",
							"outputs": [
								{
									"internalType": "bytes[]",
									"name": "results",
									"type": "bytes[]"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"multicall(bytes[])": {
								"details": "The `msg.value` should not be trusted for any method callable from multicall.",
								"params": {
									"data": "The encoded function data for each of the calls to make to this contract"
								},
								"returns": {
									"results": "The results from each of the calls passed in via data"
								}
							}
						},
						"title": "Multicall interface",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"multicall(bytes[])": "ac9650d8"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"multicall(bytes[])\":{\"details\":\"The `msg.value` should not be trusted for any method callable from multicall.\",\"params\":{\"data\":\"The encoded function data for each of the calls to make to this contract\"},\"returns\":{\"results\":\"The results from each of the calls passed in via data\"}}},\"title\":\"Multicall interface\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"multicall(bytes[])\":{\"notice\":\"Call multiple functions in the current contract and return the data from all of them if they all succeed\"}},\"notice\":\"Enables calling multiple methods in a single call to the contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/IMulticall.sol\":\"IMulticall\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/interfaces/IMulticall.sol\":{\"keccak256\":\"0xa8f9d0061ee730a522dc4bae6bd5cabb3e997e2c5983da183e912bdca93dfa7b\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://496b68d4f72d58cc83cf51bd9cc9c99aaa46dc3c3df7c951a9e50ba29ee33016\",\"dweb:/ipfs/Qmc3bkXwuRP8mDpcKgvLgbCKn8tD8PGCaBjnLHSPMJCRGD\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"multicall(bytes[])": {
								"notice": "Call multiple functions in the current contract and return the data from all of them if they all succeed"
							}
						},
						"notice": "Enables calling multiple methods in a single call to the contract",
						"version": 1
					}
				}
			},
			"contracts/interfaces/IPeripheryImmutableState.sol": {
				"IPeripheryImmutableState": {
					"abi": [
						{
							"inputs": [],
							"name": "WETH9",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "factory",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"WETH9()": {
								"returns": {
									"_0": "Returns the address of WETH9"
								}
							},
							"factory()": {
								"returns": {
									"_0": "Returns the address of the Uniswap V3 factory"
								}
							}
						},
						"title": "Immutable state",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"WETH9()": "4aa4a4fc",
							"factory()": "c45a0155"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"WETH9\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"WETH9()\":{\"returns\":{\"_0\":\"Returns the address of WETH9\"}},\"factory()\":{\"returns\":{\"_0\":\"Returns the address of the Uniswap V3 factory\"}}},\"title\":\"Immutable state\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Functions that return immutable state of the router\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/IPeripheryImmutableState.sol\":\"IPeripheryImmutableState\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/interfaces/IPeripheryImmutableState.sol\":{\"keccak256\":\"0x7affcfeb5127c0925a71d6a65345e117c33537523aeca7bc98085ead8452519d\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://e16b291294210e71cb0f20cd0afe62ae2dc6878d627f5ccc19c4dc9cd80aec3f\",\"dweb:/ipfs/QmQGitSyBr26nour81BZmpmDMyJpvZRqHQZvnCD1Acb127\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"notice": "Functions that return immutable state of the router",
						"version": 1
					}
				}
			},
			"contracts/interfaces/IPeripheryPayments.sol": {
				"IPeripheryPayments": {
					"abi": [
						{
							"inputs": [],
							"name": "refundETH",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amountMinimum",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								}
							],
							"name": "sweepToken",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "amountMinimum",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								}
							],
							"name": "unwrapWETH9",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"refundETH()": {
								"details": "Useful for bundling with mint or increase liquidity that uses ether, or exact output swaps that use ether for the input amount"
							},
							"sweepToken(address,uint256,address)": {
								"details": "The amountMinimum parameter prevents malicious contracts from stealing the token from users",
								"params": {
									"amountMinimum": "The minimum amount of token required for a transfer",
									"recipient": "The destination address of the token",
									"token": "The contract address of the token which will be transferred to `recipient`"
								}
							},
							"unwrapWETH9(uint256,address)": {
								"details": "The amountMinimum parameter prevents malicious contracts from stealing WETH9 from users.",
								"params": {
									"amountMinimum": "The minimum amount of WETH9 to unwrap",
									"recipient": "The address receiving ETH"
								}
							}
						},
						"title": "Periphery Payments",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"refundETH()": "12210e8a",
							"sweepToken(address,uint256,address)": "df2ab5bb",
							"unwrapWETH9(uint256,address)": "49404b7c"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"refundETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountMinimum\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"sweepToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountMinimum\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"unwrapWETH9\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"refundETH()\":{\"details\":\"Useful for bundling with mint or increase liquidity that uses ether, or exact output swaps that use ether for the input amount\"},\"sweepToken(address,uint256,address)\":{\"details\":\"The amountMinimum parameter prevents malicious contracts from stealing the token from users\",\"params\":{\"amountMinimum\":\"The minimum amount of token required for a transfer\",\"recipient\":\"The destination address of the token\",\"token\":\"The contract address of the token which will be transferred to `recipient`\"}},\"unwrapWETH9(uint256,address)\":{\"details\":\"The amountMinimum parameter prevents malicious contracts from stealing WETH9 from users.\",\"params\":{\"amountMinimum\":\"The minimum amount of WETH9 to unwrap\",\"recipient\":\"The address receiving ETH\"}}},\"title\":\"Periphery Payments\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"refundETH()\":{\"notice\":\"Refunds any ETH balance held by this contract to the `msg.sender`\"},\"sweepToken(address,uint256,address)\":{\"notice\":\"Transfers the full amount of a token held by this contract to recipient\"},\"unwrapWETH9(uint256,address)\":{\"notice\":\"Unwraps the contract's WETH9 balance and sends it to recipient as ETH.\"}},\"notice\":\"Functions to ease deposits and withdrawals of ETH\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/IPeripheryPayments.sol\":\"IPeripheryPayments\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/interfaces/IPeripheryPayments.sol\":{\"keccak256\":\"0xb547e10f1e69bed03621a62b73a503e260643066c6b4054867a4d1fef47eb274\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://f9a90f58f5fd5fb42f7811f4094113b532f307b14a73764c91f977590747f407\",\"dweb:/ipfs/QmSeNH2mfiDMKf3Q6V2sqtNxx1s72JNuA1VVxRM9HoMqYp\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"refundETH()": {
								"notice": "Refunds any ETH balance held by this contract to the `msg.sender`"
							},
							"sweepToken(address,uint256,address)": {
								"notice": "Transfers the full amount of a token held by this contract to recipient"
							},
							"unwrapWETH9(uint256,address)": {
								"notice": "Unwraps the contract's WETH9 balance and sends it to recipient as ETH."
							}
						},
						"notice": "Functions to ease deposits and withdrawals of ETH",
						"version": 1
					}
				}
			},
			"contracts/interfaces/IPeripheryPaymentsWithFee.sol": {
				"IPeripheryPaymentsWithFee": {
					"abi": [
						{
							"inputs": [],
							"name": "refundETH",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amountMinimum",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								}
							],
							"name": "sweepToken",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amountMinimum",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "feeBips",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "feeRecipient",
									"type": "address"
								}
							],
							"name": "sweepTokenWithFee",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "amountMinimum",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								}
							],
							"name": "unwrapWETH9",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "amountMinimum",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "feeBips",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "feeRecipient",
									"type": "address"
								}
							],
							"name": "unwrapWETH9WithFee",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"refundETH()": {
								"details": "Useful for bundling with mint or increase liquidity that uses ether, or exact output swaps that use ether for the input amount"
							},
							"sweepToken(address,uint256,address)": {
								"details": "The amountMinimum parameter prevents malicious contracts from stealing the token from users",
								"params": {
									"amountMinimum": "The minimum amount of token required for a transfer",
									"recipient": "The destination address of the token",
									"token": "The contract address of the token which will be transferred to `recipient`"
								}
							},
							"sweepTokenWithFee(address,uint256,address,uint256,address)": {
								"details": "The amountMinimum parameter prevents malicious contracts from stealing the token from users"
							},
							"unwrapWETH9(uint256,address)": {
								"details": "The amountMinimum parameter prevents malicious contracts from stealing WETH9 from users.",
								"params": {
									"amountMinimum": "The minimum amount of WETH9 to unwrap",
									"recipient": "The address receiving ETH"
								}
							},
							"unwrapWETH9WithFee(uint256,address,uint256,address)": {
								"details": "The amountMinimum parameter prevents malicious contracts from stealing WETH9 from users."
							}
						},
						"title": "Periphery Payments",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"refundETH()": "12210e8a",
							"sweepToken(address,uint256,address)": "df2ab5bb",
							"sweepTokenWithFee(address,uint256,address,uint256,address)": "e0e189a0",
							"unwrapWETH9(uint256,address)": "49404b7c",
							"unwrapWETH9WithFee(uint256,address,uint256,address)": "9b2c0a37"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"refundETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountMinimum\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"sweepToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountMinimum\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeBips\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"feeRecipient\",\"type\":\"address\"}],\"name\":\"sweepTokenWithFee\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountMinimum\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"unwrapWETH9\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountMinimum\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeBips\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"feeRecipient\",\"type\":\"address\"}],\"name\":\"unwrapWETH9WithFee\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"refundETH()\":{\"details\":\"Useful for bundling with mint or increase liquidity that uses ether, or exact output swaps that use ether for the input amount\"},\"sweepToken(address,uint256,address)\":{\"details\":\"The amountMinimum parameter prevents malicious contracts from stealing the token from users\",\"params\":{\"amountMinimum\":\"The minimum amount of token required for a transfer\",\"recipient\":\"The destination address of the token\",\"token\":\"The contract address of the token which will be transferred to `recipient`\"}},\"sweepTokenWithFee(address,uint256,address,uint256,address)\":{\"details\":\"The amountMinimum parameter prevents malicious contracts from stealing the token from users\"},\"unwrapWETH9(uint256,address)\":{\"details\":\"The amountMinimum parameter prevents malicious contracts from stealing WETH9 from users.\",\"params\":{\"amountMinimum\":\"The minimum amount of WETH9 to unwrap\",\"recipient\":\"The address receiving ETH\"}},\"unwrapWETH9WithFee(uint256,address,uint256,address)\":{\"details\":\"The amountMinimum parameter prevents malicious contracts from stealing WETH9 from users.\"}},\"title\":\"Periphery Payments\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"refundETH()\":{\"notice\":\"Refunds any ETH balance held by this contract to the `msg.sender`\"},\"sweepToken(address,uint256,address)\":{\"notice\":\"Transfers the full amount of a token held by this contract to recipient\"},\"sweepTokenWithFee(address,uint256,address,uint256,address)\":{\"notice\":\"Transfers the full amount of a token held by this contract to recipient, with a percentage between 0 (exclusive) and 1 (inclusive) going to feeRecipient\"},\"unwrapWETH9(uint256,address)\":{\"notice\":\"Unwraps the contract's WETH9 balance and sends it to recipient as ETH.\"},\"unwrapWETH9WithFee(uint256,address,uint256,address)\":{\"notice\":\"Unwraps the contract's WETH9 balance and sends it to recipient as ETH, with a percentage between 0 (exclusive), and 1 (inclusive) going to feeRecipient\"}},\"notice\":\"Functions to ease deposits and withdrawals of ETH\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/IPeripheryPaymentsWithFee.sol\":\"IPeripheryPaymentsWithFee\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/interfaces/IPeripheryPayments.sol\":{\"keccak256\":\"0xb547e10f1e69bed03621a62b73a503e260643066c6b4054867a4d1fef47eb274\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://f9a90f58f5fd5fb42f7811f4094113b532f307b14a73764c91f977590747f407\",\"dweb:/ipfs/QmSeNH2mfiDMKf3Q6V2sqtNxx1s72JNuA1VVxRM9HoMqYp\"]},\"contracts/interfaces/IPeripheryPaymentsWithFee.sol\":{\"keccak256\":\"0x23ebe0ced112c7ca3869868874b691fcbb50f90c482580dc9ebe718bda34edfc\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://689ebfcb90a26bf31af6e35456e41940c23d145cfc59d1ae5f6fa060945dd768\",\"dweb:/ipfs/QmZxVsaUWqnEEsRcphuWBvuEExQxznztSmFUkMa5ks8AHY\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"refundETH()": {
								"notice": "Refunds any ETH balance held by this contract to the `msg.sender`"
							},
							"sweepToken(address,uint256,address)": {
								"notice": "Transfers the full amount of a token held by this contract to recipient"
							},
							"sweepTokenWithFee(address,uint256,address,uint256,address)": {
								"notice": "Transfers the full amount of a token held by this contract to recipient, with a percentage between 0 (exclusive) and 1 (inclusive) going to feeRecipient"
							},
							"unwrapWETH9(uint256,address)": {
								"notice": "Unwraps the contract's WETH9 balance and sends it to recipient as ETH."
							},
							"unwrapWETH9WithFee(uint256,address,uint256,address)": {
								"notice": "Unwraps the contract's WETH9 balance and sends it to recipient as ETH, with a percentage between 0 (exclusive), and 1 (inclusive) going to feeRecipient"
							}
						},
						"notice": "Functions to ease deposits and withdrawals of ETH",
						"version": 1
					}
				}
			},
			"contracts/interfaces/ISelfPermit.sol": {
				"ISelfPermit": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "deadline",
									"type": "uint256"
								},
								{
									"internalType": "uint8",
									"name": "v",
									"type": "uint8"
								},
								{
									"internalType": "bytes32",
									"name": "r",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "s",
									"type": "bytes32"
								}
							],
							"name": "selfPermit",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "nonce",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "expiry",
									"type": "uint256"
								},
								{
									"internalType": "uint8",
									"name": "v",
									"type": "uint8"
								},
								{
									"internalType": "bytes32",
									"name": "r",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "s",
									"type": "bytes32"
								}
							],
							"name": "selfPermitAllowed",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "nonce",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "expiry",
									"type": "uint256"
								},
								{
									"internalType": "uint8",
									"name": "v",
									"type": "uint8"
								},
								{
									"internalType": "bytes32",
									"name": "r",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "s",
									"type": "bytes32"
								}
							],
							"name": "selfPermitAllowedIfNecessary",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "deadline",
									"type": "uint256"
								},
								{
									"internalType": "uint8",
									"name": "v",
									"type": "uint8"
								},
								{
									"internalType": "bytes32",
									"name": "r",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "s",
									"type": "bytes32"
								}
							],
							"name": "selfPermitIfNecessary",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)": {
								"details": "The `owner` is always msg.sender and the `spender` is always address(this).",
								"params": {
									"deadline": "A timestamp, the current blocktime must be less than or equal to this timestamp",
									"r": "Must produce valid secp256k1 signature from the holder along with `v` and `s`",
									"s": "Must produce valid secp256k1 signature from the holder along with `r` and `v`",
									"token": "The address of the token spent",
									"v": "Must produce valid secp256k1 signature from the holder along with `r` and `s`",
									"value": "The amount that can be spent of token"
								}
							},
							"selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)": {
								"details": "The `owner` is always msg.sender and the `spender` is always address(this)",
								"params": {
									"expiry": "The timestamp at which the permit is no longer valid",
									"nonce": "The current nonce of the owner",
									"r": "Must produce valid secp256k1 signature from the holder along with `v` and `s`",
									"s": "Must produce valid secp256k1 signature from the holder along with `r` and `v`",
									"token": "The address of the token spent",
									"v": "Must produce valid secp256k1 signature from the holder along with `r` and `s`"
								}
							},
							"selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)": {
								"details": "The `owner` is always msg.sender and the `spender` is always address(this) Can be used instead of #selfPermitAllowed to prevent calls from failing due to a frontrun of a call to #selfPermitAllowed.",
								"params": {
									"expiry": "The timestamp at which the permit is no longer valid",
									"nonce": "The current nonce of the owner",
									"r": "Must produce valid secp256k1 signature from the holder along with `v` and `s`",
									"s": "Must produce valid secp256k1 signature from the holder along with `r` and `v`",
									"token": "The address of the token spent",
									"v": "Must produce valid secp256k1 signature from the holder along with `r` and `s`"
								}
							},
							"selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)": {
								"details": "The `owner` is always msg.sender and the `spender` is always address(this). Can be used instead of #selfPermit to prevent calls from failing due to a frontrun of a call to #selfPermit",
								"params": {
									"deadline": "A timestamp, the current blocktime must be less than or equal to this timestamp",
									"r": "Must produce valid secp256k1 signature from the holder along with `v` and `s`",
									"s": "Must produce valid secp256k1 signature from the holder along with `r` and `v`",
									"token": "The address of the token spent",
									"v": "Must produce valid secp256k1 signature from the holder along with `r` and `s`",
									"value": "The amount that can be spent of token"
								}
							}
						},
						"title": "Self Permit",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)": "f3995c67",
							"selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)": "4659a494",
							"selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)": "a4a78f0c",
							"selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)": "c2e3140a"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"selfPermit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"selfPermitAllowed\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"selfPermitAllowedIfNecessary\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"selfPermitIfNecessary\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"The `owner` is always msg.sender and the `spender` is always address(this).\",\"params\":{\"deadline\":\"A timestamp, the current blocktime must be less than or equal to this timestamp\",\"r\":\"Must produce valid secp256k1 signature from the holder along with `v` and `s`\",\"s\":\"Must produce valid secp256k1 signature from the holder along with `r` and `v`\",\"token\":\"The address of the token spent\",\"v\":\"Must produce valid secp256k1 signature from the holder along with `r` and `s`\",\"value\":\"The amount that can be spent of token\"}},\"selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"The `owner` is always msg.sender and the `spender` is always address(this)\",\"params\":{\"expiry\":\"The timestamp at which the permit is no longer valid\",\"nonce\":\"The current nonce of the owner\",\"r\":\"Must produce valid secp256k1 signature from the holder along with `v` and `s`\",\"s\":\"Must produce valid secp256k1 signature from the holder along with `r` and `v`\",\"token\":\"The address of the token spent\",\"v\":\"Must produce valid secp256k1 signature from the holder along with `r` and `s`\"}},\"selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"The `owner` is always msg.sender and the `spender` is always address(this) Can be used instead of #selfPermitAllowed to prevent calls from failing due to a frontrun of a call to #selfPermitAllowed.\",\"params\":{\"expiry\":\"The timestamp at which the permit is no longer valid\",\"nonce\":\"The current nonce of the owner\",\"r\":\"Must produce valid secp256k1 signature from the holder along with `v` and `s`\",\"s\":\"Must produce valid secp256k1 signature from the holder along with `r` and `v`\",\"token\":\"The address of the token spent\",\"v\":\"Must produce valid secp256k1 signature from the holder along with `r` and `s`\"}},\"selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"The `owner` is always msg.sender and the `spender` is always address(this). Can be used instead of #selfPermit to prevent calls from failing due to a frontrun of a call to #selfPermit\",\"params\":{\"deadline\":\"A timestamp, the current blocktime must be less than or equal to this timestamp\",\"r\":\"Must produce valid secp256k1 signature from the holder along with `v` and `s`\",\"s\":\"Must produce valid secp256k1 signature from the holder along with `r` and `v`\",\"token\":\"The address of the token spent\",\"v\":\"Must produce valid secp256k1 signature from the holder along with `r` and `s`\",\"value\":\"The amount that can be spent of token\"}}},\"title\":\"Self Permit\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Permits this contract to spend a given token from `msg.sender`\"},\"selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Permits this contract to spend the sender's tokens for permit signatures that have the `allowed` parameter\"},\"selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Permits this contract to spend the sender's tokens for permit signatures that have the `allowed` parameter\"},\"selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Permits this contract to spend a given token from `msg.sender`\"}},\"notice\":\"Functionality to call permit on any EIP-2612-compliant token for use in the route\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/ISelfPermit.sol\":\"ISelfPermit\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/interfaces/ISelfPermit.sol\":{\"keccak256\":\"0xe1a1c072855e687c90317c15b9b6ce81cc683723f73d70e47b40f2f9bad0c2be\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://53b0881a1c55254d157054bd3d1c86982c0f5429bd2a9986c15479f6b71ef678\",\"dweb:/ipfs/Qmc9WZqXzQmqsA3xYxojbx9nXcG3FGuwAjM3opEmRGSnBb\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)": {
								"notice": "Permits this contract to spend a given token from `msg.sender`"
							},
							"selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)": {
								"notice": "Permits this contract to spend the sender's tokens for permit signatures that have the `allowed` parameter"
							},
							"selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)": {
								"notice": "Permits this contract to spend the sender's tokens for permit signatures that have the `allowed` parameter"
							},
							"selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)": {
								"notice": "Permits this contract to spend a given token from `msg.sender`"
							}
						},
						"notice": "Functionality to call permit on any EIP-2612-compliant token for use in the route",
						"version": 1
					}
				}
			},
			"contracts/interfaces/ISwapRouter.sol": {
				"ISwapRouter": {
					"abi": [
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "bytes",
											"name": "path",
											"type": "bytes"
										},
										{
											"internalType": "address",
											"name": "recipient",
											"type": "address"
										},
										{
											"internalType": "uint256",
											"name": "deadline",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "amountIn",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "amountOutMinimum",
											"type": "uint256"
										}
									],
									"internalType": "struct ISwapRouter.ExactInputParams",
									"name": "params",
									"type": "tuple"
								}
							],
							"name": "exactInput",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amountOut",
									"type": "uint256"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "address",
											"name": "tokenIn",
											"type": "address"
										},
										{
											"internalType": "address",
											"name": "tokenOut",
											"type": "address"
										},
										{
											"internalType": "uint24",
											"name": "fee",
											"type": "uint24"
										},
										{
											"internalType": "address",
											"name": "recipient",
											"type": "address"
										},
										{
											"internalType": "uint256",
											"name": "deadline",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "amountIn",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "amountOutMinimum",
											"type": "uint256"
										},
										{
											"internalType": "uint160",
											"name": "sqrtPriceLimitX96",
											"type": "uint160"
										}
									],
									"internalType": "struct ISwapRouter.ExactInputSingleParams",
									"name": "params",
									"type": "tuple"
								}
							],
							"name": "exactInputSingle",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amountOut",
									"type": "uint256"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "bytes",
											"name": "path",
											"type": "bytes"
										},
										{
											"internalType": "address",
											"name": "recipient",
											"type": "address"
										},
										{
											"internalType": "uint256",
											"name": "deadline",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "amountOut",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "amountInMaximum",
											"type": "uint256"
										}
									],
									"internalType": "struct ISwapRouter.ExactOutputParams",
									"name": "params",
									"type": "tuple"
								}
							],
							"name": "exactOutput",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amountIn",
									"type": "uint256"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "address",
											"name": "tokenIn",
											"type": "address"
										},
										{
											"internalType": "address",
											"name": "tokenOut",
											"type": "address"
										},
										{
											"internalType": "uint24",
											"name": "fee",
											"type": "uint24"
										},
										{
											"internalType": "address",
											"name": "recipient",
											"type": "address"
										},
										{
											"internalType": "uint256",
											"name": "deadline",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "amountOut",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "amountInMaximum",
											"type": "uint256"
										},
										{
											"internalType": "uint160",
											"name": "sqrtPriceLimitX96",
											"type": "uint160"
										}
									],
									"internalType": "struct ISwapRouter.ExactOutputSingleParams",
									"name": "params",
									"type": "tuple"
								}
							],
							"name": "exactOutputSingle",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amountIn",
									"type": "uint256"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "int256",
									"name": "amount0Delta",
									"type": "int256"
								},
								{
									"internalType": "int256",
									"name": "amount1Delta",
									"type": "int256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "uniswapV3SwapCallback",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"exactInput((bytes,address,uint256,uint256,uint256))": {
								"params": {
									"params": "The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata"
								},
								"returns": {
									"amountOut": "The amount of the received token"
								}
							},
							"exactInputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))": {
								"params": {
									"params": "The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata"
								},
								"returns": {
									"amountOut": "The amount of the received token"
								}
							},
							"exactOutput((bytes,address,uint256,uint256,uint256))": {
								"params": {
									"params": "The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata"
								},
								"returns": {
									"amountIn": "The amount of the input token"
								}
							},
							"exactOutputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))": {
								"params": {
									"params": "The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata"
								},
								"returns": {
									"amountIn": "The amount of the input token"
								}
							},
							"uniswapV3SwapCallback(int256,int256,bytes)": {
								"details": "In the implementation you must pay the pool tokens owed for the swap. The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory. amount0Delta and amount1Delta can both be 0 if no tokens were swapped.",
								"params": {
									"amount0Delta": "The amount of token0 that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token0 to the pool.",
									"amount1Delta": "The amount of token1 that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token1 to the pool.",
									"data": "Any data passed through by the caller via the IUniswapV3PoolActions#swap call"
								}
							}
						},
						"title": "Router token swapping functionality",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"exactInput((bytes,address,uint256,uint256,uint256))": "c04b8d59",
							"exactInputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))": "414bf389",
							"exactOutput((bytes,address,uint256,uint256,uint256))": "f28c0498",
							"exactOutputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))": "db3e2198",
							"uniswapV3SwapCallback(int256,int256,bytes)": "fa461e33"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"path\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMinimum\",\"type\":\"uint256\"}],\"internalType\":\"struct ISwapRouter.ExactInputParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"exactInput\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMinimum\",\"type\":\"uint256\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceLimitX96\",\"type\":\"uint160\"}],\"internalType\":\"struct ISwapRouter.ExactInputSingleParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"exactInputSingle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"path\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMaximum\",\"type\":\"uint256\"}],\"internalType\":\"struct ISwapRouter.ExactOutputParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"exactOutput\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMaximum\",\"type\":\"uint256\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceLimitX96\",\"type\":\"uint160\"}],\"internalType\":\"struct ISwapRouter.ExactOutputSingleParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"exactOutputSingle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"amount0Delta\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"amount1Delta\",\"type\":\"int256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"uniswapV3SwapCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"exactInput((bytes,address,uint256,uint256,uint256))\":{\"params\":{\"params\":\"The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\"},\"returns\":{\"amountOut\":\"The amount of the received token\"}},\"exactInputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))\":{\"params\":{\"params\":\"The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\"},\"returns\":{\"amountOut\":\"The amount of the received token\"}},\"exactOutput((bytes,address,uint256,uint256,uint256))\":{\"params\":{\"params\":\"The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\"},\"returns\":{\"amountIn\":\"The amount of the input token\"}},\"exactOutputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))\":{\"params\":{\"params\":\"The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\"},\"returns\":{\"amountIn\":\"The amount of the input token\"}},\"uniswapV3SwapCallback(int256,int256,bytes)\":{\"details\":\"In the implementation you must pay the pool tokens owed for the swap. The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory. amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\",\"params\":{\"amount0Delta\":\"The amount of token0 that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token0 to the pool.\",\"amount1Delta\":\"The amount of token1 that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token1 to the pool.\",\"data\":\"Any data passed through by the caller via the IUniswapV3PoolActions#swap call\"}}},\"title\":\"Router token swapping functionality\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"exactInput((bytes,address,uint256,uint256,uint256))\":{\"notice\":\"Swaps `amountIn` of one token for as much as possible of another along the specified path\"},\"exactInputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))\":{\"notice\":\"Swaps `amountIn` of one token for as much as possible of another token\"},\"exactOutput((bytes,address,uint256,uint256,uint256))\":{\"notice\":\"Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\"},\"exactOutputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))\":{\"notice\":\"Swaps as little as possible of one token for `amountOut` of another token\"},\"uniswapV3SwapCallback(int256,int256,bytes)\":{\"notice\":\"Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\"}},\"notice\":\"Functions for swapping tokens via Uniswap V3\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/ISwapRouter.sol\":\"ISwapRouter\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol\":{\"keccak256\":\"0x3f485fb1a44e8fbeadefb5da07d66edab3cfe809f0ac4074b1e54e3eb3c4cf69\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://095ce0626b41318c772b3ebf19d548282607f6a8f3d6c41c13edfbd5370c8652\",\"dweb:/ipfs/QmVDZfJJ89UUCE1hMyzqpkZAtQ8jUsBgZNE5AMRG7RzRFS\"]},\"contracts/interfaces/ISwapRouter.sol\":{\"keccak256\":\"0x9bfaf1feb32814623e627ab70f2409760b15d95f1f9b058e2b3399a8bb732975\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://a8a2c3e55965b61bcd91993d8e1d5d34b8b8a63e0fdfce87a85f6af92526fd53\",\"dweb:/ipfs/QmQj2CSCSwqDSU4KMNWxGsN2336Cy64WgpV1X1EHXNZWxM\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"exactInput((bytes,address,uint256,uint256,uint256))": {
								"notice": "Swaps `amountIn` of one token for as much as possible of another along the specified path"
							},
							"exactInputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))": {
								"notice": "Swaps `amountIn` of one token for as much as possible of another token"
							},
							"exactOutput((bytes,address,uint256,uint256,uint256))": {
								"notice": "Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)"
							},
							"exactOutputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))": {
								"notice": "Swaps as little as possible of one token for `amountOut` of another token"
							},
							"uniswapV3SwapCallback(int256,int256,bytes)": {
								"notice": "Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap."
							}
						},
						"notice": "Functions for swapping tokens via Uniswap V3",
						"version": 1
					}
				}
			},
			"contracts/interfaces/external/IERC20PermitAllowed.sol": {
				"IERC20PermitAllowed": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "holder",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "nonce",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "expiry",
									"type": "uint256"
								},
								{
									"internalType": "bool",
									"name": "allowed",
									"type": "bool"
								},
								{
									"internalType": "uint8",
									"name": "v",
									"type": "uint8"
								},
								{
									"internalType": "bytes32",
									"name": "r",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "s",
									"type": "bytes32"
								}
							],
							"name": "permit",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"permit(address,address,uint256,uint256,bool,uint8,bytes32,bytes32)": {
								"details": "This is the permit interface used by DAI and CHAI",
								"params": {
									"allowed": "Boolean that sets approval amount, true for type(uint256).max and false for 0",
									"expiry": "The timestamp at which the permit is no longer valid",
									"holder": "The address of the token holder, the token owner",
									"nonce": "The holder's nonce, increases at each call to permit",
									"r": "Must produce valid secp256k1 signature from the holder along with `v` and `s`",
									"s": "Must produce valid secp256k1 signature from the holder along with `r` and `v`",
									"spender": "The address of the token spender",
									"v": "Must produce valid secp256k1 signature from the holder along with `r` and `s`"
								}
							}
						},
						"title": "Interface for permit",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"permit(address,address,uint256,uint256,bool,uint8,bytes32,bytes32)": "8fcbaf0c"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"permit(address,address,uint256,uint256,bool,uint8,bytes32,bytes32)\":{\"details\":\"This is the permit interface used by DAI and CHAI\",\"params\":{\"allowed\":\"Boolean that sets approval amount, true for type(uint256).max and false for 0\",\"expiry\":\"The timestamp at which the permit is no longer valid\",\"holder\":\"The address of the token holder, the token owner\",\"nonce\":\"The holder's nonce, increases at each call to permit\",\"r\":\"Must produce valid secp256k1 signature from the holder along with `v` and `s`\",\"s\":\"Must produce valid secp256k1 signature from the holder along with `r` and `v`\",\"spender\":\"The address of the token spender\",\"v\":\"Must produce valid secp256k1 signature from the holder along with `r` and `s`\"}}},\"title\":\"Interface for permit\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"permit(address,address,uint256,uint256,bool,uint8,bytes32,bytes32)\":{\"notice\":\"Approve the spender to spend some tokens via the holder signature\"}},\"notice\":\"Interface used by DAI/CHAI for permit\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/external/IERC20PermitAllowed.sol\":\"IERC20PermitAllowed\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/interfaces/external/IERC20PermitAllowed.sol\":{\"keccak256\":\"0x8c4c1b8e724e0a78cb691d703dd37cd91b8bd6600537fb227807a194025a792d\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://783be851155842a02cdb0483c3a69ecc0e7ae8545f65cec1d4aeb355b2026a7d\",\"dweb:/ipfs/QmZNBQosTjpGNKB3Eo2K6Zzye7FYiLVoEki5iPB2Y69jz2\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"permit(address,address,uint256,uint256,bool,uint8,bytes32,bytes32)": {
								"notice": "Approve the spender to spend some tokens via the holder signature"
							}
						},
						"notice": "Interface used by DAI/CHAI for permit",
						"version": 1
					}
				}
			},
			"contracts/interfaces/external/IWETH9.sol": {
				"IWETH9": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "deposit",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"name": "withdraw",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the amount of tokens owned by `account`."
							},
							"totalSupply()": {
								"details": "Returns the amount of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves `amount` tokens from the caller's account to `recipient`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves `amount` tokens from `sender` to `recipient` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"title": "Interface for WETH9",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"deposit()": "d0e30db0",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd",
							"withdraw(uint256)": "2e1a7d4d"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `recipient`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `sender` to `recipient` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"title\":\"Interface for WETH9\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"deposit()\":{\"notice\":\"Deposit ether to get wrapped ether\"},\"withdraw(uint256)\":{\"notice\":\"Withdraw wrapped ether to get ether\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/external/IWETH9.sol\":\"IWETH9\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xbd74f587ab9b9711801baf667db1426e4a03fd2d7f15af33e0e0d0394e7cef76\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2d0913dfbfce90d170df0d496ad7596c0778518e5fa7aba6c32562522546f66b\",\"dweb:/ipfs/QmR6B8nLj2PJf5e1JWD9Nk7ErkAwkqUwadCnvE82FJr1RU\"]},\"contracts/interfaces/external/IWETH9.sol\":{\"keccak256\":\"0x6d7a8eb484e84bceb1d84c7be431c5b8120d519b0c2a7b4c7064c814635dea4c\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://8c3c81eb23b88076475e8ddd4edccb007358fa64911fc7e671a00adaf2006e75\",\"dweb:/ipfs/QmPbrPJ4w3UDPioJCvgtxMRaWNRa7tKHqDLtU17DTZPHBB\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"deposit()": {
								"notice": "Deposit ether to get wrapped ether"
							},
							"withdraw(uint256)": {
								"notice": "Withdraw wrapped ether to get ether"
							}
						},
						"version": 1
					}
				}
			},
			"contracts/libraries/BytesLib.sol": {
				"BytesLib": {
					"abi": [],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/libraries/BytesLib.sol\":376:4201  library BytesLib {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  invalid\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/libraries/BytesLib.sol\":376:4201  library BytesLib {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220cb74e2c0373787783ac873bda306c1d8a3d49e4daa5ac9317ac5b16164cb91f664736f6c63430007060033\n}\n",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220cb74e2c0373787783ac873bda306c1d8a3d49e4daa5ac9317ac5b16164cb91f664736f6c63430007060033",
							"opcodes": "PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xCB PUSH21 0xE2C0373787783AC873BDA306C1D8A3D49E4DAA5AC9 BALANCE PUSH27 0xC5B16164CB91F664736F6C63430007060033000000000000000000 ",
							"sourceMap": "376:3825:29:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220cb74e2c0373787783ac873bda306c1d8a3d49e4daa5ac9317ac5b16164cb91f664736f6c63430007060033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xCB PUSH21 0xE2C0373787783AC873BDA306C1D8A3D49E4DAA5AC9 BALANCE PUSH27 0xC5B16164CB91F664736F6C63430007060033000000000000000000 ",
							"sourceMap": "376:3825:29:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							},
							"internal": {
								"slice(bytes memory,uint256,uint256)": "infinite",
								"toAddress(bytes memory,uint256)": "infinite",
								"toUint24(bytes memory,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 376,
									"end": 4201,
									"name": "PUSH #[$]",
									"source": 29,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 376,
									"end": 4201,
									"name": "PUSH [$]",
									"source": 29,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 376,
									"end": 4201,
									"name": "PUSH",
									"source": 29,
									"value": "B"
								},
								{
									"begin": 376,
									"end": 4201,
									"name": "DUP3",
									"source": 29
								},
								{
									"begin": 376,
									"end": 4201,
									"name": "DUP3",
									"source": 29
								},
								{
									"begin": 376,
									"end": 4201,
									"name": "DUP3",
									"source": 29
								},
								{
									"begin": 376,
									"end": 4201,
									"name": "CODECOPY",
									"source": 29
								},
								{
									"begin": 376,
									"end": 4201,
									"name": "DUP1",
									"source": 29
								},
								{
									"begin": 376,
									"end": 4201,
									"name": "MLOAD",
									"source": 29
								},
								{
									"begin": 376,
									"end": 4201,
									"name": "PUSH",
									"source": 29,
									"value": "0"
								},
								{
									"begin": 376,
									"end": 4201,
									"name": "BYTE",
									"source": 29
								},
								{
									"begin": 376,
									"end": 4201,
									"name": "PUSH",
									"source": 29,
									"value": "73"
								},
								{
									"begin": 376,
									"end": 4201,
									"name": "EQ",
									"source": 29
								},
								{
									"begin": 376,
									"end": 4201,
									"name": "PUSH [tag]",
									"source": 29,
									"value": "1"
								},
								{
									"begin": 376,
									"end": 4201,
									"name": "JUMPI",
									"source": 29
								},
								{
									"begin": 376,
									"end": 4201,
									"name": "INVALID",
									"source": 29
								},
								{
									"begin": 376,
									"end": 4201,
									"name": "tag",
									"source": 29,
									"value": "1"
								},
								{
									"begin": 376,
									"end": 4201,
									"name": "JUMPDEST",
									"source": 29
								},
								{
									"begin": 376,
									"end": 4201,
									"name": "ADDRESS",
									"source": 29
								},
								{
									"begin": 376,
									"end": 4201,
									"name": "PUSH",
									"source": 29,
									"value": "0"
								},
								{
									"begin": 376,
									"end": 4201,
									"name": "MSTORE",
									"source": 29
								},
								{
									"begin": 376,
									"end": 4201,
									"name": "PUSH",
									"source": 29,
									"value": "73"
								},
								{
									"begin": 376,
									"end": 4201,
									"name": "DUP2",
									"source": 29
								},
								{
									"begin": 376,
									"end": 4201,
									"name": "MSTORE8",
									"source": 29
								},
								{
									"begin": 376,
									"end": 4201,
									"name": "DUP3",
									"source": 29
								},
								{
									"begin": 376,
									"end": 4201,
									"name": "DUP2",
									"source": 29
								},
								{
									"begin": 376,
									"end": 4201,
									"name": "RETURN",
									"source": 29
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220cb74e2c0373787783ac873bda306c1d8a3d49e4daa5ac9317ac5b16164cb91f664736f6c63430007060033",
									".code": [
										{
											"begin": 376,
											"end": 4201,
											"name": "PUSHDEPLOYADDRESS",
											"source": 29
										},
										{
											"begin": 376,
											"end": 4201,
											"name": "ADDRESS",
											"source": 29
										},
										{
											"begin": 376,
											"end": 4201,
											"name": "EQ",
											"source": 29
										},
										{
											"begin": 376,
											"end": 4201,
											"name": "PUSH",
											"source": 29,
											"value": "80"
										},
										{
											"begin": 376,
											"end": 4201,
											"name": "PUSH",
											"source": 29,
											"value": "40"
										},
										{
											"begin": 376,
											"end": 4201,
											"name": "MSTORE",
											"source": 29
										},
										{
											"begin": 376,
											"end": 4201,
											"name": "PUSH",
											"source": 29,
											"value": "0"
										},
										{
											"begin": 376,
											"end": 4201,
											"name": "DUP1",
											"source": 29
										},
										{
											"begin": 376,
											"end": 4201,
											"name": "REVERT",
											"source": 29
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/libraries/BytesLib.sol\":\"BytesLib\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/libraries/BytesLib.sol\":{\"keccak256\":\"0x68629e5b1a30b6490c6ae721c28117f6f963745462b007da0769758eb67f10d4\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://370e31ceab1a7504f98dec122f65d9b8c6fc6420fd8cdd171b3dd57c4d5d21fc\",\"dweb:/ipfs/QmcquKATbnopgs92RdM5bKewt7GdCpgGhVY4hxmv1KjnnH\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/libraries/CallbackValidation.sol": {
				"CallbackValidation": {
					"abi": [],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/libraries/CallbackValidation.sol\":234:1470  library CallbackValidation {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  invalid\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/libraries/CallbackValidation.sol\":234:1470  library CallbackValidation {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa264697066735822122043a16293f0d4b6435c106b9f0724209a6ed5a480f453d3fda1322f39ea29add264736f6c63430007060033\n}\n",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122043a16293f0d4b6435c106b9f0724209a6ed5a480f453d3fda1322f39ea29add264736f6c63430007060033",
							"opcodes": "PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 NUMBER LOG1 PUSH3 0x93F0D4 0xB6 NUMBER 0x5C LT PUSH12 0x9F0724209A6ED5A480F453D3 REVERT LOG1 ORIGIN 0x2F CODECOPY 0xEA 0x29 0xAD 0xD2 PUSH5 0x736F6C6343 STOP SMOD MOD STOP CALLER ",
							"sourceMap": "234:1236:30:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122043a16293f0d4b6435c106b9f0724209a6ed5a480f453d3fda1322f39ea29add264736f6c63430007060033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 NUMBER LOG1 PUSH3 0x93F0D4 0xB6 NUMBER 0x5C LT PUSH12 0x9F0724209A6ED5A480F453D3 REVERT LOG1 ORIGIN 0x2F CODECOPY 0xEA 0x29 0xAD 0xD2 PUSH5 0x736F6C6343 STOP SMOD MOD STOP CALLER ",
							"sourceMap": "234:1236:30:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							},
							"internal": {
								"verifyCallback(address,address,address,uint24)": "infinite",
								"verifyCallback(address,struct PoolAddress.PoolKey memory)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 234,
									"end": 1470,
									"name": "PUSH #[$]",
									"source": 30,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 234,
									"end": 1470,
									"name": "PUSH [$]",
									"source": 30,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 234,
									"end": 1470,
									"name": "PUSH",
									"source": 30,
									"value": "B"
								},
								{
									"begin": 234,
									"end": 1470,
									"name": "DUP3",
									"source": 30
								},
								{
									"begin": 234,
									"end": 1470,
									"name": "DUP3",
									"source": 30
								},
								{
									"begin": 234,
									"end": 1470,
									"name": "DUP3",
									"source": 30
								},
								{
									"begin": 234,
									"end": 1470,
									"name": "CODECOPY",
									"source": 30
								},
								{
									"begin": 234,
									"end": 1470,
									"name": "DUP1",
									"source": 30
								},
								{
									"begin": 234,
									"end": 1470,
									"name": "MLOAD",
									"source": 30
								},
								{
									"begin": 234,
									"end": 1470,
									"name": "PUSH",
									"source": 30,
									"value": "0"
								},
								{
									"begin": 234,
									"end": 1470,
									"name": "BYTE",
									"source": 30
								},
								{
									"begin": 234,
									"end": 1470,
									"name": "PUSH",
									"source": 30,
									"value": "73"
								},
								{
									"begin": 234,
									"end": 1470,
									"name": "EQ",
									"source": 30
								},
								{
									"begin": 234,
									"end": 1470,
									"name": "PUSH [tag]",
									"source": 30,
									"value": "1"
								},
								{
									"begin": 234,
									"end": 1470,
									"name": "JUMPI",
									"source": 30
								},
								{
									"begin": 234,
									"end": 1470,
									"name": "INVALID",
									"source": 30
								},
								{
									"begin": 234,
									"end": 1470,
									"name": "tag",
									"source": 30,
									"value": "1"
								},
								{
									"begin": 234,
									"end": 1470,
									"name": "JUMPDEST",
									"source": 30
								},
								{
									"begin": 234,
									"end": 1470,
									"name": "ADDRESS",
									"source": 30
								},
								{
									"begin": 234,
									"end": 1470,
									"name": "PUSH",
									"source": 30,
									"value": "0"
								},
								{
									"begin": 234,
									"end": 1470,
									"name": "MSTORE",
									"source": 30
								},
								{
									"begin": 234,
									"end": 1470,
									"name": "PUSH",
									"source": 30,
									"value": "73"
								},
								{
									"begin": 234,
									"end": 1470,
									"name": "DUP2",
									"source": 30
								},
								{
									"begin": 234,
									"end": 1470,
									"name": "MSTORE8",
									"source": 30
								},
								{
									"begin": 234,
									"end": 1470,
									"name": "DUP3",
									"source": 30
								},
								{
									"begin": 234,
									"end": 1470,
									"name": "DUP2",
									"source": 30
								},
								{
									"begin": 234,
									"end": 1470,
									"name": "RETURN",
									"source": 30
								}
							],
							".data": {
								"0": {
									".auxdata": "a264697066735822122043a16293f0d4b6435c106b9f0724209a6ed5a480f453d3fda1322f39ea29add264736f6c63430007060033",
									".code": [
										{
											"begin": 234,
											"end": 1470,
											"name": "PUSHDEPLOYADDRESS",
											"source": 30
										},
										{
											"begin": 234,
											"end": 1470,
											"name": "ADDRESS",
											"source": 30
										},
										{
											"begin": 234,
											"end": 1470,
											"name": "EQ",
											"source": 30
										},
										{
											"begin": 234,
											"end": 1470,
											"name": "PUSH",
											"source": 30,
											"value": "80"
										},
										{
											"begin": 234,
											"end": 1470,
											"name": "PUSH",
											"source": 30,
											"value": "40"
										},
										{
											"begin": 234,
											"end": 1470,
											"name": "MSTORE",
											"source": 30
										},
										{
											"begin": 234,
											"end": 1470,
											"name": "PUSH",
											"source": 30,
											"value": "0"
										},
										{
											"begin": 234,
											"end": 1470,
											"name": "DUP1",
											"source": 30
										},
										{
											"begin": 234,
											"end": 1470,
											"name": "REVERT",
											"source": 30
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Provides validation for callbacks from Uniswap V3 Pools\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/libraries/CallbackValidation.sol\":\"CallbackValidation\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol\":{\"keccak256\":\"0xfe6113d518466cd6652c85b111e01f33eb62157f49ae5ed7d5a3947a2044adb1\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://1c42b9e6f5902ac38dd43e25750939baa7e0c1425dc75afd717c4412731065d5\",\"dweb:/ipfs/QmWaoacnzsucTvBME2o7YgZBZMhaHv7fkj83htHMVWJKWh\"]},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol\":{\"keccak256\":\"0x9453dd0e7442188667d01d9b65de3f1e14e9511ff3e303179a15f6fc267f7634\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://982f4328f956c3e60e67501e759eb292ac487f76460c774c50e9ae4fcc92aae5\",\"dweb:/ipfs/QmRnzEDsaqtd9PJEVcgQi7p5aV5pMSvRUoGZJAdwFUJxgZ\"]},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol\":{\"keccak256\":\"0xe603ac5b17ecdee73ba2b27efdf386c257a19c14206e87eee77e2017b742d9e5\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://8febc9bdb399a4d94bb89f5377732652e2400e4a8dee808201ade6848f9004e7\",\"dweb:/ipfs/QmaKDqYYFU4d2W2iN77aDHptfbFmYZRrMYXHeGpJmM8C1c\"]},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol\":{\"keccak256\":\"0x8071514d0fe5d17d6fbd31c191cdfb703031c24e0ece3621d88ab10e871375cd\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://d0b571930cc7488b1d546a7e9cea7c52d8b3c4e207da657ed0e0db7343b8cd03\",\"dweb:/ipfs/QmaGK6vVwB95QSTR1XMYvrh7ivYAYZxi3fD7v6VMA4jZ39\"]},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol\":{\"keccak256\":\"0xf6e5d2cd1139c4c276bdbc8e1d2b256e456c866a91f1b868da265c6d2685c3f7\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://b99c8c9ae8e27ee6559e5866bea82cbc9ffc8247f8d15b7422a4deb287d4d047\",\"dweb:/ipfs/QmfL8gaqt3ffAnm6nVj5ksuNpLygXuL3xq5VBqrkwC2JJ3\"]},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol\":{\"keccak256\":\"0x759b78a2918af9e99e246dc3af084f654e48ef32bb4e4cb8a966aa3dcaece235\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://64144fb96e1c7fdba87305acadb98a198d26a3d46c097cb3a666e567f6f29735\",\"dweb:/ipfs/QmUnWVwN9FKB9uV5Pr8YfLpWZnYM2DENnRMaadZ492JS9u\"]},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol\":{\"keccak256\":\"0x852dc1f5df7dcf7f11e7bb3eed79f0cea72ad4b25f6a9d2c35aafb48925fd49f\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://ed63907c38ff36b0e22bc9ffc53e791ea74f0d4f0e7c257fdfb5aaf8825b1f0f\",\"dweb:/ipfs/QmSQrckghEjs6HVsA5GVgpNpZWvTXMY5eQLF7cN6deFeEg\"]},\"contracts/libraries/CallbackValidation.sol\":{\"keccak256\":\"0x490c80ca7f4a0ee0514041ddec0867e8a52b24febf1670991797af8fed9f3eec\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://f775ba8ad52041a351fbd7000801266d5a10be2f1a53d13c6c9862b2baa935bd\",\"dweb:/ipfs/Qmcaxyr6VutZeaymeBNVcZrBVAHhyJ11sjhWpgj2GX6D5K\"]},\"contracts/libraries/PoolAddress.sol\":{\"keccak256\":\"0x5edd84eb8ba7c12fd8cb6cffe52e1e9f3f6464514ee5f539c2283826209035a2\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://f375d0e6d5ea3674e1aa6f112b021e9a86721a6a2f3cb22d673378b30cf0e840\",\"dweb:/ipfs/QmWJir2qnJyp963mU6U3jEEx9i3H3V5BgKawAfSnG1pC8w\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"notice": "Provides validation for callbacks from Uniswap V3 Pools",
						"version": 1
					}
				}
			},
			"contracts/libraries/Path.sol": {
				"Path": {
					"abi": [],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"stateVariables": {
							"ADDR_SIZE": {
								"details": "The length of the bytes encoded address"
							},
							"FEE_SIZE": {
								"details": "The length of the bytes encoded fee"
							},
							"MULTIPLE_POOLS_MIN_LENGTH": {
								"details": "The minimum length of an encoding that contains 2 or more pools"
							},
							"NEXT_OFFSET": {
								"details": "The offset of a single token address and pool fee"
							},
							"POP_OFFSET": {
								"details": "The offset of an encoded pool key"
							}
						},
						"title": "Functions for manipulating path data for multihop swaps",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/libraries/Path.sol\":164:2786  library Path {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  invalid\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/libraries/Path.sol\":164:2786  library Path {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220b64699f60e7935e8cbc0cde84c8792b427c3bd89a7f0bb3140c2280d1b56c65064736f6c63430007060033\n}\n",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220b64699f60e7935e8cbc0cde84c8792b427c3bd89a7f0bb3140c2280d1b56c65064736f6c63430007060033",
							"opcodes": "PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB6 CHAINID SWAP10 0xF6 0xE PUSH26 0x35E8CBC0CDE84C8792B427C3BD89A7F0BB3140C2280D1B56C650 PUSH5 0x736F6C6343 STOP SMOD MOD STOP CALLER ",
							"sourceMap": "164:2622:31:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220b64699f60e7935e8cbc0cde84c8792b427c3bd89a7f0bb3140c2280d1b56c65064736f6c63430007060033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB6 CHAINID SWAP10 0xF6 0xE PUSH26 0x35E8CBC0CDE84C8792B427C3BD89A7F0BB3140C2280D1B56C650 PUSH5 0x736F6C6343 STOP SMOD MOD STOP CALLER ",
							"sourceMap": "164:2622:31:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							},
							"internal": {
								"decodeFirstPool(bytes memory)": "infinite",
								"getFirstPool(bytes memory)": "infinite",
								"hasMultiplePools(bytes memory)": "infinite",
								"numPools(bytes memory)": "infinite",
								"skipToken(bytes memory)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 164,
									"end": 2786,
									"name": "PUSH #[$]",
									"source": 31,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 164,
									"end": 2786,
									"name": "PUSH [$]",
									"source": 31,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 164,
									"end": 2786,
									"name": "PUSH",
									"source": 31,
									"value": "B"
								},
								{
									"begin": 164,
									"end": 2786,
									"name": "DUP3",
									"source": 31
								},
								{
									"begin": 164,
									"end": 2786,
									"name": "DUP3",
									"source": 31
								},
								{
									"begin": 164,
									"end": 2786,
									"name": "DUP3",
									"source": 31
								},
								{
									"begin": 164,
									"end": 2786,
									"name": "CODECOPY",
									"source": 31
								},
								{
									"begin": 164,
									"end": 2786,
									"name": "DUP1",
									"source": 31
								},
								{
									"begin": 164,
									"end": 2786,
									"name": "MLOAD",
									"source": 31
								},
								{
									"begin": 164,
									"end": 2786,
									"name": "PUSH",
									"source": 31,
									"value": "0"
								},
								{
									"begin": 164,
									"end": 2786,
									"name": "BYTE",
									"source": 31
								},
								{
									"begin": 164,
									"end": 2786,
									"name": "PUSH",
									"source": 31,
									"value": "73"
								},
								{
									"begin": 164,
									"end": 2786,
									"name": "EQ",
									"source": 31
								},
								{
									"begin": 164,
									"end": 2786,
									"name": "PUSH [tag]",
									"source": 31,
									"value": "1"
								},
								{
									"begin": 164,
									"end": 2786,
									"name": "JUMPI",
									"source": 31
								},
								{
									"begin": 164,
									"end": 2786,
									"name": "INVALID",
									"source": 31
								},
								{
									"begin": 164,
									"end": 2786,
									"name": "tag",
									"source": 31,
									"value": "1"
								},
								{
									"begin": 164,
									"end": 2786,
									"name": "JUMPDEST",
									"source": 31
								},
								{
									"begin": 164,
									"end": 2786,
									"name": "ADDRESS",
									"source": 31
								},
								{
									"begin": 164,
									"end": 2786,
									"name": "PUSH",
									"source": 31,
									"value": "0"
								},
								{
									"begin": 164,
									"end": 2786,
									"name": "MSTORE",
									"source": 31
								},
								{
									"begin": 164,
									"end": 2786,
									"name": "PUSH",
									"source": 31,
									"value": "73"
								},
								{
									"begin": 164,
									"end": 2786,
									"name": "DUP2",
									"source": 31
								},
								{
									"begin": 164,
									"end": 2786,
									"name": "MSTORE8",
									"source": 31
								},
								{
									"begin": 164,
									"end": 2786,
									"name": "DUP3",
									"source": 31
								},
								{
									"begin": 164,
									"end": 2786,
									"name": "DUP2",
									"source": 31
								},
								{
									"begin": 164,
									"end": 2786,
									"name": "RETURN",
									"source": 31
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220b64699f60e7935e8cbc0cde84c8792b427c3bd89a7f0bb3140c2280d1b56c65064736f6c63430007060033",
									".code": [
										{
											"begin": 164,
											"end": 2786,
											"name": "PUSHDEPLOYADDRESS",
											"source": 31
										},
										{
											"begin": 164,
											"end": 2786,
											"name": "ADDRESS",
											"source": 31
										},
										{
											"begin": 164,
											"end": 2786,
											"name": "EQ",
											"source": 31
										},
										{
											"begin": 164,
											"end": 2786,
											"name": "PUSH",
											"source": 31,
											"value": "80"
										},
										{
											"begin": 164,
											"end": 2786,
											"name": "PUSH",
											"source": 31,
											"value": "40"
										},
										{
											"begin": 164,
											"end": 2786,
											"name": "MSTORE",
											"source": 31
										},
										{
											"begin": 164,
											"end": 2786,
											"name": "PUSH",
											"source": 31,
											"value": "0"
										},
										{
											"begin": 164,
											"end": 2786,
											"name": "DUP1",
											"source": 31
										},
										{
											"begin": 164,
											"end": 2786,
											"name": "REVERT",
											"source": 31
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"ADDR_SIZE\":{\"details\":\"The length of the bytes encoded address\"},\"FEE_SIZE\":{\"details\":\"The length of the bytes encoded fee\"},\"MULTIPLE_POOLS_MIN_LENGTH\":{\"details\":\"The minimum length of an encoding that contains 2 or more pools\"},\"NEXT_OFFSET\":{\"details\":\"The offset of a single token address and pool fee\"},\"POP_OFFSET\":{\"details\":\"The offset of an encoded pool key\"}},\"title\":\"Functions for manipulating path data for multihop swaps\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/libraries/Path.sol\":\"Path\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/libraries/BytesLib.sol\":{\"keccak256\":\"0x68629e5b1a30b6490c6ae721c28117f6f963745462b007da0769758eb67f10d4\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://370e31ceab1a7504f98dec122f65d9b8c6fc6420fd8cdd171b3dd57c4d5d21fc\",\"dweb:/ipfs/QmcquKATbnopgs92RdM5bKewt7GdCpgGhVY4hxmv1KjnnH\"]},\"contracts/libraries/Path.sol\":{\"keccak256\":\"0xb22c562b5175d50dbcc2224325666090d985f052abdcfe275c8dfc884e34de61\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://27aeff27314476ab3c77313ae1f0c5b2442b86315f5ce741cb2150a87c3cbad3\",\"dweb:/ipfs/QmQNno2g1CJvjnH6ych4LuHr1UZDEZPACgYG4XvivxGrqV\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/libraries/PoolAddress.sol": {
				"PoolAddress": {
					"abi": [],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"title": "Provides functions for deriving a pool address from the factory, tokens, and the fee",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/libraries/PoolAddress.sol\":167:1819  library PoolAddress {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  invalid\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/libraries/PoolAddress.sol\":167:1819  library PoolAddress {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa264697066735822122006ebdd7168a89ea4e211c4a6f792f3f3d1c546f7fa71c2c9c9ffd7f92d9a304464736f6c63430007060033\n}\n",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122006ebdd7168a89ea4e211c4a6f792f3f3d1c546f7fa71c2c9c9ffd7f92d9a304464736f6c63430007060033",
							"opcodes": "PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 MOD 0xEB 0xDD PUSH18 0x68A89EA4E211C4A6F792F3F3D1C546F7FA71 0xC2 0xC9 0xC9 SELFDESTRUCT 0xD7 0xF9 0x2D SWAP11 ADDRESS DIFFICULTY PUSH5 0x736F6C6343 STOP SMOD MOD STOP CALLER ",
							"sourceMap": "167:1652:32:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122006ebdd7168a89ea4e211c4a6f792f3f3d1c546f7fa71c2c9c9ffd7f92d9a304464736f6c63430007060033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 MOD 0xEB 0xDD PUSH18 0x68A89EA4E211C4A6F792F3F3D1C546F7FA71 0xC2 0xC9 0xC9 SELFDESTRUCT 0xD7 0xF9 0x2D SWAP11 ADDRESS DIFFICULTY PUSH5 0x736F6C6343 STOP SMOD MOD STOP CALLER ",
							"sourceMap": "167:1652:32:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							},
							"internal": {
								"computeAddress(address,struct PoolAddress.PoolKey memory)": "infinite",
								"getPoolKey(address,address,uint24)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 167,
									"end": 1819,
									"name": "PUSH #[$]",
									"source": 32,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 167,
									"end": 1819,
									"name": "PUSH [$]",
									"source": 32,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 167,
									"end": 1819,
									"name": "PUSH",
									"source": 32,
									"value": "B"
								},
								{
									"begin": 167,
									"end": 1819,
									"name": "DUP3",
									"source": 32
								},
								{
									"begin": 167,
									"end": 1819,
									"name": "DUP3",
									"source": 32
								},
								{
									"begin": 167,
									"end": 1819,
									"name": "DUP3",
									"source": 32
								},
								{
									"begin": 167,
									"end": 1819,
									"name": "CODECOPY",
									"source": 32
								},
								{
									"begin": 167,
									"end": 1819,
									"name": "DUP1",
									"source": 32
								},
								{
									"begin": 167,
									"end": 1819,
									"name": "MLOAD",
									"source": 32
								},
								{
									"begin": 167,
									"end": 1819,
									"name": "PUSH",
									"source": 32,
									"value": "0"
								},
								{
									"begin": 167,
									"end": 1819,
									"name": "BYTE",
									"source": 32
								},
								{
									"begin": 167,
									"end": 1819,
									"name": "PUSH",
									"source": 32,
									"value": "73"
								},
								{
									"begin": 167,
									"end": 1819,
									"name": "EQ",
									"source": 32
								},
								{
									"begin": 167,
									"end": 1819,
									"name": "PUSH [tag]",
									"source": 32,
									"value": "1"
								},
								{
									"begin": 167,
									"end": 1819,
									"name": "JUMPI",
									"source": 32
								},
								{
									"begin": 167,
									"end": 1819,
									"name": "INVALID",
									"source": 32
								},
								{
									"begin": 167,
									"end": 1819,
									"name": "tag",
									"source": 32,
									"value": "1"
								},
								{
									"begin": 167,
									"end": 1819,
									"name": "JUMPDEST",
									"source": 32
								},
								{
									"begin": 167,
									"end": 1819,
									"name": "ADDRESS",
									"source": 32
								},
								{
									"begin": 167,
									"end": 1819,
									"name": "PUSH",
									"source": 32,
									"value": "0"
								},
								{
									"begin": 167,
									"end": 1819,
									"name": "MSTORE",
									"source": 32
								},
								{
									"begin": 167,
									"end": 1819,
									"name": "PUSH",
									"source": 32,
									"value": "73"
								},
								{
									"begin": 167,
									"end": 1819,
									"name": "DUP2",
									"source": 32
								},
								{
									"begin": 167,
									"end": 1819,
									"name": "MSTORE8",
									"source": 32
								},
								{
									"begin": 167,
									"end": 1819,
									"name": "DUP3",
									"source": 32
								},
								{
									"begin": 167,
									"end": 1819,
									"name": "DUP2",
									"source": 32
								},
								{
									"begin": 167,
									"end": 1819,
									"name": "RETURN",
									"source": 32
								}
							],
							".data": {
								"0": {
									".auxdata": "a264697066735822122006ebdd7168a89ea4e211c4a6f792f3f3d1c546f7fa71c2c9c9ffd7f92d9a304464736f6c63430007060033",
									".code": [
										{
											"begin": 167,
											"end": 1819,
											"name": "PUSHDEPLOYADDRESS",
											"source": 32
										},
										{
											"begin": 167,
											"end": 1819,
											"name": "ADDRESS",
											"source": 32
										},
										{
											"begin": 167,
											"end": 1819,
											"name": "EQ",
											"source": 32
										},
										{
											"begin": 167,
											"end": 1819,
											"name": "PUSH",
											"source": 32,
											"value": "80"
										},
										{
											"begin": 167,
											"end": 1819,
											"name": "PUSH",
											"source": 32,
											"value": "40"
										},
										{
											"begin": 167,
											"end": 1819,
											"name": "MSTORE",
											"source": 32
										},
										{
											"begin": 167,
											"end": 1819,
											"name": "PUSH",
											"source": 32,
											"value": "0"
										},
										{
											"begin": 167,
											"end": 1819,
											"name": "DUP1",
											"source": 32
										},
										{
											"begin": 167,
											"end": 1819,
											"name": "REVERT",
											"source": 32
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"title\":\"Provides functions for deriving a pool address from the factory, tokens, and the fee\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/libraries/PoolAddress.sol\":\"PoolAddress\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/libraries/PoolAddress.sol\":{\"keccak256\":\"0x5edd84eb8ba7c12fd8cb6cffe52e1e9f3f6464514ee5f539c2283826209035a2\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://f375d0e6d5ea3674e1aa6f112b021e9a86721a6a2f3cb22d673378b30cf0e840\",\"dweb:/ipfs/QmWJir2qnJyp963mU6U3jEEx9i3H3V5BgKawAfSnG1pC8w\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/libraries/TransferHelper.sol": {
				"TransferHelper": {
					"abi": [],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/libraries/TransferHelper.sol\":129:2537  library TransferHelper {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  invalid\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/libraries/TransferHelper.sol\":129:2537  library TransferHelper {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa264697066735822122097fd6154fc03f7dcb61f856d1493a150329b810965db5bbc558fabef96ac0cd464736f6c63430007060033\n}\n",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122097fd6154fc03f7dcb61f856d1493a150329b810965db5bbc558fabef96ac0cd464736f6c63430007060033",
							"opcodes": "PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP8 REVERT PUSH2 0x54FC SUB 0xF7 0xDC 0xB6 0x1F DUP6 PUSH14 0x1493A150329B810965DB5BBC558F 0xAB 0xEF SWAP7 0xAC 0xC 0xD4 PUSH5 0x736F6C6343 STOP SMOD MOD STOP CALLER ",
							"sourceMap": "129:2408:33:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122097fd6154fc03f7dcb61f856d1493a150329b810965db5bbc558fabef96ac0cd464736f6c63430007060033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP8 REVERT PUSH2 0x54FC SUB 0xF7 0xDC 0xB6 0x1F DUP6 PUSH14 0x1493A150329B810965DB5BBC558F 0xAB 0xEF SWAP7 0xAC 0xC 0xD4 PUSH5 0x736F6C6343 STOP SMOD MOD STOP CALLER ",
							"sourceMap": "129:2408:33:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							},
							"internal": {
								"safeApprove(address,address,uint256)": "infinite",
								"safeTransfer(address,address,uint256)": "infinite",
								"safeTransferETH(address,uint256)": "infinite",
								"safeTransferFrom(address,address,address,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 129,
									"end": 2537,
									"name": "PUSH #[$]",
									"source": 33,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 129,
									"end": 2537,
									"name": "PUSH [$]",
									"source": 33,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 129,
									"end": 2537,
									"name": "PUSH",
									"source": 33,
									"value": "B"
								},
								{
									"begin": 129,
									"end": 2537,
									"name": "DUP3",
									"source": 33
								},
								{
									"begin": 129,
									"end": 2537,
									"name": "DUP3",
									"source": 33
								},
								{
									"begin": 129,
									"end": 2537,
									"name": "DUP3",
									"source": 33
								},
								{
									"begin": 129,
									"end": 2537,
									"name": "CODECOPY",
									"source": 33
								},
								{
									"begin": 129,
									"end": 2537,
									"name": "DUP1",
									"source": 33
								},
								{
									"begin": 129,
									"end": 2537,
									"name": "MLOAD",
									"source": 33
								},
								{
									"begin": 129,
									"end": 2537,
									"name": "PUSH",
									"source": 33,
									"value": "0"
								},
								{
									"begin": 129,
									"end": 2537,
									"name": "BYTE",
									"source": 33
								},
								{
									"begin": 129,
									"end": 2537,
									"name": "PUSH",
									"source": 33,
									"value": "73"
								},
								{
									"begin": 129,
									"end": 2537,
									"name": "EQ",
									"source": 33
								},
								{
									"begin": 129,
									"end": 2537,
									"name": "PUSH [tag]",
									"source": 33,
									"value": "1"
								},
								{
									"begin": 129,
									"end": 2537,
									"name": "JUMPI",
									"source": 33
								},
								{
									"begin": 129,
									"end": 2537,
									"name": "INVALID",
									"source": 33
								},
								{
									"begin": 129,
									"end": 2537,
									"name": "tag",
									"source": 33,
									"value": "1"
								},
								{
									"begin": 129,
									"end": 2537,
									"name": "JUMPDEST",
									"source": 33
								},
								{
									"begin": 129,
									"end": 2537,
									"name": "ADDRESS",
									"source": 33
								},
								{
									"begin": 129,
									"end": 2537,
									"name": "PUSH",
									"source": 33,
									"value": "0"
								},
								{
									"begin": 129,
									"end": 2537,
									"name": "MSTORE",
									"source": 33
								},
								{
									"begin": 129,
									"end": 2537,
									"name": "PUSH",
									"source": 33,
									"value": "73"
								},
								{
									"begin": 129,
									"end": 2537,
									"name": "DUP2",
									"source": 33
								},
								{
									"begin": 129,
									"end": 2537,
									"name": "MSTORE8",
									"source": 33
								},
								{
									"begin": 129,
									"end": 2537,
									"name": "DUP3",
									"source": 33
								},
								{
									"begin": 129,
									"end": 2537,
									"name": "DUP2",
									"source": 33
								},
								{
									"begin": 129,
									"end": 2537,
									"name": "RETURN",
									"source": 33
								}
							],
							".data": {
								"0": {
									".auxdata": "a264697066735822122097fd6154fc03f7dcb61f856d1493a150329b810965db5bbc558fabef96ac0cd464736f6c63430007060033",
									".code": [
										{
											"begin": 129,
											"end": 2537,
											"name": "PUSHDEPLOYADDRESS",
											"source": 33
										},
										{
											"begin": 129,
											"end": 2537,
											"name": "ADDRESS",
											"source": 33
										},
										{
											"begin": 129,
											"end": 2537,
											"name": "EQ",
											"source": 33
										},
										{
											"begin": 129,
											"end": 2537,
											"name": "PUSH",
											"source": 33,
											"value": "80"
										},
										{
											"begin": 129,
											"end": 2537,
											"name": "PUSH",
											"source": 33,
											"value": "40"
										},
										{
											"begin": 129,
											"end": 2537,
											"name": "MSTORE",
											"source": 33
										},
										{
											"begin": 129,
											"end": 2537,
											"name": "PUSH",
											"source": 33,
											"value": "0"
										},
										{
											"begin": 129,
											"end": 2537,
											"name": "DUP1",
											"source": 33
										},
										{
											"begin": 129,
											"end": 2537,
											"name": "REVERT",
											"source": 33
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/libraries/TransferHelper.sol\":\"TransferHelper\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xbd74f587ab9b9711801baf667db1426e4a03fd2d7f15af33e0e0d0394e7cef76\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2d0913dfbfce90d170df0d496ad7596c0778518e5fa7aba6c32562522546f66b\",\"dweb:/ipfs/QmR6B8nLj2PJf5e1JWD9Nk7ErkAwkqUwadCnvE82FJr1RU\"]},\"contracts/libraries/TransferHelper.sol\":{\"keccak256\":\"0x9af98b0908c96320ca6d08b22f0efca864742f6adbe5794cafe2d1d2e808b0cd\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://da1d1e81e5bf534f0bf2934b3193db6cb1933f91ec006d2b88e9ad10a617a2d2\",\"dweb:/ipfs/QmcPBk47QLMFWcX2y2S9eMFsJgoYWBd3R8ey55Bgmv6w6v\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			}
		},
		"sources": {
			"@openzeppelin/contracts/drafts/IERC20Permit.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/drafts/IERC20Permit.sol",
					"exportedSymbols": {
						"IERC20Permit": [
							35
						]
					},
					"id": 36,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								">=",
								"0.6",
								".0",
								"<",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "33:31:0"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 2,
								"nodeType": "StructuredDocumentation",
								"src": "66:482:0",
								"text": " @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\n need to send a transaction, and thus is not required to hold Ether at all."
							},
							"fullyImplemented": false,
							"id": 35,
							"linearizedBaseContracts": [
								35
							],
							"name": "IERC20Permit",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 3,
										"nodeType": "StructuredDocumentation",
										"src": "578:788:0",
										"text": " @dev Sets `value` as the allowance of `spender` over `owner`'s tokens,\n given `owner`'s signed approval.\n IMPORTANT: The same issues {IERC20-approve} has related to transaction\n ordering also apply here.\n Emits an {Approval} event.\n Requirements:\n - `spender` cannot be the zero address.\n - `deadline` must be a timestamp in the future.\n - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n over the EIP712-formatted function arguments.\n - the signature must use ``owner``'s current nonce (see {nonces}).\n For more information on the signature format, see the\n https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n section]."
									},
									"functionSelector": "d505accf",
									"id": 20,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "permit",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 18,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 5,
												"mutability": "mutable",
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"scope": 20,
												"src": "1387:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 4,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1387:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 7,
												"mutability": "mutable",
												"name": "spender",
												"nodeType": "VariableDeclaration",
												"scope": 20,
												"src": "1402:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 6,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1402:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 9,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 20,
												"src": "1419:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 8,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1419:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 11,
												"mutability": "mutable",
												"name": "deadline",
												"nodeType": "VariableDeclaration",
												"scope": 20,
												"src": "1434:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 10,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1434:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 13,
												"mutability": "mutable",
												"name": "v",
												"nodeType": "VariableDeclaration",
												"scope": 20,
												"src": "1452:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 12,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "1452:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 15,
												"mutability": "mutable",
												"name": "r",
												"nodeType": "VariableDeclaration",
												"scope": 20,
												"src": "1461:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 14,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1461:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 17,
												"mutability": "mutable",
												"name": "s",
												"nodeType": "VariableDeclaration",
												"scope": 20,
												"src": "1472:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 16,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1472:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1386:96:0"
									},
									"returnParameters": {
										"id": 19,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1491:0:0"
									},
									"scope": 35,
									"src": "1371:121:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 21,
										"nodeType": "StructuredDocumentation",
										"src": "1498:294:0",
										"text": " @dev Returns the current nonce for `owner`. This value must be\n included whenever a signature is generated for {permit}.\n Every successful call to {permit} increases ``owner``'s nonce by one. This\n prevents a signature from being used multiple times."
									},
									"functionSelector": "7ecebe00",
									"id": 28,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "nonces",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 24,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 23,
												"mutability": "mutable",
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"scope": 28,
												"src": "1813:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 22,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1813:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1812:15:0"
									},
									"returnParameters": {
										"id": 27,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 26,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 28,
												"src": "1851:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 25,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1851:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1850:9:0"
									},
									"scope": 35,
									"src": "1797:63:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 29,
										"nodeType": "StructuredDocumentation",
										"src": "1866:128:0",
										"text": " @dev Returns the domain separator used in the encoding of the signature for `permit`, as defined by {EIP712}."
									},
									"functionSelector": "3644e515",
									"id": 34,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "DOMAIN_SEPARATOR",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 30,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2077:2:0"
									},
									"returnParameters": {
										"id": 33,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 32,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 34,
												"src": "2103:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 31,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2103:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2102:9:0"
									},
									"scope": 35,
									"src": "2052:60:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 36,
							"src": "549:1565:0"
						}
					],
					"src": "33:2082:0"
				},
				"id": 0
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
					"exportedSymbols": {
						"IERC20": [
							113
						]
					},
					"id": 114,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 37,
							"literals": [
								"solidity",
								"^",
								"0.7",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "33:23:1"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 38,
								"nodeType": "StructuredDocumentation",
								"src": "58:70:1",
								"text": " @dev Interface of the ERC20 standard as defined in the EIP."
							},
							"fullyImplemented": false,
							"id": 113,
							"linearizedBaseContracts": [
								113
							],
							"name": "IERC20",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 39,
										"nodeType": "StructuredDocumentation",
										"src": "152:66:1",
										"text": " @dev Returns the amount of tokens in existence."
									},
									"functionSelector": "18160ddd",
									"id": 44,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 40,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "243:2:1"
									},
									"returnParameters": {
										"id": 43,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 42,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 44,
												"src": "269:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 41,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "269:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "268:9:1"
									},
									"scope": 113,
									"src": "223:55:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 45,
										"nodeType": "StructuredDocumentation",
										"src": "284:72:1",
										"text": " @dev Returns the amount of tokens owned by `account`."
									},
									"functionSelector": "70a08231",
									"id": 52,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 48,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 47,
												"mutability": "mutable",
												"name": "account",
												"nodeType": "VariableDeclaration",
												"scope": 52,
												"src": "380:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 46,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "380:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "379:17:1"
									},
									"returnParameters": {
										"id": 51,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 50,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 52,
												"src": "420:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 49,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "420:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "419:9:1"
									},
									"scope": 113,
									"src": "361:68:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 53,
										"nodeType": "StructuredDocumentation",
										"src": "435:209:1",
										"text": " @dev Moves `amount` tokens from the caller's account to `recipient`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "a9059cbb",
									"id": 62,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 58,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 55,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 62,
												"src": "667:17:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 54,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "667:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 57,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 62,
												"src": "686:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 56,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "686:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "666:35:1"
									},
									"returnParameters": {
										"id": 61,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 60,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 62,
												"src": "720:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 59,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "720:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "719:6:1"
									},
									"scope": 113,
									"src": "649:77:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 63,
										"nodeType": "StructuredDocumentation",
										"src": "732:264:1",
										"text": " @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."
									},
									"functionSelector": "dd62ed3e",
									"id": 72,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 68,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 65,
												"mutability": "mutable",
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"scope": 72,
												"src": "1020:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 64,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1020:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 67,
												"mutability": "mutable",
												"name": "spender",
												"nodeType": "VariableDeclaration",
												"scope": 72,
												"src": "1035:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 66,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1035:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1019:32:1"
									},
									"returnParameters": {
										"id": 71,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 70,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 72,
												"src": "1075:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 69,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1075:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1074:9:1"
									},
									"scope": 113,
									"src": "1001:83:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 73,
										"nodeType": "StructuredDocumentation",
										"src": "1090:642:1",
										"text": " @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."
									},
									"functionSelector": "095ea7b3",
									"id": 82,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 78,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 75,
												"mutability": "mutable",
												"name": "spender",
												"nodeType": "VariableDeclaration",
												"scope": 82,
												"src": "1754:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 74,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1754:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 77,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 82,
												"src": "1771:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 76,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1771:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1753:33:1"
									},
									"returnParameters": {
										"id": 81,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 80,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 82,
												"src": "1805:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 79,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1805:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1804:6:1"
									},
									"scope": 113,
									"src": "1737:74:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 83,
										"nodeType": "StructuredDocumentation",
										"src": "1817:296:1",
										"text": " @dev Moves `amount` tokens from `sender` to `recipient` using the\n allowance mechanism. `amount` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "23b872dd",
									"id": 94,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 90,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 85,
												"mutability": "mutable",
												"name": "sender",
												"nodeType": "VariableDeclaration",
												"scope": 94,
												"src": "2140:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 84,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2140:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 87,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 94,
												"src": "2156:17:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 86,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2156:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 89,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 94,
												"src": "2175:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 88,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2175:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2139:51:1"
									},
									"returnParameters": {
										"id": 93,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 92,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 94,
												"src": "2209:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 91,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2209:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2208:6:1"
									},
									"scope": 113,
									"src": "2118:97:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 95,
										"nodeType": "StructuredDocumentation",
										"src": "2221:158:1",
										"text": " @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."
									},
									"id": 103,
									"name": "Transfer",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 102,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 97,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nodeType": "VariableDeclaration",
												"scope": 103,
												"src": "2399:20:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 96,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2399:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 99,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nodeType": "VariableDeclaration",
												"scope": 103,
												"src": "2421:18:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 98,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2421:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 101,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 103,
												"src": "2441:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 100,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2441:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2398:57:1"
									},
									"src": "2384:72:1"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 104,
										"nodeType": "StructuredDocumentation",
										"src": "2462:148:1",
										"text": " @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."
									},
									"id": 112,
									"name": "Approval",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 111,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 106,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"scope": 112,
												"src": "2630:21:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 105,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2630:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 108,
												"indexed": true,
												"mutability": "mutable",
												"name": "spender",
												"nodeType": "VariableDeclaration",
												"scope": 112,
												"src": "2653:23:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 107,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2653:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 110,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 112,
												"src": "2678:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 109,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2678:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2629:63:1"
									},
									"src": "2615:78:1"
								}
							],
							"scope": 114,
							"src": "129:2566:1"
						}
					],
					"src": "33:2663:1"
				},
				"id": 1
			},
			"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol": {
				"ast": {
					"absolutePath": "@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol",
					"exportedSymbols": {
						"IUniswapV3Pool": [
							135
						],
						"IUniswapV3PoolActions": [
							245
						],
						"IUniswapV3PoolDerivedState": [
							276
						],
						"IUniswapV3PoolEvents": [
							395
						],
						"IUniswapV3PoolImmutables": [
							435
						],
						"IUniswapV3PoolOwnerActions": [
							461
						],
						"IUniswapV3PoolState": [
							569
						]
					},
					"id": 136,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 115,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:2"
						},
						{
							"absolutePath": "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol",
							"file": "./pool/IUniswapV3PoolImmutables.sol",
							"id": 116,
							"nodeType": "ImportDirective",
							"scope": 136,
							"sourceUnit": 436,
							"src": "71:45:2",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol",
							"file": "./pool/IUniswapV3PoolState.sol",
							"id": 117,
							"nodeType": "ImportDirective",
							"scope": 136,
							"sourceUnit": 570,
							"src": "117:40:2",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol",
							"file": "./pool/IUniswapV3PoolDerivedState.sol",
							"id": 118,
							"nodeType": "ImportDirective",
							"scope": 136,
							"sourceUnit": 277,
							"src": "158:47:2",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol",
							"file": "./pool/IUniswapV3PoolActions.sol",
							"id": 119,
							"nodeType": "ImportDirective",
							"scope": 136,
							"sourceUnit": 246,
							"src": "206:42:2",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol",
							"file": "./pool/IUniswapV3PoolOwnerActions.sol",
							"id": 120,
							"nodeType": "ImportDirective",
							"scope": 136,
							"sourceUnit": 462,
							"src": "249:47:2",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol",
							"file": "./pool/IUniswapV3PoolEvents.sol",
							"id": 121,
							"nodeType": "ImportDirective",
							"scope": 136,
							"sourceUnit": 396,
							"src": "297:41:2",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 123,
										"name": "IUniswapV3PoolImmutables",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 435,
										"src": "637:24:2",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IUniswapV3PoolImmutables_$435",
											"typeString": "contract IUniswapV3PoolImmutables"
										}
									},
									"id": 124,
									"nodeType": "InheritanceSpecifier",
									"src": "637:24:2"
								},
								{
									"baseName": {
										"id": 125,
										"name": "IUniswapV3PoolState",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 569,
										"src": "667:19:2",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IUniswapV3PoolState_$569",
											"typeString": "contract IUniswapV3PoolState"
										}
									},
									"id": 126,
									"nodeType": "InheritanceSpecifier",
									"src": "667:19:2"
								},
								{
									"baseName": {
										"id": 127,
										"name": "IUniswapV3PoolDerivedState",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 276,
										"src": "692:26:2",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IUniswapV3PoolDerivedState_$276",
											"typeString": "contract IUniswapV3PoolDerivedState"
										}
									},
									"id": 128,
									"nodeType": "InheritanceSpecifier",
									"src": "692:26:2"
								},
								{
									"baseName": {
										"id": 129,
										"name": "IUniswapV3PoolActions",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 245,
										"src": "724:21:2",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IUniswapV3PoolActions_$245",
											"typeString": "contract IUniswapV3PoolActions"
										}
									},
									"id": 130,
									"nodeType": "InheritanceSpecifier",
									"src": "724:21:2"
								},
								{
									"baseName": {
										"id": 131,
										"name": "IUniswapV3PoolOwnerActions",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 461,
										"src": "751:26:2",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IUniswapV3PoolOwnerActions_$461",
											"typeString": "contract IUniswapV3PoolOwnerActions"
										}
									},
									"id": 132,
									"nodeType": "InheritanceSpecifier",
									"src": "751:26:2"
								},
								{
									"baseName": {
										"id": 133,
										"name": "IUniswapV3PoolEvents",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 395,
										"src": "783:20:2",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IUniswapV3PoolEvents_$395",
											"typeString": "contract IUniswapV3PoolEvents"
										}
									},
									"id": 134,
									"nodeType": "InheritanceSpecifier",
									"src": "783:20:2"
								}
							],
							"contractDependencies": [
								245,
								276,
								395,
								435,
								461,
								569
							],
							"contractKind": "interface",
							"documentation": {
								"id": 122,
								"nodeType": "StructuredDocumentation",
								"src": "340:265:2",
								"text": "@title The interface for a Uniswap V3 Pool\n @notice A Uniswap pool facilitates swapping and automated market making between any two assets that strictly conform\n to the ERC20 specification\n @dev The pool interface is broken up into many smaller pieces"
							},
							"fullyImplemented": false,
							"id": 135,
							"linearizedBaseContracts": [
								135,
								395,
								461,
								245,
								276,
								569,
								435
							],
							"name": "IUniswapV3Pool",
							"nodeType": "ContractDefinition",
							"nodes": [],
							"scope": 136,
							"src": "605:203:2"
						}
					],
					"src": "45:764:2"
				},
				"id": 2
			},
			"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol": {
				"ast": {
					"absolutePath": "@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol",
					"exportedSymbols": {
						"IUniswapV3SwapCallback": [
							149
						]
					},
					"id": 150,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 137,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:3"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 138,
								"nodeType": "StructuredDocumentation",
								"src": "71:144:3",
								"text": "@title Callback for IUniswapV3PoolActions#swap\n @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface"
							},
							"fullyImplemented": false,
							"id": 149,
							"linearizedBaseContracts": [
								149
							],
							"name": "IUniswapV3SwapCallback",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 139,
										"nodeType": "StructuredDocumentation",
										"src": "254:898:3",
										"text": "@notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\n @dev In the implementation you must pay the pool tokens owed for the swap.\n The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\n amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\n @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\n the end of the swap. If positive, the callback must send that amount of token0 to the pool.\n @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\n the end of the swap. If positive, the callback must send that amount of token1 to the pool.\n @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call"
									},
									"functionSelector": "fa461e33",
									"id": 148,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "uniswapV3SwapCallback",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 146,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 141,
												"mutability": "mutable",
												"name": "amount0Delta",
												"nodeType": "VariableDeclaration",
												"scope": 148,
												"src": "1197:19:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 140,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "1197:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 143,
												"mutability": "mutable",
												"name": "amount1Delta",
												"nodeType": "VariableDeclaration",
												"scope": 148,
												"src": "1226:19:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 142,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "1226:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 145,
												"mutability": "mutable",
												"name": "data",
												"nodeType": "VariableDeclaration",
												"scope": 148,
												"src": "1255:19:3",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 144,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "1255:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1187:93:3"
									},
									"returnParameters": {
										"id": 147,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1289:0:3"
									},
									"scope": 149,
									"src": "1157:133:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 150,
							"src": "215:1077:3"
						}
					],
					"src": "45:1248:3"
				},
				"id": 3
			},
			"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol": {
				"ast": {
					"absolutePath": "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol",
					"exportedSymbols": {
						"IUniswapV3PoolActions": [
							245
						]
					},
					"id": 246,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 151,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:4"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 152,
								"nodeType": "StructuredDocumentation",
								"src": "71:102:4",
								"text": "@title Permissionless pool actions\n @notice Contains pool methods that can be called by anyone"
							},
							"fullyImplemented": false,
							"id": 245,
							"linearizedBaseContracts": [
								245
							],
							"name": "IUniswapV3PoolActions",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 153,
										"nodeType": "StructuredDocumentation",
										"src": "211:206:4",
										"text": "@notice Sets the initial price for the pool\n @dev Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\n @param sqrtPriceX96 the initial sqrt price of the pool as a Q64.96"
									},
									"functionSelector": "f637731d",
									"id": 158,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "initialize",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 156,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 155,
												"mutability": "mutable",
												"name": "sqrtPriceX96",
												"nodeType": "VariableDeclaration",
												"scope": 158,
												"src": "442:20:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 154,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "442:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "441:22:4"
									},
									"returnParameters": {
										"id": 157,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "472:0:4"
									},
									"scope": 245,
									"src": "422:51:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 159,
										"nodeType": "StructuredDocumentation",
										"src": "479:1029:4",
										"text": "@notice Adds liquidity for the given recipient/tickLower/tickUpper position\n @dev The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback\n in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends\n on tickLower, tickUpper, the amount of liquidity, and the current price.\n @param recipient The address for which the liquidity will be created\n @param tickLower The lower tick of the position in which to add liquidity\n @param tickUpper The upper tick of the position in which to add liquidity\n @param amount The amount of liquidity to mint\n @param data Any data that should be passed through to the callback\n @return amount0 The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\n @return amount1 The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback"
									},
									"functionSelector": "3c8a7d8d",
									"id": 176,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "mint",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 170,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 161,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 176,
												"src": "1536:17:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 160,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1536:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 163,
												"mutability": "mutable",
												"name": "tickLower",
												"nodeType": "VariableDeclaration",
												"scope": 176,
												"src": "1563:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 162,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "1563:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 165,
												"mutability": "mutable",
												"name": "tickUpper",
												"nodeType": "VariableDeclaration",
												"scope": 176,
												"src": "1588:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 164,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "1588:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 167,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 176,
												"src": "1613:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 166,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "1613:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 169,
												"mutability": "mutable",
												"name": "data",
												"nodeType": "VariableDeclaration",
												"scope": 176,
												"src": "1637:19:4",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 168,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "1637:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1526:136:4"
									},
									"returnParameters": {
										"id": 175,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 172,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 176,
												"src": "1681:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 171,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1681:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 174,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 176,
												"src": "1698:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 173,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1698:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1680:34:4"
									},
									"scope": 245,
									"src": "1513:202:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 177,
										"nodeType": "StructuredDocumentation",
										"src": "1721:1053:4",
										"text": "@notice Collects tokens owed to a position\n @dev Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity.\n Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or\n amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the\n actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\n @param recipient The address which should receive the fees collected\n @param tickLower The lower tick of the position for which to collect fees\n @param tickUpper The upper tick of the position for which to collect fees\n @param amount0Requested How much token0 should be withdrawn from the fees owed\n @param amount1Requested How much token1 should be withdrawn from the fees owed\n @return amount0 The amount of fees collected in token0\n @return amount1 The amount of fees collected in token1"
									},
									"functionSelector": "4f1eb3d8",
									"id": 194,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "collect",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 188,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 179,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 194,
												"src": "2805:17:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 178,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2805:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 181,
												"mutability": "mutable",
												"name": "tickLower",
												"nodeType": "VariableDeclaration",
												"scope": 194,
												"src": "2832:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 180,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "2832:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 183,
												"mutability": "mutable",
												"name": "tickUpper",
												"nodeType": "VariableDeclaration",
												"scope": 194,
												"src": "2857:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 182,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "2857:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 185,
												"mutability": "mutable",
												"name": "amount0Requested",
												"nodeType": "VariableDeclaration",
												"scope": 194,
												"src": "2882:24:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 184,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "2882:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 187,
												"mutability": "mutable",
												"name": "amount1Requested",
												"nodeType": "VariableDeclaration",
												"scope": 194,
												"src": "2916:24:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 186,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "2916:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2795:151:4"
									},
									"returnParameters": {
										"id": 193,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 190,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 194,
												"src": "2965:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 189,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "2965:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 192,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 194,
												"src": "2982:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 191,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "2982:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2964:34:4"
									},
									"scope": 245,
									"src": "2779:220:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 195,
										"nodeType": "StructuredDocumentation",
										"src": "3005:631:4",
										"text": "@notice Burn liquidity from the sender and account tokens owed for the liquidity to the position\n @dev Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0\n @dev Fees must be collected separately via a call to #collect\n @param tickLower The lower tick of the position for which to burn liquidity\n @param tickUpper The upper tick of the position for which to burn liquidity\n @param amount How much liquidity to burn\n @return amount0 The amount of token0 sent to the recipient\n @return amount1 The amount of token1 sent to the recipient"
									},
									"functionSelector": "a34123a7",
									"id": 208,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "burn",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 202,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 197,
												"mutability": "mutable",
												"name": "tickLower",
												"nodeType": "VariableDeclaration",
												"scope": 208,
												"src": "3664:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 196,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "3664:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 199,
												"mutability": "mutable",
												"name": "tickUpper",
												"nodeType": "VariableDeclaration",
												"scope": 208,
												"src": "3689:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 198,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "3689:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 201,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 208,
												"src": "3714:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 200,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "3714:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3654:80:4"
									},
									"returnParameters": {
										"id": 207,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 204,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 208,
												"src": "3753:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 203,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3753:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 206,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 208,
												"src": "3770:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 205,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3770:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3752:34:4"
									},
									"scope": 245,
									"src": "3641:146:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 209,
										"nodeType": "StructuredDocumentation",
										"src": "3793:1015:4",
										"text": "@notice Swap token0 for token1, or token1 for token0\n @dev The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback\n @param recipient The address to receive the output of the swap\n @param zeroForOne The direction of the swap, true for token0 to token1, false for token1 to token0\n @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\n @param sqrtPriceLimitX96 The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\n value after the swap. If one for zero, the price cannot be greater than this value after the swap\n @param data Any data to be passed through to the callback\n @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\n @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive"
									},
									"functionSelector": "128acb08",
									"id": 226,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "swap",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 220,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 211,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 226,
												"src": "4836:17:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 210,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4836:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 213,
												"mutability": "mutable",
												"name": "zeroForOne",
												"nodeType": "VariableDeclaration",
												"scope": 226,
												"src": "4863:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 212,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4863:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 215,
												"mutability": "mutable",
												"name": "amountSpecified",
												"nodeType": "VariableDeclaration",
												"scope": 226,
												"src": "4888:22:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 214,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "4888:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 217,
												"mutability": "mutable",
												"name": "sqrtPriceLimitX96",
												"nodeType": "VariableDeclaration",
												"scope": 226,
												"src": "4920:25:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 216,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "4920:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 219,
												"mutability": "mutable",
												"name": "data",
												"nodeType": "VariableDeclaration",
												"scope": 226,
												"src": "4955:19:4",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 218,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4955:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4826:154:4"
									},
									"returnParameters": {
										"id": 225,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 222,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 226,
												"src": "4999:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 221,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "4999:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 224,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 226,
												"src": "5015:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 223,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "5015:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4998:32:4"
									},
									"scope": 245,
									"src": "4813:218:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 227,
										"nodeType": "StructuredDocumentation",
										"src": "5037:657:4",
										"text": "@notice Receive token0 and/or token1 and pay it back, plus a fee, in the callback\n @dev The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallback\n @dev Can be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling\n with 0 amount{0,1} and sending the donation amount(s) from the callback\n @param recipient The address which will receive the token0 and token1 amounts\n @param amount0 The amount of token0 to send\n @param amount1 The amount of token1 to send\n @param data Any data to be passed through to the callback"
									},
									"functionSelector": "490e6cbc",
									"id": 238,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "flash",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 236,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 229,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 238,
												"src": "5723:17:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 228,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5723:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 231,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 238,
												"src": "5750:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 230,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5750:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 233,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 238,
												"src": "5775:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 232,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5775:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 235,
												"mutability": "mutable",
												"name": "data",
												"nodeType": "VariableDeclaration",
												"scope": 238,
												"src": "5800:19:4",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 234,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5800:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5713:112:4"
									},
									"returnParameters": {
										"id": 237,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5834:0:4"
									},
									"scope": 245,
									"src": "5699:136:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 239,
										"nodeType": "StructuredDocumentation",
										"src": "5841:367:4",
										"text": "@notice Increase the maximum number of price and liquidity observations that this pool will store\n @dev This method is no-op if the pool already has an observationCardinalityNext greater than or equal to\n the input observationCardinalityNext.\n @param observationCardinalityNext The desired minimum number of observations for the pool to store"
									},
									"functionSelector": "32148f67",
									"id": 244,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "increaseObservationCardinalityNext",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 242,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 241,
												"mutability": "mutable",
												"name": "observationCardinalityNext",
												"nodeType": "VariableDeclaration",
												"scope": 244,
												"src": "6257:33:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint16",
													"typeString": "uint16"
												},
												"typeName": {
													"id": 240,
													"name": "uint16",
													"nodeType": "ElementaryTypeName",
													"src": "6257:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint16",
														"typeString": "uint16"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6256:35:4"
									},
									"returnParameters": {
										"id": 243,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6300:0:4"
									},
									"scope": 245,
									"src": "6213:88:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 246,
							"src": "173:6130:4"
						}
					],
					"src": "45:6259:4"
				},
				"id": 4
			},
			"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol": {
				"ast": {
					"absolutePath": "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol",
					"exportedSymbols": {
						"IUniswapV3PoolDerivedState": [
							276
						]
					},
					"id": 277,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 247,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:5"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 248,
								"nodeType": "StructuredDocumentation",
								"src": "71:222:5",
								"text": "@title Pool state that is not stored\n @notice Contains view functions to provide information about the pool that is computed rather than stored on the\n blockchain. The functions here may have variable gas costs."
							},
							"fullyImplemented": false,
							"id": 276,
							"linearizedBaseContracts": [
								276
							],
							"name": "IUniswapV3PoolDerivedState",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 249,
										"nodeType": "StructuredDocumentation",
										"src": "336:1045:5",
										"text": "@notice Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\n @dev To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing\n the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick,\n you must call it with secondsAgos = [3600, 0].\n @dev The time weighted average tick represents the geometric time weighted average price of the pool, in\n log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\n @param secondsAgos From how long ago each cumulative tick and liquidity value should be returned\n @return tickCumulatives Cumulative tick values as of each `secondsAgos` from the current block timestamp\n @return secondsPerLiquidityCumulativeX128s Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block\n timestamp"
									},
									"functionSelector": "883bdbfd",
									"id": 261,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "observe",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 253,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 252,
												"mutability": "mutable",
												"name": "secondsAgos",
												"nodeType": "VariableDeclaration",
												"scope": 261,
												"src": "1403:29:5",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint32_$dyn_calldata_ptr",
													"typeString": "uint32[]"
												},
												"typeName": {
													"baseType": {
														"id": 250,
														"name": "uint32",
														"nodeType": "ElementaryTypeName",
														"src": "1403:6:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint32",
															"typeString": "uint32"
														}
													},
													"id": 251,
													"nodeType": "ArrayTypeName",
													"src": "1403:8:5",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint32_$dyn_storage_ptr",
														"typeString": "uint32[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1402:31:5"
									},
									"returnParameters": {
										"id": 260,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 256,
												"mutability": "mutable",
												"name": "tickCumulatives",
												"nodeType": "VariableDeclaration",
												"scope": 261,
												"src": "1481:30:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_int56_$dyn_memory_ptr",
													"typeString": "int56[]"
												},
												"typeName": {
													"baseType": {
														"id": 254,
														"name": "int56",
														"nodeType": "ElementaryTypeName",
														"src": "1481:5:5",
														"typeDescriptions": {
															"typeIdentifier": "t_int56",
															"typeString": "int56"
														}
													},
													"id": 255,
													"nodeType": "ArrayTypeName",
													"src": "1481:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_int56_$dyn_storage_ptr",
														"typeString": "int56[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 259,
												"mutability": "mutable",
												"name": "secondsPerLiquidityCumulativeX128s",
												"nodeType": "VariableDeclaration",
												"scope": 261,
												"src": "1513:51:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint160_$dyn_memory_ptr",
													"typeString": "uint160[]"
												},
												"typeName": {
													"baseType": {
														"id": 257,
														"name": "uint160",
														"nodeType": "ElementaryTypeName",
														"src": "1513:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint160",
															"typeString": "uint160"
														}
													},
													"id": 258,
													"nodeType": "ArrayTypeName",
													"src": "1513:9:5",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint160_$dyn_storage_ptr",
														"typeString": "uint160[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1480:85:5"
									},
									"scope": 276,
									"src": "1386:180:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 262,
										"nodeType": "StructuredDocumentation",
										"src": "1572:771:5",
										"text": "@notice Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\n @dev Snapshots must only be compared to other snapshots, taken over a period for which a position existed.\n I.e., snapshots cannot be compared if a position is not held for the entire period between when the first\n snapshot is taken and the second snapshot is taken.\n @param tickLower The lower tick of the range\n @param tickUpper The upper tick of the range\n @return tickCumulativeInside The snapshot of the tick accumulator for the range\n @return secondsPerLiquidityInsideX128 The snapshot of seconds per liquidity for the range\n @return secondsInside The snapshot of seconds per liquidity for the range"
									},
									"functionSelector": "a38807f2",
									"id": 275,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "snapshotCumulativesInside",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 267,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 264,
												"mutability": "mutable",
												"name": "tickLower",
												"nodeType": "VariableDeclaration",
												"scope": 275,
												"src": "2383:15:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 263,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "2383:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 266,
												"mutability": "mutable",
												"name": "tickUpper",
												"nodeType": "VariableDeclaration",
												"scope": 275,
												"src": "2400:15:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 265,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "2400:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2382:34:5"
									},
									"returnParameters": {
										"id": 274,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 269,
												"mutability": "mutable",
												"name": "tickCumulativeInside",
												"nodeType": "VariableDeclaration",
												"scope": 275,
												"src": "2477:26:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int56",
													"typeString": "int56"
												},
												"typeName": {
													"id": 268,
													"name": "int56",
													"nodeType": "ElementaryTypeName",
													"src": "2477:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_int56",
														"typeString": "int56"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 271,
												"mutability": "mutable",
												"name": "secondsPerLiquidityInsideX128",
												"nodeType": "VariableDeclaration",
												"scope": 275,
												"src": "2517:37:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 270,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "2517:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 273,
												"mutability": "mutable",
												"name": "secondsInside",
												"nodeType": "VariableDeclaration",
												"scope": 275,
												"src": "2568:20:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint32",
													"typeString": "uint32"
												},
												"typeName": {
													"id": 272,
													"name": "uint32",
													"nodeType": "ElementaryTypeName",
													"src": "2568:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint32",
														"typeString": "uint32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2463:135:5"
									},
									"scope": 276,
									"src": "2348:251:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 277,
							"src": "293:2308:5"
						}
					],
					"src": "45:2557:5"
				},
				"id": 5
			},
			"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol": {
				"ast": {
					"absolutePath": "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol",
					"exportedSymbols": {
						"IUniswapV3PoolEvents": [
							395
						]
					},
					"id": 396,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 278,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:6"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 279,
								"nodeType": "StructuredDocumentation",
								"src": "71:88:6",
								"text": "@title Events emitted by a pool\n @notice Contains all events emitted by the pool"
							},
							"fullyImplemented": true,
							"id": 395,
							"linearizedBaseContracts": [
								395
							],
							"name": "IUniswapV3PoolEvents",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 280,
										"nodeType": "StructuredDocumentation",
										"src": "196:344:6",
										"text": "@notice Emitted exactly once by a pool when #initialize is first called on the pool\n @dev Mint/Burn/Swap cannot be emitted by the pool before Initialize\n @param sqrtPriceX96 The initial sqrt price of the pool, as a Q64.96\n @param tick The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool"
									},
									"id": 286,
									"name": "Initialize",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 285,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 282,
												"indexed": false,
												"mutability": "mutable",
												"name": "sqrtPriceX96",
												"nodeType": "VariableDeclaration",
												"scope": 286,
												"src": "562:20:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 281,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "562:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 284,
												"indexed": false,
												"mutability": "mutable",
												"name": "tick",
												"nodeType": "VariableDeclaration",
												"scope": 286,
												"src": "584:10:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 283,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "584:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "561:34:6"
									},
									"src": "545:51:6"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 287,
										"nodeType": "StructuredDocumentation",
										"src": "602:551:6",
										"text": "@notice Emitted when liquidity is minted for a given position\n @param sender The address that minted the liquidity\n @param owner The owner of the position and recipient of any minted liquidity\n @param tickLower The lower tick of the position\n @param tickUpper The upper tick of the position\n @param amount The amount of liquidity minted to the position range\n @param amount0 How much token0 was required for the minted liquidity\n @param amount1 How much token1 was required for the minted liquidity"
									},
									"id": 303,
									"name": "Mint",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 302,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 289,
												"indexed": false,
												"mutability": "mutable",
												"name": "sender",
												"nodeType": "VariableDeclaration",
												"scope": 303,
												"src": "1178:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 288,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1178:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 291,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"scope": 303,
												"src": "1202:21:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 290,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1202:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 293,
												"indexed": true,
												"mutability": "mutable",
												"name": "tickLower",
												"nodeType": "VariableDeclaration",
												"scope": 303,
												"src": "1233:23:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 292,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "1233:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 295,
												"indexed": true,
												"mutability": "mutable",
												"name": "tickUpper",
												"nodeType": "VariableDeclaration",
												"scope": 303,
												"src": "1266:23:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 294,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "1266:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 297,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 303,
												"src": "1299:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 296,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "1299:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 299,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 303,
												"src": "1323:15:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 298,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1323:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 301,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 303,
												"src": "1348:15:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 300,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1348:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1168:201:6"
									},
									"src": "1158:212:6"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 304,
										"nodeType": "StructuredDocumentation",
										"src": "1376:493:6",
										"text": "@notice Emitted when fees are collected by the owner of a position\n @dev Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees\n @param owner The owner of the position for which fees are collected\n @param tickLower The lower tick of the position\n @param tickUpper The upper tick of the position\n @param amount0 The amount of token0 fees collected\n @param amount1 The amount of token1 fees collected"
									},
									"id": 318,
									"name": "Collect",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 317,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 306,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"scope": 318,
												"src": "1897:21:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 305,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1897:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 308,
												"indexed": false,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 318,
												"src": "1928:17:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 307,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1928:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 310,
												"indexed": true,
												"mutability": "mutable",
												"name": "tickLower",
												"nodeType": "VariableDeclaration",
												"scope": 318,
												"src": "1955:23:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 309,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "1955:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 312,
												"indexed": true,
												"mutability": "mutable",
												"name": "tickUpper",
												"nodeType": "VariableDeclaration",
												"scope": 318,
												"src": "1988:23:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 311,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "1988:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 314,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 318,
												"src": "2021:15:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 313,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "2021:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 316,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 318,
												"src": "2046:15:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 315,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "2046:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1887:180:6"
									},
									"src": "1874:194:6"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 319,
										"nodeType": "StructuredDocumentation",
										"src": "2074:523:6",
										"text": "@notice Emitted when a position's liquidity is removed\n @dev Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect\n @param owner The owner of the position for which liquidity is removed\n @param tickLower The lower tick of the position\n @param tickUpper The upper tick of the position\n @param amount The amount of liquidity to remove\n @param amount0 The amount of token0 withdrawn\n @param amount1 The amount of token1 withdrawn"
									},
									"id": 333,
									"name": "Burn",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 332,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 321,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"scope": 333,
												"src": "2622:21:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 320,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2622:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 323,
												"indexed": true,
												"mutability": "mutable",
												"name": "tickLower",
												"nodeType": "VariableDeclaration",
												"scope": 333,
												"src": "2653:23:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 322,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "2653:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 325,
												"indexed": true,
												"mutability": "mutable",
												"name": "tickUpper",
												"nodeType": "VariableDeclaration",
												"scope": 333,
												"src": "2686:23:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 324,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "2686:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 327,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 333,
												"src": "2719:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 326,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "2719:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 329,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 333,
												"src": "2743:15:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 328,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2743:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 331,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 333,
												"src": "2768:15:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 330,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2768:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2612:177:6"
									},
									"src": "2602:188:6"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 334,
										"nodeType": "StructuredDocumentation",
										"src": "2796:600:6",
										"text": "@notice Emitted by the pool for any swaps between token0 and token1\n @param sender The address that initiated the swap call, and that received the callback\n @param recipient The address that received the output of the swap\n @param amount0 The delta of the token0 balance of the pool\n @param amount1 The delta of the token1 balance of the pool\n @param sqrtPriceX96 The sqrt(price) of the pool after the swap, as a Q64.96\n @param liquidity The liquidity of the pool after the swap\n @param tick The log base 1.0001 of price of the pool after the swap"
									},
									"id": 350,
									"name": "Swap",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 349,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 336,
												"indexed": true,
												"mutability": "mutable",
												"name": "sender",
												"nodeType": "VariableDeclaration",
												"scope": 350,
												"src": "3421:22:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 335,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3421:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 338,
												"indexed": true,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 350,
												"src": "3453:25:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 337,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3453:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 340,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 350,
												"src": "3488:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 339,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "3488:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 342,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 350,
												"src": "3512:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 341,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "3512:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 344,
												"indexed": false,
												"mutability": "mutable",
												"name": "sqrtPriceX96",
												"nodeType": "VariableDeclaration",
												"scope": 350,
												"src": "3536:20:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 343,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "3536:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 346,
												"indexed": false,
												"mutability": "mutable",
												"name": "liquidity",
												"nodeType": "VariableDeclaration",
												"scope": 350,
												"src": "3566:17:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 345,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "3566:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 348,
												"indexed": false,
												"mutability": "mutable",
												"name": "tick",
												"nodeType": "VariableDeclaration",
												"scope": 350,
												"src": "3593:10:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 347,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "3593:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3411:198:6"
									},
									"src": "3401:209:6"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 351,
										"nodeType": "StructuredDocumentation",
										"src": "3616:562:6",
										"text": "@notice Emitted by the pool for any flashes of token0/token1\n @param sender The address that initiated the swap call, and that received the callback\n @param recipient The address that received the tokens from flash\n @param amount0 The amount of token0 that was flashed\n @param amount1 The amount of token1 that was flashed\n @param paid0 The amount of token0 paid for the flash, which can exceed the amount0 plus the fee\n @param paid1 The amount of token1 paid for the flash, which can exceed the amount1 plus the fee"
									},
									"id": 365,
									"name": "Flash",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 364,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 353,
												"indexed": true,
												"mutability": "mutable",
												"name": "sender",
												"nodeType": "VariableDeclaration",
												"scope": 365,
												"src": "4204:22:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 352,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4204:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 355,
												"indexed": true,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 365,
												"src": "4236:25:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 354,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4236:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 357,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 365,
												"src": "4271:15:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 356,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4271:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 359,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 365,
												"src": "4296:15:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 358,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4296:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 361,
												"indexed": false,
												"mutability": "mutable",
												"name": "paid0",
												"nodeType": "VariableDeclaration",
												"scope": 365,
												"src": "4321:13:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 360,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4321:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 363,
												"indexed": false,
												"mutability": "mutable",
												"name": "paid1",
												"nodeType": "VariableDeclaration",
												"scope": 365,
												"src": "4344:13:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 362,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4344:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4194:169:6"
									},
									"src": "4183:181:6"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 366,
										"nodeType": "StructuredDocumentation",
										"src": "4370:451:6",
										"text": "@notice Emitted by the pool for increases to the number of observations that can be stored\n @dev observationCardinalityNext is not the observation cardinality until an observation is written at the index\n just before a mint/swap/burn.\n @param observationCardinalityNextOld The previous value of the next observation cardinality\n @param observationCardinalityNextNew The updated value of the next observation cardinality"
									},
									"id": 372,
									"name": "IncreaseObservationCardinalityNext",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 371,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 368,
												"indexed": false,
												"mutability": "mutable",
												"name": "observationCardinalityNextOld",
												"nodeType": "VariableDeclaration",
												"scope": 372,
												"src": "4876:36:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint16",
													"typeString": "uint16"
												},
												"typeName": {
													"id": 367,
													"name": "uint16",
													"nodeType": "ElementaryTypeName",
													"src": "4876:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint16",
														"typeString": "uint16"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 370,
												"indexed": false,
												"mutability": "mutable",
												"name": "observationCardinalityNextNew",
												"nodeType": "VariableDeclaration",
												"scope": 372,
												"src": "4922:36:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint16",
													"typeString": "uint16"
												},
												"typeName": {
													"id": 369,
													"name": "uint16",
													"nodeType": "ElementaryTypeName",
													"src": "4922:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint16",
														"typeString": "uint16"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4866:98:6"
									},
									"src": "4826:139:6"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 373,
										"nodeType": "StructuredDocumentation",
										"src": "4971:370:6",
										"text": "@notice Emitted when the protocol fee is changed by the pool\n @param feeProtocol0Old The previous value of the token0 protocol fee\n @param feeProtocol1Old The previous value of the token1 protocol fee\n @param feeProtocol0New The updated value of the token0 protocol fee\n @param feeProtocol1New The updated value of the token1 protocol fee"
									},
									"id": 383,
									"name": "SetFeeProtocol",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 382,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 375,
												"indexed": false,
												"mutability": "mutable",
												"name": "feeProtocol0Old",
												"nodeType": "VariableDeclaration",
												"scope": 383,
												"src": "5367:21:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 374,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "5367:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 377,
												"indexed": false,
												"mutability": "mutable",
												"name": "feeProtocol1Old",
												"nodeType": "VariableDeclaration",
												"scope": 383,
												"src": "5390:21:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 376,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "5390:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 379,
												"indexed": false,
												"mutability": "mutable",
												"name": "feeProtocol0New",
												"nodeType": "VariableDeclaration",
												"scope": 383,
												"src": "5413:21:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 378,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "5413:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 381,
												"indexed": false,
												"mutability": "mutable",
												"name": "feeProtocol1New",
												"nodeType": "VariableDeclaration",
												"scope": 383,
												"src": "5436:21:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 380,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "5436:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5366:92:6"
									},
									"src": "5346:113:6"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 384,
										"nodeType": "StructuredDocumentation",
										"src": "5465:384:6",
										"text": "@notice Emitted when the collected protocol fees are withdrawn by the factory owner\n @param sender The address that collects the protocol fees\n @param recipient The address that receives the collected protocol fees\n @param amount0 The amount of token0 protocol fees that is withdrawn\n @param amount0 The amount of token1 protocol fees that is withdrawn"
									},
									"id": 394,
									"name": "CollectProtocol",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 393,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 386,
												"indexed": true,
												"mutability": "mutable",
												"name": "sender",
												"nodeType": "VariableDeclaration",
												"scope": 394,
												"src": "5876:22:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 385,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5876:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 388,
												"indexed": true,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 394,
												"src": "5900:25:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 387,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5900:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 390,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 394,
												"src": "5927:15:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 389,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "5927:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 392,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 394,
												"src": "5944:15:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 391,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "5944:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5875:85:6"
									},
									"src": "5854:107:6"
								}
							],
							"scope": 396,
							"src": "159:5804:6"
						}
					],
					"src": "45:5919:6"
				},
				"id": 6
			},
			"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol": {
				"ast": {
					"absolutePath": "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol",
					"exportedSymbols": {
						"IUniswapV3PoolImmutables": [
							435
						]
					},
					"id": 436,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 397,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:7"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 398,
								"nodeType": "StructuredDocumentation",
								"src": "71:153:7",
								"text": "@title Pool state that never changes\n @notice These parameters are fixed for a pool forever, i.e., the methods will always return the same values"
							},
							"fullyImplemented": false,
							"id": 435,
							"linearizedBaseContracts": [
								435
							],
							"name": "IUniswapV3PoolImmutables",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 399,
										"nodeType": "StructuredDocumentation",
										"src": "265:138:7",
										"text": "@notice The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface\n @return The contract address"
									},
									"functionSelector": "c45a0155",
									"id": 404,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "factory",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 400,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "424:2:7"
									},
									"returnParameters": {
										"id": 403,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 402,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 404,
												"src": "450:7:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 401,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "450:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "449:9:7"
									},
									"scope": 435,
									"src": "408:51:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 405,
										"nodeType": "StructuredDocumentation",
										"src": "465:113:7",
										"text": "@notice The first of the two tokens of the pool, sorted by address\n @return The token contract address"
									},
									"functionSelector": "0dfe1681",
									"id": 410,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "token0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 406,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "598:2:7"
									},
									"returnParameters": {
										"id": 409,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 408,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 410,
												"src": "624:7:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 407,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "624:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "623:9:7"
									},
									"scope": 435,
									"src": "583:50:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 411,
										"nodeType": "StructuredDocumentation",
										"src": "639:114:7",
										"text": "@notice The second of the two tokens of the pool, sorted by address\n @return The token contract address"
									},
									"functionSelector": "d21220a7",
									"id": 416,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "token1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 412,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "773:2:7"
									},
									"returnParameters": {
										"id": 415,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 414,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 416,
												"src": "799:7:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 413,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "799:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "798:9:7"
									},
									"scope": 435,
									"src": "758:50:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 417,
										"nodeType": "StructuredDocumentation",
										"src": "814:84:7",
										"text": "@notice The pool's fee in hundredths of a bip, i.e. 1e-6\n @return The fee"
									},
									"functionSelector": "ddca3f43",
									"id": 422,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "fee",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 418,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "915:2:7"
									},
									"returnParameters": {
										"id": 421,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 420,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 422,
												"src": "941:6:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint24",
													"typeString": "uint24"
												},
												"typeName": {
													"id": 419,
													"name": "uint24",
													"nodeType": "ElementaryTypeName",
													"src": "941:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint24",
														"typeString": "uint24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "940:8:7"
									},
									"scope": 435,
									"src": "903:46:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 423,
										"nodeType": "StructuredDocumentation",
										"src": "955:358:7",
										"text": "@notice The pool tick spacing\n @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\n e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\n This value is an int24 to avoid casting even though it is always positive.\n @return The tick spacing"
									},
									"functionSelector": "d0c93a7c",
									"id": 428,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "tickSpacing",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 424,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1338:2:7"
									},
									"returnParameters": {
										"id": 427,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 426,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 428,
												"src": "1364:5:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 425,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "1364:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1363:7:7"
									},
									"scope": 435,
									"src": "1318:53:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 429,
										"nodeType": "StructuredDocumentation",
										"src": "1377:363:7",
										"text": "@notice The maximum amount of position liquidity that can use any tick in the range\n @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\n also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\n @return The max amount of liquidity per tick"
									},
									"functionSelector": "70cf754a",
									"id": 434,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "maxLiquidityPerTick",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 430,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1773:2:7"
									},
									"returnParameters": {
										"id": 433,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 432,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 434,
												"src": "1799:7:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 431,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "1799:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1798:9:7"
									},
									"scope": 435,
									"src": "1745:63:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 436,
							"src": "224:1586:7"
						}
					],
					"src": "45:1766:7"
				},
				"id": 7
			},
			"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol": {
				"ast": {
					"absolutePath": "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol",
					"exportedSymbols": {
						"IUniswapV3PoolOwnerActions": [
							461
						]
					},
					"id": 462,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 437,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:8"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 438,
								"nodeType": "StructuredDocumentation",
								"src": "71:116:8",
								"text": "@title Permissioned pool actions\n @notice Contains pool methods that may only be called by the factory owner"
							},
							"fullyImplemented": false,
							"id": 461,
							"linearizedBaseContracts": [
								461
							],
							"name": "IUniswapV3PoolOwnerActions",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 439,
										"nodeType": "StructuredDocumentation",
										"src": "230:205:8",
										"text": "@notice Set the denominator of the protocol's % share of the fees\n @param feeProtocol0 new protocol fee for token0 of the pool\n @param feeProtocol1 new protocol fee for token1 of the pool"
									},
									"functionSelector": "8206a4d1",
									"id": 446,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setFeeProtocol",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 444,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 441,
												"mutability": "mutable",
												"name": "feeProtocol0",
												"nodeType": "VariableDeclaration",
												"scope": 446,
												"src": "464:18:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 440,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "464:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 443,
												"mutability": "mutable",
												"name": "feeProtocol1",
												"nodeType": "VariableDeclaration",
												"scope": 446,
												"src": "484:18:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 442,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "484:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "463:40:8"
									},
									"returnParameters": {
										"id": 445,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "512:0:8"
									},
									"scope": 461,
									"src": "440:73:8",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 447,
										"nodeType": "StructuredDocumentation",
										"src": "519:483:8",
										"text": "@notice Collect the protocol fee accrued to the pool\n @param recipient The address to which collected protocol fees should be sent\n @param amount0Requested The maximum amount of token0 to send, can be 0 to collect fees in only token1\n @param amount1Requested The maximum amount of token1 to send, can be 0 to collect fees in only token0\n @return amount0 The protocol fee collected in token0\n @return amount1 The protocol fee collected in token1"
									},
									"functionSelector": "85b66729",
									"id": 460,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "collectProtocol",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 454,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 449,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 460,
												"src": "1041:17:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 448,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1041:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 451,
												"mutability": "mutable",
												"name": "amount0Requested",
												"nodeType": "VariableDeclaration",
												"scope": 460,
												"src": "1068:24:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 450,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "1068:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 453,
												"mutability": "mutable",
												"name": "amount1Requested",
												"nodeType": "VariableDeclaration",
												"scope": 460,
												"src": "1102:24:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 452,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "1102:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1031:101:8"
									},
									"returnParameters": {
										"id": 459,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 456,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 460,
												"src": "1151:15:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 455,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "1151:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 458,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 460,
												"src": "1168:15:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 457,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "1168:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1150:34:8"
									},
									"scope": 461,
									"src": "1007:178:8",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 462,
							"src": "187:1000:8"
						}
					],
					"src": "45:1143:8"
				},
				"id": 8
			},
			"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol": {
				"ast": {
					"absolutePath": "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol",
					"exportedSymbols": {
						"IUniswapV3PoolState": [
							569
						]
					},
					"id": 570,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 463,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:9"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 464,
								"nodeType": "StructuredDocumentation",
								"src": "71:169:9",
								"text": "@title Pool state that can change\n @notice These methods compose the pool's state, and can change with any frequency including multiple times\n per transaction"
							},
							"fullyImplemented": false,
							"id": 569,
							"linearizedBaseContracts": [
								569
							],
							"name": "IUniswapV3PoolState",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 465,
										"nodeType": "StructuredDocumentation",
										"src": "276:1140:9",
										"text": "@notice The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas\n when accessed externally.\n @return sqrtPriceX96 The current price of the pool as a sqrt(token1/token0) Q64.96 value\n tick The current tick of the pool, i.e. according to the last tick transition that was run.\n This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick\n boundary.\n observationIndex The index of the last oracle observation that was written,\n observationCardinality The current maximum number of observations stored in the pool,\n observationCardinalityNext The next maximum number of observations, to be updated when the observation.\n feeProtocol The protocol fee for both tokens of the pool.\n Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0\n is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee.\n unlocked Whether the pool is currently locked to reentrancy"
									},
									"functionSelector": "3850c7bd",
									"id": 482,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "slot0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 466,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1435:2:9"
									},
									"returnParameters": {
										"id": 481,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 468,
												"mutability": "mutable",
												"name": "sqrtPriceX96",
												"nodeType": "VariableDeclaration",
												"scope": 482,
												"src": "1498:20:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 467,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "1498:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 470,
												"mutability": "mutable",
												"name": "tick",
												"nodeType": "VariableDeclaration",
												"scope": 482,
												"src": "1532:10:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 469,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "1532:5:9",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 472,
												"mutability": "mutable",
												"name": "observationIndex",
												"nodeType": "VariableDeclaration",
												"scope": 482,
												"src": "1556:23:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint16",
													"typeString": "uint16"
												},
												"typeName": {
													"id": 471,
													"name": "uint16",
													"nodeType": "ElementaryTypeName",
													"src": "1556:6:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint16",
														"typeString": "uint16"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 474,
												"mutability": "mutable",
												"name": "observationCardinality",
												"nodeType": "VariableDeclaration",
												"scope": 482,
												"src": "1593:29:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint16",
													"typeString": "uint16"
												},
												"typeName": {
													"id": 473,
													"name": "uint16",
													"nodeType": "ElementaryTypeName",
													"src": "1593:6:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint16",
														"typeString": "uint16"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 476,
												"mutability": "mutable",
												"name": "observationCardinalityNext",
												"nodeType": "VariableDeclaration",
												"scope": 482,
												"src": "1636:33:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint16",
													"typeString": "uint16"
												},
												"typeName": {
													"id": 475,
													"name": "uint16",
													"nodeType": "ElementaryTypeName",
													"src": "1636:6:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint16",
														"typeString": "uint16"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 478,
												"mutability": "mutable",
												"name": "feeProtocol",
												"nodeType": "VariableDeclaration",
												"scope": 482,
												"src": "1683:17:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 477,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "1683:5:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 480,
												"mutability": "mutable",
												"name": "unlocked",
												"nodeType": "VariableDeclaration",
												"scope": 482,
												"src": "1714:13:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 479,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1714:4:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1484:253:9"
									},
									"scope": 569,
									"src": "1421:317:9",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 483,
										"nodeType": "StructuredDocumentation",
										"src": "1744:168:9",
										"text": "@notice The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\n @dev This value can overflow the uint256"
									},
									"functionSelector": "f3058399",
									"id": 488,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "feeGrowthGlobal0X128",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 484,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1946:2:9"
									},
									"returnParameters": {
										"id": 487,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 486,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 488,
												"src": "1972:7:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 485,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1972:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1971:9:9"
									},
									"scope": 569,
									"src": "1917:64:9",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 489,
										"nodeType": "StructuredDocumentation",
										"src": "1987:168:9",
										"text": "@notice The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\n @dev This value can overflow the uint256"
									},
									"functionSelector": "46141319",
									"id": 494,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "feeGrowthGlobal1X128",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 490,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2189:2:9"
									},
									"returnParameters": {
										"id": 493,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 492,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 494,
												"src": "2215:7:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 491,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2215:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2214:9:9"
									},
									"scope": 569,
									"src": "2160:64:9",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 495,
										"nodeType": "StructuredDocumentation",
										"src": "2230:147:9",
										"text": "@notice The amounts of token0 and token1 that are owed to the protocol\n @dev Protocol fees will never exceed uint128 max in either token"
									},
									"functionSelector": "1ad8b03b",
									"id": 502,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "protocolFees",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 496,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2403:2:9"
									},
									"returnParameters": {
										"id": 501,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 498,
												"mutability": "mutable",
												"name": "token0",
												"nodeType": "VariableDeclaration",
												"scope": 502,
												"src": "2429:14:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 497,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "2429:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 500,
												"mutability": "mutable",
												"name": "token1",
												"nodeType": "VariableDeclaration",
												"scope": 502,
												"src": "2445:14:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 499,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "2445:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2428:32:9"
									},
									"scope": 569,
									"src": "2382:79:9",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 503,
										"nodeType": "StructuredDocumentation",
										"src": "2467:150:9",
										"text": "@notice The currently in range liquidity available to the pool\n @dev This value has no relationship to the total liquidity across all ticks"
									},
									"functionSelector": "1a686502",
									"id": 508,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "liquidity",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 504,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2640:2:9"
									},
									"returnParameters": {
										"id": 507,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 506,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 508,
												"src": "2666:7:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 505,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "2666:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2665:9:9"
									},
									"scope": 569,
									"src": "2622:53:9",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 509,
										"nodeType": "StructuredDocumentation",
										"src": "2681:1244:9",
										"text": "@notice Look up information about a specific tick in the pool\n @param tick The tick to look up\n @return liquidityGross the total amount of position liquidity that uses the pool either as tick lower or\n tick upper,\n liquidityNet how much liquidity changes when the pool price crosses the tick,\n feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0,\n feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1,\n tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick\n secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick,\n secondsOutside the seconds spent on the other side of the tick from the current tick,\n initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false.\n Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0.\n In addition, these values are only relative and must be used only in comparison to previous snapshots for\n a specific position."
									},
									"functionSelector": "f30dba93",
									"id": 530,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "ticks",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 512,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 511,
												"mutability": "mutable",
												"name": "tick",
												"nodeType": "VariableDeclaration",
												"scope": 530,
												"src": "3945:10:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 510,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "3945:5:9",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3944:12:9"
									},
									"returnParameters": {
										"id": 529,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 514,
												"mutability": "mutable",
												"name": "liquidityGross",
												"nodeType": "VariableDeclaration",
												"scope": 530,
												"src": "4017:22:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 513,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "4017:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 516,
												"mutability": "mutable",
												"name": "liquidityNet",
												"nodeType": "VariableDeclaration",
												"scope": 530,
												"src": "4053:19:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int128",
													"typeString": "int128"
												},
												"typeName": {
													"id": 515,
													"name": "int128",
													"nodeType": "ElementaryTypeName",
													"src": "4053:6:9",
													"typeDescriptions": {
														"typeIdentifier": "t_int128",
														"typeString": "int128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 518,
												"mutability": "mutable",
												"name": "feeGrowthOutside0X128",
												"nodeType": "VariableDeclaration",
												"scope": 530,
												"src": "4086:29:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 517,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4086:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 520,
												"mutability": "mutable",
												"name": "feeGrowthOutside1X128",
												"nodeType": "VariableDeclaration",
												"scope": 530,
												"src": "4129:29:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 519,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4129:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 522,
												"mutability": "mutable",
												"name": "tickCumulativeOutside",
												"nodeType": "VariableDeclaration",
												"scope": 530,
												"src": "4172:27:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int56",
													"typeString": "int56"
												},
												"typeName": {
													"id": 521,
													"name": "int56",
													"nodeType": "ElementaryTypeName",
													"src": "4172:5:9",
													"typeDescriptions": {
														"typeIdentifier": "t_int56",
														"typeString": "int56"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 524,
												"mutability": "mutable",
												"name": "secondsPerLiquidityOutsideX128",
												"nodeType": "VariableDeclaration",
												"scope": 530,
												"src": "4213:38:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 523,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "4213:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 526,
												"mutability": "mutable",
												"name": "secondsOutside",
												"nodeType": "VariableDeclaration",
												"scope": 530,
												"src": "4265:21:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint32",
													"typeString": "uint32"
												},
												"typeName": {
													"id": 525,
													"name": "uint32",
													"nodeType": "ElementaryTypeName",
													"src": "4265:6:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint32",
														"typeString": "uint32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 528,
												"mutability": "mutable",
												"name": "initialized",
												"nodeType": "VariableDeclaration",
												"scope": 530,
												"src": "4300:16:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 527,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4300:4:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4003:323:9"
									},
									"scope": 569,
									"src": "3930:397:9",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 531,
										"nodeType": "StructuredDocumentation",
										"src": "4333:99:9",
										"text": "@notice Returns 256 packed tick initialized boolean values. See TickBitmap for more information"
									},
									"functionSelector": "5339c296",
									"id": 538,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "tickBitmap",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 534,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 533,
												"mutability": "mutable",
												"name": "wordPosition",
												"nodeType": "VariableDeclaration",
												"scope": 538,
												"src": "4457:18:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int16",
													"typeString": "int16"
												},
												"typeName": {
													"id": 532,
													"name": "int16",
													"nodeType": "ElementaryTypeName",
													"src": "4457:5:9",
													"typeDescriptions": {
														"typeIdentifier": "t_int16",
														"typeString": "int16"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4456:20:9"
									},
									"returnParameters": {
										"id": 537,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 536,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 538,
												"src": "4500:7:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 535,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4500:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4499:9:9"
									},
									"scope": 569,
									"src": "4437:72:9",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 539,
										"nodeType": "StructuredDocumentation",
										"src": "4515:700:9",
										"text": "@notice Returns the information about a position by the position's key\n @param key The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\n @return _liquidity The amount of liquidity in the position,\n Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke,\n Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke,\n Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke,\n Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke"
									},
									"functionSelector": "514ea4bf",
									"id": 554,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "positions",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 542,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 541,
												"mutability": "mutable",
												"name": "key",
												"nodeType": "VariableDeclaration",
												"scope": 554,
												"src": "5239:11:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 540,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "5239:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5238:13:9"
									},
									"returnParameters": {
										"id": 553,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 544,
												"mutability": "mutable",
												"name": "_liquidity",
												"nodeType": "VariableDeclaration",
												"scope": 554,
												"src": "5312:18:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 543,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "5312:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 546,
												"mutability": "mutable",
												"name": "feeGrowthInside0LastX128",
												"nodeType": "VariableDeclaration",
												"scope": 554,
												"src": "5344:32:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 545,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5344:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 548,
												"mutability": "mutable",
												"name": "feeGrowthInside1LastX128",
												"nodeType": "VariableDeclaration",
												"scope": 554,
												"src": "5390:32:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 547,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5390:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 550,
												"mutability": "mutable",
												"name": "tokensOwed0",
												"nodeType": "VariableDeclaration",
												"scope": 554,
												"src": "5436:19:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 549,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "5436:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 552,
												"mutability": "mutable",
												"name": "tokensOwed1",
												"nodeType": "VariableDeclaration",
												"scope": 554,
												"src": "5469:19:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 551,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "5469:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5298:200:9"
									},
									"scope": 569,
									"src": "5220:279:9",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 555,
										"nodeType": "StructuredDocumentation",
										"src": "5505:749:9",
										"text": "@notice Returns data about a specific observation index\n @param index The element of the observations array to fetch\n @dev You most likely want to use #observe() instead of this method to get an observation as of some amount of time\n ago, rather than at a specific index in the array.\n @return blockTimestamp The timestamp of the observation,\n Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp,\n Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp,\n Returns initialized whether the observation has been initialized and the values are safe to use"
									},
									"functionSelector": "252c09d7",
									"id": 568,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "observations",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 558,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 557,
												"mutability": "mutable",
												"name": "index",
												"nodeType": "VariableDeclaration",
												"scope": 568,
												"src": "6281:13:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 556,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6281:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6280:15:9"
									},
									"returnParameters": {
										"id": 567,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 560,
												"mutability": "mutable",
												"name": "blockTimestamp",
												"nodeType": "VariableDeclaration",
												"scope": 568,
												"src": "6356:21:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint32",
													"typeString": "uint32"
												},
												"typeName": {
													"id": 559,
													"name": "uint32",
													"nodeType": "ElementaryTypeName",
													"src": "6356:6:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint32",
														"typeString": "uint32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 562,
												"mutability": "mutable",
												"name": "tickCumulative",
												"nodeType": "VariableDeclaration",
												"scope": 568,
												"src": "6391:20:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int56",
													"typeString": "int56"
												},
												"typeName": {
													"id": 561,
													"name": "int56",
													"nodeType": "ElementaryTypeName",
													"src": "6391:5:9",
													"typeDescriptions": {
														"typeIdentifier": "t_int56",
														"typeString": "int56"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 564,
												"mutability": "mutable",
												"name": "secondsPerLiquidityCumulativeX128",
												"nodeType": "VariableDeclaration",
												"scope": 568,
												"src": "6425:41:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 563,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "6425:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 566,
												"mutability": "mutable",
												"name": "initialized",
												"nodeType": "VariableDeclaration",
												"scope": 568,
												"src": "6480:16:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 565,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "6480:4:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6342:164:9"
									},
									"scope": 569,
									"src": "6259:248:9",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 570,
							"src": "240:6269:9"
						}
					],
					"src": "45:6465:9"
				},
				"id": 9
			},
			"@uniswap/v3-core/contracts/libraries/LowGasSafeMath.sol": {
				"ast": {
					"absolutePath": "@uniswap/v3-core/contracts/libraries/LowGasSafeMath.sol",
					"exportedSymbols": {
						"LowGasSafeMath": [
							699
						]
					},
					"id": 700,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 571,
							"literals": [
								"solidity",
								">=",
								"0.7",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:10"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 572,
								"nodeType": "StructuredDocumentation",
								"src": "71:178:10",
								"text": "@title Optimized overflow and underflow safe math operations\n @notice Contains methods for doing math operations that revert on overflow or underflow for minimal gas cost"
							},
							"fullyImplemented": true,
							"id": 699,
							"linearizedBaseContracts": [
								699
							],
							"name": "LowGasSafeMath",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 593,
										"nodeType": "Block",
										"src": "504:42:10",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 590,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"id": 587,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 583,
																			"name": "z",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 580,
																			"src": "523:1:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 586,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 584,
																				"name": "x",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 575,
																				"src": "527:1:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"id": 585,
																				"name": "y",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 577,
																				"src": "531:1:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "527:5:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "523:9:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 588,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "522:11:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 589,
																"name": "x",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 575,
																"src": "537:1:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "522:16:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 582,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "514:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 591,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "514:25:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 592,
												"nodeType": "ExpressionStatement",
												"src": "514:25:10"
											}
										]
									},
									"documentation": {
										"id": 573,
										"nodeType": "StructuredDocumentation",
										"src": "278:152:10",
										"text": "@notice Returns x + y, reverts if sum overflows uint256\n @param x The augend\n @param y The addend\n @return z The sum of x and y"
									},
									"id": 594,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "add",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 578,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 575,
												"mutability": "mutable",
												"name": "x",
												"nodeType": "VariableDeclaration",
												"scope": 594,
												"src": "448:9:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 574,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "448:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 577,
												"mutability": "mutable",
												"name": "y",
												"nodeType": "VariableDeclaration",
												"scope": 594,
												"src": "459:9:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 576,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "459:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "447:22:10"
									},
									"returnParameters": {
										"id": 581,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 580,
												"mutability": "mutable",
												"name": "z",
												"nodeType": "VariableDeclaration",
												"scope": 594,
												"src": "493:9:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 579,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "493:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "492:11:10"
									},
									"scope": 699,
									"src": "435:111:10",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 615,
										"nodeType": "Block",
										"src": "779:42:10",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 612,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"id": 609,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 605,
																			"name": "z",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 602,
																			"src": "798:1:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 608,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 606,
																				"name": "x",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 597,
																				"src": "802:1:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "-",
																			"rightExpression": {
																				"id": 607,
																				"name": "y",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 599,
																				"src": "806:1:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "802:5:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "798:9:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 610,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "797:11:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<=",
															"rightExpression": {
																"id": 611,
																"name": "x",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 597,
																"src": "812:1:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "797:16:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 604,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "789:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 613,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "789:25:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 614,
												"nodeType": "ExpressionStatement",
												"src": "789:25:10"
											}
										]
									},
									"documentation": {
										"id": 595,
										"nodeType": "StructuredDocumentation",
										"src": "552:153:10",
										"text": "@notice Returns x - y, reverts if underflows\n @param x The minuend\n @param y The subtrahend\n @return z The difference of x and y"
									},
									"id": 616,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sub",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 600,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 597,
												"mutability": "mutable",
												"name": "x",
												"nodeType": "VariableDeclaration",
												"scope": 616,
												"src": "723:9:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 596,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "723:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 599,
												"mutability": "mutable",
												"name": "y",
												"nodeType": "VariableDeclaration",
												"scope": 616,
												"src": "734:9:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 598,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "734:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "722:22:10"
									},
									"returnParameters": {
										"id": 603,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 602,
												"mutability": "mutable",
												"name": "z",
												"nodeType": "VariableDeclaration",
												"scope": 616,
												"src": "768:9:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 601,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "768:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "767:11:10"
									},
									"scope": 699,
									"src": "710:111:10",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 643,
										"nodeType": "Block",
										"src": "1055:56:10",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 640,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 629,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 627,
																	"name": "x",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 619,
																	"src": "1073:1:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"hexValue": "30",
																	"id": 628,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1078:1:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "1073:6:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "||",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 639,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 637,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"components": [
																			{
																				"id": 634,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftHandSide": {
																					"id": 630,
																					"name": "z",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 624,
																					"src": "1084:1:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "Assignment",
																				"operator": "=",
																				"rightHandSide": {
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 633,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"id": 631,
																						"name": "x",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 619,
																						"src": "1088:1:10",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "*",
																					"rightExpression": {
																						"id": 632,
																						"name": "y",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 621,
																						"src": "1092:1:10",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "1088:5:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "1084:9:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"id": 635,
																		"isConstant": false,
																		"isInlineArray": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "TupleExpression",
																		"src": "1083:11:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "/",
																	"rightExpression": {
																		"id": 636,
																		"name": "x",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 619,
																		"src": "1097:1:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "1083:15:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"id": 638,
																	"name": "y",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 621,
																	"src": "1102:1:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "1083:20:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "1073:30:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 626,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1065:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 641,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1065:39:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 642,
												"nodeType": "ExpressionStatement",
												"src": "1065:39:10"
											}
										]
									},
									"documentation": {
										"id": 617,
										"nodeType": "StructuredDocumentation",
										"src": "827:154:10",
										"text": "@notice Returns x * y, reverts if overflows\n @param x The multiplicand\n @param y The multiplier\n @return z The product of x and y"
									},
									"id": 644,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mul",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 622,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 619,
												"mutability": "mutable",
												"name": "x",
												"nodeType": "VariableDeclaration",
												"scope": 644,
												"src": "999:9:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 618,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "999:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 621,
												"mutability": "mutable",
												"name": "y",
												"nodeType": "VariableDeclaration",
												"scope": 644,
												"src": "1010:9:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 620,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1010:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "998:22:10"
									},
									"returnParameters": {
										"id": 625,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 624,
												"mutability": "mutable",
												"name": "z",
												"nodeType": "VariableDeclaration",
												"scope": 644,
												"src": "1044:9:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 623,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1044:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1043:11:10"
									},
									"scope": 699,
									"src": "986:125:10",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 670,
										"nodeType": "Block",
										"src": "1342:54:10",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 667,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																},
																"id": 662,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"id": 659,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftHandSide": {
																				"id": 655,
																				"name": "z",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 652,
																				"src": "1361:1:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_int256",
																					"typeString": "int256"
																				}
																			},
																			"nodeType": "Assignment",
																			"operator": "=",
																			"rightHandSide": {
																				"commonType": {
																					"typeIdentifier": "t_int256",
																					"typeString": "int256"
																				},
																				"id": 658,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 656,
																					"name": "x",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 647,
																					"src": "1365:1:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_int256",
																						"typeString": "int256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "+",
																				"rightExpression": {
																					"id": 657,
																					"name": "y",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 649,
																					"src": "1369:1:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_int256",
																						"typeString": "int256"
																					}
																				},
																				"src": "1365:5:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_int256",
																					"typeString": "int256"
																				}
																			},
																			"src": "1361:9:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			}
																		}
																	],
																	"id": 660,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "1360:11:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">=",
																"rightExpression": {
																	"id": 661,
																	"name": "x",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 647,
																	"src": "1375:1:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																},
																"src": "1360:16:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_int256",
																			"typeString": "int256"
																		},
																		"id": 665,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 663,
																			"name": "y",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 649,
																			"src": "1381:1:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": ">=",
																		"rightExpression": {
																			"hexValue": "30",
																			"id": 664,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1386:1:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"src": "1381:6:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	}
																],
																"id": 666,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1380:8:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "1360:28:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 654,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1352:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 668,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1352:37:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 669,
												"nodeType": "ExpressionStatement",
												"src": "1352:37:10"
											}
										]
									},
									"documentation": {
										"id": 645,
										"nodeType": "StructuredDocumentation",
										"src": "1117:154:10",
										"text": "@notice Returns x + y, reverts if overflows or underflows\n @param x The augend\n @param y The addend\n @return z The sum of x and y"
									},
									"id": 671,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "add",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 650,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 647,
												"mutability": "mutable",
												"name": "x",
												"nodeType": "VariableDeclaration",
												"scope": 671,
												"src": "1289:8:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 646,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "1289:6:10",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 649,
												"mutability": "mutable",
												"name": "y",
												"nodeType": "VariableDeclaration",
												"scope": 671,
												"src": "1299:8:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 648,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "1299:6:10",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1288:20:10"
									},
									"returnParameters": {
										"id": 653,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 652,
												"mutability": "mutable",
												"name": "z",
												"nodeType": "VariableDeclaration",
												"scope": 671,
												"src": "1332:8:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 651,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "1332:6:10",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1331:10:10"
									},
									"scope": 699,
									"src": "1276:120:10",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 697,
										"nodeType": "Block",
										"src": "1639:54:10",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 694,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																},
																"id": 689,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"id": 686,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftHandSide": {
																				"id": 682,
																				"name": "z",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 679,
																				"src": "1658:1:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_int256",
																					"typeString": "int256"
																				}
																			},
																			"nodeType": "Assignment",
																			"operator": "=",
																			"rightHandSide": {
																				"commonType": {
																					"typeIdentifier": "t_int256",
																					"typeString": "int256"
																				},
																				"id": 685,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 683,
																					"name": "x",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 674,
																					"src": "1662:1:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_int256",
																						"typeString": "int256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "-",
																				"rightExpression": {
																					"id": 684,
																					"name": "y",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 676,
																					"src": "1666:1:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_int256",
																						"typeString": "int256"
																					}
																				},
																				"src": "1662:5:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_int256",
																					"typeString": "int256"
																				}
																			},
																			"src": "1658:9:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			}
																		}
																	],
																	"id": 687,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "1657:11:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<=",
																"rightExpression": {
																	"id": 688,
																	"name": "x",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 674,
																	"src": "1672:1:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																},
																"src": "1657:16:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_int256",
																			"typeString": "int256"
																		},
																		"id": 692,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 690,
																			"name": "y",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 676,
																			"src": "1678:1:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": ">=",
																		"rightExpression": {
																			"hexValue": "30",
																			"id": 691,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1683:1:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"src": "1678:6:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	}
																],
																"id": 693,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1677:8:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "1657:28:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 681,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1649:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 695,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1649:37:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 696,
												"nodeType": "ExpressionStatement",
												"src": "1649:37:10"
											}
										]
									},
									"documentation": {
										"id": 672,
										"nodeType": "StructuredDocumentation",
										"src": "1402:166:10",
										"text": "@notice Returns x - y, reverts if overflows or underflows\n @param x The minuend\n @param y The subtrahend\n @return z The difference of x and y"
									},
									"id": 698,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sub",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 677,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 674,
												"mutability": "mutable",
												"name": "x",
												"nodeType": "VariableDeclaration",
												"scope": 698,
												"src": "1586:8:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 673,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "1586:6:10",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 676,
												"mutability": "mutable",
												"name": "y",
												"nodeType": "VariableDeclaration",
												"scope": 698,
												"src": "1596:8:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 675,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "1596:6:10",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1585:20:10"
									},
									"returnParameters": {
										"id": 680,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 679,
												"mutability": "mutable",
												"name": "z",
												"nodeType": "VariableDeclaration",
												"scope": 698,
												"src": "1629:8:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 678,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "1629:6:10",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1628:10:10"
									},
									"scope": 699,
									"src": "1573:120:10",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 700,
							"src": "249:1446:10"
						}
					],
					"src": "45:1651:10"
				},
				"id": 10
			},
			"@uniswap/v3-core/contracts/libraries/SafeCast.sol": {
				"ast": {
					"absolutePath": "@uniswap/v3-core/contracts/libraries/SafeCast.sol",
					"exportedSymbols": {
						"SafeCast": [
							769
						]
					},
					"id": 770,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 701,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:11"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 702,
								"nodeType": "StructuredDocumentation",
								"src": "71:94:11",
								"text": "@title Safe casting methods\n @notice Contains methods for safely casting between types"
							},
							"fullyImplemented": true,
							"id": 769,
							"linearizedBaseContracts": [
								769
							],
							"name": "SafeCast",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 722,
										"nodeType": "Block",
										"src": "421:47:11",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 719,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"id": 716,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 711,
																			"name": "z",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 708,
																			"src": "440:1:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint160",
																				"typeString": "uint160"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "=",
																		"rightHandSide": {
																			"arguments": [
																				{
																					"id": 714,
																					"name": "y",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 705,
																					"src": "452:1:11",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				],
																				"id": 713,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "ElementaryTypeNameExpression",
																				"src": "444:7:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_uint160_$",
																					"typeString": "type(uint160)"
																				},
																				"typeName": {
																					"id": 712,
																					"name": "uint160",
																					"nodeType": "ElementaryTypeName",
																					"src": "444:7:11",
																					"typeDescriptions": {}
																				}
																			},
																			"id": 715,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "typeConversion",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "444:10:11",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint160",
																				"typeString": "uint160"
																			}
																		},
																		"src": "440:14:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint160",
																			"typeString": "uint160"
																		}
																	}
																],
																"id": 717,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "439:16:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"id": 718,
																"name": "y",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 705,
																"src": "459:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "439:21:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 710,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "431:7:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 720,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "431:30:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 721,
												"nodeType": "ExpressionStatement",
												"src": "431:30:11"
											}
										]
									},
									"documentation": {
										"id": 703,
										"nodeType": "StructuredDocumentation",
										"src": "188:164:11",
										"text": "@notice Cast a uint256 to a uint160, revert on overflow\n @param y The uint256 to be downcasted\n @return z The downcasted integer, now type uint160"
									},
									"id": 723,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toUint160",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 706,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 705,
												"mutability": "mutable",
												"name": "y",
												"nodeType": "VariableDeclaration",
												"scope": 723,
												"src": "376:9:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 704,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "376:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "375:11:11"
									},
									"returnParameters": {
										"id": 709,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 708,
												"mutability": "mutable",
												"name": "z",
												"nodeType": "VariableDeclaration",
												"scope": 723,
												"src": "410:9:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 707,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "410:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "409:11:11"
									},
									"scope": 769,
									"src": "357:111:11",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 743,
										"nodeType": "Block",
										"src": "713:46:11",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															},
															"id": 740,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"id": 737,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 732,
																			"name": "z",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 729,
																			"src": "732:1:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int128",
																				"typeString": "int128"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "=",
																		"rightHandSide": {
																			"arguments": [
																				{
																					"id": 735,
																					"name": "y",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 726,
																					"src": "743:1:11",
																					"typeDescriptions": {
																						"typeIdentifier": "t_int256",
																						"typeString": "int256"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_int256",
																						"typeString": "int256"
																					}
																				],
																				"id": 734,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "ElementaryTypeNameExpression",
																				"src": "736:6:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_int128_$",
																					"typeString": "type(int128)"
																				},
																				"typeName": {
																					"id": 733,
																					"name": "int128",
																					"nodeType": "ElementaryTypeName",
																					"src": "736:6:11",
																					"typeDescriptions": {}
																				}
																			},
																			"id": 736,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "typeConversion",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "736:9:11",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_int128",
																				"typeString": "int128"
																			}
																		},
																		"src": "732:13:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_int128",
																			"typeString": "int128"
																		}
																	}
																],
																"id": 738,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "731:15:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_int128",
																	"typeString": "int128"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"id": 739,
																"name": "y",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 726,
																"src": "750:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																}
															},
															"src": "731:20:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 731,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "723:7:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 741,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "723:29:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 742,
												"nodeType": "ExpressionStatement",
												"src": "723:29:11"
											}
										]
									},
									"documentation": {
										"id": 724,
										"nodeType": "StructuredDocumentation",
										"src": "474:173:11",
										"text": "@notice Cast a int256 to a int128, revert on overflow or underflow\n @param y The int256 to be downcasted\n @return z The downcasted integer, now type int128"
									},
									"id": 744,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toInt128",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 727,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 726,
												"mutability": "mutable",
												"name": "y",
												"nodeType": "VariableDeclaration",
												"scope": 744,
												"src": "670:8:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 725,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "670:6:11",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "669:10:11"
									},
									"returnParameters": {
										"id": 730,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 729,
												"mutability": "mutable",
												"name": "z",
												"nodeType": "VariableDeclaration",
												"scope": 744,
												"src": "703:8:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int128",
													"typeString": "int128"
												},
												"typeName": {
													"id": 728,
													"name": "int128",
													"nodeType": "ElementaryTypeName",
													"src": "703:6:11",
													"typeDescriptions": {
														"typeIdentifier": "t_int128",
														"typeString": "int128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "702:10:11"
									},
									"scope": 769,
									"src": "652:107:11",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 767,
										"nodeType": "Block",
										"src": "986:59:11",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 757,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 753,
																"name": "y",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 747,
																"src": "1004:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_57896044618658097711785492504343953926634992332820282019728792003956564819968_by_1",
																	"typeString": "int_const 5789...(69 digits omitted)...9968"
																},
																"id": 756,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 754,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1008:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "323535",
																	"id": 755,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1011:3:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_255_by_1",
																		"typeString": "int_const 255"
																	},
																	"value": "255"
																},
																"src": "1008:6:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_57896044618658097711785492504343953926634992332820282019728792003956564819968_by_1",
																	"typeString": "int_const 5789...(69 digits omitted)...9968"
																}
															},
															"src": "1004:10:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 752,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "996:7:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 758,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "996:19:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 759,
												"nodeType": "ExpressionStatement",
												"src": "996:19:11"
											},
											{
												"expression": {
													"id": 765,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 760,
														"name": "z",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 750,
														"src": "1025:1:11",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 763,
																"name": "y",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 747,
																"src": "1036:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"id": 762,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "1029:6:11",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_int256_$",
																"typeString": "type(int256)"
															},
															"typeName": {
																"id": 761,
																"name": "int256",
																"nodeType": "ElementaryTypeName",
																"src": "1029:6:11",
																"typeDescriptions": {}
															}
														},
														"id": 764,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1029:9:11",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"src": "1025:13:11",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"id": 766,
												"nodeType": "ExpressionStatement",
												"src": "1025:13:11"
											}
										]
									},
									"documentation": {
										"id": 745,
										"nodeType": "StructuredDocumentation",
										"src": "765:154:11",
										"text": "@notice Cast a uint256 to a int256, revert on overflow\n @param y The uint256 to be casted\n @return z The casted integer, now type int256"
									},
									"id": 768,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toInt256",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 748,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 747,
												"mutability": "mutable",
												"name": "y",
												"nodeType": "VariableDeclaration",
												"scope": 768,
												"src": "942:9:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 746,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "942:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "941:11:11"
									},
									"returnParameters": {
										"id": 751,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 750,
												"mutability": "mutable",
												"name": "z",
												"nodeType": "VariableDeclaration",
												"scope": 768,
												"src": "976:8:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 749,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "976:6:11",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "975:10:11"
									},
									"scope": 769,
									"src": "924:121:11",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 770,
							"src": "165:882:11"
						}
					],
					"src": "45:1003:11"
				},
				"id": 11
			},
			"@uniswap/v3-core/contracts/libraries/TickMath.sol": {
				"ast": {
					"absolutePath": "@uniswap/v3-core/contracts/libraries/TickMath.sol",
					"exportedSymbols": {
						"TickMath": [
							1304
						]
					},
					"id": 1305,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 771,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:12"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 772,
								"nodeType": "StructuredDocumentation",
								"src": "71:235:12",
								"text": "@title Math library for computing sqrt prices from ticks and vice versa\n @notice Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports\n prices between 2**-128 and 2**128"
							},
							"fullyImplemented": true,
							"id": 1304,
							"linearizedBaseContracts": [
								1304
							],
							"name": "TickMath",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": true,
									"documentation": {
										"id": 773,
										"nodeType": "StructuredDocumentation",
										"src": "329:108:12",
										"text": "@dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128"
									},
									"id": 777,
									"mutability": "constant",
									"name": "MIN_TICK",
									"nodeType": "VariableDeclaration",
									"scope": 1304,
									"src": "442:42:12",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_int24",
										"typeString": "int24"
									},
									"typeName": {
										"id": 774,
										"name": "int24",
										"nodeType": "ElementaryTypeName",
										"src": "442:5:12",
										"typeDescriptions": {
											"typeIdentifier": "t_int24",
											"typeString": "int24"
										}
									},
									"value": {
										"id": 776,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"lValueRequested": false,
										"nodeType": "UnaryOperation",
										"operator": "-",
										"prefix": true,
										"src": "477:7:12",
										"subExpression": {
											"hexValue": "383837323732",
											"id": 775,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "number",
											"lValueRequested": false,
											"nodeType": "Literal",
											"src": "478:6:12",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_887272_by_1",
												"typeString": "int_const 887272"
											},
											"value": "887272"
										},
										"typeDescriptions": {
											"typeIdentifier": "t_rational_minus_887272_by_1",
											"typeString": "int_const -887272"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"documentation": {
										"id": 778,
										"nodeType": "StructuredDocumentation",
										"src": "490:107:12",
										"text": "@dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128"
									},
									"id": 782,
									"mutability": "constant",
									"name": "MAX_TICK",
									"nodeType": "VariableDeclaration",
									"scope": 1304,
									"src": "602:44:12",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_int24",
										"typeString": "int24"
									},
									"typeName": {
										"id": 779,
										"name": "int24",
										"nodeType": "ElementaryTypeName",
										"src": "602:5:12",
										"typeDescriptions": {
											"typeIdentifier": "t_int24",
											"typeString": "int24"
										}
									},
									"value": {
										"id": 781,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"lValueRequested": false,
										"nodeType": "UnaryOperation",
										"operator": "-",
										"prefix": true,
										"src": "637:9:12",
										"subExpression": {
											"id": 780,
											"name": "MIN_TICK",
											"nodeType": "Identifier",
											"overloadedDeclarations": [],
											"referencedDeclaration": 777,
											"src": "638:8:12",
											"typeDescriptions": {
												"typeIdentifier": "t_int24",
												"typeString": "int24"
											}
										},
										"typeDescriptions": {
											"typeIdentifier": "t_int24",
											"typeString": "int24"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"documentation": {
										"id": 783,
										"nodeType": "StructuredDocumentation",
										"src": "653:116:12",
										"text": "@dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)"
									},
									"id": 786,
									"mutability": "constant",
									"name": "MIN_SQRT_RATIO",
									"nodeType": "VariableDeclaration",
									"scope": 1304,
									"src": "774:53:12",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint160",
										"typeString": "uint160"
									},
									"typeName": {
										"id": 784,
										"name": "uint160",
										"nodeType": "ElementaryTypeName",
										"src": "774:7:12",
										"typeDescriptions": {
											"typeIdentifier": "t_uint160",
											"typeString": "uint160"
										}
									},
									"value": {
										"hexValue": "34323935313238373339",
										"id": 785,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "817:10:12",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_4295128739_by_1",
											"typeString": "int_const 4295128739"
										},
										"value": "4295128739"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"documentation": {
										"id": 787,
										"nodeType": "StructuredDocumentation",
										"src": "833:116:12",
										"text": "@dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)"
									},
									"id": 790,
									"mutability": "constant",
									"name": "MAX_SQRT_RATIO",
									"nodeType": "VariableDeclaration",
									"scope": 1304,
									"src": "954:92:12",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint160",
										"typeString": "uint160"
									},
									"typeName": {
										"id": 788,
										"name": "uint160",
										"nodeType": "ElementaryTypeName",
										"src": "954:7:12",
										"typeDescriptions": {
											"typeIdentifier": "t_uint160",
											"typeString": "uint160"
										}
									},
									"value": {
										"hexValue": "31343631343436373033343835323130313033323837323733303532323033393838383232333738373233393730333432",
										"id": 789,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "997:49:12",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_1461446703485210103287273052203988822378723970342_by_1",
											"typeString": "int_const 1461...(41 digits omitted)...0342"
										},
										"value": "1461446703485210103287273052203988822378723970342"
									},
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1163,
										"nodeType": "Block",
										"src": "1440:2495:12",
										"statements": [
											{
												"assignments": [
													799
												],
												"declarations": [
													{
														"constant": false,
														"id": 799,
														"mutability": "mutable",
														"name": "absTick",
														"nodeType": "VariableDeclaration",
														"scope": 1163,
														"src": "1450:15:12",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 798,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "1450:7:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 819,
												"initialValue": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_int24",
															"typeString": "int24"
														},
														"id": 802,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 800,
															"name": "tick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 793,
															"src": "1468:4:12",
															"typeDescriptions": {
																"typeIdentifier": "t_int24",
																"typeString": "int24"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "<",
														"rightExpression": {
															"hexValue": "30",
															"id": 801,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1475:1:12",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "1468:8:12",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"arguments": [
															{
																"arguments": [
																	{
																		"id": 815,
																		"name": "tick",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 793,
																		"src": "1519:4:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_int24",
																			"typeString": "int24"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_int24",
																			"typeString": "int24"
																		}
																	],
																	"id": 814,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "1512:6:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_int256_$",
																		"typeString": "type(int256)"
																	},
																	"typeName": {
																		"id": 813,
																		"name": "int256",
																		"nodeType": "ElementaryTypeName",
																		"src": "1512:6:12",
																		"typeDescriptions": {}
																	}
																},
																"id": 816,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1512:12:12",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																}
															],
															"id": 812,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "1504:7:12",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_uint256_$",
																"typeString": "type(uint256)"
															},
															"typeName": {
																"id": 811,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "1504:7:12",
																"typeDescriptions": {}
															}
														},
														"id": 817,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1504:21:12",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 818,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "1468:57:12",
													"trueExpression": {
														"arguments": [
															{
																"id": 809,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "UnaryOperation",
																"operator": "-",
																"prefix": true,
																"src": "1487:13:12",
																"subExpression": {
																	"arguments": [
																		{
																			"id": 807,
																			"name": "tick",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 793,
																			"src": "1495:4:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int24",
																				"typeString": "int24"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_int24",
																				"typeString": "int24"
																			}
																		],
																		"id": 806,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "1488:6:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_int256_$",
																			"typeString": "type(int256)"
																		},
																		"typeName": {
																			"id": 805,
																			"name": "int256",
																			"nodeType": "ElementaryTypeName",
																			"src": "1488:6:12",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 808,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "1488:12:12",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																},
																"typeDescriptions": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																}
															],
															"id": 804,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "1479:7:12",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_uint256_$",
																"typeString": "type(uint256)"
															},
															"typeName": {
																"id": 803,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "1479:7:12",
																"typeDescriptions": {}
															}
														},
														"id": 810,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1479:22:12",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1450:75:12"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 826,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 821,
																"name": "absTick",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 799,
																"src": "1543:7:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<=",
															"rightExpression": {
																"arguments": [
																	{
																		"id": 824,
																		"name": "MAX_TICK",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 782,
																		"src": "1562:8:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_int24",
																			"typeString": "int24"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_int24",
																			"typeString": "int24"
																		}
																	],
																	"id": 823,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "1554:7:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint256_$",
																		"typeString": "type(uint256)"
																	},
																	"typeName": {
																		"id": 822,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "1554:7:12",
																		"typeDescriptions": {}
																	}
																},
																"id": 825,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1554:17:12",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1543:28:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "54",
															"id": 827,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1573:3:12",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_846b7b6deb1cfa110d0ea7ec6162a7123b761785528db70cceed5143183b11fc",
																"typeString": "literal_string \"T\""
															},
															"value": "T"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_846b7b6deb1cfa110d0ea7ec6162a7123b761785528db70cceed5143183b11fc",
																"typeString": "literal_string \"T\""
															}
														],
														"id": 820,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1535:7:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 828,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1535:42:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 829,
												"nodeType": "ExpressionStatement",
												"src": "1535:42:12"
											},
											{
												"assignments": [
													831
												],
												"declarations": [
													{
														"constant": false,
														"id": 831,
														"mutability": "mutable",
														"name": "ratio",
														"nodeType": "VariableDeclaration",
														"scope": 1163,
														"src": "1588:13:12",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 830,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "1588:7:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 840,
												"initialValue": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 836,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 834,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 832,
																"name": "absTick",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 799,
																"src": "1604:7:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "&",
															"rightExpression": {
																"hexValue": "307831",
																"id": 833,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1614:3:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1_by_1",
																	"typeString": "int_const 1"
																},
																"value": "0x1"
															},
															"src": "1604:13:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "!=",
														"rightExpression": {
															"hexValue": "30",
															"id": 835,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1621:1:12",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "1604:18:12",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"hexValue": "3078313030303030303030303030303030303030303030303030303030303030303030",
														"id": 838,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1662:35:12",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_340282366920938463463374607431768211456_by_1",
															"typeString": "int_const 3402...(31 digits omitted)...1456"
														},
														"value": "0x100000000000000000000000000000000"
													},
													"id": 839,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "1604:93:12",
													"trueExpression": {
														"hexValue": "30786666666362393333626436666164333761613264313632643161353934303031",
														"id": 837,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1625:34:12",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_340265354078544963557816517032075149313_by_1",
															"typeString": "int_const 3402...(31 digits omitted)...9313"
														},
														"value": "0xfffcb933bd6fad37aa2d162d1a594001"
													},
													"typeDescriptions": {
														"typeIdentifier": "t_uint136",
														"typeString": "uint136"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1588:109:12"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 845,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 843,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 841,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 799,
															"src": "1711:7:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "307832",
															"id": 842,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1721:3:12",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_2_by_1",
																"typeString": "int_const 2"
															},
															"value": "0x2"
														},
														"src": "1711:13:12",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 844,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1728:1:12",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "1711:18:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 855,
												"nodeType": "IfStatement",
												"src": "1707:83:12",
												"trueBody": {
													"expression": {
														"id": 853,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 846,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 831,
															"src": "1731:5:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 852,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 849,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 847,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 831,
																			"src": "1740:5:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30786666663937323732333733643431333235396134363939303538306532313361",
																			"id": 848,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1748:34:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_340248342086729790484326174814286782778_by_1",
																				"typeString": "int_const 3402...(31 digits omitted)...2778"
																			},
																			"value": "0xfff97272373d413259a46990580e213a"
																		},
																		"src": "1740:42:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 850,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1739:44:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 851,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1787:3:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "1739:51:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "1731:59:12",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 854,
													"nodeType": "ExpressionStatement",
													"src": "1731:59:12"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 860,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 858,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 856,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 799,
															"src": "1804:7:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "307834",
															"id": 857,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1814:3:12",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_4_by_1",
																"typeString": "int_const 4"
															},
															"value": "0x4"
														},
														"src": "1804:13:12",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 859,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1821:1:12",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "1804:18:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 870,
												"nodeType": "IfStatement",
												"src": "1800:83:12",
												"trueBody": {
													"expression": {
														"id": 868,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 861,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 831,
															"src": "1824:5:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 867,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 864,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 862,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 831,
																			"src": "1833:5:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30786666663265353066356636353639333265663132333537636633633766646363",
																			"id": 863,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1841:34:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_340214320654664324051920982716015181260_by_1",
																				"typeString": "int_const 3402...(31 digits omitted)...1260"
																			},
																			"value": "0xfff2e50f5f656932ef12357cf3c7fdcc"
																		},
																		"src": "1833:42:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 865,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1832:44:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 866,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1880:3:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "1832:51:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "1824:59:12",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 869,
													"nodeType": "ExpressionStatement",
													"src": "1824:59:12"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 875,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 873,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 871,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 799,
															"src": "1897:7:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "307838",
															"id": 872,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1907:3:12",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_8_by_1",
																"typeString": "int_const 8"
															},
															"value": "0x8"
														},
														"src": "1897:13:12",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 874,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1914:1:12",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "1897:18:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 885,
												"nodeType": "IfStatement",
												"src": "1893:83:12",
												"trueBody": {
													"expression": {
														"id": 883,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 876,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 831,
															"src": "1917:5:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 882,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 879,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 877,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 831,
																			"src": "1926:5:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30786666653563616361376531306534653631633336323465616130393431636430",
																			"id": 878,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1934:34:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_340146287995602323631171512101879684304_by_1",
																				"typeString": "int_const 3401...(31 digits omitted)...4304"
																			},
																			"value": "0xffe5caca7e10e4e61c3624eaa0941cd0"
																		},
																		"src": "1926:42:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 880,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1925:44:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 881,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1973:3:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "1925:51:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "1917:59:12",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 884,
													"nodeType": "ExpressionStatement",
													"src": "1917:59:12"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 890,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 888,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 886,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 799,
															"src": "1990:7:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "30783130",
															"id": 887,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2000:4:12",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_16_by_1",
																"typeString": "int_const 16"
															},
															"value": "0x10"
														},
														"src": "1990:14:12",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 889,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2008:1:12",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "1990:19:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 900,
												"nodeType": "IfStatement",
												"src": "1986:84:12",
												"trueBody": {
													"expression": {
														"id": 898,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 891,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 831,
															"src": "2011:5:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 897,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 894,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 892,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 831,
																			"src": "2020:5:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30786666636239383433643630663631353963396462353838333563393236363434",
																			"id": 893,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "2028:34:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_340010263488231146823593991679159461444_by_1",
																				"typeString": "int_const 3400...(31 digits omitted)...1444"
																			},
																			"value": "0xffcb9843d60f6159c9db58835c926644"
																		},
																		"src": "2020:42:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 895,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2019:44:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 896,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2067:3:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "2019:51:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "2011:59:12",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 899,
													"nodeType": "ExpressionStatement",
													"src": "2011:59:12"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 905,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 903,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 901,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 799,
															"src": "2084:7:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "30783230",
															"id": 902,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2094:4:12",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_32_by_1",
																"typeString": "int_const 32"
															},
															"value": "0x20"
														},
														"src": "2084:14:12",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 904,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2102:1:12",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2084:19:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 915,
												"nodeType": "IfStatement",
												"src": "2080:84:12",
												"trueBody": {
													"expression": {
														"id": 913,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 906,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 831,
															"src": "2105:5:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 912,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 909,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 907,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 831,
																			"src": "2114:5:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30786666393733623431666139386330383134373265363839366466623235346330",
																			"id": 908,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "2122:34:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_339738377640345403697157401104375502016_by_1",
																				"typeString": "int_const 3397...(31 digits omitted)...2016"
																			},
																			"value": "0xff973b41fa98c081472e6896dfb254c0"
																		},
																		"src": "2114:42:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 910,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2113:44:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 911,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2161:3:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "2113:51:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "2105:59:12",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 914,
													"nodeType": "ExpressionStatement",
													"src": "2105:59:12"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 920,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 918,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 916,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 799,
															"src": "2178:7:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "30783430",
															"id": 917,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2188:4:12",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_64_by_1",
																"typeString": "int_const 64"
															},
															"value": "0x40"
														},
														"src": "2178:14:12",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 919,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2196:1:12",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2178:19:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 930,
												"nodeType": "IfStatement",
												"src": "2174:84:12",
												"trueBody": {
													"expression": {
														"id": 928,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 921,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 831,
															"src": "2199:5:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 927,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 924,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 922,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 831,
																			"src": "2208:5:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30786666326561313634363663393661333834336563373862333236623532383631",
																			"id": 923,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "2216:34:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_339195258003219555707034227454543997025_by_1",
																				"typeString": "int_const 3391...(31 digits omitted)...7025"
																			},
																			"value": "0xff2ea16466c96a3843ec78b326b52861"
																		},
																		"src": "2208:42:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 925,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2207:44:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 926,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2255:3:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "2207:51:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "2199:59:12",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 929,
													"nodeType": "ExpressionStatement",
													"src": "2199:59:12"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 935,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 933,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 931,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 799,
															"src": "2272:7:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "30783830",
															"id": 932,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2282:4:12",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_128_by_1",
																"typeString": "int_const 128"
															},
															"value": "0x80"
														},
														"src": "2272:14:12",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 934,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2290:1:12",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2272:19:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 945,
												"nodeType": "IfStatement",
												"src": "2268:84:12",
												"trueBody": {
													"expression": {
														"id": 943,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 936,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 831,
															"src": "2293:5:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 942,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 939,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 937,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 831,
																			"src": "2302:5:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30786665356465653034366139396132613831316334363166313936396333303533",
																			"id": 938,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "2310:34:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_338111622100601834656805679988414885971_by_1",
																				"typeString": "int_const 3381...(31 digits omitted)...5971"
																			},
																			"value": "0xfe5dee046a99a2a811c461f1969c3053"
																		},
																		"src": "2302:42:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 940,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2301:44:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 941,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2349:3:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "2301:51:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "2293:59:12",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 944,
													"nodeType": "ExpressionStatement",
													"src": "2293:59:12"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 950,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 948,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 946,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 799,
															"src": "2366:7:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "3078313030",
															"id": 947,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2376:5:12",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_256_by_1",
																"typeString": "int_const 256"
															},
															"value": "0x100"
														},
														"src": "2366:15:12",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 949,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2385:1:12",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2366:20:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 960,
												"nodeType": "IfStatement",
												"src": "2362:85:12",
												"trueBody": {
													"expression": {
														"id": 958,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 951,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 831,
															"src": "2388:5:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 957,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 954,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 952,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 831,
																			"src": "2397:5:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30786663626538366337393030613838616564636666633833623437396161336134",
																			"id": 953,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "2405:34:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_335954724994790223023589805789778977700_by_1",
																				"typeString": "int_const 3359...(31 digits omitted)...7700"
																			},
																			"value": "0xfcbe86c7900a88aedcffc83b479aa3a4"
																		},
																		"src": "2397:42:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 955,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2396:44:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 956,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2444:3:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "2396:51:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "2388:59:12",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 959,
													"nodeType": "ExpressionStatement",
													"src": "2388:59:12"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 965,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 963,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 961,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 799,
															"src": "2461:7:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "3078323030",
															"id": 962,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2471:5:12",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_512_by_1",
																"typeString": "int_const 512"
															},
															"value": "0x200"
														},
														"src": "2461:15:12",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 964,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2480:1:12",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2461:20:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 975,
												"nodeType": "IfStatement",
												"src": "2457:85:12",
												"trueBody": {
													"expression": {
														"id": 973,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 966,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 831,
															"src": "2483:5:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 972,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 969,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 967,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 831,
																			"src": "2492:5:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30786639383761373235336163343133313736663262303734636637383135653534",
																			"id": 968,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "2500:34:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_331682121138379247127172139078559817300_by_1",
																				"typeString": "int_const 3316...(31 digits omitted)...7300"
																			},
																			"value": "0xf987a7253ac413176f2b074cf7815e54"
																		},
																		"src": "2492:42:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 970,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2491:44:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 971,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2539:3:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "2491:51:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "2483:59:12",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 974,
													"nodeType": "ExpressionStatement",
													"src": "2483:59:12"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 980,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 978,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 976,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 799,
															"src": "2556:7:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "3078343030",
															"id": 977,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2566:5:12",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1024_by_1",
																"typeString": "int_const 1024"
															},
															"value": "0x400"
														},
														"src": "2556:15:12",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 979,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2575:1:12",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2556:20:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 990,
												"nodeType": "IfStatement",
												"src": "2552:85:12",
												"trueBody": {
													"expression": {
														"id": 988,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 981,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 831,
															"src": "2578:5:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 987,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 984,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 982,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 831,
																			"src": "2587:5:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30786633333932623038323262373030303539343063376133393865346237306633",
																			"id": 983,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "2595:34:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_323299236684853023288211250268160618739_by_1",
																				"typeString": "int_const 3232...(31 digits omitted)...8739"
																			},
																			"value": "0xf3392b0822b70005940c7a398e4b70f3"
																		},
																		"src": "2587:42:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 985,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2586:44:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 986,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2634:3:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "2586:51:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "2578:59:12",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 989,
													"nodeType": "ExpressionStatement",
													"src": "2578:59:12"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 995,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 993,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 991,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 799,
															"src": "2651:7:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "3078383030",
															"id": 992,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2661:5:12",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_2048_by_1",
																"typeString": "int_const 2048"
															},
															"value": "0x800"
														},
														"src": "2651:15:12",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 994,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2670:1:12",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2651:20:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1005,
												"nodeType": "IfStatement",
												"src": "2647:85:12",
												"trueBody": {
													"expression": {
														"id": 1003,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 996,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 831,
															"src": "2673:5:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1002,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 999,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 997,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 831,
																			"src": "2682:5:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30786537313539343735613263323962373434336232396337666136653838396439",
																			"id": 998,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "2690:34:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_307163716377032989948697243942600083929_by_1",
																				"typeString": "int_const 3071...(31 digits omitted)...3929"
																			},
																			"value": "0xe7159475a2c29b7443b29c7fa6e889d9"
																		},
																		"src": "2682:42:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 1000,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2681:44:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 1001,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2729:3:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "2681:51:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "2673:59:12",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1004,
													"nodeType": "ExpressionStatement",
													"src": "2673:59:12"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1010,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1008,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1006,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 799,
															"src": "2746:7:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "307831303030",
															"id": 1007,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2756:6:12",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_4096_by_1",
																"typeString": "int_const 4096"
															},
															"value": "0x1000"
														},
														"src": "2746:16:12",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 1009,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2766:1:12",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2746:21:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1020,
												"nodeType": "IfStatement",
												"src": "2742:86:12",
												"trueBody": {
													"expression": {
														"id": 1018,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 1011,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 831,
															"src": "2769:5:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1017,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1014,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1012,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 831,
																			"src": "2778:5:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30786430393766336264666432303232623838343561643866373932616135383235",
																			"id": 1013,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "2786:34:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_277268403626896220162999269216087595045_by_1",
																				"typeString": "int_const 2772...(31 digits omitted)...5045"
																			},
																			"value": "0xd097f3bdfd2022b8845ad8f792aa5825"
																		},
																		"src": "2778:42:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 1015,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2777:44:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 1016,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2825:3:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "2777:51:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "2769:59:12",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1019,
													"nodeType": "ExpressionStatement",
													"src": "2769:59:12"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1025,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1023,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1021,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 799,
															"src": "2842:7:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "307832303030",
															"id": 1022,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2852:6:12",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_8192_by_1",
																"typeString": "int_const 8192"
															},
															"value": "0x2000"
														},
														"src": "2842:16:12",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 1024,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2862:1:12",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2842:21:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1035,
												"nodeType": "IfStatement",
												"src": "2838:86:12",
												"trueBody": {
													"expression": {
														"id": 1033,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 1026,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 831,
															"src": "2865:5:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1032,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1029,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1027,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 831,
																			"src": "2874:5:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30786139663734363436326438373066646638613635646331663930653036316535",
																			"id": 1028,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "2882:34:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_225923453940442621947126027127485391333_by_1",
																				"typeString": "int_const 2259...(31 digits omitted)...1333"
																			},
																			"value": "0xa9f746462d870fdf8a65dc1f90e061e5"
																		},
																		"src": "2874:42:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 1030,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2873:44:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 1031,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2921:3:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "2873:51:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "2865:59:12",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1034,
													"nodeType": "ExpressionStatement",
													"src": "2865:59:12"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1040,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1038,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1036,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 799,
															"src": "2938:7:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "307834303030",
															"id": 1037,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2948:6:12",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_16384_by_1",
																"typeString": "int_const 16384"
															},
															"value": "0x4000"
														},
														"src": "2938:16:12",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 1039,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2958:1:12",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2938:21:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1050,
												"nodeType": "IfStatement",
												"src": "2934:86:12",
												"trueBody": {
													"expression": {
														"id": 1048,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 1041,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 831,
															"src": "2961:5:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1047,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1044,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1042,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 831,
																			"src": "2970:5:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30783730643836396131353664326131623839306262336466363262616633326637",
																			"id": 1043,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "2978:34:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_149997214084966997727330242082538205943_by_1",
																				"typeString": "int_const 1499...(31 digits omitted)...5943"
																			},
																			"value": "0x70d869a156d2a1b890bb3df62baf32f7"
																		},
																		"src": "2970:42:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 1045,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2969:44:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 1046,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "3017:3:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "2969:51:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "2961:59:12",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1049,
													"nodeType": "ExpressionStatement",
													"src": "2961:59:12"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1055,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1053,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1051,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 799,
															"src": "3034:7:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "307838303030",
															"id": 1052,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3044:6:12",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_32768_by_1",
																"typeString": "int_const 32768"
															},
															"value": "0x8000"
														},
														"src": "3034:16:12",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 1054,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3054:1:12",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "3034:21:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1065,
												"nodeType": "IfStatement",
												"src": "3030:86:12",
												"trueBody": {
													"expression": {
														"id": 1063,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 1056,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 831,
															"src": "3057:5:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1062,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1059,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1057,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 831,
																			"src": "3066:5:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30783331626531333566393764303866643938313233313530353534326663666136",
																			"id": 1058,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "3074:34:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_66119101136024775622716233608466517926_by_1",
																				"typeString": "int_const 6611...(30 digits omitted)...7926"
																			},
																			"value": "0x31be135f97d08fd981231505542fcfa6"
																		},
																		"src": "3066:42:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 1060,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "3065:44:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 1061,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "3113:3:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "3065:51:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "3057:59:12",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1064,
													"nodeType": "ExpressionStatement",
													"src": "3057:59:12"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1070,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1068,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1066,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 799,
															"src": "3130:7:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "30783130303030",
															"id": 1067,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3140:7:12",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_65536_by_1",
																"typeString": "int_const 65536"
															},
															"value": "0x10000"
														},
														"src": "3130:17:12",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 1069,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3151:1:12",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "3130:22:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1080,
												"nodeType": "IfStatement",
												"src": "3126:86:12",
												"trueBody": {
													"expression": {
														"id": 1078,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 1071,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 831,
															"src": "3154:5:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1077,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1074,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1072,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 831,
																			"src": "3163:5:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "307839616135303862356237613834653163363737646535346633653939626339",
																			"id": 1073,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "3171:33:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_12847376061809297530290974190478138313_by_1",
																				"typeString": "int_const 1284...(30 digits omitted)...8313"
																			},
																			"value": "0x9aa508b5b7a84e1c677de54f3e99bc9"
																		},
																		"src": "3163:41:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 1075,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "3162:43:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 1076,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "3209:3:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "3162:50:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "3154:58:12",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1079,
													"nodeType": "ExpressionStatement",
													"src": "3154:58:12"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1085,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1083,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1081,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 799,
															"src": "3226:7:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "30783230303030",
															"id": 1082,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3236:7:12",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_131072_by_1",
																"typeString": "int_const 131072"
															},
															"value": "0x20000"
														},
														"src": "3226:17:12",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 1084,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3247:1:12",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "3226:22:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1095,
												"nodeType": "IfStatement",
												"src": "3222:85:12",
												"trueBody": {
													"expression": {
														"id": 1093,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 1086,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 831,
															"src": "3250:5:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1092,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1089,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1087,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 831,
																			"src": "3259:5:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "3078356436616638646564623831313936363939633332393232356565363034",
																			"id": 1088,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "3267:32:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_485053260817066172746253684029974020_by_1",
																				"typeString": "int_const 4850...(28 digits omitted)...4020"
																			},
																			"value": "0x5d6af8dedb81196699c329225ee604"
																		},
																		"src": "3259:40:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 1090,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "3258:42:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 1091,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "3304:3:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "3258:49:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "3250:57:12",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1094,
													"nodeType": "ExpressionStatement",
													"src": "3250:57:12"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1100,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1098,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1096,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 799,
															"src": "3321:7:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "30783430303030",
															"id": 1097,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3331:7:12",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_262144_by_1",
																"typeString": "int_const 262144"
															},
															"value": "0x40000"
														},
														"src": "3321:17:12",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 1099,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3342:1:12",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "3321:22:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1110,
												"nodeType": "IfStatement",
												"src": "3317:83:12",
												"trueBody": {
													"expression": {
														"id": 1108,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 1101,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 831,
															"src": "3345:5:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1107,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1104,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1102,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 831,
																			"src": "3354:5:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "307832323136653538346635666131656139323630343162656466653938",
																			"id": 1103,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "3362:30:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_691415978906521570653435304214168_by_1",
																				"typeString": "int_const 6914...(25 digits omitted)...4168"
																			},
																			"value": "0x2216e584f5fa1ea926041bedfe98"
																		},
																		"src": "3354:38:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 1105,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "3353:40:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 1106,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "3397:3:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "3353:47:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "3345:55:12",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1109,
													"nodeType": "ExpressionStatement",
													"src": "3345:55:12"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1115,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1113,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1111,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 799,
															"src": "3414:7:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "30783830303030",
															"id": 1112,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3424:7:12",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_524288_by_1",
																"typeString": "int_const 524288"
															},
															"value": "0x80000"
														},
														"src": "3414:17:12",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 1114,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3435:1:12",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "3414:22:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1125,
												"nodeType": "IfStatement",
												"src": "3410:78:12",
												"trueBody": {
													"expression": {
														"id": 1123,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 1116,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 831,
															"src": "3438:5:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1122,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1119,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1117,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 831,
																			"src": "3447:5:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30783438613137303339316637646334323434346538666132",
																			"id": 1118,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "3455:25:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1404880482679654955896180642_by_1",
																				"typeString": "int_const 1404880482679654955896180642"
																			},
																			"value": "0x48a170391f7dc42444e8fa2"
																		},
																		"src": "3447:33:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 1120,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "3446:35:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 1121,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "3485:3:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "3446:42:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "3438:50:12",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1124,
													"nodeType": "ExpressionStatement",
													"src": "3438:50:12"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													},
													"id": 1128,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1126,
														"name": "tick",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 793,
														"src": "3503:4:12",
														"typeDescriptions": {
															"typeIdentifier": "t_int24",
															"typeString": "int24"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 1127,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3510:1:12",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "3503:8:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1139,
												"nodeType": "IfStatement",
												"src": "3499:47:12",
												"trueBody": {
													"expression": {
														"id": 1137,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 1129,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 831,
															"src": "3513:5:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1136,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 1132,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "3526:7:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_uint256_$",
																				"typeString": "type(uint256)"
																			},
																			"typeName": {
																				"id": 1131,
																				"name": "uint256",
																				"nodeType": "ElementaryTypeName",
																				"src": "3526:7:12",
																				"typeDescriptions": {}
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_type$_t_uint256_$",
																				"typeString": "type(uint256)"
																			}
																		],
																		"id": 1130,
																		"name": "type",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967269,
																		"src": "3521:4:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																			"typeString": "function () pure"
																		}
																	},
																	"id": 1133,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "3521:13:12",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_meta_type_t_uint256",
																		"typeString": "type(uint256)"
																	}
																},
																"id": 1134,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "max",
																"nodeType": "MemberAccess",
																"src": "3521:17:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "/",
															"rightExpression": {
																"id": 1135,
																"name": "ratio",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 831,
																"src": "3541:5:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "3521:25:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "3513:33:12",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1138,
													"nodeType": "ExpressionStatement",
													"src": "3513:33:12"
												}
											},
											{
												"expression": {
													"id": 1161,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1140,
														"name": "sqrtPriceX96",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 796,
														"src": "3856:12:12",
														"typeDescriptions": {
															"typeIdentifier": "t_uint160",
															"typeString": "uint160"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1159,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 1145,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 1143,
																				"name": "ratio",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 831,
																				"src": "3880:5:12",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": ">>",
																			"rightExpression": {
																				"hexValue": "3332",
																				"id": 1144,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "3889:2:12",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_32_by_1",
																					"typeString": "int_const 32"
																				},
																				"value": "32"
																			},
																			"src": "3880:11:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 1146,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "3879:13:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "+",
																"rightExpression": {
																	"components": [
																		{
																			"condition": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 1154,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 1152,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"id": 1147,
																						"name": "ratio",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 831,
																						"src": "3896:5:12",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "%",
																					"rightExpression": {
																						"components": [
																							{
																								"commonType": {
																									"typeIdentifier": "t_rational_4294967296_by_1",
																									"typeString": "int_const 4294967296"
																								},
																								"id": 1150,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": true,
																								"lValueRequested": false,
																								"leftExpression": {
																									"hexValue": "31",
																									"id": 1148,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": true,
																									"kind": "number",
																									"lValueRequested": false,
																									"nodeType": "Literal",
																									"src": "3905:1:12",
																									"typeDescriptions": {
																										"typeIdentifier": "t_rational_1_by_1",
																										"typeString": "int_const 1"
																									},
																									"value": "1"
																								},
																								"nodeType": "BinaryOperation",
																								"operator": "<<",
																								"rightExpression": {
																									"hexValue": "3332",
																									"id": 1149,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": true,
																									"kind": "number",
																									"lValueRequested": false,
																									"nodeType": "Literal",
																									"src": "3910:2:12",
																									"typeDescriptions": {
																										"typeIdentifier": "t_rational_32_by_1",
																										"typeString": "int_const 32"
																									},
																									"value": "32"
																								},
																								"src": "3905:7:12",
																								"typeDescriptions": {
																									"typeIdentifier": "t_rational_4294967296_by_1",
																									"typeString": "int_const 4294967296"
																								}
																							}
																						],
																						"id": 1151,
																						"isConstant": false,
																						"isInlineArray": false,
																						"isLValue": false,
																						"isPure": true,
																						"lValueRequested": false,
																						"nodeType": "TupleExpression",
																						"src": "3904:9:12",
																						"typeDescriptions": {
																							"typeIdentifier": "t_rational_4294967296_by_1",
																							"typeString": "int_const 4294967296"
																						}
																					},
																					"src": "3896:17:12",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "==",
																				"rightExpression": {
																					"hexValue": "30",
																					"id": 1153,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "number",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "3917:1:12",
																					"typeDescriptions": {
																						"typeIdentifier": "t_rational_0_by_1",
																						"typeString": "int_const 0"
																					},
																					"value": "0"
																				},
																				"src": "3896:22:12",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"falseExpression": {
																				"hexValue": "31",
																				"id": 1156,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "3925:1:12",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_1_by_1",
																					"typeString": "int_const 1"
																				},
																				"value": "1"
																			},
																			"id": 1157,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "Conditional",
																			"src": "3896:30:12",
																			"trueExpression": {
																				"hexValue": "30",
																				"id": 1155,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "3921:1:12",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			},
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint8",
																				"typeString": "uint8"
																			}
																		}
																	],
																	"id": 1158,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "3895:32:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																},
																"src": "3879:48:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"id": 1142,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "3871:7:12",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_uint160_$",
																"typeString": "type(uint160)"
															},
															"typeName": {
																"id": 1141,
																"name": "uint160",
																"nodeType": "ElementaryTypeName",
																"src": "3871:7:12",
																"typeDescriptions": {}
															}
														},
														"id": 1160,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "3871:57:12",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint160",
															"typeString": "uint160"
														}
													},
													"src": "3856:72:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"id": 1162,
												"nodeType": "ExpressionStatement",
												"src": "3856:72:12"
											}
										]
									},
									"documentation": {
										"id": 791,
										"nodeType": "StructuredDocumentation",
										"src": "1053:297:12",
										"text": "@notice Calculates sqrt(1.0001^tick) * 2^96\n @dev Throws if |tick| > max tick\n @param tick The input tick for the above formula\n @return sqrtPriceX96 A Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)\n at the given tick"
									},
									"id": 1164,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getSqrtRatioAtTick",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 794,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 793,
												"mutability": "mutable",
												"name": "tick",
												"nodeType": "VariableDeclaration",
												"scope": 1164,
												"src": "1383:10:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 792,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "1383:5:12",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1382:12:12"
									},
									"returnParameters": {
										"id": 797,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 796,
												"mutability": "mutable",
												"name": "sqrtPriceX96",
												"nodeType": "VariableDeclaration",
												"scope": 1164,
												"src": "1418:20:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 795,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "1418:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1417:22:12"
									},
									"scope": 1304,
									"src": "1355:2580:12",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1302,
										"nodeType": "Block",
										"src": "4439:4196:12",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 1179,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																},
																"id": 1175,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1173,
																	"name": "sqrtPriceX96",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1167,
																	"src": "4556:12:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">=",
																"rightExpression": {
																	"id": 1174,
																	"name": "MIN_SQRT_RATIO",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 786,
																	"src": "4572:14:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																},
																"src": "4556:30:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "&&",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																},
																"id": 1178,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1176,
																	"name": "sqrtPriceX96",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1167,
																	"src": "4590:12:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<",
																"rightExpression": {
																	"id": 1177,
																	"name": "MAX_SQRT_RATIO",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 790,
																	"src": "4605:14:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																},
																"src": "4590:29:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "4556:63:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "52",
															"id": 1180,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4621:3:12",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_ef22bddd350b943170a67d35191c27e310709a28c38b5762a152ff640108f5b2",
																"typeString": "literal_string \"R\""
															},
															"value": "R"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_ef22bddd350b943170a67d35191c27e310709a28c38b5762a152ff640108f5b2",
																"typeString": "literal_string \"R\""
															}
														],
														"id": 1172,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "4548:7:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1181,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4548:77:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1182,
												"nodeType": "ExpressionStatement",
												"src": "4548:77:12"
											},
											{
												"assignments": [
													1184
												],
												"declarations": [
													{
														"constant": false,
														"id": 1184,
														"mutability": "mutable",
														"name": "ratio",
														"nodeType": "VariableDeclaration",
														"scope": 1302,
														"src": "4635:13:12",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1183,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "4635:7:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1191,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1190,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"id": 1187,
																"name": "sqrtPriceX96",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1167,
																"src": "4659:12:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																}
															],
															"id": 1186,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "4651:7:12",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_uint256_$",
																"typeString": "type(uint256)"
															},
															"typeName": {
																"id": 1185,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "4651:7:12",
																"typeDescriptions": {}
															}
														},
														"id": 1188,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "4651:21:12",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<<",
													"rightExpression": {
														"hexValue": "3332",
														"id": 1189,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "4676:2:12",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_32_by_1",
															"typeString": "int_const 32"
														},
														"value": "32"
													},
													"src": "4651:27:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4635:43:12"
											},
											{
												"assignments": [
													1193
												],
												"declarations": [
													{
														"constant": false,
														"id": 1193,
														"mutability": "mutable",
														"name": "r",
														"nodeType": "VariableDeclaration",
														"scope": 1302,
														"src": "4689:9:12",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1192,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "4689:7:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1195,
												"initialValue": {
													"id": 1194,
													"name": "ratio",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1184,
													"src": "4701:5:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4689:17:12"
											},
											{
												"assignments": [
													1197
												],
												"declarations": [
													{
														"constant": false,
														"id": 1197,
														"mutability": "mutable",
														"name": "msb",
														"nodeType": "VariableDeclaration",
														"scope": 1302,
														"src": "4716:11:12",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1196,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "4716:7:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1199,
												"initialValue": {
													"hexValue": "30",
													"id": 1198,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "4730:1:12",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4716:15:12"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "4751:139:12",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "4765:58:12",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4778:1:12",
																		"type": "",
																		"value": "7"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "4784:1:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4787:34:12",
																				"type": "",
																				"value": "0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "4781:2:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4781:41:12"
																	}
																],
																"functionName": {
																	"name": "shl",
																	"nodeType": "YulIdentifier",
																	"src": "4774:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "4774:49:12"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "4769:1:12",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "4836:17:12",
															"value": {
																"arguments": [
																	{
																		"name": "msb",
																		"nodeType": "YulIdentifier",
																		"src": "4846:3:12"
																	},
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "4851:1:12"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "4843:2:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "4843:10:12"
															},
															"variableNames": [
																{
																	"name": "msb",
																	"nodeType": "YulIdentifier",
																	"src": "4836:3:12"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "4866:14:12",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "4875:1:12"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "4878:1:12"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "4871:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "4871:9:12"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "4866:1:12"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 1197,
														"isOffset": false,
														"isSlot": false,
														"src": "4836:3:12",
														"valueSize": 1
													},
													{
														"declaration": 1197,
														"isOffset": false,
														"isSlot": false,
														"src": "4846:3:12",
														"valueSize": 1
													},
													{
														"declaration": 1193,
														"isOffset": false,
														"isSlot": false,
														"src": "4784:1:12",
														"valueSize": 1
													},
													{
														"declaration": 1193,
														"isOffset": false,
														"isSlot": false,
														"src": "4866:1:12",
														"valueSize": 1
													},
													{
														"declaration": 1193,
														"isOffset": false,
														"isSlot": false,
														"src": "4878:1:12",
														"valueSize": 1
													}
												],
												"id": 1200,
												"nodeType": "InlineAssembly",
												"src": "4742:148:12"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "4908:123:12",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "4922:42:12",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4935:1:12",
																		"type": "",
																		"value": "6"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "4941:1:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4944:18:12",
																				"type": "",
																				"value": "0xFFFFFFFFFFFFFFFF"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "4938:2:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4938:25:12"
																	}
																],
																"functionName": {
																	"name": "shl",
																	"nodeType": "YulIdentifier",
																	"src": "4931:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "4931:33:12"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "4926:1:12",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "4977:17:12",
															"value": {
																"arguments": [
																	{
																		"name": "msb",
																		"nodeType": "YulIdentifier",
																		"src": "4987:3:12"
																	},
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "4992:1:12"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "4984:2:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "4984:10:12"
															},
															"variableNames": [
																{
																	"name": "msb",
																	"nodeType": "YulIdentifier",
																	"src": "4977:3:12"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "5007:14:12",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "5016:1:12"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "5019:1:12"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "5012:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "5012:9:12"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "5007:1:12"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 1197,
														"isOffset": false,
														"isSlot": false,
														"src": "4977:3:12",
														"valueSize": 1
													},
													{
														"declaration": 1197,
														"isOffset": false,
														"isSlot": false,
														"src": "4987:3:12",
														"valueSize": 1
													},
													{
														"declaration": 1193,
														"isOffset": false,
														"isSlot": false,
														"src": "4941:1:12",
														"valueSize": 1
													},
													{
														"declaration": 1193,
														"isOffset": false,
														"isSlot": false,
														"src": "5007:1:12",
														"valueSize": 1
													},
													{
														"declaration": 1193,
														"isOffset": false,
														"isSlot": false,
														"src": "5019:1:12",
														"valueSize": 1
													}
												],
												"id": 1201,
												"nodeType": "InlineAssembly",
												"src": "4899:132:12"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "5049:115:12",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5063:34:12",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5076:1:12",
																		"type": "",
																		"value": "5"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "5082:1:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5085:10:12",
																				"type": "",
																				"value": "0xFFFFFFFF"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "5079:2:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5079:17:12"
																	}
																],
																"functionName": {
																	"name": "shl",
																	"nodeType": "YulIdentifier",
																	"src": "5072:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "5072:25:12"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "5067:1:12",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "5110:17:12",
															"value": {
																"arguments": [
																	{
																		"name": "msb",
																		"nodeType": "YulIdentifier",
																		"src": "5120:3:12"
																	},
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "5125:1:12"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "5117:2:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "5117:10:12"
															},
															"variableNames": [
																{
																	"name": "msb",
																	"nodeType": "YulIdentifier",
																	"src": "5110:3:12"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "5140:14:12",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "5149:1:12"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "5152:1:12"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "5145:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "5145:9:12"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "5140:1:12"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 1197,
														"isOffset": false,
														"isSlot": false,
														"src": "5110:3:12",
														"valueSize": 1
													},
													{
														"declaration": 1197,
														"isOffset": false,
														"isSlot": false,
														"src": "5120:3:12",
														"valueSize": 1
													},
													{
														"declaration": 1193,
														"isOffset": false,
														"isSlot": false,
														"src": "5082:1:12",
														"valueSize": 1
													},
													{
														"declaration": 1193,
														"isOffset": false,
														"isSlot": false,
														"src": "5140:1:12",
														"valueSize": 1
													},
													{
														"declaration": 1193,
														"isOffset": false,
														"isSlot": false,
														"src": "5152:1:12",
														"valueSize": 1
													}
												],
												"id": 1202,
												"nodeType": "InlineAssembly",
												"src": "5040:124:12"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "5182:111:12",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5196:30:12",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5209:1:12",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "5215:1:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5218:6:12",
																				"type": "",
																				"value": "0xFFFF"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "5212:2:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5212:13:12"
																	}
																],
																"functionName": {
																	"name": "shl",
																	"nodeType": "YulIdentifier",
																	"src": "5205:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "5205:21:12"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "5200:1:12",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "5239:17:12",
															"value": {
																"arguments": [
																	{
																		"name": "msb",
																		"nodeType": "YulIdentifier",
																		"src": "5249:3:12"
																	},
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "5254:1:12"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "5246:2:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "5246:10:12"
															},
															"variableNames": [
																{
																	"name": "msb",
																	"nodeType": "YulIdentifier",
																	"src": "5239:3:12"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "5269:14:12",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "5278:1:12"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "5281:1:12"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "5274:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "5274:9:12"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "5269:1:12"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 1197,
														"isOffset": false,
														"isSlot": false,
														"src": "5239:3:12",
														"valueSize": 1
													},
													{
														"declaration": 1197,
														"isOffset": false,
														"isSlot": false,
														"src": "5249:3:12",
														"valueSize": 1
													},
													{
														"declaration": 1193,
														"isOffset": false,
														"isSlot": false,
														"src": "5215:1:12",
														"valueSize": 1
													},
													{
														"declaration": 1193,
														"isOffset": false,
														"isSlot": false,
														"src": "5269:1:12",
														"valueSize": 1
													},
													{
														"declaration": 1193,
														"isOffset": false,
														"isSlot": false,
														"src": "5281:1:12",
														"valueSize": 1
													}
												],
												"id": 1203,
												"nodeType": "InlineAssembly",
												"src": "5173:120:12"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "5311:109:12",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5325:28:12",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5338:1:12",
																		"type": "",
																		"value": "3"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "5344:1:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5347:4:12",
																				"type": "",
																				"value": "0xFF"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "5341:2:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5341:11:12"
																	}
																],
																"functionName": {
																	"name": "shl",
																	"nodeType": "YulIdentifier",
																	"src": "5334:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "5334:19:12"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "5329:1:12",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "5366:17:12",
															"value": {
																"arguments": [
																	{
																		"name": "msb",
																		"nodeType": "YulIdentifier",
																		"src": "5376:3:12"
																	},
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "5381:1:12"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "5373:2:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "5373:10:12"
															},
															"variableNames": [
																{
																	"name": "msb",
																	"nodeType": "YulIdentifier",
																	"src": "5366:3:12"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "5396:14:12",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "5405:1:12"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "5408:1:12"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "5401:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "5401:9:12"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "5396:1:12"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 1197,
														"isOffset": false,
														"isSlot": false,
														"src": "5366:3:12",
														"valueSize": 1
													},
													{
														"declaration": 1197,
														"isOffset": false,
														"isSlot": false,
														"src": "5376:3:12",
														"valueSize": 1
													},
													{
														"declaration": 1193,
														"isOffset": false,
														"isSlot": false,
														"src": "5344:1:12",
														"valueSize": 1
													},
													{
														"declaration": 1193,
														"isOffset": false,
														"isSlot": false,
														"src": "5396:1:12",
														"valueSize": 1
													},
													{
														"declaration": 1193,
														"isOffset": false,
														"isSlot": false,
														"src": "5408:1:12",
														"valueSize": 1
													}
												],
												"id": 1204,
												"nodeType": "InlineAssembly",
												"src": "5302:118:12"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "5438:108:12",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5452:27:12",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5465:1:12",
																		"type": "",
																		"value": "2"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "5471:1:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5474:3:12",
																				"type": "",
																				"value": "0xF"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "5468:2:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5468:10:12"
																	}
																],
																"functionName": {
																	"name": "shl",
																	"nodeType": "YulIdentifier",
																	"src": "5461:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "5461:18:12"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "5456:1:12",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "5492:17:12",
															"value": {
																"arguments": [
																	{
																		"name": "msb",
																		"nodeType": "YulIdentifier",
																		"src": "5502:3:12"
																	},
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "5507:1:12"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "5499:2:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "5499:10:12"
															},
															"variableNames": [
																{
																	"name": "msb",
																	"nodeType": "YulIdentifier",
																	"src": "5492:3:12"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "5522:14:12",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "5531:1:12"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "5534:1:12"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "5527:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "5527:9:12"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "5522:1:12"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 1197,
														"isOffset": false,
														"isSlot": false,
														"src": "5492:3:12",
														"valueSize": 1
													},
													{
														"declaration": 1197,
														"isOffset": false,
														"isSlot": false,
														"src": "5502:3:12",
														"valueSize": 1
													},
													{
														"declaration": 1193,
														"isOffset": false,
														"isSlot": false,
														"src": "5471:1:12",
														"valueSize": 1
													},
													{
														"declaration": 1193,
														"isOffset": false,
														"isSlot": false,
														"src": "5522:1:12",
														"valueSize": 1
													},
													{
														"declaration": 1193,
														"isOffset": false,
														"isSlot": false,
														"src": "5534:1:12",
														"valueSize": 1
													}
												],
												"id": 1205,
												"nodeType": "InlineAssembly",
												"src": "5429:117:12"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "5564:108:12",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5578:27:12",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5591:1:12",
																		"type": "",
																		"value": "1"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "5597:1:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5600:3:12",
																				"type": "",
																				"value": "0x3"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "5594:2:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5594:10:12"
																	}
																],
																"functionName": {
																	"name": "shl",
																	"nodeType": "YulIdentifier",
																	"src": "5587:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "5587:18:12"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "5582:1:12",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "5618:17:12",
															"value": {
																"arguments": [
																	{
																		"name": "msb",
																		"nodeType": "YulIdentifier",
																		"src": "5628:3:12"
																	},
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "5633:1:12"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "5625:2:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "5625:10:12"
															},
															"variableNames": [
																{
																	"name": "msb",
																	"nodeType": "YulIdentifier",
																	"src": "5618:3:12"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "5648:14:12",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "5657:1:12"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "5660:1:12"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "5653:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "5653:9:12"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "5648:1:12"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 1197,
														"isOffset": false,
														"isSlot": false,
														"src": "5618:3:12",
														"valueSize": 1
													},
													{
														"declaration": 1197,
														"isOffset": false,
														"isSlot": false,
														"src": "5628:3:12",
														"valueSize": 1
													},
													{
														"declaration": 1193,
														"isOffset": false,
														"isSlot": false,
														"src": "5597:1:12",
														"valueSize": 1
													},
													{
														"declaration": 1193,
														"isOffset": false,
														"isSlot": false,
														"src": "5648:1:12",
														"valueSize": 1
													},
													{
														"declaration": 1193,
														"isOffset": false,
														"isSlot": false,
														"src": "5660:1:12",
														"valueSize": 1
													}
												],
												"id": 1206,
												"nodeType": "InlineAssembly",
												"src": "5555:117:12"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "5690:73:12",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5704:19:12",
															"value": {
																"arguments": [
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "5716:1:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5719:3:12",
																		"type": "",
																		"value": "0x1"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "5713:2:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "5713:10:12"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "5708:1:12",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "5736:17:12",
															"value": {
																"arguments": [
																	{
																		"name": "msb",
																		"nodeType": "YulIdentifier",
																		"src": "5746:3:12"
																	},
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "5751:1:12"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "5743:2:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "5743:10:12"
															},
															"variableNames": [
																{
																	"name": "msb",
																	"nodeType": "YulIdentifier",
																	"src": "5736:3:12"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 1197,
														"isOffset": false,
														"isSlot": false,
														"src": "5736:3:12",
														"valueSize": 1
													},
													{
														"declaration": 1197,
														"isOffset": false,
														"isSlot": false,
														"src": "5746:3:12",
														"valueSize": 1
													},
													{
														"declaration": 1193,
														"isOffset": false,
														"isSlot": false,
														"src": "5716:1:12",
														"valueSize": 1
													}
												],
												"id": 1207,
												"nodeType": "InlineAssembly",
												"src": "5681:82:12"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1210,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1208,
														"name": "msb",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1197,
														"src": "5777:3:12",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">=",
													"rightExpression": {
														"hexValue": "313238",
														"id": 1209,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "5784:3:12",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_128_by_1",
															"typeString": "int_const 128"
														},
														"value": "128"
													},
													"src": "5777:10:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"expression": {
														"id": 1227,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 1220,
															"name": "r",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1193,
															"src": "5828:1:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1226,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1221,
																"name": "ratio",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1184,
																"src": "5832:5:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<<",
															"rightExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1224,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"hexValue": "313237",
																			"id": 1222,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "5842:3:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_127_by_1",
																				"typeString": "int_const 127"
																			},
																			"value": "127"
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "-",
																		"rightExpression": {
																			"id": 1223,
																			"name": "msb",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1197,
																			"src": "5848:3:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "5842:9:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 1225,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "5841:11:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5832:20:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "5828:24:12",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1228,
													"nodeType": "ExpressionStatement",
													"src": "5828:24:12"
												},
												"id": 1229,
												"nodeType": "IfStatement",
												"src": "5773:79:12",
												"trueBody": {
													"expression": {
														"id": 1218,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 1211,
															"name": "r",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1193,
															"src": "5789:1:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1217,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1212,
																"name": "ratio",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1184,
																"src": "5793:5:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1215,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1213,
																			"name": "msb",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1197,
																			"src": "5803:3:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "-",
																		"rightExpression": {
																			"hexValue": "313237",
																			"id": 1214,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "5809:3:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_127_by_1",
																				"typeString": "int_const 127"
																			},
																			"value": "127"
																		},
																		"src": "5803:9:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 1216,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "5802:11:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5793:20:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "5789:24:12",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1219,
													"nodeType": "ExpressionStatement",
													"src": "5789:24:12"
												}
											},
											{
												"assignments": [
													1231
												],
												"declarations": [
													{
														"constant": false,
														"id": 1231,
														"mutability": "mutable",
														"name": "log_2",
														"nodeType": "VariableDeclaration",
														"scope": 1302,
														"src": "5863:12:12",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														},
														"typeName": {
															"id": 1230,
															"name": "int256",
															"nodeType": "ElementaryTypeName",
															"src": "5863:6:12",
															"typeDescriptions": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1241,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													},
													"id": 1240,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																},
																"id": 1237,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"arguments": [
																		{
																			"id": 1234,
																			"name": "msb",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1197,
																			"src": "5886:3:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"id": 1233,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "5879:6:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_int256_$",
																			"typeString": "type(int256)"
																		},
																		"typeName": {
																			"id": 1232,
																			"name": "int256",
																			"nodeType": "ElementaryTypeName",
																			"src": "5879:6:12",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 1235,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "5879:11:12",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"hexValue": "313238",
																	"id": 1236,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "5893:3:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_128_by_1",
																		"typeString": "int_const 128"
																	},
																	"value": "128"
																},
																"src": "5879:17:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																}
															}
														],
														"id": 1238,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "5878:19:12",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<<",
													"rightExpression": {
														"hexValue": "3634",
														"id": 1239,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "5901:2:12",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_64_by_1",
															"typeString": "int_const 64"
														},
														"value": "64"
													},
													"src": "5878:25:12",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5863:40:12"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "5923:151:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "5937:24:12",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5946:3:12",
																		"type": "",
																		"value": "127"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "5955:1:12"
																			},
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "5958:1:12"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nodeType": "YulIdentifier",
																			"src": "5951:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5951:9:12"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "5942:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "5942:19:12"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "5937:1:12"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5974:20:12",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5987:3:12",
																		"type": "",
																		"value": "128"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "5992:1:12"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "5983:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "5983:11:12"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "5978:1:12",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "6007:30:12",
															"value": {
																"arguments": [
																	{
																		"name": "log_2",
																		"nodeType": "YulIdentifier",
																		"src": "6019:5:12"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6030:2:12",
																				"type": "",
																				"value": "63"
																			},
																			{
																				"name": "f",
																				"nodeType": "YulIdentifier",
																				"src": "6034:1:12"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "6026:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6026:10:12"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "6016:2:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "6016:21:12"
															},
															"variableNames": [
																{
																	"name": "log_2",
																	"nodeType": "YulIdentifier",
																	"src": "6007:5:12"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "6050:14:12",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "6059:1:12"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "6062:1:12"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6055:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "6055:9:12"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "6050:1:12"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 1231,
														"isOffset": false,
														"isSlot": false,
														"src": "6007:5:12",
														"valueSize": 1
													},
													{
														"declaration": 1231,
														"isOffset": false,
														"isSlot": false,
														"src": "6019:5:12",
														"valueSize": 1
													},
													{
														"declaration": 1193,
														"isOffset": false,
														"isSlot": false,
														"src": "5937:1:12",
														"valueSize": 1
													},
													{
														"declaration": 1193,
														"isOffset": false,
														"isSlot": false,
														"src": "5955:1:12",
														"valueSize": 1
													},
													{
														"declaration": 1193,
														"isOffset": false,
														"isSlot": false,
														"src": "5958:1:12",
														"valueSize": 1
													},
													{
														"declaration": 1193,
														"isOffset": false,
														"isSlot": false,
														"src": "5992:1:12",
														"valueSize": 1
													},
													{
														"declaration": 1193,
														"isOffset": false,
														"isSlot": false,
														"src": "6050:1:12",
														"valueSize": 1
													},
													{
														"declaration": 1193,
														"isOffset": false,
														"isSlot": false,
														"src": "6062:1:12",
														"valueSize": 1
													}
												],
												"id": 1242,
												"nodeType": "InlineAssembly",
												"src": "5914:160:12"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "6092:151:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "6106:24:12",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6115:3:12",
																		"type": "",
																		"value": "127"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "6124:1:12"
																			},
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "6127:1:12"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nodeType": "YulIdentifier",
																			"src": "6120:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6120:9:12"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6111:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "6111:19:12"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "6106:1:12"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "6143:20:12",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6156:3:12",
																		"type": "",
																		"value": "128"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "6161:1:12"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6152:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "6152:11:12"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "6147:1:12",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "6176:30:12",
															"value": {
																"arguments": [
																	{
																		"name": "log_2",
																		"nodeType": "YulIdentifier",
																		"src": "6188:5:12"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6199:2:12",
																				"type": "",
																				"value": "62"
																			},
																			{
																				"name": "f",
																				"nodeType": "YulIdentifier",
																				"src": "6203:1:12"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "6195:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6195:10:12"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "6185:2:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "6185:21:12"
															},
															"variableNames": [
																{
																	"name": "log_2",
																	"nodeType": "YulIdentifier",
																	"src": "6176:5:12"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "6219:14:12",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "6228:1:12"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "6231:1:12"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6224:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "6224:9:12"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "6219:1:12"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 1231,
														"isOffset": false,
														"isSlot": false,
														"src": "6176:5:12",
														"valueSize": 1
													},
													{
														"declaration": 1231,
														"isOffset": false,
														"isSlot": false,
														"src": "6188:5:12",
														"valueSize": 1
													},
													{
														"declaration": 1193,
														"isOffset": false,
														"isSlot": false,
														"src": "6106:1:12",
														"valueSize": 1
													},
													{
														"declaration": 1193,
														"isOffset": false,
														"isSlot": false,
														"src": "6124:1:12",
														"valueSize": 1
													},
													{
														"declaration": 1193,
														"isOffset": false,
														"isSlot": false,
														"src": "6127:1:12",
														"valueSize": 1
													},
													{
														"declaration": 1193,
														"isOffset": false,
														"isSlot": false,
														"src": "6161:1:12",
														"valueSize": 1
													},
													{
														"declaration": 1193,
														"isOffset": false,
														"isSlot": false,
														"src": "6219:1:12",
														"valueSize": 1
													},
													{
														"declaration": 1193,
														"isOffset": false,
														"isSlot": false,
														"src": "6231:1:12",
														"valueSize": 1
													}
												],
												"id": 1243,
												"nodeType": "InlineAssembly",
												"src": "6083:160:12"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "6261:151:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "6275:24:12",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6284:3:12",
																		"type": "",
																		"value": "127"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "6293:1:12"
																			},
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "6296:1:12"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nodeType": "YulIdentifier",
																			"src": "6289:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6289:9:12"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6280:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "6280:19:12"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "6275:1:12"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "6312:20:12",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6325:3:12",
																		"type": "",
																		"value": "128"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "6330:1:12"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6321:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "6321:11:12"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "6316:1:12",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "6345:30:12",
															"value": {
																"arguments": [
																	{
																		"name": "log_2",
																		"nodeType": "YulIdentifier",
																		"src": "6357:5:12"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6368:2:12",
																				"type": "",
																				"value": "61"
																			},
																			{
																				"name": "f",
																				"nodeType": "YulIdentifier",
																				"src": "6372:1:12"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "6364:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6364:10:12"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "6354:2:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "6354:21:12"
															},
															"variableNames": [
																{
																	"name": "log_2",
																	"nodeType": "YulIdentifier",
																	"src": "6345:5:12"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "6388:14:12",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "6397:1:12"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "6400:1:12"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6393:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "6393:9:12"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "6388:1:12"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 1231,
														"isOffset": false,
														"isSlot": false,
														"src": "6345:5:12",
														"valueSize": 1
													},
													{
														"declaration": 1231,
														"isOffset": false,
														"isSlot": false,
														"src": "6357:5:12",
														"valueSize": 1
													},
													{
														"declaration": 1193,
														"isOffset": false,
														"isSlot": false,
														"src": "6275:1:12",
														"valueSize": 1
													},
													{
														"declaration": 1193,
														"isOffset": false,
														"isSlot": false,
														"src": "6293:1:12",
														"valueSize": 1
													},
													{
														"declaration": 1193,
														"isOffset": false,
														"isSlot": false,
														"src": "6296:1:12",
														"valueSize": 1
													},
													{
														"declaration": 1193,
														"isOffset": false,
														"isSlot": false,
														"src": "6330:1:12",
														"valueSize": 1
													},
													{
														"declaration": 1193,
														"isOffset": false,
														"isSlot": false,
														"src": "6388:1:12",
														"valueSize": 1
													},
													{
														"declaration": 1193,
														"isOffset": false,
														"isSlot": false,
														"src": "6400:1:12",
														"valueSize": 1
													}
												],
												"id": 1244,
												"nodeType": "InlineAssembly",
												"src": "6252:160:12"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "6430:151:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "6444:24:12",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6453:3:12",
																		"type": "",
																		"value": "127"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "6462:1:12"
																			},
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "6465:1:12"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nodeType": "YulIdentifier",
																			"src": "6458:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6458:9:12"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6449:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "6449:19:12"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "6444:1:12"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "6481:20:12",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6494:3:12",
																		"type": "",
																		"value": "128"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "6499:1:12"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6490:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "6490:11:12"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "6485:1:12",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "6514:30:12",
															"value": {
																"arguments": [
																	{
																		"name": "log_2",
																		"nodeType": "YulIdentifier",
																		"src": "6526:5:12"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6537:2:12",
																				"type": "",
																				"value": "60"
																			},
																			{
																				"name": "f",
																				"nodeType": "YulIdentifier",
																				"src": "6541:1:12"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "6533:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6533:10:12"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "6523:2:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "6523:21:12"
															},
															"variableNames": [
																{
																	"name": "log_2",
																	"nodeType": "YulIdentifier",
																	"src": "6514:5:12"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "6557:14:12",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "6566:1:12"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "6569:1:12"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6562:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "6562:9:12"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "6557:1:12"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 1231,
														"isOffset": false,
														"isSlot": false,
														"src": "6514:5:12",
														"valueSize": 1
													},
													{
														"declaration": 1231,
														"isOffset": false,
														"isSlot": false,
														"src": "6526:5:12",
														"valueSize": 1
													},
													{
														"declaration": 1193,
														"isOffset": false,
														"isSlot": false,
														"src": "6444:1:12",
														"valueSize": 1
													},
													{
														"declaration": 1193,
														"isOffset": false,
														"isSlot": false,
														"src": "6462:1:12",
														"valueSize": 1
													},
													{
														"declaration": 1193,
														"isOffset": false,
														"isSlot": false,
														"src": "6465:1:12",
														"valueSize": 1
													},
													{
														"declaration": 1193,
														"isOffset": false,
														"isSlot": false,
														"src": "6499:1:12",
														"valueSize": 1
													},
													{
														"declaration": 1193,
														"isOffset": false,
														"isSlot": false,
														"src": "6557:1:12",
														"valueSize": 1
													},
													{
														"declaration": 1193,
														"isOffset": false,
														"isSlot": false,
														"src": "6569:1:12",
														"valueSize": 1
													}
												],
												"id": 1245,
												"nodeType": "InlineAssembly",
												"src": "6421:160:12"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "6599:151:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "6613:24:12",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6622:3:12",
																		"type": "",
																		"value": "127"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "6631:1:12"
																			},
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "6634:1:12"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nodeType": "YulIdentifier",
																			"src": "6627:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6627:9:12"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6618:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "6618:19:12"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "6613:1:12"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "6650:20:12",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6663:3:12",
																		"type": "",
																		"value": "128"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "6668:1:12"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6659:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "6659:11:12"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "6654:1:12",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "6683:30:12",
															"value": {
																"arguments": [
																	{
																		"name": "log_2",
																		"nodeType": "YulIdentifier",
																		"src": "6695:5:12"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6706:2:12",
																				"type": "",
																				"value": "59"
																			},
																			{
																				"name": "f",
																				"nodeType": "YulIdentifier",
																				"src": "6710:1:12"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "6702:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6702:10:12"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "6692:2:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "6692:21:12"
															},
															"variableNames": [
																{
																	"name": "log_2",
																	"nodeType": "YulIdentifier",
																	"src": "6683:5:12"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "6726:14:12",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "6735:1:12"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "6738:1:12"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6731:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "6731:9:12"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "6726:1:12"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 1231,
														"isOffset": false,
														"isSlot": false,
														"src": "6683:5:12",
														"valueSize": 1
													},
													{
														"declaration": 1231,
														"isOffset": false,
														"isSlot": false,
														"src": "6695:5:12",
														"valueSize": 1
													},
													{
														"declaration": 1193,
														"isOffset": false,
														"isSlot": false,
														"src": "6613:1:12",
														"valueSize": 1
													},
													{
														"declaration": 1193,
														"isOffset": false,
														"isSlot": false,
														"src": "6631:1:12",
														"valueSize": 1
													},
													{
														"declaration": 1193,
														"isOffset": false,
														"isSlot": false,
														"src": "6634:1:12",
														"valueSize": 1
													},
													{
														"declaration": 1193,
														"isOffset": false,
														"isSlot": false,
														"src": "6668:1:12",
														"valueSize": 1
													},
													{
														"declaration": 1193,
														"isOffset": false,
														"isSlot": false,
														"src": "6726:1:12",
														"valueSize": 1
													},
													{
														"declaration": 1193,
														"isOffset": false,
														"isSlot": false,
														"src": "6738:1:12",
														"valueSize": 1
													}
												],
												"id": 1246,
												"nodeType": "InlineAssembly",
												"src": "6590:160:12"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "6768:151:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "6782:24:12",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6791:3:12",
																		"type": "",
																		"value": "127"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "6800:1:12"
																			},
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "6803:1:12"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nodeType": "YulIdentifier",
																			"src": "6796:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6796:9:12"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6787:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "6787:19:12"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "6782:1:12"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "6819:20:12",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6832:3:12",
																		"type": "",
																		"value": "128"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "6837:1:12"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6828:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "6828:11:12"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "6823:1:12",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "6852:30:12",
															"value": {
																"arguments": [
																	{
																		"name": "log_2",
																		"nodeType": "YulIdentifier",
																		"src": "6864:5:12"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6875:2:12",
																				"type": "",
																				"value": "58"
																			},
																			{
																				"name": "f",
																				"nodeType": "YulIdentifier",
																				"src": "6879:1:12"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "6871:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6871:10:12"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "6861:2:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "6861:21:12"
															},
															"variableNames": [
																{
																	"name": "log_2",
																	"nodeType": "YulIdentifier",
																	"src": "6852:5:12"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "6895:14:12",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "6904:1:12"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "6907:1:12"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6900:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "6900:9:12"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "6895:1:12"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 1231,
														"isOffset": false,
														"isSlot": false,
														"src": "6852:5:12",
														"valueSize": 1
													},
													{
														"declaration": 1231,
														"isOffset": false,
														"isSlot": false,
														"src": "6864:5:12",
														"valueSize": 1
													},
													{
														"declaration": 1193,
														"isOffset": false,
														"isSlot": false,
														"src": "6782:1:12",
														"valueSize": 1
													},
													{
														"declaration": 1193,
														"isOffset": false,
														"isSlot": false,
														"src": "6800:1:12",
														"valueSize": 1
													},
													{
														"declaration": 1193,
														"isOffset": false,
														"isSlot": false,
														"src": "6803:1:12",
														"valueSize": 1
													},
													{
														"declaration": 1193,
														"isOffset": false,
														"isSlot": false,
														"src": "6837:1:12",
														"valueSize": 1
													},
													{
														"declaration": 1193,
														"isOffset": false,
														"isSlot": false,
														"src": "6895:1:12",
														"valueSize": 1
													},
													{
														"declaration": 1193,
														"isOffset": false,
														"isSlot": false,
														"src": "6907:1:12",
														"valueSize": 1
													}
												],
												"id": 1247,
												"nodeType": "InlineAssembly",
												"src": "6759:160:12"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "6937:151:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "6951:24:12",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6960:3:12",
																		"type": "",
																		"value": "127"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "6969:1:12"
																			},
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "6972:1:12"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nodeType": "YulIdentifier",
																			"src": "6965:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6965:9:12"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6956:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "6956:19:12"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "6951:1:12"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "6988:20:12",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7001:3:12",
																		"type": "",
																		"value": "128"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "7006:1:12"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6997:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "6997:11:12"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "6992:1:12",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "7021:30:12",
															"value": {
																"arguments": [
																	{
																		"name": "log_2",
																		"nodeType": "YulIdentifier",
																		"src": "7033:5:12"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7044:2:12",
																				"type": "",
																				"value": "57"
																			},
																			{
																				"name": "f",
																				"nodeType": "YulIdentifier",
																				"src": "7048:1:12"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "7040:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7040:10:12"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "7030:2:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "7030:21:12"
															},
															"variableNames": [
																{
																	"name": "log_2",
																	"nodeType": "YulIdentifier",
																	"src": "7021:5:12"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "7064:14:12",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "7073:1:12"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "7076:1:12"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7069:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "7069:9:12"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "7064:1:12"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 1231,
														"isOffset": false,
														"isSlot": false,
														"src": "7021:5:12",
														"valueSize": 1
													},
													{
														"declaration": 1231,
														"isOffset": false,
														"isSlot": false,
														"src": "7033:5:12",
														"valueSize": 1
													},
													{
														"declaration": 1193,
														"isOffset": false,
														"isSlot": false,
														"src": "6951:1:12",
														"valueSize": 1
													},
													{
														"declaration": 1193,
														"isOffset": false,
														"isSlot": false,
														"src": "6969:1:12",
														"valueSize": 1
													},
													{
														"declaration": 1193,
														"isOffset": false,
														"isSlot": false,
														"src": "6972:1:12",
														"valueSize": 1
													},
													{
														"declaration": 1193,
														"isOffset": false,
														"isSlot": false,
														"src": "7006:1:12",
														"valueSize": 1
													},
													{
														"declaration": 1193,
														"isOffset": false,
														"isSlot": false,
														"src": "7064:1:12",
														"valueSize": 1
													},
													{
														"declaration": 1193,
														"isOffset": false,
														"isSlot": false,
														"src": "7076:1:12",
														"valueSize": 1
													}
												],
												"id": 1248,
												"nodeType": "InlineAssembly",
												"src": "6928:160:12"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "7106:151:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "7120:24:12",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7129:3:12",
																		"type": "",
																		"value": "127"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "7138:1:12"
																			},
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "7141:1:12"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nodeType": "YulIdentifier",
																			"src": "7134:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7134:9:12"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7125:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "7125:19:12"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "7120:1:12"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "7157:20:12",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7170:3:12",
																		"type": "",
																		"value": "128"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "7175:1:12"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7166:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "7166:11:12"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "7161:1:12",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "7190:30:12",
															"value": {
																"arguments": [
																	{
																		"name": "log_2",
																		"nodeType": "YulIdentifier",
																		"src": "7202:5:12"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7213:2:12",
																				"type": "",
																				"value": "56"
																			},
																			{
																				"name": "f",
																				"nodeType": "YulIdentifier",
																				"src": "7217:1:12"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "7209:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7209:10:12"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "7199:2:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "7199:21:12"
															},
															"variableNames": [
																{
																	"name": "log_2",
																	"nodeType": "YulIdentifier",
																	"src": "7190:5:12"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "7233:14:12",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "7242:1:12"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "7245:1:12"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7238:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "7238:9:12"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "7233:1:12"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 1231,
														"isOffset": false,
														"isSlot": false,
														"src": "7190:5:12",
														"valueSize": 1
													},
													{
														"declaration": 1231,
														"isOffset": false,
														"isSlot": false,
														"src": "7202:5:12",
														"valueSize": 1
													},
													{
														"declaration": 1193,
														"isOffset": false,
														"isSlot": false,
														"src": "7120:1:12",
														"valueSize": 1
													},
													{
														"declaration": 1193,
														"isOffset": false,
														"isSlot": false,
														"src": "7138:1:12",
														"valueSize": 1
													},
													{
														"declaration": 1193,
														"isOffset": false,
														"isSlot": false,
														"src": "7141:1:12",
														"valueSize": 1
													},
													{
														"declaration": 1193,
														"isOffset": false,
														"isSlot": false,
														"src": "7175:1:12",
														"valueSize": 1
													},
													{
														"declaration": 1193,
														"isOffset": false,
														"isSlot": false,
														"src": "7233:1:12",
														"valueSize": 1
													},
													{
														"declaration": 1193,
														"isOffset": false,
														"isSlot": false,
														"src": "7245:1:12",
														"valueSize": 1
													}
												],
												"id": 1249,
												"nodeType": "InlineAssembly",
												"src": "7097:160:12"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "7275:151:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "7289:24:12",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7298:3:12",
																		"type": "",
																		"value": "127"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "7307:1:12"
																			},
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "7310:1:12"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nodeType": "YulIdentifier",
																			"src": "7303:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7303:9:12"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7294:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "7294:19:12"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "7289:1:12"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "7326:20:12",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7339:3:12",
																		"type": "",
																		"value": "128"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "7344:1:12"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7335:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "7335:11:12"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "7330:1:12",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "7359:30:12",
															"value": {
																"arguments": [
																	{
																		"name": "log_2",
																		"nodeType": "YulIdentifier",
																		"src": "7371:5:12"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7382:2:12",
																				"type": "",
																				"value": "55"
																			},
																			{
																				"name": "f",
																				"nodeType": "YulIdentifier",
																				"src": "7386:1:12"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "7378:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7378:10:12"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "7368:2:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "7368:21:12"
															},
															"variableNames": [
																{
																	"name": "log_2",
																	"nodeType": "YulIdentifier",
																	"src": "7359:5:12"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "7402:14:12",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "7411:1:12"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "7414:1:12"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7407:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "7407:9:12"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "7402:1:12"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 1231,
														"isOffset": false,
														"isSlot": false,
														"src": "7359:5:12",
														"valueSize": 1
													},
													{
														"declaration": 1231,
														"isOffset": false,
														"isSlot": false,
														"src": "7371:5:12",
														"valueSize": 1
													},
													{
														"declaration": 1193,
														"isOffset": false,
														"isSlot": false,
														"src": "7289:1:12",
														"valueSize": 1
													},
													{
														"declaration": 1193,
														"isOffset": false,
														"isSlot": false,
														"src": "7307:1:12",
														"valueSize": 1
													},
													{
														"declaration": 1193,
														"isOffset": false,
														"isSlot": false,
														"src": "7310:1:12",
														"valueSize": 1
													},
													{
														"declaration": 1193,
														"isOffset": false,
														"isSlot": false,
														"src": "7344:1:12",
														"valueSize": 1
													},
													{
														"declaration": 1193,
														"isOffset": false,
														"isSlot": false,
														"src": "7402:1:12",
														"valueSize": 1
													},
													{
														"declaration": 1193,
														"isOffset": false,
														"isSlot": false,
														"src": "7414:1:12",
														"valueSize": 1
													}
												],
												"id": 1250,
												"nodeType": "InlineAssembly",
												"src": "7266:160:12"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "7444:151:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "7458:24:12",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7467:3:12",
																		"type": "",
																		"value": "127"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "7476:1:12"
																			},
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "7479:1:12"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nodeType": "YulIdentifier",
																			"src": "7472:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7472:9:12"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7463:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "7463:19:12"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "7458:1:12"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "7495:20:12",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7508:3:12",
																		"type": "",
																		"value": "128"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "7513:1:12"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7504:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "7504:11:12"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "7499:1:12",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "7528:30:12",
															"value": {
																"arguments": [
																	{
																		"name": "log_2",
																		"nodeType": "YulIdentifier",
																		"src": "7540:5:12"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7551:2:12",
																				"type": "",
																				"value": "54"
																			},
																			{
																				"name": "f",
																				"nodeType": "YulIdentifier",
																				"src": "7555:1:12"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "7547:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7547:10:12"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "7537:2:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "7537:21:12"
															},
															"variableNames": [
																{
																	"name": "log_2",
																	"nodeType": "YulIdentifier",
																	"src": "7528:5:12"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "7571:14:12",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "7580:1:12"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "7583:1:12"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7576:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "7576:9:12"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "7571:1:12"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 1231,
														"isOffset": false,
														"isSlot": false,
														"src": "7528:5:12",
														"valueSize": 1
													},
													{
														"declaration": 1231,
														"isOffset": false,
														"isSlot": false,
														"src": "7540:5:12",
														"valueSize": 1
													},
													{
														"declaration": 1193,
														"isOffset": false,
														"isSlot": false,
														"src": "7458:1:12",
														"valueSize": 1
													},
													{
														"declaration": 1193,
														"isOffset": false,
														"isSlot": false,
														"src": "7476:1:12",
														"valueSize": 1
													},
													{
														"declaration": 1193,
														"isOffset": false,
														"isSlot": false,
														"src": "7479:1:12",
														"valueSize": 1
													},
													{
														"declaration": 1193,
														"isOffset": false,
														"isSlot": false,
														"src": "7513:1:12",
														"valueSize": 1
													},
													{
														"declaration": 1193,
														"isOffset": false,
														"isSlot": false,
														"src": "7571:1:12",
														"valueSize": 1
													},
													{
														"declaration": 1193,
														"isOffset": false,
														"isSlot": false,
														"src": "7583:1:12",
														"valueSize": 1
													}
												],
												"id": 1251,
												"nodeType": "InlineAssembly",
												"src": "7435:160:12"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "7613:151:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "7627:24:12",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7636:3:12",
																		"type": "",
																		"value": "127"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "7645:1:12"
																			},
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "7648:1:12"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nodeType": "YulIdentifier",
																			"src": "7641:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7641:9:12"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7632:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "7632:19:12"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "7627:1:12"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "7664:20:12",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7677:3:12",
																		"type": "",
																		"value": "128"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "7682:1:12"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7673:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "7673:11:12"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "7668:1:12",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "7697:30:12",
															"value": {
																"arguments": [
																	{
																		"name": "log_2",
																		"nodeType": "YulIdentifier",
																		"src": "7709:5:12"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7720:2:12",
																				"type": "",
																				"value": "53"
																			},
																			{
																				"name": "f",
																				"nodeType": "YulIdentifier",
																				"src": "7724:1:12"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "7716:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7716:10:12"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "7706:2:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "7706:21:12"
															},
															"variableNames": [
																{
																	"name": "log_2",
																	"nodeType": "YulIdentifier",
																	"src": "7697:5:12"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "7740:14:12",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "7749:1:12"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "7752:1:12"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7745:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "7745:9:12"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "7740:1:12"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 1231,
														"isOffset": false,
														"isSlot": false,
														"src": "7697:5:12",
														"valueSize": 1
													},
													{
														"declaration": 1231,
														"isOffset": false,
														"isSlot": false,
														"src": "7709:5:12",
														"valueSize": 1
													},
													{
														"declaration": 1193,
														"isOffset": false,
														"isSlot": false,
														"src": "7627:1:12",
														"valueSize": 1
													},
													{
														"declaration": 1193,
														"isOffset": false,
														"isSlot": false,
														"src": "7645:1:12",
														"valueSize": 1
													},
													{
														"declaration": 1193,
														"isOffset": false,
														"isSlot": false,
														"src": "7648:1:12",
														"valueSize": 1
													},
													{
														"declaration": 1193,
														"isOffset": false,
														"isSlot": false,
														"src": "7682:1:12",
														"valueSize": 1
													},
													{
														"declaration": 1193,
														"isOffset": false,
														"isSlot": false,
														"src": "7740:1:12",
														"valueSize": 1
													},
													{
														"declaration": 1193,
														"isOffset": false,
														"isSlot": false,
														"src": "7752:1:12",
														"valueSize": 1
													}
												],
												"id": 1252,
												"nodeType": "InlineAssembly",
												"src": "7604:160:12"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "7782:151:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "7796:24:12",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7805:3:12",
																		"type": "",
																		"value": "127"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "7814:1:12"
																			},
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "7817:1:12"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nodeType": "YulIdentifier",
																			"src": "7810:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7810:9:12"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7801:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "7801:19:12"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "7796:1:12"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "7833:20:12",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7846:3:12",
																		"type": "",
																		"value": "128"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "7851:1:12"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7842:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "7842:11:12"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "7837:1:12",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "7866:30:12",
															"value": {
																"arguments": [
																	{
																		"name": "log_2",
																		"nodeType": "YulIdentifier",
																		"src": "7878:5:12"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7889:2:12",
																				"type": "",
																				"value": "52"
																			},
																			{
																				"name": "f",
																				"nodeType": "YulIdentifier",
																				"src": "7893:1:12"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "7885:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7885:10:12"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "7875:2:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "7875:21:12"
															},
															"variableNames": [
																{
																	"name": "log_2",
																	"nodeType": "YulIdentifier",
																	"src": "7866:5:12"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "7909:14:12",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "7918:1:12"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "7921:1:12"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7914:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "7914:9:12"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "7909:1:12"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 1231,
														"isOffset": false,
														"isSlot": false,
														"src": "7866:5:12",
														"valueSize": 1
													},
													{
														"declaration": 1231,
														"isOffset": false,
														"isSlot": false,
														"src": "7878:5:12",
														"valueSize": 1
													},
													{
														"declaration": 1193,
														"isOffset": false,
														"isSlot": false,
														"src": "7796:1:12",
														"valueSize": 1
													},
													{
														"declaration": 1193,
														"isOffset": false,
														"isSlot": false,
														"src": "7814:1:12",
														"valueSize": 1
													},
													{
														"declaration": 1193,
														"isOffset": false,
														"isSlot": false,
														"src": "7817:1:12",
														"valueSize": 1
													},
													{
														"declaration": 1193,
														"isOffset": false,
														"isSlot": false,
														"src": "7851:1:12",
														"valueSize": 1
													},
													{
														"declaration": 1193,
														"isOffset": false,
														"isSlot": false,
														"src": "7909:1:12",
														"valueSize": 1
													},
													{
														"declaration": 1193,
														"isOffset": false,
														"isSlot": false,
														"src": "7921:1:12",
														"valueSize": 1
													}
												],
												"id": 1253,
												"nodeType": "InlineAssembly",
												"src": "7773:160:12"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "7951:151:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "7965:24:12",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7974:3:12",
																		"type": "",
																		"value": "127"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "7983:1:12"
																			},
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "7986:1:12"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nodeType": "YulIdentifier",
																			"src": "7979:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7979:9:12"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7970:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "7970:19:12"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "7965:1:12"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "8002:20:12",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8015:3:12",
																		"type": "",
																		"value": "128"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "8020:1:12"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "8011:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "8011:11:12"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "8006:1:12",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "8035:30:12",
															"value": {
																"arguments": [
																	{
																		"name": "log_2",
																		"nodeType": "YulIdentifier",
																		"src": "8047:5:12"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8058:2:12",
																				"type": "",
																				"value": "51"
																			},
																			{
																				"name": "f",
																				"nodeType": "YulIdentifier",
																				"src": "8062:1:12"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "8054:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8054:10:12"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "8044:2:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "8044:21:12"
															},
															"variableNames": [
																{
																	"name": "log_2",
																	"nodeType": "YulIdentifier",
																	"src": "8035:5:12"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "8078:14:12",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "8087:1:12"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "8090:1:12"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "8083:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "8083:9:12"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "8078:1:12"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 1231,
														"isOffset": false,
														"isSlot": false,
														"src": "8035:5:12",
														"valueSize": 1
													},
													{
														"declaration": 1231,
														"isOffset": false,
														"isSlot": false,
														"src": "8047:5:12",
														"valueSize": 1
													},
													{
														"declaration": 1193,
														"isOffset": false,
														"isSlot": false,
														"src": "7965:1:12",
														"valueSize": 1
													},
													{
														"declaration": 1193,
														"isOffset": false,
														"isSlot": false,
														"src": "7983:1:12",
														"valueSize": 1
													},
													{
														"declaration": 1193,
														"isOffset": false,
														"isSlot": false,
														"src": "7986:1:12",
														"valueSize": 1
													},
													{
														"declaration": 1193,
														"isOffset": false,
														"isSlot": false,
														"src": "8020:1:12",
														"valueSize": 1
													},
													{
														"declaration": 1193,
														"isOffset": false,
														"isSlot": false,
														"src": "8078:1:12",
														"valueSize": 1
													},
													{
														"declaration": 1193,
														"isOffset": false,
														"isSlot": false,
														"src": "8090:1:12",
														"valueSize": 1
													}
												],
												"id": 1254,
												"nodeType": "InlineAssembly",
												"src": "7942:160:12"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "8120:124:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "8134:24:12",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8143:3:12",
																		"type": "",
																		"value": "127"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "8152:1:12"
																			},
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "8155:1:12"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nodeType": "YulIdentifier",
																			"src": "8148:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8148:9:12"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "8139:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "8139:19:12"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "8134:1:12"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "8171:20:12",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8184:3:12",
																		"type": "",
																		"value": "128"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "8189:1:12"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "8180:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "8180:11:12"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "8175:1:12",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "8204:30:12",
															"value": {
																"arguments": [
																	{
																		"name": "log_2",
																		"nodeType": "YulIdentifier",
																		"src": "8216:5:12"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8227:2:12",
																				"type": "",
																				"value": "50"
																			},
																			{
																				"name": "f",
																				"nodeType": "YulIdentifier",
																				"src": "8231:1:12"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "8223:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8223:10:12"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "8213:2:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "8213:21:12"
															},
															"variableNames": [
																{
																	"name": "log_2",
																	"nodeType": "YulIdentifier",
																	"src": "8204:5:12"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 1231,
														"isOffset": false,
														"isSlot": false,
														"src": "8204:5:12",
														"valueSize": 1
													},
													{
														"declaration": 1231,
														"isOffset": false,
														"isSlot": false,
														"src": "8216:5:12",
														"valueSize": 1
													},
													{
														"declaration": 1193,
														"isOffset": false,
														"isSlot": false,
														"src": "8134:1:12",
														"valueSize": 1
													},
													{
														"declaration": 1193,
														"isOffset": false,
														"isSlot": false,
														"src": "8152:1:12",
														"valueSize": 1
													},
													{
														"declaration": 1193,
														"isOffset": false,
														"isSlot": false,
														"src": "8155:1:12",
														"valueSize": 1
													},
													{
														"declaration": 1193,
														"isOffset": false,
														"isSlot": false,
														"src": "8189:1:12",
														"valueSize": 1
													}
												],
												"id": 1255,
												"nodeType": "InlineAssembly",
												"src": "8111:133:12"
											},
											{
												"assignments": [
													1257
												],
												"declarations": [
													{
														"constant": false,
														"id": 1257,
														"mutability": "mutable",
														"name": "log_sqrt10001",
														"nodeType": "VariableDeclaration",
														"scope": 1302,
														"src": "8254:20:12",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														},
														"typeName": {
															"id": 1256,
															"name": "int256",
															"nodeType": "ElementaryTypeName",
															"src": "8254:6:12",
															"typeDescriptions": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1261,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													},
													"id": 1260,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1258,
														"name": "log_2",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1231,
														"src": "8277:5:12",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "*",
													"rightExpression": {
														"hexValue": "323535373338393538393939363033383236333437313431",
														"id": 1259,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "8285:24:12",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_255738958999603826347141_by_1",
															"typeString": "int_const 255738958999603826347141"
														},
														"value": "255738958999603826347141"
													},
													"src": "8277:32:12",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "8254:55:12"
											},
											{
												"assignments": [
													1263
												],
												"declarations": [
													{
														"constant": false,
														"id": 1263,
														"mutability": "mutable",
														"name": "tickLow",
														"nodeType": "VariableDeclaration",
														"scope": 1302,
														"src": "8338:13:12",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_int24",
															"typeString": "int24"
														},
														"typeName": {
															"id": 1262,
															"name": "int24",
															"nodeType": "ElementaryTypeName",
															"src": "8338:5:12",
															"typeDescriptions": {
																"typeIdentifier": "t_int24",
																"typeString": "int24"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1273,
												"initialValue": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															},
															"id": 1271,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_int256",
																			"typeString": "int256"
																		},
																		"id": 1268,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1266,
																			"name": "log_sqrt10001",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1257,
																			"src": "8361:13:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "-",
																		"rightExpression": {
																			"hexValue": "33343032393932393536383039313332343138353936313430313030363630323437323130",
																			"id": 1267,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "8377:37:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_3402992956809132418596140100660247210_by_1",
																				"typeString": "int_const 3402...(29 digits omitted)...7210"
																			},
																			"value": "3402992956809132418596140100660247210"
																		},
																		"src": "8361:53:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_int256",
																			"typeString": "int256"
																		}
																	}
																],
																"id": 1269,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "8360:55:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 1270,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "8419:3:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "8360:62:12",
															"typeDescriptions": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														],
														"id": 1265,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "ElementaryTypeNameExpression",
														"src": "8354:5:12",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_int24_$",
															"typeString": "type(int24)"
														},
														"typeName": {
															"id": 1264,
															"name": "int24",
															"nodeType": "ElementaryTypeName",
															"src": "8354:5:12",
															"typeDescriptions": {}
														}
													},
													"id": 1272,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8354:69:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "8338:85:12"
											},
											{
												"assignments": [
													1275
												],
												"declarations": [
													{
														"constant": false,
														"id": 1275,
														"mutability": "mutable",
														"name": "tickHi",
														"nodeType": "VariableDeclaration",
														"scope": 1302,
														"src": "8433:12:12",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_int24",
															"typeString": "int24"
														},
														"typeName": {
															"id": 1274,
															"name": "int24",
															"nodeType": "ElementaryTypeName",
															"src": "8433:5:12",
															"typeDescriptions": {
																"typeIdentifier": "t_int24",
																"typeString": "int24"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1285,
												"initialValue": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															},
															"id": 1283,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_int256",
																			"typeString": "int256"
																		},
																		"id": 1280,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1278,
																			"name": "log_sqrt10001",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1257,
																			"src": "8455:13:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "+",
																		"rightExpression": {
																			"hexValue": "323931333339343634373731393839363232393037303237363231313533333938303838343935",
																			"id": 1279,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "8471:39:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_291339464771989622907027621153398088495_by_1",
																				"typeString": "int_const 2913...(31 digits omitted)...8495"
																			},
																			"value": "291339464771989622907027621153398088495"
																		},
																		"src": "8455:55:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_int256",
																			"typeString": "int256"
																		}
																	}
																],
																"id": 1281,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "8454:57:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 1282,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "8515:3:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "8454:64:12",
															"typeDescriptions": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														],
														"id": 1277,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "ElementaryTypeNameExpression",
														"src": "8448:5:12",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_int24_$",
															"typeString": "type(int24)"
														},
														"typeName": {
															"id": 1276,
															"name": "int24",
															"nodeType": "ElementaryTypeName",
															"src": "8448:5:12",
															"typeDescriptions": {}
														}
													},
													"id": 1284,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8448:71:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "8433:86:12"
											},
											{
												"expression": {
													"id": 1300,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1286,
														"name": "tick",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1170,
														"src": "8530:4:12",
														"typeDescriptions": {
															"typeIdentifier": "t_int24",
															"typeString": "int24"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"condition": {
															"commonType": {
																"typeIdentifier": "t_int24",
																"typeString": "int24"
															},
															"id": 1289,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1287,
																"name": "tickLow",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1263,
																"src": "8537:7:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_int24",
																	"typeString": "int24"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"id": 1288,
																"name": "tickHi",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1275,
																"src": "8548:6:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_int24",
																	"typeString": "int24"
																}
															},
															"src": "8537:17:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"falseExpression": {
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																},
																"id": 1295,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"arguments": [
																		{
																			"id": 1292,
																			"name": "tickHi",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1275,
																			"src": "8586:6:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int24",
																				"typeString": "int24"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_int24",
																				"typeString": "int24"
																			}
																		],
																		"id": 1291,
																		"name": "getSqrtRatioAtTick",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1164,
																		"src": "8567:18:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_pure$_t_int24_$returns$_t_uint160_$",
																			"typeString": "function (int24) pure returns (uint160)"
																		}
																	},
																	"id": 1293,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "8567:26:12",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<=",
																"rightExpression": {
																	"id": 1294,
																	"name": "sqrtPriceX96",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1167,
																	"src": "8597:12:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																},
																"src": "8567:42:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"falseExpression": {
																"id": 1297,
																"name": "tickLow",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1263,
																"src": "8621:7:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_int24",
																	"typeString": "int24"
																}
															},
															"id": 1298,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "Conditional",
															"src": "8567:61:12",
															"trueExpression": {
																"id": 1296,
																"name": "tickHi",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1275,
																"src": "8612:6:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_int24",
																	"typeString": "int24"
																}
															},
															"typeDescriptions": {
																"typeIdentifier": "t_int24",
																"typeString": "int24"
															}
														},
														"id": 1299,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "Conditional",
														"src": "8537:91:12",
														"trueExpression": {
															"id": 1290,
															"name": "tickLow",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1263,
															"src": "8557:7:12",
															"typeDescriptions": {
																"typeIdentifier": "t_int24",
																"typeString": "int24"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_int24",
															"typeString": "int24"
														}
													},
													"src": "8530:98:12",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"id": 1301,
												"nodeType": "ExpressionStatement",
												"src": "8530:98:12"
											}
										]
									},
									"documentation": {
										"id": 1165,
										"nodeType": "StructuredDocumentation",
										"src": "3941:408:12",
										"text": "@notice Calculates the greatest tick value such that getRatioAtTick(tick) <= ratio\n @dev Throws in case sqrtPriceX96 < MIN_SQRT_RATIO, as MIN_SQRT_RATIO is the lowest value getRatioAtTick may\n ever return.\n @param sqrtPriceX96 The sqrt ratio for which to compute the tick as a Q64.96\n @return tick The greatest tick for which the ratio is less than or equal to the input ratio"
									},
									"id": 1303,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getTickAtSqrtRatio",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1168,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1167,
												"mutability": "mutable",
												"name": "sqrtPriceX96",
												"nodeType": "VariableDeclaration",
												"scope": 1303,
												"src": "4382:20:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 1166,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "4382:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4381:22:12"
									},
									"returnParameters": {
										"id": 1171,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1170,
												"mutability": "mutable",
												"name": "tick",
												"nodeType": "VariableDeclaration",
												"scope": 1303,
												"src": "4427:10:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 1169,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "4427:5:12",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4426:12:12"
									},
									"scope": 1304,
									"src": "4354:4281:12",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 1305,
							"src": "306:8331:12"
						}
					],
					"src": "45:8593:12"
				},
				"id": 12
			},
			"contracts/SwapRouter.sol": {
				"ast": {
					"absolutePath": "contracts/SwapRouter.sol",
					"exportedSymbols": {
						"BlockTimestamp": [
							1984
						],
						"BytesLib": [
							3092
						],
						"CallbackValidation": [
							3154
						],
						"IERC20": [
							113
						],
						"IERC20Permit": [
							35
						],
						"IERC20PermitAllowed": [
							2956
						],
						"IMulticall": [
							2693
						],
						"IPeripheryImmutableState": [
							2709
						],
						"IPeripheryPayments": [
							2735
						],
						"IPeripheryPaymentsWithFee": [
							2768
						],
						"ISelfPermit": [
							2836
						],
						"ISwapRouter": [
							2932
						],
						"IUniswapV3Pool": [
							135
						],
						"IUniswapV3PoolActions": [
							245
						],
						"IUniswapV3PoolDerivedState": [
							276
						],
						"IUniswapV3PoolEvents": [
							395
						],
						"IUniswapV3PoolImmutables": [
							435
						],
						"IUniswapV3PoolOwnerActions": [
							461
						],
						"IUniswapV3PoolState": [
							569
						],
						"IUniswapV3SwapCallback": [
							149
						],
						"IWETH9": [
							2973
						],
						"LowGasSafeMath": [
							699
						],
						"Multicall": [
							2069
						],
						"Path": [
							3287
						],
						"PeripheryImmutableState": [
							2100
						],
						"PeripheryPayments": [
							2310
						],
						"PeripheryPaymentsWithFee": [
							2491
						],
						"PeripheryValidation": [
							2511
						],
						"PoolAddress": [
							3379
						],
						"SafeCast": [
							769
						],
						"SelfPermit": [
							2678
						],
						"SwapRouter": [
							1970
						],
						"TickMath": [
							1304
						],
						"TransferHelper": [
							3550
						]
					},
					"id": 1971,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1306,
							"literals": [
								"solidity",
								"=",
								"0.7",
								".6"
							],
							"nodeType": "PragmaDirective",
							"src": "45:23:13"
						},
						{
							"id": 1307,
							"literals": [
								"abicoder",
								"v2"
							],
							"nodeType": "PragmaDirective",
							"src": "69:19:13"
						},
						{
							"absolutePath": "@uniswap/v3-core/contracts/libraries/SafeCast.sol",
							"file": "@uniswap/v3-core/contracts/libraries/SafeCast.sol",
							"id": 1308,
							"nodeType": "ImportDirective",
							"scope": 1971,
							"sourceUnit": 770,
							"src": "90:59:13",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@uniswap/v3-core/contracts/libraries/TickMath.sol",
							"file": "@uniswap/v3-core/contracts/libraries/TickMath.sol",
							"id": 1309,
							"nodeType": "ImportDirective",
							"scope": 1971,
							"sourceUnit": 1305,
							"src": "150:59:13",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol",
							"file": "@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol",
							"id": 1310,
							"nodeType": "ImportDirective",
							"scope": 1971,
							"sourceUnit": 136,
							"src": "210:66:13",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/interfaces/ISwapRouter.sol",
							"file": "./interfaces/ISwapRouter.sol",
							"id": 1311,
							"nodeType": "ImportDirective",
							"scope": 1971,
							"sourceUnit": 2933,
							"src": "278:38:13",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/base/PeripheryImmutableState.sol",
							"file": "./base/PeripheryImmutableState.sol",
							"id": 1312,
							"nodeType": "ImportDirective",
							"scope": 1971,
							"sourceUnit": 2101,
							"src": "317:44:13",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/base/PeripheryValidation.sol",
							"file": "./base/PeripheryValidation.sol",
							"id": 1313,
							"nodeType": "ImportDirective",
							"scope": 1971,
							"sourceUnit": 2512,
							"src": "362:40:13",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/base/PeripheryPaymentsWithFee.sol",
							"file": "./base/PeripheryPaymentsWithFee.sol",
							"id": 1314,
							"nodeType": "ImportDirective",
							"scope": 1971,
							"sourceUnit": 2492,
							"src": "403:45:13",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/base/Multicall.sol",
							"file": "./base/Multicall.sol",
							"id": 1315,
							"nodeType": "ImportDirective",
							"scope": 1971,
							"sourceUnit": 2070,
							"src": "449:30:13",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/base/SelfPermit.sol",
							"file": "./base/SelfPermit.sol",
							"id": 1316,
							"nodeType": "ImportDirective",
							"scope": 1971,
							"sourceUnit": 2679,
							"src": "480:31:13",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/libraries/Path.sol",
							"file": "./libraries/Path.sol",
							"id": 1317,
							"nodeType": "ImportDirective",
							"scope": 1971,
							"sourceUnit": 3288,
							"src": "512:30:13",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/libraries/PoolAddress.sol",
							"file": "./libraries/PoolAddress.sol",
							"id": 1318,
							"nodeType": "ImportDirective",
							"scope": 1971,
							"sourceUnit": 3380,
							"src": "543:37:13",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/libraries/CallbackValidation.sol",
							"file": "./libraries/CallbackValidation.sol",
							"id": 1319,
							"nodeType": "ImportDirective",
							"scope": 1971,
							"sourceUnit": 3155,
							"src": "581:44:13",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/interfaces/external/IWETH9.sol",
							"file": "./interfaces/external/IWETH9.sol",
							"id": 1320,
							"nodeType": "ImportDirective",
							"scope": 1971,
							"sourceUnit": 2974,
							"src": "626:42:13",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 1322,
										"name": "ISwapRouter",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 2932,
										"src": "802:11:13",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_ISwapRouter_$2932",
											"typeString": "contract ISwapRouter"
										}
									},
									"id": 1323,
									"nodeType": "InheritanceSpecifier",
									"src": "802:11:13"
								},
								{
									"baseName": {
										"id": 1324,
										"name": "PeripheryImmutableState",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 2100,
										"src": "819:23:13",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_PeripheryImmutableState_$2100",
											"typeString": "contract PeripheryImmutableState"
										}
									},
									"id": 1325,
									"nodeType": "InheritanceSpecifier",
									"src": "819:23:13"
								},
								{
									"baseName": {
										"id": 1326,
										"name": "PeripheryValidation",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 2511,
										"src": "848:19:13",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_PeripheryValidation_$2511",
											"typeString": "contract PeripheryValidation"
										}
									},
									"id": 1327,
									"nodeType": "InheritanceSpecifier",
									"src": "848:19:13"
								},
								{
									"baseName": {
										"id": 1328,
										"name": "PeripheryPaymentsWithFee",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 2491,
										"src": "873:24:13",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_PeripheryPaymentsWithFee_$2491",
											"typeString": "contract PeripheryPaymentsWithFee"
										}
									},
									"id": 1329,
									"nodeType": "InheritanceSpecifier",
									"src": "873:24:13"
								},
								{
									"baseName": {
										"id": 1330,
										"name": "Multicall",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 2069,
										"src": "903:9:13",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_Multicall_$2069",
											"typeString": "contract Multicall"
										}
									},
									"id": 1331,
									"nodeType": "InheritanceSpecifier",
									"src": "903:9:13"
								},
								{
									"baseName": {
										"id": 1332,
										"name": "SelfPermit",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 2678,
										"src": "918:10:13",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_SelfPermit_$2678",
											"typeString": "contract SelfPermit"
										}
									},
									"id": 1333,
									"nodeType": "InheritanceSpecifier",
									"src": "918:10:13"
								}
							],
							"contractDependencies": [
								149,
								1984,
								2069,
								2100,
								2310,
								2491,
								2511,
								2678,
								2693,
								2709,
								2735,
								2768,
								2836,
								2932
							],
							"contractKind": "contract",
							"documentation": {
								"id": 1321,
								"nodeType": "StructuredDocumentation",
								"src": "670:105:13",
								"text": "@title Uniswap V3 Swap Router\n @notice Router for stateless execution of swaps against Uniswap V3"
							},
							"fullyImplemented": true,
							"id": 1970,
							"linearizedBaseContracts": [
								1970,
								2678,
								2836,
								2069,
								2693,
								2491,
								2768,
								2310,
								2511,
								2100,
								2709,
								2735,
								1984,
								2932,
								149
							],
							"name": "SwapRouter",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"id": 1336,
									"libraryName": {
										"id": 1334,
										"name": "Path",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 3287,
										"src": "941:4:13",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_Path_$3287",
											"typeString": "library Path"
										}
									},
									"nodeType": "UsingForDirective",
									"src": "935:21:13",
									"typeName": {
										"id": 1335,
										"name": "bytes",
										"nodeType": "ElementaryTypeName",
										"src": "950:5:13",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes_storage_ptr",
											"typeString": "bytes"
										}
									}
								},
								{
									"id": 1339,
									"libraryName": {
										"id": 1337,
										"name": "SafeCast",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 769,
										"src": "967:8:13",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_SafeCast_$769",
											"typeString": "library SafeCast"
										}
									},
									"nodeType": "UsingForDirective",
									"src": "961:27:13",
									"typeName": {
										"id": 1338,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "980:7:13",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									}
								},
								{
									"constant": true,
									"documentation": {
										"id": 1340,
										"nodeType": "StructuredDocumentation",
										"src": "994:155:13",
										"text": "@dev Used as the placeholder value for amountInCached, because the computed amount in for an exact output swap\n can never actually be this value"
									},
									"id": 1347,
									"mutability": "constant",
									"name": "DEFAULT_AMOUNT_IN_CACHED",
									"nodeType": "VariableDeclaration",
									"scope": 1970,
									"src": "1154:69:13",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 1341,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1154:7:13",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"expression": {
											"arguments": [
												{
													"id": 1344,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"lValueRequested": false,
													"nodeType": "ElementaryTypeNameExpression",
													"src": "1211:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_type$_t_uint256_$",
														"typeString": "type(uint256)"
													},
													"typeName": {
														"id": 1343,
														"name": "uint256",
														"nodeType": "ElementaryTypeName",
														"src": "1211:7:13",
														"typeDescriptions": {}
													}
												}
											],
											"expression": {
												"argumentTypes": [
													{
														"typeIdentifier": "t_type$_t_uint256_$",
														"typeString": "type(uint256)"
													}
												],
												"id": 1342,
												"name": "type",
												"nodeType": "Identifier",
												"overloadedDeclarations": [],
												"referencedDeclaration": 4294967269,
												"src": "1206:4:13",
												"typeDescriptions": {
													"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
													"typeString": "function () pure"
												}
											},
											"id": 1345,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "functionCall",
											"lValueRequested": false,
											"names": [],
											"nodeType": "FunctionCall",
											"src": "1206:13:13",
											"tryCall": false,
											"typeDescriptions": {
												"typeIdentifier": "t_magic_meta_type_t_uint256",
												"typeString": "type(uint256)"
											}
										},
										"id": 1346,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"lValueRequested": false,
										"memberName": "max",
										"nodeType": "MemberAccess",
										"src": "1206:17:13",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"documentation": {
										"id": 1348,
										"nodeType": "StructuredDocumentation",
										"src": "1230:103:13",
										"text": "@dev Transient storage variable used for returning the computed amount in for an exact output swap."
									},
									"id": 1351,
									"mutability": "mutable",
									"name": "amountInCached",
									"nodeType": "VariableDeclaration",
									"scope": 1970,
									"src": "1338:57:13",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 1349,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1338:7:13",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"id": 1350,
										"name": "DEFAULT_AMOUNT_IN_CACHED",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1347,
										"src": "1371:24:13",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 1362,
										"nodeType": "Block",
										"src": "1490:2:13",
										"statements": []
									},
									"id": 1363,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [
										{
											"arguments": [
												{
													"id": 1358,
													"name": "_factory",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1353,
													"src": "1472:8:13",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												{
													"id": 1359,
													"name": "_WETH9",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1355,
													"src": "1482:6:13",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												}
											],
											"id": 1360,
											"modifierName": {
												"id": 1357,
												"name": "PeripheryImmutableState",
												"nodeType": "Identifier",
												"overloadedDeclarations": [],
												"referencedDeclaration": 2100,
												"src": "1448:23:13",
												"typeDescriptions": {
													"typeIdentifier": "t_type$_t_contract$_PeripheryImmutableState_$2100_$",
													"typeString": "type(contract PeripheryImmutableState)"
												}
											},
											"nodeType": "ModifierInvocation",
											"src": "1448:41:13"
										}
									],
									"name": "",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1356,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1353,
												"mutability": "mutable",
												"name": "_factory",
												"nodeType": "VariableDeclaration",
												"scope": 1363,
												"src": "1414:16:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1352,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1414:7:13",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1355,
												"mutability": "mutable",
												"name": "_WETH9",
												"nodeType": "VariableDeclaration",
												"scope": 1363,
												"src": "1432:14:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1354,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1432:7:13",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1413:34:13"
									},
									"returnParameters": {
										"id": 1361,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1490:0:13"
									},
									"scope": 1970,
									"src": "1402:90:13",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1388,
										"nodeType": "Block",
										"src": "1731:120:13",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 1378,
																	"name": "factory",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2079,
																	"src": "1790:7:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"arguments": [
																		{
																			"id": 1381,
																			"name": "tokenA",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1366,
																			"src": "1822:6:13",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		{
																			"id": 1382,
																			"name": "tokenB",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1368,
																			"src": "1830:6:13",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		{
																			"id": 1383,
																			"name": "fee",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1370,
																			"src": "1838:3:13",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint24",
																				"typeString": "uint24"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			},
																			{
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			},
																			{
																				"typeIdentifier": "t_uint24",
																				"typeString": "uint24"
																			}
																		],
																		"expression": {
																			"id": 1379,
																			"name": "PoolAddress",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3379,
																			"src": "1799:11:13",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_PoolAddress_$3379_$",
																				"typeString": "type(library PoolAddress)"
																			}
																		},
																		"id": 1380,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "getPoolKey",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 3331,
																		"src": "1799:22:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_pure$_t_address_$_t_address_$_t_uint24_$returns$_t_struct$_PoolKey_$3300_memory_ptr_$",
																			"typeString": "function (address,address,uint24) pure returns (struct PoolAddress.PoolKey memory)"
																		}
																	},
																	"id": 1384,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "1799:43:13",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_PoolKey_$3300_memory_ptr",
																		"typeString": "struct PoolAddress.PoolKey memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_struct$_PoolKey_$3300_memory_ptr",
																		"typeString": "struct PoolAddress.PoolKey memory"
																	}
																],
																"expression": {
																	"id": 1376,
																	"name": "PoolAddress",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3379,
																	"src": "1763:11:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_contract$_PoolAddress_$3379_$",
																		"typeString": "type(library PoolAddress)"
																	}
																},
																"id": 1377,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "computeAddress",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 3378,
																"src": "1763:26:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_address_$_t_struct$_PoolKey_$3300_memory_ptr_$returns$_t_address_$",
																	"typeString": "function (address,struct PoolAddress.PoolKey memory) pure returns (address)"
																}
															},
															"id": 1385,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1763:80:13",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 1375,
														"name": "IUniswapV3Pool",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 135,
														"src": "1748:14:13",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_contract$_IUniswapV3Pool_$135_$",
															"typeString": "type(contract IUniswapV3Pool)"
														}
													},
													"id": 1386,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1748:96:13",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IUniswapV3Pool_$135",
														"typeString": "contract IUniswapV3Pool"
													}
												},
												"functionReturnParameters": 1374,
												"id": 1387,
												"nodeType": "Return",
												"src": "1741:103:13"
											}
										]
									},
									"documentation": {
										"id": 1364,
										"nodeType": "StructuredDocumentation",
										"src": "1498:99:13",
										"text": "@dev Returns the pool for the given token pair and fee. The pool contract may or may not exist."
									},
									"id": 1389,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getPool",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1371,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1366,
												"mutability": "mutable",
												"name": "tokenA",
												"nodeType": "VariableDeclaration",
												"scope": 1389,
												"src": "1628:14:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1365,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1628:7:13",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1368,
												"mutability": "mutable",
												"name": "tokenB",
												"nodeType": "VariableDeclaration",
												"scope": 1389,
												"src": "1652:14:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1367,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1652:7:13",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1370,
												"mutability": "mutable",
												"name": "fee",
												"nodeType": "VariableDeclaration",
												"scope": 1389,
												"src": "1676:10:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint24",
													"typeString": "uint24"
												},
												"typeName": {
													"id": 1369,
													"name": "uint24",
													"nodeType": "ElementaryTypeName",
													"src": "1676:6:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint24",
														"typeString": "uint24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1618:74:13"
									},
									"returnParameters": {
										"id": 1374,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1373,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1389,
												"src": "1715:14:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IUniswapV3Pool_$135",
													"typeString": "contract IUniswapV3Pool"
												},
												"typeName": {
													"id": 1372,
													"name": "IUniswapV3Pool",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 135,
													"src": "1715:14:13",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IUniswapV3Pool_$135",
														"typeString": "contract IUniswapV3Pool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1714:16:13"
									},
									"scope": 1970,
									"src": "1602:249:13",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "private"
								},
								{
									"canonicalName": "SwapRouter.SwapCallbackData",
									"id": 1394,
									"members": [
										{
											"constant": false,
											"id": 1391,
											"mutability": "mutable",
											"name": "path",
											"nodeType": "VariableDeclaration",
											"scope": 1394,
											"src": "1891:10:13",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bytes_storage_ptr",
												"typeString": "bytes"
											},
											"typeName": {
												"id": 1390,
												"name": "bytes",
												"nodeType": "ElementaryTypeName",
												"src": "1891:5:13",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_storage_ptr",
													"typeString": "bytes"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1393,
											"mutability": "mutable",
											"name": "payer",
											"nodeType": "VariableDeclaration",
											"scope": 1394,
											"src": "1911:13:13",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 1392,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "1911:7:13",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "SwapCallbackData",
									"nodeType": "StructDefinition",
									"scope": 1970,
									"src": "1857:74:13",
									"visibility": "public"
								},
								{
									"baseFunctions": [
										148
									],
									"body": {
										"id": 1523,
										"nodeType": "Block",
										"src": "2123:1151:13",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 1412,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																},
																"id": 1408,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1406,
																	"name": "amount0Delta",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1397,
																	"src": "2141:12:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">",
																"rightExpression": {
																	"hexValue": "30",
																	"id": 1407,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2156:1:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "2141:16:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "||",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																},
																"id": 1411,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1409,
																	"name": "amount1Delta",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1399,
																	"src": "2161:12:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">",
																"rightExpression": {
																	"hexValue": "30",
																	"id": 1410,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2176:1:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "2161:16:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "2141:36:13",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 1405,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2133:7:13",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 1413,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2133:45:13",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1414,
												"nodeType": "ExpressionStatement",
												"src": "2133:45:13"
											},
											{
												"assignments": [
													1416
												],
												"declarations": [
													{
														"constant": false,
														"id": 1416,
														"mutability": "mutable",
														"name": "data",
														"nodeType": "VariableDeclaration",
														"scope": 1523,
														"src": "2251:28:13",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_SwapCallbackData_$1394_memory_ptr",
															"typeString": "struct SwapRouter.SwapCallbackData"
														},
														"typeName": {
															"id": 1415,
															"name": "SwapCallbackData",
															"nodeType": "UserDefinedTypeName",
															"referencedDeclaration": 1394,
															"src": "2251:16:13",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_SwapCallbackData_$1394_storage_ptr",
																"typeString": "struct SwapRouter.SwapCallbackData"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1423,
												"initialValue": {
													"arguments": [
														{
															"id": 1419,
															"name": "_data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1401,
															"src": "2293:5:13",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_calldata_ptr",
																"typeString": "bytes calldata"
															}
														},
														{
															"components": [
																{
																	"id": 1420,
																	"name": "SwapCallbackData",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1394,
																	"src": "2301:16:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_struct$_SwapCallbackData_$1394_storage_ptr_$",
																		"typeString": "type(struct SwapRouter.SwapCallbackData storage pointer)"
																	}
																}
															],
															"id": 1421,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "2300:18:13",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_struct$_SwapCallbackData_$1394_storage_ptr_$",
																"typeString": "type(struct SwapRouter.SwapCallbackData storage pointer)"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_calldata_ptr",
																"typeString": "bytes calldata"
															},
															{
																"typeIdentifier": "t_type$_t_struct$_SwapCallbackData_$1394_storage_ptr_$",
																"typeString": "type(struct SwapRouter.SwapCallbackData storage pointer)"
															}
														],
														"expression": {
															"id": 1417,
															"name": "abi",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967295,
															"src": "2282:3:13",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_abi",
																"typeString": "abi"
															}
														},
														"id": 1418,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberName": "decode",
														"nodeType": "MemberAccess",
														"src": "2282:10:13",
														"typeDescriptions": {
															"typeIdentifier": "t_function_abidecode_pure$__$returns$__$",
															"typeString": "function () pure"
														}
													},
													"id": 1422,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2282:37:13",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_SwapCallbackData_$1394_memory_ptr",
														"typeString": "struct SwapRouter.SwapCallbackData memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2251:68:13"
											},
											{
												"assignments": [
													1425,
													1427,
													1429
												],
												"declarations": [
													{
														"constant": false,
														"id": 1425,
														"mutability": "mutable",
														"name": "tokenIn",
														"nodeType": "VariableDeclaration",
														"scope": 1523,
														"src": "2330:15:13",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 1424,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "2330:7:13",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 1427,
														"mutability": "mutable",
														"name": "tokenOut",
														"nodeType": "VariableDeclaration",
														"scope": 1523,
														"src": "2347:16:13",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 1426,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "2347:7:13",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 1429,
														"mutability": "mutable",
														"name": "fee",
														"nodeType": "VariableDeclaration",
														"scope": 1523,
														"src": "2365:10:13",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint24",
															"typeString": "uint24"
														},
														"typeName": {
															"id": 1428,
															"name": "uint24",
															"nodeType": "ElementaryTypeName",
															"src": "2365:6:13",
															"typeDescriptions": {
																"typeIdentifier": "t_uint24",
																"typeString": "uint24"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1434,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"expression": {
															"expression": {
																"id": 1430,
																"name": "data",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1416,
																"src": "2379:4:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_SwapCallbackData_$1394_memory_ptr",
																	"typeString": "struct SwapRouter.SwapCallbackData memory"
																}
															},
															"id": 1431,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "path",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1391,
															"src": "2379:9:13",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 1432,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "decodeFirstPool",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 3253,
														"src": "2379:25:13",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$returns$_t_address_$_t_address_$_t_uint24_$bound_to$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) pure returns (address,address,uint24)"
														}
													},
													"id": 1433,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2379:27:13",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_address_$_t_address_$_t_uint24_$",
														"typeString": "tuple(address,address,uint24)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2329:77:13"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1438,
															"name": "factory",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2079,
															"src": "2450:7:13",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1439,
															"name": "tokenIn",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1425,
															"src": "2459:7:13",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1440,
															"name": "tokenOut",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1427,
															"src": "2468:8:13",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1441,
															"name": "fee",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1429,
															"src": "2478:3:13",
															"typeDescriptions": {
																"typeIdentifier": "t_uint24",
																"typeString": "uint24"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint24",
																"typeString": "uint24"
															}
														],
														"expression": {
															"id": 1435,
															"name": "CallbackValidation",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3154,
															"src": "2416:18:13",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_CallbackValidation_$3154_$",
																"typeString": "type(library CallbackValidation)"
															}
														},
														"id": 1437,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "verifyCallback",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 3122,
														"src": "2416:33:13",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$_t_address_$_t_uint24_$returns$_t_contract$_IUniswapV3Pool_$135_$",
															"typeString": "function (address,address,address,uint24) view returns (contract IUniswapV3Pool)"
														}
													},
													"id": 1442,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2416:66:13",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IUniswapV3Pool_$135",
														"typeString": "contract IUniswapV3Pool"
													}
												},
												"id": 1443,
												"nodeType": "ExpressionStatement",
												"src": "2416:66:13"
											},
											{
												"assignments": [
													1445,
													1447
												],
												"declarations": [
													{
														"constant": false,
														"id": 1445,
														"mutability": "mutable",
														"name": "isExactInput",
														"nodeType": "VariableDeclaration",
														"scope": 1523,
														"src": "2494:17:13",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 1444,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "2494:4:13",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 1447,
														"mutability": "mutable",
														"name": "amountToPay",
														"nodeType": "VariableDeclaration",
														"scope": 1523,
														"src": "2513:19:13",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1446,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2513:7:13",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1468,
												"initialValue": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														},
														"id": 1450,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1448,
															"name": "amount0Delta",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1397,
															"src": "2548:12:13",
															"typeDescriptions": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": ">",
														"rightExpression": {
															"hexValue": "30",
															"id": 1449,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2563:1:13",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "2548:16:13",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																},
																"id": 1461,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1459,
																	"name": "tokenOut",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1427,
																	"src": "2646:8:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<",
																"rightExpression": {
																	"id": 1460,
																	"name": "tokenIn",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1425,
																	"src": "2657:7:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"src": "2646:18:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															{
																"arguments": [
																	{
																		"id": 1464,
																		"name": "amount1Delta",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1399,
																		"src": "2674:12:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_int256",
																			"typeString": "int256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_int256",
																			"typeString": "int256"
																		}
																	],
																	"id": 1463,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "2666:7:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint256_$",
																		"typeString": "type(uint256)"
																	},
																	"typeName": {
																		"id": 1462,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "2666:7:13",
																		"typeDescriptions": {}
																	}
																},
																"id": 1465,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2666:21:13",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"id": 1466,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "2645:43:13",
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
															"typeString": "tuple(bool,uint256)"
														}
													},
													"id": 1467,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "2548:140:13",
													"trueExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																},
																"id": 1453,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1451,
																	"name": "tokenIn",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1425,
																	"src": "2584:7:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<",
																"rightExpression": {
																	"id": 1452,
																	"name": "tokenOut",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1427,
																	"src": "2594:8:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"src": "2584:18:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															{
																"arguments": [
																	{
																		"id": 1456,
																		"name": "amount0Delta",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1397,
																		"src": "2612:12:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_int256",
																			"typeString": "int256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_int256",
																			"typeString": "int256"
																		}
																	],
																	"id": 1455,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "2604:7:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint256_$",
																		"typeString": "type(uint256)"
																	},
																	"typeName": {
																		"id": 1454,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "2604:7:13",
																		"typeDescriptions": {}
																	}
																},
																"id": 1457,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2604:21:13",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"id": 1458,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "2583:43:13",
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
															"typeString": "tuple(bool,uint256)"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
														"typeString": "tuple(bool,uint256)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2493:195:13"
											},
											{
												"condition": {
													"id": 1469,
													"name": "isExactInput",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1445,
													"src": "2702:12:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 1521,
													"nodeType": "Block",
													"src": "2796:472:13",
													"statements": [
														{
															"condition": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"expression": {
																		"expression": {
																			"id": 1480,
																			"name": "data",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1416,
																			"src": "2866:4:13",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_SwapCallbackData_$1394_memory_ptr",
																				"typeString": "struct SwapRouter.SwapCallbackData memory"
																			}
																		},
																		"id": 1481,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "path",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 1391,
																		"src": "2866:9:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	"id": 1482,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "hasMultiplePools",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 3201,
																	"src": "2866:26:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$returns$_t_bool_$bound_to$_t_bytes_memory_ptr_$",
																		"typeString": "function (bytes memory) pure returns (bool)"
																	}
																},
																"id": 1483,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2866:28:13",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"falseBody": {
																"id": 1519,
																"nodeType": "Block",
																"src": "3039:219:13",
																"statements": [
																	{
																		"expression": {
																			"id": 1504,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftHandSide": {
																				"id": 1502,
																				"name": "amountInCached",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1351,
																				"src": "3057:14:13",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "Assignment",
																			"operator": "=",
																			"rightHandSide": {
																				"id": 1503,
																				"name": "amountToPay",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1447,
																				"src": "3074:11:13",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "3057:28:13",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"id": 1505,
																		"nodeType": "ExpressionStatement",
																		"src": "3057:28:13"
																	},
																	{
																		"expression": {
																			"id": 1508,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftHandSide": {
																				"id": 1506,
																				"name": "tokenIn",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1425,
																				"src": "3103:7:13",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			"nodeType": "Assignment",
																			"operator": "=",
																			"rightHandSide": {
																				"id": 1507,
																				"name": "tokenOut",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1427,
																				"src": "3113:8:13",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			"src": "3103:18:13",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		"id": 1509,
																		"nodeType": "ExpressionStatement",
																		"src": "3103:18:13"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"id": 1511,
																					"name": "tokenIn",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1425,
																					"src": "3198:7:13",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				{
																					"expression": {
																						"id": 1512,
																						"name": "data",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1416,
																						"src": "3207:4:13",
																						"typeDescriptions": {
																							"typeIdentifier": "t_struct$_SwapCallbackData_$1394_memory_ptr",
																							"typeString": "struct SwapRouter.SwapCallbackData memory"
																						}
																					},
																					"id": 1513,
																					"isConstant": false,
																					"isLValue": true,
																					"isPure": false,
																					"lValueRequested": false,
																					"memberName": "payer",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 1393,
																					"src": "3207:10:13",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				{
																					"expression": {
																						"id": 1514,
																						"name": "msg",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 4294967281,
																						"src": "3219:3:13",
																						"typeDescriptions": {
																							"typeIdentifier": "t_magic_message",
																							"typeString": "msg"
																						}
																					},
																					"id": 1515,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"memberName": "sender",
																					"nodeType": "MemberAccess",
																					"src": "3219:10:13",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address_payable",
																						"typeString": "address payable"
																					}
																				},
																				{
																					"id": 1516,
																					"name": "amountToPay",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1447,
																					"src": "3231:11:13",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					},
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					},
																					{
																						"typeIdentifier": "t_address_payable",
																						"typeString": "address payable"
																					},
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				],
																				"id": 1510,
																				"name": "pay",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2309,
																				"src": "3194:3:13",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_uint256_$returns$__$",
																					"typeString": "function (address,address,address,uint256)"
																				}
																			},
																			"id": 1517,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "3194:49:13",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_tuple$__$",
																				"typeString": "tuple()"
																			}
																		},
																		"id": 1518,
																		"nodeType": "ExpressionStatement",
																		"src": "3194:49:13"
																	}
																]
															},
															"id": 1520,
															"nodeType": "IfStatement",
															"src": "2862:396:13",
															"trueBody": {
																"id": 1501,
																"nodeType": "Block",
																"src": "2896:137:13",
																"statements": [
																	{
																		"expression": {
																			"id": 1491,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftHandSide": {
																				"expression": {
																					"id": 1484,
																					"name": "data",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1416,
																					"src": "2914:4:13",
																					"typeDescriptions": {
																						"typeIdentifier": "t_struct$_SwapCallbackData_$1394_memory_ptr",
																						"typeString": "struct SwapRouter.SwapCallbackData memory"
																					}
																				},
																				"id": 1486,
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": true,
																				"memberName": "path",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 1391,
																				"src": "2914:9:13",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes_memory_ptr",
																					"typeString": "bytes memory"
																				}
																			},
																			"nodeType": "Assignment",
																			"operator": "=",
																			"rightHandSide": {
																				"arguments": [],
																				"expression": {
																					"argumentTypes": [],
																					"expression": {
																						"expression": {
																							"id": 1487,
																							"name": "data",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 1416,
																							"src": "2926:4:13",
																							"typeDescriptions": {
																								"typeIdentifier": "t_struct$_SwapCallbackData_$1394_memory_ptr",
																								"typeString": "struct SwapRouter.SwapCallbackData memory"
																							}
																						},
																						"id": 1488,
																						"isConstant": false,
																						"isLValue": true,
																						"isPure": false,
																						"lValueRequested": false,
																						"memberName": "path",
																						"nodeType": "MemberAccess",
																						"referencedDeclaration": 1391,
																						"src": "2926:9:13",
																						"typeDescriptions": {
																							"typeIdentifier": "t_bytes_memory_ptr",
																							"typeString": "bytes memory"
																						}
																					},
																					"id": 1489,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"memberName": "skipToken",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 3286,
																					"src": "2926:19:13",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$returns$_t_bytes_memory_ptr_$bound_to$_t_bytes_memory_ptr_$",
																						"typeString": "function (bytes memory) pure returns (bytes memory)"
																					}
																				},
																				"id": 1490,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "functionCall",
																				"lValueRequested": false,
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "2926:21:13",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes_memory_ptr",
																					"typeString": "bytes memory"
																				}
																			},
																			"src": "2914:33:13",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes_memory_ptr",
																				"typeString": "bytes memory"
																			}
																		},
																		"id": 1492,
																		"nodeType": "ExpressionStatement",
																		"src": "2914:33:13"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"id": 1494,
																					"name": "amountToPay",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1447,
																					"src": "2985:11:13",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				{
																					"expression": {
																						"id": 1495,
																						"name": "msg",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 4294967281,
																						"src": "2998:3:13",
																						"typeDescriptions": {
																							"typeIdentifier": "t_magic_message",
																							"typeString": "msg"
																						}
																					},
																					"id": 1496,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"memberName": "sender",
																					"nodeType": "MemberAccess",
																					"src": "2998:10:13",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address_payable",
																						"typeString": "address payable"
																					}
																				},
																				{
																					"hexValue": "30",
																					"id": 1497,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "number",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "3010:1:13",
																					"typeDescriptions": {
																						"typeIdentifier": "t_rational_0_by_1",
																						"typeString": "int_const 0"
																					},
																					"value": "0"
																				},
																				{
																					"id": 1498,
																					"name": "data",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1416,
																					"src": "3013:4:13",
																					"typeDescriptions": {
																						"typeIdentifier": "t_struct$_SwapCallbackData_$1394_memory_ptr",
																						"typeString": "struct SwapRouter.SwapCallbackData memory"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					{
																						"typeIdentifier": "t_address_payable",
																						"typeString": "address payable"
																					},
																					{
																						"typeIdentifier": "t_rational_0_by_1",
																						"typeString": "int_const 0"
																					},
																					{
																						"typeIdentifier": "t_struct$_SwapCallbackData_$1394_memory_ptr",
																						"typeString": "struct SwapRouter.SwapCallbackData memory"
																					}
																				],
																				"id": 1493,
																				"name": "exactOutputInternal",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1875,
																				"src": "2965:19:13",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$_t_address_$_t_uint160_$_t_struct$_SwapCallbackData_$1394_memory_ptr_$returns$_t_uint256_$",
																					"typeString": "function (uint256,address,uint160,struct SwapRouter.SwapCallbackData memory) returns (uint256)"
																				}
																			},
																			"id": 1499,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "2965:53:13",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"id": 1500,
																		"nodeType": "ExpressionStatement",
																		"src": "2965:53:13"
																	}
																]
															}
														}
													]
												},
												"id": 1522,
												"nodeType": "IfStatement",
												"src": "2698:570:13",
												"trueBody": {
													"id": 1479,
													"nodeType": "Block",
													"src": "2716:74:13",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 1471,
																		"name": "tokenIn",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1425,
																		"src": "2734:7:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"expression": {
																			"id": 1472,
																			"name": "data",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1416,
																			"src": "2743:4:13",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_SwapCallbackData_$1394_memory_ptr",
																				"typeString": "struct SwapRouter.SwapCallbackData memory"
																			}
																		},
																		"id": 1473,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "payer",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 1393,
																		"src": "2743:10:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"expression": {
																			"id": 1474,
																			"name": "msg",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967281,
																			"src": "2755:3:13",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_message",
																				"typeString": "msg"
																			}
																		},
																		"id": 1475,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "sender",
																		"nodeType": "MemberAccess",
																		"src": "2755:10:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address_payable",
																			"typeString": "address payable"
																		}
																	},
																	{
																		"id": 1476,
																		"name": "amountToPay",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1447,
																		"src": "2767:11:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_address_payable",
																			"typeString": "address payable"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 1470,
																	"name": "pay",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2309,
																	"src": "2730:3:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_uint256_$returns$__$",
																		"typeString": "function (address,address,address,uint256)"
																	}
																},
																"id": 1477,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2730:49:13",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1478,
															"nodeType": "ExpressionStatement",
															"src": "2730:49:13"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1395,
										"nodeType": "StructuredDocumentation",
										"src": "1937:38:13",
										"text": "@inheritdoc IUniswapV3SwapCallback"
									},
									"functionSelector": "fa461e33",
									"id": 1524,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "uniswapV3SwapCallback",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1403,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "2114:8:13"
									},
									"parameters": {
										"id": 1402,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1397,
												"mutability": "mutable",
												"name": "amount0Delta",
												"nodeType": "VariableDeclaration",
												"scope": 1524,
												"src": "2020:19:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 1396,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "2020:6:13",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1399,
												"mutability": "mutable",
												"name": "amount1Delta",
												"nodeType": "VariableDeclaration",
												"scope": 1524,
												"src": "2049:19:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 1398,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "2049:6:13",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1401,
												"mutability": "mutable",
												"name": "_data",
												"nodeType": "VariableDeclaration",
												"scope": 1524,
												"src": "2078:20:13",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1400,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "2078:5:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2010:94:13"
									},
									"returnParameters": {
										"id": 1404,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2123:0:13"
									},
									"scope": 1970,
									"src": "1980:1294:13",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1616,
										"nodeType": "Block",
										"src": "3524:738:13",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 1543,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1538,
														"name": "recipient",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1529,
														"src": "3601:9:13",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 1541,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "3622:1:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 1540,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "3614:7:13",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 1539,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "3614:7:13",
																"typeDescriptions": {}
															}
														},
														"id": 1542,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "3614:10:13",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address_payable",
															"typeString": "address payable"
														}
													},
													"src": "3601:23:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1551,
												"nodeType": "IfStatement",
												"src": "3597:54:13",
												"trueBody": {
													"expression": {
														"id": 1549,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 1544,
															"name": "recipient",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1529,
															"src": "3626:9:13",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"arguments": [
																{
																	"id": 1547,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "3646:4:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_SwapRouter_$1970",
																		"typeString": "contract SwapRouter"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_SwapRouter_$1970",
																		"typeString": "contract SwapRouter"
																	}
																],
																"id": 1546,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "3638:7:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1545,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "3638:7:13",
																	"typeDescriptions": {}
																}
															},
															"id": 1548,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3638:13:13",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														"src": "3626:25:13",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"id": 1550,
													"nodeType": "ExpressionStatement",
													"src": "3626:25:13"
												}
											},
											{
												"assignments": [
													1553,
													1555,
													1557
												],
												"declarations": [
													{
														"constant": false,
														"id": 1553,
														"mutability": "mutable",
														"name": "tokenIn",
														"nodeType": "VariableDeclaration",
														"scope": 1616,
														"src": "3663:15:13",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 1552,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "3663:7:13",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 1555,
														"mutability": "mutable",
														"name": "tokenOut",
														"nodeType": "VariableDeclaration",
														"scope": 1616,
														"src": "3680:16:13",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 1554,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "3680:7:13",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 1557,
														"mutability": "mutable",
														"name": "fee",
														"nodeType": "VariableDeclaration",
														"scope": 1616,
														"src": "3698:10:13",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint24",
															"typeString": "uint24"
														},
														"typeName": {
															"id": 1556,
															"name": "uint24",
															"nodeType": "ElementaryTypeName",
															"src": "3698:6:13",
															"typeDescriptions": {
																"typeIdentifier": "t_uint24",
																"typeString": "uint24"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1562,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"expression": {
															"expression": {
																"id": 1558,
																"name": "data",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1533,
																"src": "3712:4:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_SwapCallbackData_$1394_memory_ptr",
																	"typeString": "struct SwapRouter.SwapCallbackData memory"
																}
															},
															"id": 1559,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "path",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1391,
															"src": "3712:9:13",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 1560,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "decodeFirstPool",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 3253,
														"src": "3712:25:13",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$returns$_t_address_$_t_address_$_t_uint24_$bound_to$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) pure returns (address,address,uint24)"
														}
													},
													"id": 1561,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3712:27:13",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_address_$_t_address_$_t_uint24_$",
														"typeString": "tuple(address,address,uint24)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3662:77:13"
											},
											{
												"assignments": [
													1564
												],
												"declarations": [
													{
														"constant": false,
														"id": 1564,
														"mutability": "mutable",
														"name": "zeroForOne",
														"nodeType": "VariableDeclaration",
														"scope": 1616,
														"src": "3750:15:13",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 1563,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "3750:4:13",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1568,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 1567,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1565,
														"name": "tokenIn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1553,
														"src": "3768:7:13",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"id": 1566,
														"name": "tokenOut",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1555,
														"src": "3778:8:13",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "3768:18:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3750:36:13"
											},
											{
												"assignments": [
													1570,
													1572
												],
												"declarations": [
													{
														"constant": false,
														"id": 1570,
														"mutability": "mutable",
														"name": "amount0",
														"nodeType": "VariableDeclaration",
														"scope": 1616,
														"src": "3798:14:13",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														},
														"typeName": {
															"id": 1569,
															"name": "int256",
															"nodeType": "ElementaryTypeName",
															"src": "3798:6:13",
															"typeDescriptions": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 1572,
														"mutability": "mutable",
														"name": "amount1",
														"nodeType": "VariableDeclaration",
														"scope": 1616,
														"src": "3814:14:13",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														},
														"typeName": {
															"id": 1571,
															"name": "int256",
															"nodeType": "ElementaryTypeName",
															"src": "3814:6:13",
															"typeDescriptions": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1605,
												"initialValue": {
													"arguments": [
														{
															"id": 1579,
															"name": "recipient",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1529,
															"src": "3898:9:13",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1580,
															"name": "zeroForOne",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1564,
															"src": "3925:10:13",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"expression": {
																	"id": 1581,
																	"name": "amountIn",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1527,
																	"src": "3953:8:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"id": 1582,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "toInt256",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 768,
																"src": "3953:17:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_int256_$bound_to$_t_uint256_$",
																	"typeString": "function (uint256) pure returns (int256)"
																}
															},
															"id": 1583,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3953:19:13",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														},
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																},
																"id": 1586,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1584,
																	"name": "sqrtPriceLimitX96",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1531,
																	"src": "3990:17:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"hexValue": "30",
																	"id": 1585,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "4011:1:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "3990:22:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"falseExpression": {
																"id": 1598,
																"name": "sqrtPriceLimitX96",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1531,
																"src": "4130:17:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																}
															},
															"id": 1599,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "Conditional",
															"src": "3990:157:13",
															"trueExpression": {
																"components": [
																	{
																		"condition": {
																			"id": 1587,
																			"name": "zeroForOne",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1564,
																			"src": "4036:10:13",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"falseExpression": {
																			"commonType": {
																				"typeIdentifier": "t_uint160",
																				"typeString": "uint160"
																			},
																			"id": 1595,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"expression": {
																					"id": 1592,
																					"name": "TickMath",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1304,
																					"src": "4079:8:13",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_contract$_TickMath_$1304_$",
																						"typeString": "type(library TickMath)"
																					}
																				},
																				"id": 1593,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "MAX_SQRT_RATIO",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 790,
																				"src": "4079:23:13",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint160",
																					"typeString": "uint160"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "-",
																			"rightExpression": {
																				"hexValue": "31",
																				"id": 1594,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "4105:1:13",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_1_by_1",
																					"typeString": "int_const 1"
																				},
																				"value": "1"
																			},
																			"src": "4079:27:13",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint160",
																				"typeString": "uint160"
																			}
																		},
																		"id": 1596,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "Conditional",
																		"src": "4036:70:13",
																		"trueExpression": {
																			"commonType": {
																				"typeIdentifier": "t_uint160",
																				"typeString": "uint160"
																			},
																			"id": 1591,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"expression": {
																					"id": 1588,
																					"name": "TickMath",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1304,
																					"src": "4049:8:13",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_contract$_TickMath_$1304_$",
																						"typeString": "type(library TickMath)"
																					}
																				},
																				"id": 1589,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "MIN_SQRT_RATIO",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 786,
																				"src": "4049:23:13",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint160",
																					"typeString": "uint160"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"hexValue": "31",
																				"id": 1590,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "4075:1:13",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_1_by_1",
																					"typeString": "int_const 1"
																				},
																				"value": "1"
																			},
																			"src": "4049:27:13",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint160",
																				"typeString": "uint160"
																			}
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint160",
																			"typeString": "uint160"
																		}
																	}
																],
																"id": 1597,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "4035:72:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																}
															},
															"typeDescriptions": {
																"typeIdentifier": "t_uint160",
																"typeString": "uint160"
															}
														},
														{
															"arguments": [
																{
																	"id": 1602,
																	"name": "data",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1533,
																	"src": "4176:4:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_SwapCallbackData_$1394_memory_ptr",
																		"typeString": "struct SwapRouter.SwapCallbackData memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_struct$_SwapCallbackData_$1394_memory_ptr",
																		"typeString": "struct SwapRouter.SwapCallbackData memory"
																	}
																],
																"expression": {
																	"id": 1600,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "4165:3:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 1601,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encode",
																"nodeType": "MemberAccess",
																"src": "4165:10:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function () pure returns (bytes memory)"
																}
															},
															"id": 1603,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4165:16:13",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															},
															{
																"typeIdentifier": "t_uint160",
																"typeString": "uint160"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 1574,
																	"name": "tokenIn",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1553,
																	"src": "3852:7:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 1575,
																	"name": "tokenOut",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1555,
																	"src": "3861:8:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 1576,
																	"name": "fee",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1557,
																	"src": "3871:3:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint24",
																		"typeString": "uint24"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint24",
																		"typeString": "uint24"
																	}
																],
																"id": 1573,
																"name": "getPool",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1389,
																"src": "3844:7:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$_t_uint24_$returns$_t_contract$_IUniswapV3Pool_$135_$",
																	"typeString": "function (address,address,uint24) view returns (contract IUniswapV3Pool)"
																}
															},
															"id": 1577,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3844:31:13",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IUniswapV3Pool_$135",
																"typeString": "contract IUniswapV3Pool"
															}
														},
														"id": 1578,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "swap",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 226,
														"src": "3844:36:13",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_bool_$_t_int256_$_t_uint160_$_t_bytes_memory_ptr_$returns$_t_int256_$_t_int256_$",
															"typeString": "function (address,bool,int256,uint160,bytes memory) external returns (int256,int256)"
														}
													},
													"id": 1604,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3844:351:13",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_int256_$_t_int256_$",
														"typeString": "tuple(int256,int256)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3797:398:13"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1613,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "UnaryOperation",
															"operator": "-",
															"prefix": true,
															"src": "4221:33:13",
															"subExpression": {
																"components": [
																	{
																		"condition": {
																			"id": 1608,
																			"name": "zeroForOne",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1564,
																			"src": "4223:10:13",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"falseExpression": {
																			"id": 1610,
																			"name": "amount0",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1570,
																			"src": "4246:7:13",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			}
																		},
																		"id": 1611,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "Conditional",
																		"src": "4223:30:13",
																		"trueExpression": {
																			"id": 1609,
																			"name": "amount1",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1572,
																			"src": "4236:7:13",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			}
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_int256",
																			"typeString": "int256"
																		}
																	}
																],
																"id": 1612,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "4222:32:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																}
															},
															"typeDescriptions": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														],
														"id": 1607,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "ElementaryTypeNameExpression",
														"src": "4213:7:13",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_uint256_$",
															"typeString": "type(uint256)"
														},
														"typeName": {
															"id": 1606,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "4213:7:13",
															"typeDescriptions": {}
														}
													},
													"id": 1614,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4213:42:13",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1537,
												"id": 1615,
												"nodeType": "Return",
												"src": "4206:49:13"
											}
										]
									},
									"documentation": {
										"id": 1525,
										"nodeType": "StructuredDocumentation",
										"src": "3280:43:13",
										"text": "@dev Performs a single exact input swap"
									},
									"id": 1617,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "exactInputInternal",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1534,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1527,
												"mutability": "mutable",
												"name": "amountIn",
												"nodeType": "VariableDeclaration",
												"scope": 1617,
												"src": "3365:16:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1526,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3365:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1529,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 1617,
												"src": "3391:17:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1528,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3391:7:13",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1531,
												"mutability": "mutable",
												"name": "sqrtPriceLimitX96",
												"nodeType": "VariableDeclaration",
												"scope": 1617,
												"src": "3418:25:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 1530,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "3418:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1533,
												"mutability": "mutable",
												"name": "data",
												"nodeType": "VariableDeclaration",
												"scope": 1617,
												"src": "3453:28:13",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_SwapCallbackData_$1394_memory_ptr",
													"typeString": "struct SwapRouter.SwapCallbackData"
												},
												"typeName": {
													"id": 1532,
													"name": "SwapCallbackData",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 1394,
													"src": "3453:16:13",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_SwapCallbackData_$1394_storage_ptr",
														"typeString": "struct SwapRouter.SwapCallbackData"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3355:132:13"
									},
									"returnParameters": {
										"id": 1537,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1536,
												"mutability": "mutable",
												"name": "amountOut",
												"nodeType": "VariableDeclaration",
												"scope": 1617,
												"src": "3505:17:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1535,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3505:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3504:19:13"
									},
									"scope": 1970,
									"src": "3328:934:13",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								},
								{
									"baseFunctions": [
										2868
									],
									"body": {
										"id": 1662,
										"nodeType": "Block",
										"src": "4495:352:13",
										"statements": [
											{
												"expression": {
													"id": 1652,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1630,
														"name": "amountOut",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1628,
														"src": "4505:9:13",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"expression": {
																	"id": 1632,
																	"name": "params",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1620,
																	"src": "4549:6:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_ExactInputSingleParams_$2860_calldata_ptr",
																		"typeString": "struct ISwapRouter.ExactInputSingleParams calldata"
																	}
																},
																"id": 1633,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "amountIn",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2855,
																"src": "4549:15:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"expression": {
																	"id": 1634,
																	"name": "params",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1620,
																	"src": "4578:6:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_ExactInputSingleParams_$2860_calldata_ptr",
																		"typeString": "struct ISwapRouter.ExactInputSingleParams calldata"
																	}
																},
																"id": 1635,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "recipient",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2851,
																"src": "4578:16:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															{
																"expression": {
																	"id": 1636,
																	"name": "params",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1620,
																	"src": "4608:6:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_ExactInputSingleParams_$2860_calldata_ptr",
																		"typeString": "struct ISwapRouter.ExactInputSingleParams calldata"
																	}
																},
																"id": 1637,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "sqrtPriceLimitX96",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2859,
																"src": "4608:24:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																}
															},
															{
																"arguments": [
																	{
																		"arguments": [
																			{
																				"expression": {
																					"id": 1641,
																					"name": "params",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1620,
																					"src": "4687:6:13",
																					"typeDescriptions": {
																						"typeIdentifier": "t_struct$_ExactInputSingleParams_$2860_calldata_ptr",
																						"typeString": "struct ISwapRouter.ExactInputSingleParams calldata"
																					}
																				},
																				"id": 1642,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "tokenIn",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 2845,
																				"src": "4687:14:13",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			{
																				"expression": {
																					"id": 1643,
																					"name": "params",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1620,
																					"src": "4703:6:13",
																					"typeDescriptions": {
																						"typeIdentifier": "t_struct$_ExactInputSingleParams_$2860_calldata_ptr",
																						"typeString": "struct ISwapRouter.ExactInputSingleParams calldata"
																					}
																				},
																				"id": 1644,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "fee",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 2849,
																				"src": "4703:10:13",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint24",
																					"typeString": "uint24"
																				}
																			},
																			{
																				"expression": {
																					"id": 1645,
																					"name": "params",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1620,
																					"src": "4715:6:13",
																					"typeDescriptions": {
																						"typeIdentifier": "t_struct$_ExactInputSingleParams_$2860_calldata_ptr",
																						"typeString": "struct ISwapRouter.ExactInputSingleParams calldata"
																					}
																				},
																				"id": 1646,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "tokenOut",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 2847,
																				"src": "4715:15:13",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				},
																				{
																					"typeIdentifier": "t_uint24",
																					"typeString": "uint24"
																				},
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			],
																			"expression": {
																				"id": 1639,
																				"name": "abi",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 4294967295,
																				"src": "4670:3:13",
																				"typeDescriptions": {
																					"typeIdentifier": "t_magic_abi",
																					"typeString": "abi"
																				}
																			},
																			"id": 1640,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"memberName": "encodePacked",
																			"nodeType": "MemberAccess",
																			"src": "4670:16:13",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
																				"typeString": "function () pure returns (bytes memory)"
																			}
																		},
																		"id": 1647,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "4670:61:13",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	{
																		"expression": {
																			"id": 1648,
																			"name": "msg",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967281,
																			"src": "4740:3:13",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_message",
																				"typeString": "msg"
																			}
																		},
																		"id": 1649,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "sender",
																		"nodeType": "MemberAccess",
																		"src": "4740:10:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address_payable",
																			"typeString": "address payable"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		},
																		{
																			"typeIdentifier": "t_address_payable",
																			"typeString": "address payable"
																		}
																	],
																	"id": 1638,
																	"name": "SwapCallbackData",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1394,
																	"src": "4646:16:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_struct$_SwapCallbackData_$1394_storage_ptr_$",
																		"typeString": "type(struct SwapRouter.SwapCallbackData storage pointer)"
																	}
																},
																"id": 1650,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "structConstructorCall",
																"lValueRequested": false,
																"names": [
																	"path",
																	"payer"
																],
																"nodeType": "FunctionCall",
																"src": "4646:106:13",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_SwapCallbackData_$1394_memory_ptr",
																	"typeString": "struct SwapRouter.SwapCallbackData memory"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																},
																{
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																},
																{
																	"typeIdentifier": "t_struct$_SwapCallbackData_$1394_memory_ptr",
																	"typeString": "struct SwapRouter.SwapCallbackData memory"
																}
															],
															"id": 1631,
															"name": "exactInputInternal",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1617,
															"src": "4517:18:13",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$_t_address_$_t_uint160_$_t_struct$_SwapCallbackData_$1394_memory_ptr_$returns$_t_uint256_$",
																"typeString": "function (uint256,address,uint160,struct SwapRouter.SwapCallbackData memory) returns (uint256)"
															}
														},
														"id": 1651,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "4517:245:13",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "4505:257:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1653,
												"nodeType": "ExpressionStatement",
												"src": "4505:257:13"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1658,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1655,
																"name": "amountOut",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1628,
																"src": "4780:9:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"expression": {
																	"id": 1656,
																	"name": "params",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1620,
																	"src": "4793:6:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_ExactInputSingleParams_$2860_calldata_ptr",
																		"typeString": "struct ISwapRouter.ExactInputSingleParams calldata"
																	}
																},
																"id": 1657,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "amountOutMinimum",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2857,
																"src": "4793:23:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "4780:36:13",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "546f6f206c6974746c65207265636569766564",
															"id": 1659,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4818:21:13",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_f037a9cbca9be03859489f289f0cf5f85c0414bbfdd9785bc7ab31bd734e249c",
																"typeString": "literal_string \"Too little received\""
															},
															"value": "Too little received"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_f037a9cbca9be03859489f289f0cf5f85c0414bbfdd9785bc7ab31bd734e249c",
																"typeString": "literal_string \"Too little received\""
															}
														],
														"id": 1654,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "4772:7:13",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1660,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4772:68:13",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1661,
												"nodeType": "ExpressionStatement",
												"src": "4772:68:13"
											}
										]
									},
									"documentation": {
										"id": 1618,
										"nodeType": "StructuredDocumentation",
										"src": "4268:27:13",
										"text": "@inheritdoc ISwapRouter"
									},
									"functionSelector": "414bf389",
									"id": 1663,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"arguments": [
												{
													"expression": {
														"id": 1624,
														"name": "params",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1620,
														"src": "4438:6:13",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_ExactInputSingleParams_$2860_calldata_ptr",
															"typeString": "struct ISwapRouter.ExactInputSingleParams calldata"
														}
													},
													"id": 1625,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "deadline",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 2853,
													"src": "4438:15:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												}
											],
											"id": 1626,
											"modifierName": {
												"id": 1623,
												"name": "checkDeadline",
												"nodeType": "Identifier",
												"overloadedDeclarations": [],
												"referencedDeclaration": 2510,
												"src": "4424:13:13",
												"typeDescriptions": {
													"typeIdentifier": "t_modifier$_t_uint256_$",
													"typeString": "modifier (uint256)"
												}
											},
											"nodeType": "ModifierInvocation",
											"src": "4424:30:13"
										}
									],
									"name": "exactInputSingle",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1622,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "4407:8:13"
									},
									"parameters": {
										"id": 1621,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1620,
												"mutability": "mutable",
												"name": "params",
												"nodeType": "VariableDeclaration",
												"scope": 1663,
												"src": "4326:38:13",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_ExactInputSingleParams_$2860_calldata_ptr",
													"typeString": "struct ISwapRouter.ExactInputSingleParams"
												},
												"typeName": {
													"id": 1619,
													"name": "ExactInputSingleParams",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 2860,
													"src": "4326:22:13",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_ExactInputSingleParams_$2860_storage_ptr",
														"typeString": "struct ISwapRouter.ExactInputSingleParams"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4325:40:13"
									},
									"returnParameters": {
										"id": 1629,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1628,
												"mutability": "mutable",
												"name": "amountOut",
												"nodeType": "VariableDeclaration",
												"scope": 1663,
												"src": "4472:17:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1627,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4472:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4471:19:13"
									},
									"scope": 1970,
									"src": "4300:547:13",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"baseFunctions": [
										2887
									],
									"body": {
										"id": 1750,
										"nodeType": "Block",
										"src": "5066:1094:13",
										"statements": [
											{
												"assignments": [
													1677
												],
												"declarations": [
													{
														"constant": false,
														"id": 1677,
														"mutability": "mutable",
														"name": "payer",
														"nodeType": "VariableDeclaration",
														"scope": 1750,
														"src": "5076:13:13",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 1676,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "5076:7:13",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1680,
												"initialValue": {
													"expression": {
														"id": 1678,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "5092:3:13",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 1679,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "sender",
													"nodeType": "MemberAccess",
													"src": "5092:10:13",
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5076:26:13"
											},
											{
												"body": {
													"id": 1740,
													"nodeType": "Block",
													"src": "5163:912:13",
													"statements": [
														{
															"assignments": [
																1683
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1683,
																	"mutability": "mutable",
																	"name": "hasMultiplePools",
																	"nodeType": "VariableDeclaration",
																	"scope": 1740,
																	"src": "5177:21:13",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"typeName": {
																		"id": 1682,
																		"name": "bool",
																		"nodeType": "ElementaryTypeName",
																		"src": "5177:4:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 1688,
															"initialValue": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"expression": {
																		"expression": {
																			"id": 1684,
																			"name": "params",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1666,
																			"src": "5201:6:13",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_ExactInputParams_$2879_memory_ptr",
																				"typeString": "struct ISwapRouter.ExactInputParams memory"
																			}
																		},
																		"id": 1685,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "path",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 2870,
																		"src": "5201:11:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	"id": 1686,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "hasMultiplePools",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 3201,
																	"src": "5201:28:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$returns$_t_bool_$bound_to$_t_bytes_memory_ptr_$",
																		"typeString": "function (bytes memory) pure returns (bool)"
																	}
																},
																"id": 1687,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "5201:30:13",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "5177:54:13"
														},
														{
															"expression": {
																"id": 1712,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"expression": {
																		"id": 1689,
																		"name": "params",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1666,
																		"src": "5325:6:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_ExactInputParams_$2879_memory_ptr",
																			"typeString": "struct ISwapRouter.ExactInputParams memory"
																		}
																	},
																	"id": 1691,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"memberName": "amountIn",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 2876,
																	"src": "5325:15:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"arguments": [
																		{
																			"expression": {
																				"id": 1693,
																				"name": "params",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1666,
																				"src": "5379:6:13",
																				"typeDescriptions": {
																					"typeIdentifier": "t_struct$_ExactInputParams_$2879_memory_ptr",
																					"typeString": "struct ISwapRouter.ExactInputParams memory"
																				}
																			},
																			"id": 1694,
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberName": "amountIn",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": 2876,
																			"src": "5379:15:13",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		{
																			"condition": {
																				"id": 1695,
																				"name": "hasMultiplePools",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1683,
																				"src": "5412:16:13",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"falseExpression": {
																				"expression": {
																					"id": 1700,
																					"name": "params",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1666,
																					"src": "5447:6:13",
																					"typeDescriptions": {
																						"typeIdentifier": "t_struct$_ExactInputParams_$2879_memory_ptr",
																						"typeString": "struct ISwapRouter.ExactInputParams memory"
																					}
																				},
																				"id": 1701,
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "recipient",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 2872,
																				"src": "5447:16:13",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			"id": 1702,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "Conditional",
																			"src": "5412:51:13",
																			"trueExpression": {
																				"arguments": [
																					{
																						"id": 1698,
																						"name": "this",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 4294967268,
																						"src": "5439:4:13",
																						"typeDescriptions": {
																							"typeIdentifier": "t_contract$_SwapRouter_$1970",
																							"typeString": "contract SwapRouter"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_contract$_SwapRouter_$1970",
																							"typeString": "contract SwapRouter"
																						}
																					],
																					"id": 1697,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"nodeType": "ElementaryTypeNameExpression",
																					"src": "5431:7:13",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_address_$",
																						"typeString": "type(address)"
																					},
																					"typeName": {
																						"id": 1696,
																						"name": "address",
																						"nodeType": "ElementaryTypeName",
																						"src": "5431:7:13",
																						"typeDescriptions": {}
																					}
																				},
																				"id": 1699,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "typeConversion",
																				"lValueRequested": false,
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "5431:13:13",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_address_payable",
																					"typeString": "address payable"
																				}
																			},
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		{
																			"hexValue": "30",
																			"id": 1703,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "5532:1:13",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		{
																			"arguments": [
																				{
																					"arguments": [],
																					"expression": {
																						"argumentTypes": [],
																						"expression": {
																							"expression": {
																								"id": 1705,
																								"name": "params",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 1666,
																								"src": "5596:6:13",
																								"typeDescriptions": {
																									"typeIdentifier": "t_struct$_ExactInputParams_$2879_memory_ptr",
																									"typeString": "struct ISwapRouter.ExactInputParams memory"
																								}
																							},
																							"id": 1706,
																							"isConstant": false,
																							"isLValue": true,
																							"isPure": false,
																							"lValueRequested": false,
																							"memberName": "path",
																							"nodeType": "MemberAccess",
																							"referencedDeclaration": 2870,
																							"src": "5596:11:13",
																							"typeDescriptions": {
																								"typeIdentifier": "t_bytes_memory_ptr",
																								"typeString": "bytes memory"
																							}
																						},
																						"id": 1707,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"memberName": "getFirstPool",
																						"nodeType": "MemberAccess",
																						"referencedDeclaration": 3268,
																						"src": "5596:24:13",
																						"typeDescriptions": {
																							"typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$returns$_t_bytes_memory_ptr_$bound_to$_t_bytes_memory_ptr_$",
																							"typeString": "function (bytes memory) pure returns (bytes memory)"
																						}
																					},
																					"id": 1708,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"kind": "functionCall",
																					"lValueRequested": false,
																					"names": [],
																					"nodeType": "FunctionCall",
																					"src": "5596:26:13",
																					"tryCall": false,
																					"typeDescriptions": {
																						"typeIdentifier": "t_bytes_memory_ptr",
																						"typeString": "bytes memory"
																					}
																				},
																				{
																					"id": 1709,
																					"name": "payer",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1677,
																					"src": "5699:5:13",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_bytes_memory_ptr",
																						"typeString": "bytes memory"
																					},
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				],
																				"id": 1704,
																				"name": "SwapCallbackData",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1394,
																				"src": "5551:16:13",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_struct$_SwapCallbackData_$1394_storage_ptr_$",
																					"typeString": "type(struct SwapRouter.SwapCallbackData storage pointer)"
																				}
																			},
																			"id": 1710,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "structConstructorCall",
																			"lValueRequested": false,
																			"names": [
																				"path",
																				"payer"
																			],
																			"nodeType": "FunctionCall",
																			"src": "5551:172:13",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_SwapCallbackData_$1394_memory_ptr",
																				"typeString": "struct SwapRouter.SwapCallbackData memory"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			{
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			},
																			{
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			{
																				"typeIdentifier": "t_struct$_SwapCallbackData_$1394_memory_ptr",
																				"typeString": "struct SwapRouter.SwapCallbackData memory"
																			}
																		],
																		"id": 1692,
																		"name": "exactInputInternal",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1617,
																		"src": "5343:18:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$_t_address_$_t_uint160_$_t_struct$_SwapCallbackData_$1394_memory_ptr_$returns$_t_uint256_$",
																			"typeString": "function (uint256,address,uint160,struct SwapRouter.SwapCallbackData memory) returns (uint256)"
																		}
																	},
																	"id": 1711,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "5343:394:13",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "5325:412:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1713,
															"nodeType": "ExpressionStatement",
															"src": "5325:412:13"
														},
														{
															"condition": {
																"id": 1714,
																"name": "hasMultiplePools",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1683,
																"src": "5811:16:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"falseBody": {
																"id": 1738,
																"nodeType": "Block",
																"src": "5982:83:13",
																"statements": [
																	{
																		"expression": {
																			"id": 1735,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftHandSide": {
																				"id": 1732,
																				"name": "amountOut",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1674,
																				"src": "6000:9:13",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "Assignment",
																			"operator": "=",
																			"rightHandSide": {
																				"expression": {
																					"id": 1733,
																					"name": "params",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1666,
																					"src": "6012:6:13",
																					"typeDescriptions": {
																						"typeIdentifier": "t_struct$_ExactInputParams_$2879_memory_ptr",
																						"typeString": "struct ISwapRouter.ExactInputParams memory"
																					}
																				},
																				"id": 1734,
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "amountIn",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 2876,
																				"src": "6012:15:13",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "6000:27:13",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"id": 1736,
																		"nodeType": "ExpressionStatement",
																		"src": "6000:27:13"
																	},
																	{
																		"id": 1737,
																		"nodeType": "Break",
																		"src": "6045:5:13"
																	}
																]
															},
															"id": 1739,
															"nodeType": "IfStatement",
															"src": "5807:258:13",
															"trueBody": {
																"id": 1731,
																"nodeType": "Block",
																"src": "5829:147:13",
																"statements": [
																	{
																		"expression": {
																			"id": 1720,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftHandSide": {
																				"id": 1715,
																				"name": "payer",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1677,
																				"src": "5847:5:13",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			"nodeType": "Assignment",
																			"operator": "=",
																			"rightHandSide": {
																				"arguments": [
																					{
																						"id": 1718,
																						"name": "this",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 4294967268,
																						"src": "5863:4:13",
																						"typeDescriptions": {
																							"typeIdentifier": "t_contract$_SwapRouter_$1970",
																							"typeString": "contract SwapRouter"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_contract$_SwapRouter_$1970",
																							"typeString": "contract SwapRouter"
																						}
																					],
																					"id": 1717,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"nodeType": "ElementaryTypeNameExpression",
																					"src": "5855:7:13",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_address_$",
																						"typeString": "type(address)"
																					},
																					"typeName": {
																						"id": 1716,
																						"name": "address",
																						"nodeType": "ElementaryTypeName",
																						"src": "5855:7:13",
																						"typeDescriptions": {}
																					}
																				},
																				"id": 1719,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "typeConversion",
																				"lValueRequested": false,
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "5855:13:13",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_address_payable",
																					"typeString": "address payable"
																				}
																			},
																			"src": "5847:21:13",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		"id": 1721,
																		"nodeType": "ExpressionStatement",
																		"src": "5847:21:13"
																	},
																	{
																		"expression": {
																			"id": 1729,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftHandSide": {
																				"expression": {
																					"id": 1722,
																					"name": "params",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1666,
																					"src": "5924:6:13",
																					"typeDescriptions": {
																						"typeIdentifier": "t_struct$_ExactInputParams_$2879_memory_ptr",
																						"typeString": "struct ISwapRouter.ExactInputParams memory"
																					}
																				},
																				"id": 1724,
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": true,
																				"memberName": "path",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 2870,
																				"src": "5924:11:13",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes_memory_ptr",
																					"typeString": "bytes memory"
																				}
																			},
																			"nodeType": "Assignment",
																			"operator": "=",
																			"rightHandSide": {
																				"arguments": [],
																				"expression": {
																					"argumentTypes": [],
																					"expression": {
																						"expression": {
																							"id": 1725,
																							"name": "params",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 1666,
																							"src": "5938:6:13",
																							"typeDescriptions": {
																								"typeIdentifier": "t_struct$_ExactInputParams_$2879_memory_ptr",
																								"typeString": "struct ISwapRouter.ExactInputParams memory"
																							}
																						},
																						"id": 1726,
																						"isConstant": false,
																						"isLValue": true,
																						"isPure": false,
																						"lValueRequested": false,
																						"memberName": "path",
																						"nodeType": "MemberAccess",
																						"referencedDeclaration": 2870,
																						"src": "5938:11:13",
																						"typeDescriptions": {
																							"typeIdentifier": "t_bytes_memory_ptr",
																							"typeString": "bytes memory"
																						}
																					},
																					"id": 1727,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"memberName": "skipToken",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 3286,
																					"src": "5938:21:13",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$returns$_t_bytes_memory_ptr_$bound_to$_t_bytes_memory_ptr_$",
																						"typeString": "function (bytes memory) pure returns (bytes memory)"
																					}
																				},
																				"id": 1728,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "functionCall",
																				"lValueRequested": false,
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "5938:23:13",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes_memory_ptr",
																					"typeString": "bytes memory"
																				}
																			},
																			"src": "5924:37:13",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes_memory_ptr",
																				"typeString": "bytes memory"
																			}
																		},
																		"id": 1730,
																		"nodeType": "ExpressionStatement",
																		"src": "5924:37:13"
																	}
																]
															}
														}
													]
												},
												"condition": {
													"hexValue": "74727565",
													"id": 1681,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "5157:4:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"id": 1741,
												"nodeType": "WhileStatement",
												"src": "5150:925:13"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1746,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1743,
																"name": "amountOut",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1674,
																"src": "6093:9:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"expression": {
																	"id": 1744,
																	"name": "params",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1666,
																	"src": "6106:6:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_ExactInputParams_$2879_memory_ptr",
																		"typeString": "struct ISwapRouter.ExactInputParams memory"
																	}
																},
																"id": 1745,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "amountOutMinimum",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2878,
																"src": "6106:23:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "6093:36:13",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "546f6f206c6974746c65207265636569766564",
															"id": 1747,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "6131:21:13",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_f037a9cbca9be03859489f289f0cf5f85c0414bbfdd9785bc7ab31bd734e249c",
																"typeString": "literal_string \"Too little received\""
															},
															"value": "Too little received"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_f037a9cbca9be03859489f289f0cf5f85c0414bbfdd9785bc7ab31bd734e249c",
																"typeString": "literal_string \"Too little received\""
															}
														],
														"id": 1742,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "6085:7:13",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1748,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6085:68:13",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1749,
												"nodeType": "ExpressionStatement",
												"src": "6085:68:13"
											}
										]
									},
									"documentation": {
										"id": 1664,
										"nodeType": "StructuredDocumentation",
										"src": "4853:27:13",
										"text": "@inheritdoc ISwapRouter"
									},
									"functionSelector": "c04b8d59",
									"id": 1751,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"arguments": [
												{
													"expression": {
														"id": 1670,
														"name": "params",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1666,
														"src": "5009:6:13",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_ExactInputParams_$2879_memory_ptr",
															"typeString": "struct ISwapRouter.ExactInputParams memory"
														}
													},
													"id": 1671,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "deadline",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 2874,
													"src": "5009:15:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												}
											],
											"id": 1672,
											"modifierName": {
												"id": 1669,
												"name": "checkDeadline",
												"nodeType": "Identifier",
												"overloadedDeclarations": [],
												"referencedDeclaration": 2510,
												"src": "4995:13:13",
												"typeDescriptions": {
													"typeIdentifier": "t_modifier$_t_uint256_$",
													"typeString": "modifier (uint256)"
												}
											},
											"nodeType": "ModifierInvocation",
											"src": "4995:30:13"
										}
									],
									"name": "exactInput",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1668,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "4978:8:13"
									},
									"parameters": {
										"id": 1667,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1666,
												"mutability": "mutable",
												"name": "params",
												"nodeType": "VariableDeclaration",
												"scope": 1751,
												"src": "4905:30:13",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_ExactInputParams_$2879_memory_ptr",
													"typeString": "struct ISwapRouter.ExactInputParams"
												},
												"typeName": {
													"id": 1665,
													"name": "ExactInputParams",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 2879,
													"src": "4905:16:13",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_ExactInputParams_$2879_storage_ptr",
														"typeString": "struct ISwapRouter.ExactInputParams"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4904:32:13"
									},
									"returnParameters": {
										"id": 1675,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1674,
												"mutability": "mutable",
												"name": "amountOut",
												"nodeType": "VariableDeclaration",
												"scope": 1751,
												"src": "5043:17:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1673,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5043:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5042:19:13"
									},
									"scope": 1970,
									"src": "4885:1275:13",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1874,
										"nodeType": "Block",
										"src": "6412:1137:13",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 1770,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1765,
														"name": "recipient",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1756,
														"src": "6489:9:13",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 1768,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "6510:1:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 1767,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "6502:7:13",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 1766,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "6502:7:13",
																"typeDescriptions": {}
															}
														},
														"id": 1769,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "6502:10:13",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address_payable",
															"typeString": "address payable"
														}
													},
													"src": "6489:23:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1778,
												"nodeType": "IfStatement",
												"src": "6485:54:13",
												"trueBody": {
													"expression": {
														"id": 1776,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 1771,
															"name": "recipient",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1756,
															"src": "6514:9:13",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"arguments": [
																{
																	"id": 1774,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "6534:4:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_SwapRouter_$1970",
																		"typeString": "contract SwapRouter"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_SwapRouter_$1970",
																		"typeString": "contract SwapRouter"
																	}
																],
																"id": 1773,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "6526:7:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1772,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "6526:7:13",
																	"typeDescriptions": {}
																}
															},
															"id": 1775,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "6526:13:13",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														"src": "6514:25:13",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"id": 1777,
													"nodeType": "ExpressionStatement",
													"src": "6514:25:13"
												}
											},
											{
												"assignments": [
													1780,
													1782,
													1784
												],
												"declarations": [
													{
														"constant": false,
														"id": 1780,
														"mutability": "mutable",
														"name": "tokenOut",
														"nodeType": "VariableDeclaration",
														"scope": 1874,
														"src": "6551:16:13",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 1779,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "6551:7:13",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 1782,
														"mutability": "mutable",
														"name": "tokenIn",
														"nodeType": "VariableDeclaration",
														"scope": 1874,
														"src": "6569:15:13",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 1781,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "6569:7:13",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 1784,
														"mutability": "mutable",
														"name": "fee",
														"nodeType": "VariableDeclaration",
														"scope": 1874,
														"src": "6586:10:13",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint24",
															"typeString": "uint24"
														},
														"typeName": {
															"id": 1783,
															"name": "uint24",
															"nodeType": "ElementaryTypeName",
															"src": "6586:6:13",
															"typeDescriptions": {
																"typeIdentifier": "t_uint24",
																"typeString": "uint24"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1789,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"expression": {
															"expression": {
																"id": 1785,
																"name": "data",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1760,
																"src": "6600:4:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_SwapCallbackData_$1394_memory_ptr",
																	"typeString": "struct SwapRouter.SwapCallbackData memory"
																}
															},
															"id": 1786,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "path",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1391,
															"src": "6600:9:13",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 1787,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "decodeFirstPool",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 3253,
														"src": "6600:25:13",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$returns$_t_address_$_t_address_$_t_uint24_$bound_to$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) pure returns (address,address,uint24)"
														}
													},
													"id": 1788,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6600:27:13",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_address_$_t_address_$_t_uint24_$",
														"typeString": "tuple(address,address,uint24)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6550:77:13"
											},
											{
												"assignments": [
													1791
												],
												"declarations": [
													{
														"constant": false,
														"id": 1791,
														"mutability": "mutable",
														"name": "zeroForOne",
														"nodeType": "VariableDeclaration",
														"scope": 1874,
														"src": "6638:15:13",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 1790,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "6638:4:13",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1795,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 1794,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1792,
														"name": "tokenIn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1782,
														"src": "6656:7:13",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"id": 1793,
														"name": "tokenOut",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1780,
														"src": "6666:8:13",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "6656:18:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6638:36:13"
											},
											{
												"assignments": [
													1797,
													1799
												],
												"declarations": [
													{
														"constant": false,
														"id": 1797,
														"mutability": "mutable",
														"name": "amount0Delta",
														"nodeType": "VariableDeclaration",
														"scope": 1874,
														"src": "6686:19:13",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														},
														"typeName": {
															"id": 1796,
															"name": "int256",
															"nodeType": "ElementaryTypeName",
															"src": "6686:6:13",
															"typeDescriptions": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 1799,
														"mutability": "mutable",
														"name": "amount1Delta",
														"nodeType": "VariableDeclaration",
														"scope": 1874,
														"src": "6707:19:13",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														},
														"typeName": {
															"id": 1798,
															"name": "int256",
															"nodeType": "ElementaryTypeName",
															"src": "6707:6:13",
															"typeDescriptions": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1833,
												"initialValue": {
													"arguments": [
														{
															"id": 1806,
															"name": "recipient",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1756,
															"src": "6796:9:13",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1807,
															"name": "zeroForOne",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1791,
															"src": "6823:10:13",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 1811,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "UnaryOperation",
															"operator": "-",
															"prefix": true,
															"src": "6851:21:13",
															"subExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"expression": {
																		"id": 1808,
																		"name": "amountOut",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1754,
																		"src": "6852:9:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1809,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "toInt256",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 768,
																	"src": "6852:18:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_int256_$bound_to$_t_uint256_$",
																		"typeString": "function (uint256) pure returns (int256)"
																	}
																},
																"id": 1810,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "6852:20:13",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																}
															},
															"typeDescriptions": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														},
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																},
																"id": 1814,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1812,
																	"name": "sqrtPriceLimitX96",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1758,
																	"src": "6890:17:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"hexValue": "30",
																	"id": 1813,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "6911:1:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "6890:22:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"falseExpression": {
																"id": 1826,
																"name": "sqrtPriceLimitX96",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1758,
																"src": "7030:17:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																}
															},
															"id": 1827,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "Conditional",
															"src": "6890:157:13",
															"trueExpression": {
																"components": [
																	{
																		"condition": {
																			"id": 1815,
																			"name": "zeroForOne",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1791,
																			"src": "6936:10:13",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"falseExpression": {
																			"commonType": {
																				"typeIdentifier": "t_uint160",
																				"typeString": "uint160"
																			},
																			"id": 1823,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"expression": {
																					"id": 1820,
																					"name": "TickMath",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1304,
																					"src": "6979:8:13",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_contract$_TickMath_$1304_$",
																						"typeString": "type(library TickMath)"
																					}
																				},
																				"id": 1821,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "MAX_SQRT_RATIO",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 790,
																				"src": "6979:23:13",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint160",
																					"typeString": "uint160"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "-",
																			"rightExpression": {
																				"hexValue": "31",
																				"id": 1822,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "7005:1:13",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_1_by_1",
																					"typeString": "int_const 1"
																				},
																				"value": "1"
																			},
																			"src": "6979:27:13",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint160",
																				"typeString": "uint160"
																			}
																		},
																		"id": 1824,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "Conditional",
																		"src": "6936:70:13",
																		"trueExpression": {
																			"commonType": {
																				"typeIdentifier": "t_uint160",
																				"typeString": "uint160"
																			},
																			"id": 1819,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"expression": {
																					"id": 1816,
																					"name": "TickMath",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1304,
																					"src": "6949:8:13",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_contract$_TickMath_$1304_$",
																						"typeString": "type(library TickMath)"
																					}
																				},
																				"id": 1817,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "MIN_SQRT_RATIO",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 786,
																				"src": "6949:23:13",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint160",
																					"typeString": "uint160"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"hexValue": "31",
																				"id": 1818,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "6975:1:13",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_1_by_1",
																					"typeString": "int_const 1"
																				},
																				"value": "1"
																			},
																			"src": "6949:27:13",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint160",
																				"typeString": "uint160"
																			}
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint160",
																			"typeString": "uint160"
																		}
																	}
																],
																"id": 1825,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "6935:72:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																}
															},
															"typeDescriptions": {
																"typeIdentifier": "t_uint160",
																"typeString": "uint160"
															}
														},
														{
															"arguments": [
																{
																	"id": 1830,
																	"name": "data",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1760,
																	"src": "7076:4:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_SwapCallbackData_$1394_memory_ptr",
																		"typeString": "struct SwapRouter.SwapCallbackData memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_struct$_SwapCallbackData_$1394_memory_ptr",
																		"typeString": "struct SwapRouter.SwapCallbackData memory"
																	}
																],
																"expression": {
																	"id": 1828,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "7065:3:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 1829,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encode",
																"nodeType": "MemberAccess",
																"src": "7065:10:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function () pure returns (bytes memory)"
																}
															},
															"id": 1831,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "7065:16:13",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															},
															{
																"typeIdentifier": "t_uint160",
																"typeString": "uint160"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 1801,
																	"name": "tokenIn",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1782,
																	"src": "6750:7:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 1802,
																	"name": "tokenOut",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1780,
																	"src": "6759:8:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 1803,
																	"name": "fee",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1784,
																	"src": "6769:3:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint24",
																		"typeString": "uint24"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint24",
																		"typeString": "uint24"
																	}
																],
																"id": 1800,
																"name": "getPool",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1389,
																"src": "6742:7:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$_t_uint24_$returns$_t_contract$_IUniswapV3Pool_$135_$",
																	"typeString": "function (address,address,uint24) view returns (contract IUniswapV3Pool)"
																}
															},
															"id": 1804,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "6742:31:13",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IUniswapV3Pool_$135",
																"typeString": "contract IUniswapV3Pool"
															}
														},
														"id": 1805,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "swap",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 226,
														"src": "6742:36:13",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_bool_$_t_int256_$_t_uint160_$_t_bytes_memory_ptr_$returns$_t_int256_$_t_int256_$",
															"typeString": "function (address,bool,int256,uint160,bytes memory) external returns (int256,int256)"
														}
													},
													"id": 1832,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6742:353:13",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_int256_$_t_int256_$",
														"typeString": "tuple(int256,int256)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6685:410:13"
											},
											{
												"assignments": [
													1835
												],
												"declarations": [
													{
														"constant": false,
														"id": 1835,
														"mutability": "mutable",
														"name": "amountOutReceived",
														"nodeType": "VariableDeclaration",
														"scope": 1874,
														"src": "7106:25:13",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1834,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "7106:7:13",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1836,
												"nodeType": "VariableDeclarationStatement",
												"src": "7106:25:13"
											},
											{
												"expression": {
													"id": 1862,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"components": [
															{
																"id": 1837,
																"name": "amountIn",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1763,
																"src": "7142:8:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"id": 1838,
																"name": "amountOutReceived",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1835,
																"src": "7152:17:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"id": 1839,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "TupleExpression",
														"src": "7141:29:13",
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$_t_uint256_$_t_uint256_$",
															"typeString": "tuple(uint256,uint256)"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"condition": {
															"id": 1840,
															"name": "zeroForOne",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1791,
															"src": "7173:10:13",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"falseExpression": {
															"components": [
																{
																	"arguments": [
																		{
																			"id": 1853,
																			"name": "amount1Delta",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1799,
																			"src": "7269:12:13",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			}
																		],
																		"id": 1852,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "7261:7:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_uint256_$",
																			"typeString": "type(uint256)"
																		},
																		"typeName": {
																			"id": 1851,
																			"name": "uint256",
																			"nodeType": "ElementaryTypeName",
																			"src": "7261:7:13",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 1854,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "7261:21:13",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"arguments": [
																		{
																			"id": 1858,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "UnaryOperation",
																			"operator": "-",
																			"prefix": true,
																			"src": "7292:13:13",
																			"subExpression": {
																				"id": 1857,
																				"name": "amount0Delta",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1797,
																				"src": "7293:12:13",
																				"typeDescriptions": {
																					"typeIdentifier": "t_int256",
																					"typeString": "int256"
																				}
																			},
																			"typeDescriptions": {
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			}
																		],
																		"id": 1856,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "7284:7:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_uint256_$",
																			"typeString": "type(uint256)"
																		},
																		"typeName": {
																			"id": 1855,
																			"name": "uint256",
																			"nodeType": "ElementaryTypeName",
																			"src": "7284:7:13",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 1859,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "7284:22:13",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 1860,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "7260:47:13",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_uint256_$_t_uint256_$",
																"typeString": "tuple(uint256,uint256)"
															}
														},
														"id": 1861,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "Conditional",
														"src": "7173:134:13",
														"trueExpression": {
															"components": [
																{
																	"arguments": [
																		{
																			"id": 1843,
																			"name": "amount0Delta",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1797,
																			"src": "7207:12:13",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			}
																		],
																		"id": 1842,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "7199:7:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_uint256_$",
																			"typeString": "type(uint256)"
																		},
																		"typeName": {
																			"id": 1841,
																			"name": "uint256",
																			"nodeType": "ElementaryTypeName",
																			"src": "7199:7:13",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 1844,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "7199:21:13",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"arguments": [
																		{
																			"id": 1848,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "UnaryOperation",
																			"operator": "-",
																			"prefix": true,
																			"src": "7230:13:13",
																			"subExpression": {
																				"id": 1847,
																				"name": "amount1Delta",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1799,
																				"src": "7231:12:13",
																				"typeDescriptions": {
																					"typeIdentifier": "t_int256",
																					"typeString": "int256"
																				}
																			},
																			"typeDescriptions": {
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			}
																		],
																		"id": 1846,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "7222:7:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_uint256_$",
																			"typeString": "type(uint256)"
																		},
																		"typeName": {
																			"id": 1845,
																			"name": "uint256",
																			"nodeType": "ElementaryTypeName",
																			"src": "7222:7:13",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 1849,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "7222:22:13",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 1850,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "7198:47:13",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_uint256_$_t_uint256_$",
																"typeString": "tuple(uint256,uint256)"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$_t_uint256_$_t_uint256_$",
															"typeString": "tuple(uint256,uint256)"
														}
													},
													"src": "7141:166:13",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1863,
												"nodeType": "ExpressionStatement",
												"src": "7141:166:13"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													},
													"id": 1866,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1864,
														"name": "sqrtPriceLimitX96",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1758,
														"src": "7479:17:13",
														"typeDescriptions": {
															"typeIdentifier": "t_uint160",
															"typeString": "uint160"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 1865,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "7500:1:13",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "7479:22:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1873,
												"nodeType": "IfStatement",
												"src": "7475:67:13",
												"trueBody": {
													"expression": {
														"arguments": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1870,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1868,
																	"name": "amountOutReceived",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1835,
																	"src": "7511:17:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"id": 1869,
																	"name": "amountOut",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1754,
																	"src": "7532:9:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "7511:30:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															],
															"id": 1867,
															"name": "require",
															"nodeType": "Identifier",
															"overloadedDeclarations": [
																4294967278,
																4294967278
															],
															"referencedDeclaration": 4294967278,
															"src": "7503:7:13",
															"typeDescriptions": {
																"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
																"typeString": "function (bool) pure"
															}
														},
														"id": 1871,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "7503:39:13",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$__$",
															"typeString": "tuple()"
														}
													},
													"id": 1872,
													"nodeType": "ExpressionStatement",
													"src": "7503:39:13"
												}
											}
										]
									},
									"documentation": {
										"id": 1752,
										"nodeType": "StructuredDocumentation",
										"src": "6166:44:13",
										"text": "@dev Performs a single exact output swap"
									},
									"id": 1875,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "exactOutputInternal",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1761,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1754,
												"mutability": "mutable",
												"name": "amountOut",
												"nodeType": "VariableDeclaration",
												"scope": 1875,
												"src": "6253:17:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1753,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6253:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1756,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 1875,
												"src": "6280:17:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1755,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6280:7:13",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1758,
												"mutability": "mutable",
												"name": "sqrtPriceLimitX96",
												"nodeType": "VariableDeclaration",
												"scope": 1875,
												"src": "6307:25:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 1757,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "6307:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1760,
												"mutability": "mutable",
												"name": "data",
												"nodeType": "VariableDeclaration",
												"scope": 1875,
												"src": "6342:28:13",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_SwapCallbackData_$1394_memory_ptr",
													"typeString": "struct SwapRouter.SwapCallbackData"
												},
												"typeName": {
													"id": 1759,
													"name": "SwapCallbackData",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 1394,
													"src": "6342:16:13",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_SwapCallbackData_$1394_storage_ptr",
														"typeString": "struct SwapRouter.SwapCallbackData"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6243:133:13"
									},
									"returnParameters": {
										"id": 1764,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1763,
												"mutability": "mutable",
												"name": "amountIn",
												"nodeType": "VariableDeclaration",
												"scope": 1875,
												"src": "6394:16:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1762,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6394:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6393:18:13"
									},
									"scope": 1970,
									"src": "6215:1334:13",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								},
								{
									"baseFunctions": [
										2912
									],
									"body": {
										"id": 1924,
										"nodeType": "Block",
										"src": "7783:536:13",
										"statements": [
											{
												"expression": {
													"id": 1910,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1888,
														"name": "amountIn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1886,
														"src": "7849:8:13",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"expression": {
																	"id": 1890,
																	"name": "params",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1878,
																	"src": "7893:6:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_ExactOutputSingleParams_$2904_calldata_ptr",
																		"typeString": "struct ISwapRouter.ExactOutputSingleParams calldata"
																	}
																},
																"id": 1891,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "amountOut",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2899,
																"src": "7893:16:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"expression": {
																	"id": 1892,
																	"name": "params",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1878,
																	"src": "7923:6:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_ExactOutputSingleParams_$2904_calldata_ptr",
																		"typeString": "struct ISwapRouter.ExactOutputSingleParams calldata"
																	}
																},
																"id": 1893,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "recipient",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2895,
																"src": "7923:16:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															{
																"expression": {
																	"id": 1894,
																	"name": "params",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1878,
																	"src": "7953:6:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_ExactOutputSingleParams_$2904_calldata_ptr",
																		"typeString": "struct ISwapRouter.ExactOutputSingleParams calldata"
																	}
																},
																"id": 1895,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "sqrtPriceLimitX96",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2903,
																"src": "7953:24:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																}
															},
															{
																"arguments": [
																	{
																		"arguments": [
																			{
																				"expression": {
																					"id": 1899,
																					"name": "params",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1878,
																					"src": "8032:6:13",
																					"typeDescriptions": {
																						"typeIdentifier": "t_struct$_ExactOutputSingleParams_$2904_calldata_ptr",
																						"typeString": "struct ISwapRouter.ExactOutputSingleParams calldata"
																					}
																				},
																				"id": 1900,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "tokenOut",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 2891,
																				"src": "8032:15:13",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			{
																				"expression": {
																					"id": 1901,
																					"name": "params",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1878,
																					"src": "8049:6:13",
																					"typeDescriptions": {
																						"typeIdentifier": "t_struct$_ExactOutputSingleParams_$2904_calldata_ptr",
																						"typeString": "struct ISwapRouter.ExactOutputSingleParams calldata"
																					}
																				},
																				"id": 1902,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "fee",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 2893,
																				"src": "8049:10:13",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint24",
																					"typeString": "uint24"
																				}
																			},
																			{
																				"expression": {
																					"id": 1903,
																					"name": "params",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1878,
																					"src": "8061:6:13",
																					"typeDescriptions": {
																						"typeIdentifier": "t_struct$_ExactOutputSingleParams_$2904_calldata_ptr",
																						"typeString": "struct ISwapRouter.ExactOutputSingleParams calldata"
																					}
																				},
																				"id": 1904,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "tokenIn",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 2889,
																				"src": "8061:14:13",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				},
																				{
																					"typeIdentifier": "t_uint24",
																					"typeString": "uint24"
																				},
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			],
																			"expression": {
																				"id": 1897,
																				"name": "abi",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 4294967295,
																				"src": "8015:3:13",
																				"typeDescriptions": {
																					"typeIdentifier": "t_magic_abi",
																					"typeString": "abi"
																				}
																			},
																			"id": 1898,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"memberName": "encodePacked",
																			"nodeType": "MemberAccess",
																			"src": "8015:16:13",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
																				"typeString": "function () pure returns (bytes memory)"
																			}
																		},
																		"id": 1905,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "8015:61:13",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	{
																		"expression": {
																			"id": 1906,
																			"name": "msg",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967281,
																			"src": "8085:3:13",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_message",
																				"typeString": "msg"
																			}
																		},
																		"id": 1907,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "sender",
																		"nodeType": "MemberAccess",
																		"src": "8085:10:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address_payable",
																			"typeString": "address payable"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		},
																		{
																			"typeIdentifier": "t_address_payable",
																			"typeString": "address payable"
																		}
																	],
																	"id": 1896,
																	"name": "SwapCallbackData",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1394,
																	"src": "7991:16:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_struct$_SwapCallbackData_$1394_storage_ptr_$",
																		"typeString": "type(struct SwapRouter.SwapCallbackData storage pointer)"
																	}
																},
																"id": 1908,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "structConstructorCall",
																"lValueRequested": false,
																"names": [
																	"path",
																	"payer"
																],
																"nodeType": "FunctionCall",
																"src": "7991:106:13",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_SwapCallbackData_$1394_memory_ptr",
																	"typeString": "struct SwapRouter.SwapCallbackData memory"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																},
																{
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																},
																{
																	"typeIdentifier": "t_struct$_SwapCallbackData_$1394_memory_ptr",
																	"typeString": "struct SwapRouter.SwapCallbackData memory"
																}
															],
															"id": 1889,
															"name": "exactOutputInternal",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1875,
															"src": "7860:19:13",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$_t_address_$_t_uint160_$_t_struct$_SwapCallbackData_$1394_memory_ptr_$returns$_t_uint256_$",
																"typeString": "function (uint256,address,uint160,struct SwapRouter.SwapCallbackData memory) returns (uint256)"
															}
														},
														"id": 1909,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "7860:247:13",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "7849:258:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1911,
												"nodeType": "ExpressionStatement",
												"src": "7849:258:13"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1916,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1913,
																"name": "amountIn",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1886,
																"src": "8126:8:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<=",
															"rightExpression": {
																"expression": {
																	"id": 1914,
																	"name": "params",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1878,
																	"src": "8138:6:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_ExactOutputSingleParams_$2904_calldata_ptr",
																		"typeString": "struct ISwapRouter.ExactOutputSingleParams calldata"
																	}
																},
																"id": 1915,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "amountInMaximum",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2901,
																"src": "8138:22:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "8126:34:13",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "546f6f206d75636820726571756573746564",
															"id": 1917,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "8162:20:13",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_a5c1362ddf12293b907d8907d79f16e40792a7ddc4f09ee6d70cfec4ad443305",
																"typeString": "literal_string \"Too much requested\""
															},
															"value": "Too much requested"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_a5c1362ddf12293b907d8907d79f16e40792a7ddc4f09ee6d70cfec4ad443305",
																"typeString": "literal_string \"Too much requested\""
															}
														],
														"id": 1912,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "8118:7:13",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1918,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8118:65:13",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1919,
												"nodeType": "ExpressionStatement",
												"src": "8118:65:13"
											},
											{
												"expression": {
													"id": 1922,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1920,
														"name": "amountInCached",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1351,
														"src": "8271:14:13",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1921,
														"name": "DEFAULT_AMOUNT_IN_CACHED",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1347,
														"src": "8288:24:13",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "8271:41:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1923,
												"nodeType": "ExpressionStatement",
												"src": "8271:41:13"
											}
										]
									},
									"documentation": {
										"id": 1876,
										"nodeType": "StructuredDocumentation",
										"src": "7555:27:13",
										"text": "@inheritdoc ISwapRouter"
									},
									"functionSelector": "db3e2198",
									"id": 1925,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"arguments": [
												{
													"expression": {
														"id": 1882,
														"name": "params",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1878,
														"src": "7727:6:13",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_ExactOutputSingleParams_$2904_calldata_ptr",
															"typeString": "struct ISwapRouter.ExactOutputSingleParams calldata"
														}
													},
													"id": 1883,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "deadline",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 2897,
													"src": "7727:15:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												}
											],
											"id": 1884,
											"modifierName": {
												"id": 1881,
												"name": "checkDeadline",
												"nodeType": "Identifier",
												"overloadedDeclarations": [],
												"referencedDeclaration": 2510,
												"src": "7713:13:13",
												"typeDescriptions": {
													"typeIdentifier": "t_modifier$_t_uint256_$",
													"typeString": "modifier (uint256)"
												}
											},
											"nodeType": "ModifierInvocation",
											"src": "7713:30:13"
										}
									],
									"name": "exactOutputSingle",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1880,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "7696:8:13"
									},
									"parameters": {
										"id": 1879,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1878,
												"mutability": "mutable",
												"name": "params",
												"nodeType": "VariableDeclaration",
												"scope": 1925,
												"src": "7614:39:13",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_ExactOutputSingleParams_$2904_calldata_ptr",
													"typeString": "struct ISwapRouter.ExactOutputSingleParams"
												},
												"typeName": {
													"id": 1877,
													"name": "ExactOutputSingleParams",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 2904,
													"src": "7614:23:13",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_ExactOutputSingleParams_$2904_storage_ptr",
														"typeString": "struct ISwapRouter.ExactOutputSingleParams"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7613:41:13"
									},
									"returnParameters": {
										"id": 1887,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1886,
												"mutability": "mutable",
												"name": "amountIn",
												"nodeType": "VariableDeclaration",
												"scope": 1925,
												"src": "7761:16:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1885,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7761:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7760:18:13"
									},
									"scope": 1970,
									"src": "7587:732:13",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"baseFunctions": [
										2931
									],
									"body": {
										"id": 1968,
										"nodeType": "Block",
										"src": "8541:572:13",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 1939,
																"name": "params",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1928,
																"src": "8803:6:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_ExactOutputParams_$2923_calldata_ptr",
																	"typeString": "struct ISwapRouter.ExactOutputParams calldata"
																}
															},
															"id": 1940,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "amountOut",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 2920,
															"src": "8803:16:13",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"expression": {
																"id": 1941,
																"name": "params",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1928,
																"src": "8833:6:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_ExactOutputParams_$2923_calldata_ptr",
																	"typeString": "struct ISwapRouter.ExactOutputParams calldata"
																}
															},
															"id": 1942,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "recipient",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 2916,
															"src": "8833:16:13",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"hexValue": "30",
															"id": 1943,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "8863:1:13",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														{
															"arguments": [
																{
																	"expression": {
																		"id": 1945,
																		"name": "params",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1928,
																		"src": "8902:6:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_ExactOutputParams_$2923_calldata_ptr",
																			"typeString": "struct ISwapRouter.ExactOutputParams calldata"
																		}
																	},
																	"id": 1946,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "path",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 2914,
																	"src": "8902:11:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_calldata_ptr",
																		"typeString": "bytes calldata"
																	}
																},
																{
																	"expression": {
																		"id": 1947,
																		"name": "msg",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967281,
																		"src": "8922:3:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_message",
																			"typeString": "msg"
																		}
																	},
																	"id": 1948,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "sender",
																	"nodeType": "MemberAccess",
																	"src": "8922:10:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address_payable",
																		"typeString": "address payable"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes_calldata_ptr",
																		"typeString": "bytes calldata"
																	},
																	{
																		"typeIdentifier": "t_address_payable",
																		"typeString": "address payable"
																	}
																],
																"id": 1944,
																"name": "SwapCallbackData",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1394,
																"src": "8878:16:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_struct$_SwapCallbackData_$1394_storage_ptr_$",
																	"typeString": "type(struct SwapRouter.SwapCallbackData storage pointer)"
																}
															},
															"id": 1949,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "structConstructorCall",
															"lValueRequested": false,
															"names": [
																"path",
																"payer"
															],
															"nodeType": "FunctionCall",
															"src": "8878:56:13",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_SwapCallbackData_$1394_memory_ptr",
																"typeString": "struct SwapRouter.SwapCallbackData memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															{
																"typeIdentifier": "t_struct$_SwapCallbackData_$1394_memory_ptr",
																"typeString": "struct SwapRouter.SwapCallbackData memory"
															}
														],
														"id": 1938,
														"name": "exactOutputInternal",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1875,
														"src": "8770:19:13",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$_t_address_$_t_uint160_$_t_struct$_SwapCallbackData_$1394_memory_ptr_$returns$_t_uint256_$",
															"typeString": "function (uint256,address,uint160,struct SwapRouter.SwapCallbackData memory) returns (uint256)"
														}
													},
													"id": 1950,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8770:174:13",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1951,
												"nodeType": "ExpressionStatement",
												"src": "8770:174:13"
											},
											{
												"expression": {
													"id": 1954,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1952,
														"name": "amountIn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1936,
														"src": "8955:8:13",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1953,
														"name": "amountInCached",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1351,
														"src": "8966:14:13",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "8955:25:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1955,
												"nodeType": "ExpressionStatement",
												"src": "8955:25:13"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1960,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1957,
																"name": "amountIn",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1936,
																"src": "8998:8:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<=",
															"rightExpression": {
																"expression": {
																	"id": 1958,
																	"name": "params",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1928,
																	"src": "9010:6:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_ExactOutputParams_$2923_calldata_ptr",
																		"typeString": "struct ISwapRouter.ExactOutputParams calldata"
																	}
																},
																"id": 1959,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "amountInMaximum",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2922,
																"src": "9010:22:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "8998:34:13",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "546f6f206d75636820726571756573746564",
															"id": 1961,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "9034:20:13",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_a5c1362ddf12293b907d8907d79f16e40792a7ddc4f09ee6d70cfec4ad443305",
																"typeString": "literal_string \"Too much requested\""
															},
															"value": "Too much requested"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_a5c1362ddf12293b907d8907d79f16e40792a7ddc4f09ee6d70cfec4ad443305",
																"typeString": "literal_string \"Too much requested\""
															}
														],
														"id": 1956,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "8990:7:13",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1962,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8990:65:13",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1963,
												"nodeType": "ExpressionStatement",
												"src": "8990:65:13"
											},
											{
												"expression": {
													"id": 1966,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1964,
														"name": "amountInCached",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1351,
														"src": "9065:14:13",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1965,
														"name": "DEFAULT_AMOUNT_IN_CACHED",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1347,
														"src": "9082:24:13",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "9065:41:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1967,
												"nodeType": "ExpressionStatement",
												"src": "9065:41:13"
											}
										]
									},
									"documentation": {
										"id": 1926,
										"nodeType": "StructuredDocumentation",
										"src": "8325:27:13",
										"text": "@inheritdoc ISwapRouter"
									},
									"functionSelector": "f28c0498",
									"id": 1969,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"arguments": [
												{
													"expression": {
														"id": 1932,
														"name": "params",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1928,
														"src": "8485:6:13",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_ExactOutputParams_$2923_calldata_ptr",
															"typeString": "struct ISwapRouter.ExactOutputParams calldata"
														}
													},
													"id": 1933,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "deadline",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 2918,
													"src": "8485:15:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												}
											],
											"id": 1934,
											"modifierName": {
												"id": 1931,
												"name": "checkDeadline",
												"nodeType": "Identifier",
												"overloadedDeclarations": [],
												"referencedDeclaration": 2510,
												"src": "8471:13:13",
												"typeDescriptions": {
													"typeIdentifier": "t_modifier$_t_uint256_$",
													"typeString": "modifier (uint256)"
												}
											},
											"nodeType": "ModifierInvocation",
											"src": "8471:30:13"
										}
									],
									"name": "exactOutput",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1930,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "8454:8:13"
									},
									"parameters": {
										"id": 1929,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1928,
												"mutability": "mutable",
												"name": "params",
												"nodeType": "VariableDeclaration",
												"scope": 1969,
												"src": "8378:33:13",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_ExactOutputParams_$2923_calldata_ptr",
													"typeString": "struct ISwapRouter.ExactOutputParams"
												},
												"typeName": {
													"id": 1927,
													"name": "ExactOutputParams",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 2923,
													"src": "8378:17:13",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_ExactOutputParams_$2923_storage_ptr",
														"typeString": "struct ISwapRouter.ExactOutputParams"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8377:35:13"
									},
									"returnParameters": {
										"id": 1937,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1936,
												"mutability": "mutable",
												"name": "amountIn",
												"nodeType": "VariableDeclaration",
												"scope": 1969,
												"src": "8519:16:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1935,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8519:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8518:18:13"
									},
									"scope": 1970,
									"src": "8357:756:13",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1971,
							"src": "775:8340:13"
						}
					],
					"src": "45:9071:13"
				},
				"id": 13
			},
			"contracts/base/BlockTimestamp.sol": {
				"ast": {
					"absolutePath": "contracts/base/BlockTimestamp.sol",
					"exportedSymbols": {
						"BlockTimestamp": [
							1984
						]
					},
					"id": 1985,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1972,
							"literals": [
								"solidity",
								"=",
								"0.7",
								".6"
							],
							"nodeType": "PragmaDirective",
							"src": "45:23:14"
						},
						{
							"abstract": true,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 1973,
								"nodeType": "StructuredDocumentation",
								"src": "70:100:14",
								"text": "@title Function for getting block timestamp\n @dev Base contract that is overridden for tests"
							},
							"fullyImplemented": true,
							"id": 1984,
							"linearizedBaseContracts": [
								1984
							],
							"name": "BlockTimestamp",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 1982,
										"nodeType": "Block",
										"src": "386:39:14",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 1979,
														"name": "block",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967292,
														"src": "403:5:14",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_block",
															"typeString": "block"
														}
													},
													"id": 1980,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "timestamp",
													"nodeType": "MemberAccess",
													"src": "403:15:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1978,
												"id": 1981,
												"nodeType": "Return",
												"src": "396:22:14"
											}
										]
									},
									"documentation": {
										"id": 1974,
										"nodeType": "StructuredDocumentation",
										"src": "209:105:14",
										"text": "@dev Method that exists purely to be overridden for tests\n @return The current block timestamp"
									},
									"id": 1983,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_blockTimestamp",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1975,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "343:2:14"
									},
									"returnParameters": {
										"id": 1978,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1977,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1983,
												"src": "377:7:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1976,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "377:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "376:9:14"
									},
									"scope": 1984,
									"src": "319:106:14",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 1985,
							"src": "170:257:14"
						}
					],
					"src": "45:383:14"
				},
				"id": 14
			},
			"contracts/base/Multicall.sol": {
				"ast": {
					"absolutePath": "contracts/base/Multicall.sol",
					"exportedSymbols": {
						"IMulticall": [
							2693
						],
						"Multicall": [
							2069
						]
					},
					"id": 2070,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1986,
							"literals": [
								"solidity",
								"=",
								"0.7",
								".6"
							],
							"nodeType": "PragmaDirective",
							"src": "45:23:15"
						},
						{
							"id": 1987,
							"literals": [
								"abicoder",
								"v2"
							],
							"nodeType": "PragmaDirective",
							"src": "69:19:15"
						},
						{
							"absolutePath": "contracts/interfaces/IMulticall.sol",
							"file": "../interfaces/IMulticall.sol",
							"id": 1988,
							"nodeType": "ImportDirective",
							"scope": 2070,
							"sourceUnit": 2694,
							"src": "90:38:15",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 1990,
										"name": "IMulticall",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 2693,
										"src": "260:10:15",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IMulticall_$2693",
											"typeString": "contract IMulticall"
										}
									},
									"id": 1991,
									"nodeType": "InheritanceSpecifier",
									"src": "260:10:15"
								}
							],
							"contractDependencies": [
								2693
							],
							"contractKind": "contract",
							"documentation": {
								"id": 1989,
								"nodeType": "StructuredDocumentation",
								"src": "130:99:15",
								"text": "@title Multicall\n @notice Enables calling multiple methods in a single call to the contract"
							},
							"fullyImplemented": true,
							"id": 2069,
							"linearizedBaseContracts": [
								2069,
								2693
							],
							"name": "Multicall",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"baseFunctions": [
										2692
									],
									"body": {
										"id": 2067,
										"nodeType": "Block",
										"src": "407:554:15",
										"statements": [
											{
												"expression": {
													"id": 2009,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 2002,
														"name": "results",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2000,
														"src": "417:7:15",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_bytes_memory_ptr_$dyn_memory_ptr",
															"typeString": "bytes memory[] memory"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"expression": {
																	"id": 2006,
																	"name": "data",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1995,
																	"src": "439:4:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr",
																		"typeString": "bytes calldata[] calldata"
																	}
																},
																"id": 2007,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "length",
																"nodeType": "MemberAccess",
																"src": "439:11:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"id": 2005,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "NewExpression",
															"src": "427:11:15",
															"typeDescriptions": {
																"typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr_$",
																"typeString": "function (uint256) pure returns (bytes memory[] memory)"
															},
															"typeName": {
																"baseType": {
																	"id": 2003,
																	"name": "bytes",
																	"nodeType": "ElementaryTypeName",
																	"src": "431:5:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_storage_ptr",
																		"typeString": "bytes"
																	}
																},
																"id": 2004,
																"nodeType": "ArrayTypeName",
																"src": "431:7:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_array$_t_bytes_storage_$dyn_storage_ptr",
																	"typeString": "bytes[]"
																}
															}
														},
														"id": 2008,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "427:24:15",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_bytes_memory_ptr_$dyn_memory_ptr",
															"typeString": "bytes memory[] memory"
														}
													},
													"src": "417:34:15",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes_memory_ptr_$dyn_memory_ptr",
														"typeString": "bytes memory[] memory"
													}
												},
												"id": 2010,
												"nodeType": "ExpressionStatement",
												"src": "417:34:15"
											},
											{
												"body": {
													"id": 2065,
													"nodeType": "Block",
													"src": "503:452:15",
													"statements": [
														{
															"assignments": [
																2023,
																2025
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 2023,
																	"mutability": "mutable",
																	"name": "success",
																	"nodeType": "VariableDeclaration",
																	"scope": 2065,
																	"src": "518:12:15",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"typeName": {
																		"id": 2022,
																		"name": "bool",
																		"nodeType": "ElementaryTypeName",
																		"src": "518:4:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"visibility": "internal"
																},
																{
																	"constant": false,
																	"id": 2025,
																	"mutability": "mutable",
																	"name": "result",
																	"nodeType": "VariableDeclaration",
																	"scope": 2065,
																	"src": "532:19:15",
																	"stateVariable": false,
																	"storageLocation": "memory",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes"
																	},
																	"typeName": {
																		"id": 2024,
																		"name": "bytes",
																		"nodeType": "ElementaryTypeName",
																		"src": "532:5:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_storage_ptr",
																			"typeString": "bytes"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 2035,
															"initialValue": {
																"arguments": [
																	{
																		"baseExpression": {
																			"id": 2031,
																			"name": "data",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1995,
																			"src": "582:4:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr",
																				"typeString": "bytes calldata[] calldata"
																			}
																		},
																		"id": 2033,
																		"indexExpression": {
																			"id": 2032,
																			"name": "i",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2012,
																			"src": "587:1:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "582:7:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_calldata_ptr",
																			"typeString": "bytes calldata"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes_calldata_ptr",
																			"typeString": "bytes calldata"
																		}
																	],
																	"expression": {
																		"arguments": [
																			{
																				"id": 2028,
																				"name": "this",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 4294967268,
																				"src": "563:4:15",
																				"typeDescriptions": {
																					"typeIdentifier": "t_contract$_Multicall_$2069",
																					"typeString": "contract Multicall"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_contract$_Multicall_$2069",
																					"typeString": "contract Multicall"
																				}
																			],
																			"id": 2027,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "555:7:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 2026,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "555:7:15",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 2029,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "555:13:15",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"id": 2030,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "delegatecall",
																	"nodeType": "MemberAccess",
																	"src": "555:26:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																		"typeString": "function (bytes memory) returns (bool,bytes memory)"
																	}
																},
																"id": 2034,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "555:35:15",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
																	"typeString": "tuple(bool,bytes memory)"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "517:73:15"
														},
														{
															"condition": {
																"id": 2037,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "UnaryOperation",
																"operator": "!",
																"prefix": true,
																"src": "609:8:15",
																"subExpression": {
																	"id": 2036,
																	"name": "success",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2023,
																	"src": "610:7:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 2058,
															"nodeType": "IfStatement",
															"src": "605:306:15",
															"trueBody": {
																"id": 2057,
																"nodeType": "Block",
																"src": "619:292:15",
																"statements": [
																	{
																		"condition": {
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 2041,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"expression": {
																					"id": 2038,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2025,
																					"src": "721:6:15",
																					"typeDescriptions": {
																						"typeIdentifier": "t_bytes_memory_ptr",
																						"typeString": "bytes memory"
																					}
																				},
																				"id": 2039,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "length",
																				"nodeType": "MemberAccess",
																				"src": "721:13:15",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "<",
																			"rightExpression": {
																				"hexValue": "3638",
																				"id": 2040,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "737:2:15",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_68_by_1",
																					"typeString": "int_const 68"
																				},
																				"value": "68"
																			},
																			"src": "721:18:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"id": 2045,
																		"nodeType": "IfStatement",
																		"src": "717:32:15",
																		"trueBody": {
																			"expression": {
																				"arguments": [],
																				"expression": {
																					"argumentTypes": [],
																					"id": 2042,
																					"name": "revert",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [
																						4294967277,
																						4294967277
																					],
																					"referencedDeclaration": 4294967277,
																					"src": "741:6:15",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_revert_pure$__$returns$__$",
																						"typeString": "function () pure"
																					}
																				},
																				"id": 2043,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "functionCall",
																				"lValueRequested": false,
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "741:8:15",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_tuple$__$",
																					"typeString": "tuple()"
																				}
																			},
																			"id": 2044,
																			"nodeType": "ExpressionStatement",
																			"src": "741:8:15"
																		}
																	},
																	{
																		"AST": {
																			"nodeType": "YulBlock",
																			"src": "776:67:15",
																			"statements": [
																				{
																					"nodeType": "YulAssignment",
																					"src": "798:27:15",
																					"value": {
																						"arguments": [
																							{
																								"name": "result",
																								"nodeType": "YulIdentifier",
																								"src": "812:6:15"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "820:4:15",
																								"type": "",
																								"value": "0x04"
																							}
																						],
																						"functionName": {
																							"name": "add",
																							"nodeType": "YulIdentifier",
																							"src": "808:3:15"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "808:17:15"
																					},
																					"variableNames": [
																						{
																							"name": "result",
																							"nodeType": "YulIdentifier",
																							"src": "798:6:15"
																						}
																					]
																				}
																			]
																		},
																		"evmVersion": "istanbul",
																		"externalReferences": [
																			{
																				"declaration": 2025,
																				"isOffset": false,
																				"isSlot": false,
																				"src": "798:6:15",
																				"valueSize": 1
																			},
																			{
																				"declaration": 2025,
																				"isOffset": false,
																				"isSlot": false,
																				"src": "812:6:15",
																				"valueSize": 1
																			}
																		],
																		"id": 2046,
																		"nodeType": "InlineAssembly",
																		"src": "767:76:15"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"id": 2050,
																							"name": "result",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 2025,
																							"src": "878:6:15",
																							"typeDescriptions": {
																								"typeIdentifier": "t_bytes_memory_ptr",
																								"typeString": "bytes memory"
																							}
																						},
																						{
																							"components": [
																								{
																									"id": 2052,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": true,
																									"lValueRequested": false,
																									"nodeType": "ElementaryTypeNameExpression",
																									"src": "887:6:15",
																									"typeDescriptions": {
																										"typeIdentifier": "t_type$_t_string_storage_ptr_$",
																										"typeString": "type(string storage pointer)"
																									},
																									"typeName": {
																										"id": 2051,
																										"name": "string",
																										"nodeType": "ElementaryTypeName",
																										"src": "887:6:15",
																										"typeDescriptions": {}
																									}
																								}
																							],
																							"id": 2053,
																							"isConstant": false,
																							"isInlineArray": false,
																							"isLValue": false,
																							"isPure": true,
																							"lValueRequested": false,
																							"nodeType": "TupleExpression",
																							"src": "886:8:15",
																							"typeDescriptions": {
																								"typeIdentifier": "t_type$_t_string_storage_ptr_$",
																								"typeString": "type(string storage pointer)"
																							}
																						}
																					],
																					"expression": {
																						"argumentTypes": [
																							{
																								"typeIdentifier": "t_bytes_memory_ptr",
																								"typeString": "bytes memory"
																							},
																							{
																								"typeIdentifier": "t_type$_t_string_storage_ptr_$",
																								"typeString": "type(string storage pointer)"
																							}
																						],
																						"expression": {
																							"id": 2048,
																							"name": "abi",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 4294967295,
																							"src": "867:3:15",
																							"typeDescriptions": {
																								"typeIdentifier": "t_magic_abi",
																								"typeString": "abi"
																							}
																						},
																						"id": 2049,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"lValueRequested": false,
																						"memberName": "decode",
																						"nodeType": "MemberAccess",
																						"src": "867:10:15",
																						"typeDescriptions": {
																							"typeIdentifier": "t_function_abidecode_pure$__$returns$__$",
																							"typeString": "function () pure"
																						}
																					},
																					"id": 2054,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"kind": "functionCall",
																					"lValueRequested": false,
																					"names": [],
																					"nodeType": "FunctionCall",
																					"src": "867:28:15",
																					"tryCall": false,
																					"typeDescriptions": {
																						"typeIdentifier": "t_string_memory_ptr",
																						"typeString": "string memory"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_string_memory_ptr",
																						"typeString": "string memory"
																					}
																				],
																				"id": 2047,
																				"name": "revert",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [
																					4294967277,
																					4294967277
																				],
																				"referencedDeclaration": 4294967277,
																				"src": "860:6:15",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_revert_pure$_t_string_memory_ptr_$returns$__$",
																					"typeString": "function (string memory) pure"
																				}
																			},
																			"id": 2055,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "860:36:15",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_tuple$__$",
																				"typeString": "tuple()"
																			}
																		},
																		"id": 2056,
																		"nodeType": "ExpressionStatement",
																		"src": "860:36:15"
																	}
																]
															}
														},
														{
															"expression": {
																"id": 2063,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"baseExpression": {
																		"id": 2059,
																		"name": "results",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2000,
																		"src": "925:7:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_bytes_memory_ptr_$dyn_memory_ptr",
																			"typeString": "bytes memory[] memory"
																		}
																	},
																	"id": 2061,
																	"indexExpression": {
																		"id": 2060,
																		"name": "i",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2012,
																		"src": "933:1:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"nodeType": "IndexAccess",
																	"src": "925:10:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"id": 2062,
																	"name": "result",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2025,
																	"src": "938:6:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																},
																"src": "925:19:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"id": 2064,
															"nodeType": "ExpressionStatement",
															"src": "925:19:15"
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2018,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 2015,
														"name": "i",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2012,
														"src": "481:1:15",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"expression": {
															"id": 2016,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1995,
															"src": "485:4:15",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr",
																"typeString": "bytes calldata[] calldata"
															}
														},
														"id": 2017,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "485:11:15",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "481:15:15",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2066,
												"initializationExpression": {
													"assignments": [
														2012
													],
													"declarations": [
														{
															"constant": false,
															"id": 2012,
															"mutability": "mutable",
															"name": "i",
															"nodeType": "VariableDeclaration",
															"scope": 2066,
															"src": "466:9:15",
															"stateVariable": false,
															"storageLocation": "default",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"typeName": {
																"id": 2011,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "466:7:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"visibility": "internal"
														}
													],
													"id": 2014,
													"initialValue": {
														"hexValue": "30",
														"id": 2013,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "478:1:15",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"nodeType": "VariableDeclarationStatement",
													"src": "466:13:15"
												},
												"loopExpression": {
													"expression": {
														"id": 2020,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "++",
														"prefix": false,
														"src": "498:3:15",
														"subExpression": {
															"id": 2019,
															"name": "i",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2012,
															"src": "498:1:15",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 2021,
													"nodeType": "ExpressionStatement",
													"src": "498:3:15"
												},
												"nodeType": "ForStatement",
												"src": "461:494:15"
											}
										]
									},
									"documentation": {
										"id": 1992,
										"nodeType": "StructuredDocumentation",
										"src": "277:26:15",
										"text": "@inheritdoc IMulticall"
									},
									"functionSelector": "ac9650d8",
									"id": 2068,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "multicall",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1997,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "365:8:15"
									},
									"parameters": {
										"id": 1996,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1995,
												"mutability": "mutable",
												"name": "data",
												"nodeType": "VariableDeclaration",
												"scope": 2068,
												"src": "327:21:15",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr",
													"typeString": "bytes[]"
												},
												"typeName": {
													"baseType": {
														"id": 1993,
														"name": "bytes",
														"nodeType": "ElementaryTypeName",
														"src": "327:5:15",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_storage_ptr",
															"typeString": "bytes"
														}
													},
													"id": 1994,
													"nodeType": "ArrayTypeName",
													"src": "327:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes_storage_$dyn_storage_ptr",
														"typeString": "bytes[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "326:23:15"
									},
									"returnParameters": {
										"id": 2001,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2000,
												"mutability": "mutable",
												"name": "results",
												"nodeType": "VariableDeclaration",
												"scope": 2068,
												"src": "383:22:15",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes_memory_ptr_$dyn_memory_ptr",
													"typeString": "bytes[]"
												},
												"typeName": {
													"baseType": {
														"id": 1998,
														"name": "bytes",
														"nodeType": "ElementaryTypeName",
														"src": "383:5:15",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_storage_ptr",
															"typeString": "bytes"
														}
													},
													"id": 1999,
													"nodeType": "ArrayTypeName",
													"src": "383:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes_storage_$dyn_storage_ptr",
														"typeString": "bytes[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "382:24:15"
									},
									"scope": 2069,
									"src": "308:653:15",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "public"
								}
							],
							"scope": 2070,
							"src": "229:734:15"
						}
					],
					"src": "45:919:15"
				},
				"id": 15
			},
			"contracts/base/PeripheryImmutableState.sol": {
				"ast": {
					"absolutePath": "contracts/base/PeripheryImmutableState.sol",
					"exportedSymbols": {
						"IPeripheryImmutableState": [
							2709
						],
						"PeripheryImmutableState": [
							2100
						]
					},
					"id": 2101,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 2071,
							"literals": [
								"solidity",
								"=",
								"0.7",
								".6"
							],
							"nodeType": "PragmaDirective",
							"src": "45:23:16"
						},
						{
							"absolutePath": "contracts/interfaces/IPeripheryImmutableState.sol",
							"file": "../interfaces/IPeripheryImmutableState.sol",
							"id": 2072,
							"nodeType": "ImportDirective",
							"scope": 2101,
							"sourceUnit": 2710,
							"src": "70:52:16",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 2074,
										"name": "IPeripheryImmutableState",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 2709,
										"src": "252:24:16",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IPeripheryImmutableState_$2709",
											"typeString": "contract IPeripheryImmutableState"
										}
									},
									"id": 2075,
									"nodeType": "InheritanceSpecifier",
									"src": "252:24:16"
								}
							],
							"contractDependencies": [
								2709
							],
							"contractKind": "contract",
							"documentation": {
								"id": 2073,
								"nodeType": "StructuredDocumentation",
								"src": "124:83:16",
								"text": "@title Immutable state\n @notice Immutable state used by periphery contracts"
							},
							"fullyImplemented": true,
							"id": 2100,
							"linearizedBaseContracts": [
								2100,
								2709
							],
							"name": "PeripheryImmutableState",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"baseFunctions": [
										2702
									],
									"constant": false,
									"documentation": {
										"id": 2076,
										"nodeType": "StructuredDocumentation",
										"src": "283:40:16",
										"text": "@inheritdoc IPeripheryImmutableState"
									},
									"functionSelector": "c45a0155",
									"id": 2079,
									"mutability": "immutable",
									"name": "factory",
									"nodeType": "VariableDeclaration",
									"overrides": {
										"id": 2078,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "353:8:16"
									},
									"scope": 2100,
									"src": "328:41:16",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 2077,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "328:7:16",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "public"
								},
								{
									"baseFunctions": [
										2708
									],
									"constant": false,
									"documentation": {
										"id": 2080,
										"nodeType": "StructuredDocumentation",
										"src": "375:40:16",
										"text": "@inheritdoc IPeripheryImmutableState"
									},
									"functionSelector": "4aa4a4fc",
									"id": 2083,
									"mutability": "immutable",
									"name": "WETH9",
									"nodeType": "VariableDeclaration",
									"overrides": {
										"id": 2082,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "445:8:16"
									},
									"scope": 2100,
									"src": "420:39:16",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 2081,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "420:7:16",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "public"
								},
								{
									"body": {
										"id": 2098,
										"nodeType": "Block",
										"src": "512:59:16",
										"statements": [
											{
												"expression": {
													"id": 2092,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 2090,
														"name": "factory",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2079,
														"src": "522:7:16",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 2091,
														"name": "_factory",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2085,
														"src": "532:8:16",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "522:18:16",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 2093,
												"nodeType": "ExpressionStatement",
												"src": "522:18:16"
											},
											{
												"expression": {
													"id": 2096,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 2094,
														"name": "WETH9",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2083,
														"src": "550:5:16",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 2095,
														"name": "_WETH9",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2087,
														"src": "558:6:16",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "550:14:16",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 2097,
												"nodeType": "ExpressionStatement",
												"src": "550:14:16"
											}
										]
									},
									"id": 2099,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2088,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2085,
												"mutability": "mutable",
												"name": "_factory",
												"nodeType": "VariableDeclaration",
												"scope": 2099,
												"src": "478:16:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2084,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "478:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2087,
												"mutability": "mutable",
												"name": "_WETH9",
												"nodeType": "VariableDeclaration",
												"scope": 2099,
												"src": "496:14:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2086,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "496:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "477:34:16"
									},
									"returnParameters": {
										"id": 2089,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "512:0:16"
									},
									"scope": 2100,
									"src": "466:105:16",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 2101,
							"src": "207:366:16"
						}
					],
					"src": "45:529:16"
				},
				"id": 16
			},
			"contracts/base/PeripheryPayments.sol": {
				"ast": {
					"absolutePath": "contracts/base/PeripheryPayments.sol",
					"exportedSymbols": {
						"IERC20": [
							113
						],
						"IPeripheryImmutableState": [
							2709
						],
						"IPeripheryPayments": [
							2735
						],
						"IWETH9": [
							2973
						],
						"PeripheryImmutableState": [
							2100
						],
						"PeripheryPayments": [
							2310
						],
						"TransferHelper": [
							3550
						]
					},
					"id": 2311,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 2102,
							"literals": [
								"solidity",
								">=",
								"0.7",
								".5"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:17"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"file": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"id": 2103,
							"nodeType": "ImportDirective",
							"scope": 2311,
							"sourceUnit": 114,
							"src": "71:56:17",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/interfaces/IPeripheryPayments.sol",
							"file": "../interfaces/IPeripheryPayments.sol",
							"id": 2104,
							"nodeType": "ImportDirective",
							"scope": 2311,
							"sourceUnit": 2736,
							"src": "129:46:17",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/interfaces/external/IWETH9.sol",
							"file": "../interfaces/external/IWETH9.sol",
							"id": 2105,
							"nodeType": "ImportDirective",
							"scope": 2311,
							"sourceUnit": 2974,
							"src": "176:43:17",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/libraries/TransferHelper.sol",
							"file": "../libraries/TransferHelper.sol",
							"id": 2106,
							"nodeType": "ImportDirective",
							"scope": 2311,
							"sourceUnit": 3551,
							"src": "221:41:17",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/base/PeripheryImmutableState.sol",
							"file": "./PeripheryImmutableState.sol",
							"id": 2107,
							"nodeType": "ImportDirective",
							"scope": 2311,
							"sourceUnit": 2101,
							"src": "264:39:17",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 2108,
										"name": "IPeripheryPayments",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 2735,
										"src": "344:18:17",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IPeripheryPayments_$2735",
											"typeString": "contract IPeripheryPayments"
										}
									},
									"id": 2109,
									"nodeType": "InheritanceSpecifier",
									"src": "344:18:17"
								},
								{
									"baseName": {
										"id": 2110,
										"name": "PeripheryImmutableState",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 2100,
										"src": "364:23:17",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_PeripheryImmutableState_$2100",
											"typeString": "contract PeripheryImmutableState"
										}
									},
									"id": 2111,
									"nodeType": "InheritanceSpecifier",
									"src": "364:23:17"
								}
							],
							"contractDependencies": [
								2100,
								2709,
								2735
							],
							"contractKind": "contract",
							"fullyImplemented": false,
							"id": 2310,
							"linearizedBaseContracts": [
								2310,
								2100,
								2709,
								2735
							],
							"name": "PeripheryPayments",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 2122,
										"nodeType": "Block",
										"src": "421:58:17",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 2118,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 2115,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "439:3:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 2116,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "439:10:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"id": 2117,
																"name": "WETH9",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2083,
																"src": "453:5:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "439:19:17",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4e6f74205745544839",
															"id": 2119,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "460:11:17",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_9a5f12903ee10b20c1ea1ca8d6f6723d553112d744fe8db2bc5453efb990e6b1",
																"typeString": "literal_string \"Not WETH9\""
															},
															"value": "Not WETH9"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_9a5f12903ee10b20c1ea1ca8d6f6723d553112d744fe8db2bc5453efb990e6b1",
																"typeString": "literal_string \"Not WETH9\""
															}
														],
														"id": 2114,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "431:7:17",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 2120,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "431:41:17",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2121,
												"nodeType": "ExpressionStatement",
												"src": "431:41:17"
											}
										]
									},
									"id": 2123,
									"implemented": true,
									"kind": "receive",
									"modifiers": [],
									"name": "",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2112,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "401:2:17"
									},
									"returnParameters": {
										"id": 2113,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "421:0:17"
									},
									"scope": 2310,
									"src": "394:85:17",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"baseFunctions": [
										2720
									],
									"body": {
										"id": 2170,
										"nodeType": "Block",
										"src": "611:310:17",
										"statements": [
											{
												"assignments": [
													2133
												],
												"declarations": [
													{
														"constant": false,
														"id": 2133,
														"mutability": "mutable",
														"name": "balanceWETH9",
														"nodeType": "VariableDeclaration",
														"scope": 2170,
														"src": "621:20:17",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 2132,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "621:7:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2143,
												"initialValue": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 2140,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "676:4:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_PeripheryPayments_$2310",
																		"typeString": "contract PeripheryPayments"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_PeripheryPayments_$2310",
																		"typeString": "contract PeripheryPayments"
																	}
																],
																"id": 2139,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "668:7:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 2138,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "668:7:17",
																	"typeDescriptions": {}
																}
															},
															"id": 2141,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "668:13:17",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 2135,
																	"name": "WETH9",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2083,
																	"src": "651:5:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 2134,
																"name": "IWETH9",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2973,
																"src": "644:6:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_IWETH9_$2973_$",
																	"typeString": "type(contract IWETH9)"
																}
															},
															"id": 2136,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "644:13:17",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IWETH9_$2973",
																"typeString": "contract IWETH9"
															}
														},
														"id": 2137,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "balanceOf",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 52,
														"src": "644:23:17",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address) view external returns (uint256)"
														}
													},
													"id": 2142,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "644:38:17",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "621:61:17"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2147,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2145,
																"name": "balanceWETH9",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2133,
																"src": "700:12:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 2146,
																"name": "amountMinimum",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2126,
																"src": "716:13:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "700:29:17",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "496e73756666696369656e74205745544839",
															"id": 2148,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "731:20:17",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_01e23337f78f001c03af3011e04e4dea54f4997ff97d41da263c1606bf0f9f73",
																"typeString": "literal_string \"Insufficient WETH9\""
															},
															"value": "Insufficient WETH9"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_01e23337f78f001c03af3011e04e4dea54f4997ff97d41da263c1606bf0f9f73",
																"typeString": "literal_string \"Insufficient WETH9\""
															}
														],
														"id": 2144,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "692:7:17",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 2149,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "692:60:17",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2150,
												"nodeType": "ExpressionStatement",
												"src": "692:60:17"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2153,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 2151,
														"name": "balanceWETH9",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2133,
														"src": "767:12:17",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 2152,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "782:1:17",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "767:16:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2169,
												"nodeType": "IfStatement",
												"src": "763:152:17",
												"trueBody": {
													"id": 2168,
													"nodeType": "Block",
													"src": "785:130:17",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 2158,
																		"name": "balanceWETH9",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2133,
																		"src": "822:12:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"expression": {
																		"arguments": [
																			{
																				"id": 2155,
																				"name": "WETH9",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2083,
																				"src": "806:5:17",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			],
																			"id": 2154,
																			"name": "IWETH9",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2973,
																			"src": "799:6:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_IWETH9_$2973_$",
																				"typeString": "type(contract IWETH9)"
																			}
																		},
																		"id": 2156,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "799:13:17",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IWETH9_$2973",
																			"typeString": "contract IWETH9"
																		}
																	},
																	"id": 2157,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "withdraw",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 2972,
																	"src": "799:22:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_external_nonpayable$_t_uint256_$returns$__$",
																		"typeString": "function (uint256) external"
																	}
																},
																"id": 2159,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "799:36:17",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 2160,
															"nodeType": "ExpressionStatement",
															"src": "799:36:17"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"id": 2164,
																		"name": "recipient",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2128,
																		"src": "880:9:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 2165,
																		"name": "balanceWETH9",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2133,
																		"src": "891:12:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"expression": {
																		"id": 2161,
																		"name": "TransferHelper",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 3550,
																		"src": "849:14:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_contract$_TransferHelper_$3550_$",
																			"typeString": "type(library TransferHelper)"
																		}
																	},
																	"id": 2163,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "safeTransferETH",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 3549,
																	"src": "849:30:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
																		"typeString": "function (address,uint256)"
																	}
																},
																"id": 2166,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "849:55:17",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 2167,
															"nodeType": "ExpressionStatement",
															"src": "849:55:17"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 2124,
										"nodeType": "StructuredDocumentation",
										"src": "485:34:17",
										"text": "@inheritdoc IPeripheryPayments"
									},
									"functionSelector": "49404b7c",
									"id": 2171,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "unwrapWETH9",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 2130,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "602:8:17"
									},
									"parameters": {
										"id": 2129,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2126,
												"mutability": "mutable",
												"name": "amountMinimum",
												"nodeType": "VariableDeclaration",
												"scope": 2171,
												"src": "545:21:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2125,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "545:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2128,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 2171,
												"src": "568:17:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2127,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "568:7:17",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "544:42:17"
									},
									"returnParameters": {
										"id": 2131,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "611:0:17"
									},
									"scope": 2310,
									"src": "524:397:17",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										2734
									],
									"body": {
										"id": 2214,
										"nodeType": "Block",
										"src": "1097:264:17",
										"statements": [
											{
												"assignments": [
													2183
												],
												"declarations": [
													{
														"constant": false,
														"id": 2183,
														"mutability": "mutable",
														"name": "balanceToken",
														"nodeType": "VariableDeclaration",
														"scope": 2214,
														"src": "1107:20:17",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 2182,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "1107:7:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2193,
												"initialValue": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 2190,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "1162:4:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_PeripheryPayments_$2310",
																		"typeString": "contract PeripheryPayments"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_PeripheryPayments_$2310",
																		"typeString": "contract PeripheryPayments"
																	}
																],
																"id": 2189,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "1154:7:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 2188,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "1154:7:17",
																	"typeDescriptions": {}
																}
															},
															"id": 2191,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1154:13:17",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 2185,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2174,
																	"src": "1137:5:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 2184,
																"name": "IERC20",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 113,
																"src": "1130:6:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_IERC20_$113_$",
																	"typeString": "type(contract IERC20)"
																}
															},
															"id": 2186,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1130:13:17",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$113",
																"typeString": "contract IERC20"
															}
														},
														"id": 2187,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "balanceOf",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 52,
														"src": "1130:23:17",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address) view external returns (uint256)"
														}
													},
													"id": 2192,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1130:38:17",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1107:61:17"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2197,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2195,
																"name": "balanceToken",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2183,
																"src": "1186:12:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 2196,
																"name": "amountMinimum",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2176,
																"src": "1202:13:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1186:29:17",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "496e73756666696369656e7420746f6b656e",
															"id": 2198,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1217:20:17",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_2cf3b53843c7738cfb0b95230b455802cee89f2ea29be4a30eee707228c97571",
																"typeString": "literal_string \"Insufficient token\""
															},
															"value": "Insufficient token"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_2cf3b53843c7738cfb0b95230b455802cee89f2ea29be4a30eee707228c97571",
																"typeString": "literal_string \"Insufficient token\""
															}
														],
														"id": 2194,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1178:7:17",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 2199,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1178:60:17",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2200,
												"nodeType": "ExpressionStatement",
												"src": "1178:60:17"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2203,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 2201,
														"name": "balanceToken",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2183,
														"src": "1253:12:17",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 2202,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1268:1:17",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "1253:16:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2213,
												"nodeType": "IfStatement",
												"src": "1249:106:17",
												"trueBody": {
													"id": 2212,
													"nodeType": "Block",
													"src": "1271:84:17",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 2207,
																		"name": "token",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2174,
																		"src": "1313:5:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 2208,
																		"name": "recipient",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2178,
																		"src": "1320:9:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 2209,
																		"name": "balanceToken",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2183,
																		"src": "1331:12:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"expression": {
																		"id": 2204,
																		"name": "TransferHelper",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 3550,
																		"src": "1285:14:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_contract$_TransferHelper_$3550_$",
																			"typeString": "type(library TransferHelper)"
																		}
																	},
																	"id": 2206,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "safeTransfer",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 3477,
																	"src": "1285:27:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
																		"typeString": "function (address,address,uint256)"
																	}
																},
																"id": 2210,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1285:59:17",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 2211,
															"nodeType": "ExpressionStatement",
															"src": "1285:59:17"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 2172,
										"nodeType": "StructuredDocumentation",
										"src": "927:34:17",
										"text": "@inheritdoc IPeripheryPayments"
									},
									"functionSelector": "df2ab5bb",
									"id": 2215,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sweepToken",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 2180,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "1088:8:17"
									},
									"parameters": {
										"id": 2179,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2174,
												"mutability": "mutable",
												"name": "token",
												"nodeType": "VariableDeclaration",
												"scope": 2215,
												"src": "995:13:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2173,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "995:7:17",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2176,
												"mutability": "mutable",
												"name": "amountMinimum",
												"nodeType": "VariableDeclaration",
												"scope": 2215,
												"src": "1018:21:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2175,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1018:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2178,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 2215,
												"src": "1049:17:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2177,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1049:7:17",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "985:87:17"
									},
									"returnParameters": {
										"id": 2181,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1097:0:17"
									},
									"scope": 2310,
									"src": "966:395:17",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										2724
									],
									"body": {
										"id": 2240,
										"nodeType": "Block",
										"src": "1453:113:17",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2226,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"arguments": [
																{
																	"id": 2222,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "1475:4:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_PeripheryPayments_$2310",
																		"typeString": "contract PeripheryPayments"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_PeripheryPayments_$2310",
																		"typeString": "contract PeripheryPayments"
																	}
																],
																"id": 2221,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "1467:7:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 2220,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "1467:7:17",
																	"typeDescriptions": {}
																}
															},
															"id": 2223,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1467:13:17",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														"id": 2224,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "balance",
														"nodeType": "MemberAccess",
														"src": "1467:21:17",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 2225,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1491:1:17",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "1467:25:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2239,
												"nodeType": "IfStatement",
												"src": "1463:96:17",
												"trueBody": {
													"expression": {
														"arguments": [
															{
																"expression": {
																	"id": 2230,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "1525:3:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 2231,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "1525:10:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															{
																"expression": {
																	"arguments": [
																		{
																			"id": 2234,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "1545:4:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_PeripheryPayments_$2310",
																				"typeString": "contract PeripheryPayments"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_PeripheryPayments_$2310",
																				"typeString": "contract PeripheryPayments"
																			}
																		],
																		"id": 2233,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "1537:7:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 2232,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "1537:7:17",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 2235,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "1537:13:17",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address_payable",
																		"typeString": "address payable"
																	}
																},
																"id": 2236,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "balance",
																"nodeType": "MemberAccess",
																"src": "1537:21:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																},
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"expression": {
																"id": 2227,
																"name": "TransferHelper",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3550,
																"src": "1494:14:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_TransferHelper_$3550_$",
																	"typeString": "type(library TransferHelper)"
																}
															},
															"id": 2229,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "safeTransferETH",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 3549,
															"src": "1494:30:17",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
																"typeString": "function (address,uint256)"
															}
														},
														"id": 2237,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1494:65:17",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$__$",
															"typeString": "tuple()"
														}
													},
													"id": 2238,
													"nodeType": "ExpressionStatement",
													"src": "1494:65:17"
												}
											}
										]
									},
									"documentation": {
										"id": 2216,
										"nodeType": "StructuredDocumentation",
										"src": "1367:34:17",
										"text": "@inheritdoc IPeripheryPayments"
									},
									"functionSelector": "12210e8a",
									"id": 2241,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "refundETH",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 2218,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "1444:8:17"
									},
									"parameters": {
										"id": 2217,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1424:2:17"
									},
									"returnParameters": {
										"id": 2219,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1453:0:17"
									},
									"scope": 2310,
									"src": "1406:160:17",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 2308,
										"nodeType": "Block",
										"src": "1881:575:17",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 2263,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"id": 2255,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 2253,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2244,
															"src": "1895:5:17",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"id": 2254,
															"name": "WETH9",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2083,
															"src": "1904:5:17",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"src": "1895:14:17",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&&",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2262,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"expression": {
																"arguments": [
																	{
																		"id": 2258,
																		"name": "this",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967268,
																		"src": "1921:4:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_PeripheryPayments_$2310",
																			"typeString": "contract PeripheryPayments"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_contract$_PeripheryPayments_$2310",
																			"typeString": "contract PeripheryPayments"
																		}
																	],
																	"id": 2257,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "1913:7:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 2256,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "1913:7:17",
																		"typeDescriptions": {}
																	}
																},
																"id": 2259,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1913:13:17",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"id": 2260,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "balance",
															"nodeType": "MemberAccess",
															"src": "1913:21:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": ">=",
														"rightExpression": {
															"id": 2261,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2250,
															"src": "1938:5:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "1913:30:17",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "1895:48:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"id": 2286,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 2281,
															"name": "payer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2246,
															"src": "2136:5:17",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"arguments": [
																{
																	"id": 2284,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "2153:4:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_PeripheryPayments_$2310",
																		"typeString": "contract PeripheryPayments"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_PeripheryPayments_$2310",
																		"typeString": "contract PeripheryPayments"
																	}
																],
																"id": 2283,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "2145:7:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 2282,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "2145:7:17",
																	"typeDescriptions": {}
																}
															},
															"id": 2285,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2145:13:17",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														"src": "2136:22:17",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseBody": {
														"id": 2305,
														"nodeType": "Block",
														"src": "2334:116:17",
														"statements": [
															{
																"expression": {
																	"arguments": [
																		{
																			"id": 2299,
																			"name": "token",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2244,
																			"src": "2408:5:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		{
																			"id": 2300,
																			"name": "payer",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2246,
																			"src": "2415:5:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		{
																			"id": 2301,
																			"name": "recipient",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2248,
																			"src": "2422:9:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		{
																			"id": 2302,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2250,
																			"src": "2433:5:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			},
																			{
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			},
																			{
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			},
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"expression": {
																			"id": 2296,
																			"name": "TransferHelper",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3550,
																			"src": "2376:14:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_TransferHelper_$3550_$",
																				"typeString": "type(library TransferHelper)"
																			}
																		},
																		"id": 2298,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "safeTransferFrom",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 3431,
																		"src": "2376:31:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_uint256_$returns$__$",
																			"typeString": "function (address,address,address,uint256)"
																		}
																	},
																	"id": 2303,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2376:63:17",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_tuple$__$",
																		"typeString": "tuple()"
																	}
																},
																"id": 2304,
																"nodeType": "ExpressionStatement",
																"src": "2376:63:17"
															}
														]
													},
													"id": 2306,
													"nodeType": "IfStatement",
													"src": "2132:318:17",
													"trueBody": {
														"id": 2295,
														"nodeType": "Block",
														"src": "2160:168:17",
														"statements": [
															{
																"expression": {
																	"arguments": [
																		{
																			"id": 2290,
																			"name": "token",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2244,
																			"src": "2293:5:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		{
																			"id": 2291,
																			"name": "recipient",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2248,
																			"src": "2300:9:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		{
																			"id": 2292,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2250,
																			"src": "2311:5:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			},
																			{
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			},
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"expression": {
																			"id": 2287,
																			"name": "TransferHelper",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3550,
																			"src": "2265:14:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_TransferHelper_$3550_$",
																				"typeString": "type(library TransferHelper)"
																			}
																		},
																		"id": 2289,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "safeTransfer",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 3477,
																		"src": "2265:27:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
																			"typeString": "function (address,address,uint256)"
																		}
																	},
																	"id": 2293,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2265:52:17",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_tuple$__$",
																		"typeString": "tuple()"
																	}
																},
																"id": 2294,
																"nodeType": "ExpressionStatement",
																"src": "2265:52:17"
															}
														]
													}
												},
												"id": 2307,
												"nodeType": "IfStatement",
												"src": "1891:559:17",
												"trueBody": {
													"id": 2280,
													"nodeType": "Block",
													"src": "1945:181:17",
													"statements": [
														{
															"expression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"expression": {
																		"argumentTypes": [],
																		"expression": {
																			"arguments": [
																				{
																					"id": 2265,
																					"name": "WETH9",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2083,
																					"src": "1996:5:17",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				],
																				"id": 2264,
																				"name": "IWETH9",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2973,
																				"src": "1989:6:17",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_contract$_IWETH9_$2973_$",
																					"typeString": "type(contract IWETH9)"
																				}
																			},
																			"id": 2266,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "typeConversion",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "1989:13:17",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IWETH9_$2973",
																				"typeString": "contract IWETH9"
																			}
																		},
																		"id": 2267,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "deposit",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 2966,
																		"src": "1989:21:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_external_payable$__$returns$__$",
																			"typeString": "function () payable external"
																		}
																	},
																	"id": 2269,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"names": [
																		"value"
																	],
																	"nodeType": "FunctionCallOptions",
																	"options": [
																		{
																			"id": 2268,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2250,
																			"src": "2018:5:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"src": "1989:35:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_external_payable$__$returns$__$value",
																		"typeString": "function () payable external"
																	}
																},
																"id": 2270,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1989:37:17",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 2271,
															"nodeType": "ExpressionStatement",
															"src": "1989:37:17"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"id": 2276,
																		"name": "recipient",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2248,
																		"src": "2098:9:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 2277,
																		"name": "value",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2250,
																		"src": "2109:5:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"expression": {
																		"arguments": [
																			{
																				"id": 2273,
																				"name": "WETH9",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2083,
																				"src": "2082:5:17",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			],
																			"id": 2272,
																			"name": "IWETH9",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2973,
																			"src": "2075:6:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_IWETH9_$2973_$",
																				"typeString": "type(contract IWETH9)"
																			}
																		},
																		"id": 2274,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "2075:13:17",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IWETH9_$2973",
																			"typeString": "contract IWETH9"
																		}
																	},
																	"id": 2275,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "transfer",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 62,
																	"src": "2075:22:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																		"typeString": "function (address,uint256) external returns (bool)"
																	}
																},
																"id": 2278,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2075:40:17",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 2279,
															"nodeType": "ExpressionStatement",
															"src": "2075:40:17"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 2242,
										"nodeType": "StructuredDocumentation",
										"src": "1572:180:17",
										"text": "@param token The token to pay\n @param payer The entity that must pay\n @param recipient The entity that will receive payment\n @param value The amount to pay"
									},
									"id": 2309,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "pay",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2251,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2244,
												"mutability": "mutable",
												"name": "token",
												"nodeType": "VariableDeclaration",
												"scope": 2309,
												"src": "1779:13:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2243,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1779:7:17",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2246,
												"mutability": "mutable",
												"name": "payer",
												"nodeType": "VariableDeclaration",
												"scope": 2309,
												"src": "1802:13:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2245,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1802:7:17",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2248,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 2309,
												"src": "1825:17:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2247,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1825:7:17",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2250,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 2309,
												"src": "1852:13:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2249,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1852:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1769:102:17"
									},
									"returnParameters": {
										"id": 2252,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1881:0:17"
									},
									"scope": 2310,
									"src": "1757:699:17",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 2311,
							"src": "305:2153:17"
						}
					],
					"src": "45:2414:17"
				},
				"id": 17
			},
			"contracts/base/PeripheryPaymentsWithFee.sol": {
				"ast": {
					"absolutePath": "contracts/base/PeripheryPaymentsWithFee.sol",
					"exportedSymbols": {
						"IERC20": [
							113
						],
						"IPeripheryImmutableState": [
							2709
						],
						"IPeripheryPayments": [
							2735
						],
						"IPeripheryPaymentsWithFee": [
							2768
						],
						"IWETH9": [
							2973
						],
						"LowGasSafeMath": [
							699
						],
						"PeripheryImmutableState": [
							2100
						],
						"PeripheryPayments": [
							2310
						],
						"PeripheryPaymentsWithFee": [
							2491
						],
						"TransferHelper": [
							3550
						]
					},
					"id": 2492,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 2312,
							"literals": [
								"solidity",
								">=",
								"0.7",
								".5"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:18"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"file": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"id": 2313,
							"nodeType": "ImportDirective",
							"scope": 2492,
							"sourceUnit": 114,
							"src": "71:56:18",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@uniswap/v3-core/contracts/libraries/LowGasSafeMath.sol",
							"file": "@uniswap/v3-core/contracts/libraries/LowGasSafeMath.sol",
							"id": 2314,
							"nodeType": "ImportDirective",
							"scope": 2492,
							"sourceUnit": 700,
							"src": "128:65:18",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/base/PeripheryPayments.sol",
							"file": "./PeripheryPayments.sol",
							"id": 2315,
							"nodeType": "ImportDirective",
							"scope": 2492,
							"sourceUnit": 2311,
							"src": "195:33:18",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/interfaces/IPeripheryPaymentsWithFee.sol",
							"file": "../interfaces/IPeripheryPaymentsWithFee.sol",
							"id": 2316,
							"nodeType": "ImportDirective",
							"scope": 2492,
							"sourceUnit": 2769,
							"src": "229:53:18",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/interfaces/external/IWETH9.sol",
							"file": "../interfaces/external/IWETH9.sol",
							"id": 2317,
							"nodeType": "ImportDirective",
							"scope": 2492,
							"sourceUnit": 2974,
							"src": "284:43:18",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/libraries/TransferHelper.sol",
							"file": "../libraries/TransferHelper.sol",
							"id": 2318,
							"nodeType": "ImportDirective",
							"scope": 2492,
							"sourceUnit": 3551,
							"src": "328:41:18",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 2319,
										"name": "PeripheryPayments",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 2310,
										"src": "417:17:18",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_PeripheryPayments_$2310",
											"typeString": "contract PeripheryPayments"
										}
									},
									"id": 2320,
									"nodeType": "InheritanceSpecifier",
									"src": "417:17:18"
								},
								{
									"baseName": {
										"id": 2321,
										"name": "IPeripheryPaymentsWithFee",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 2768,
										"src": "436:25:18",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IPeripheryPaymentsWithFee_$2768",
											"typeString": "contract IPeripheryPaymentsWithFee"
										}
									},
									"id": 2322,
									"nodeType": "InheritanceSpecifier",
									"src": "436:25:18"
								}
							],
							"contractDependencies": [
								2100,
								2310,
								2709,
								2735,
								2768
							],
							"contractKind": "contract",
							"fullyImplemented": false,
							"id": 2491,
							"linearizedBaseContracts": [
								2491,
								2768,
								2310,
								2100,
								2709,
								2735
							],
							"name": "PeripheryPaymentsWithFee",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"id": 2325,
									"libraryName": {
										"id": 2323,
										"name": "LowGasSafeMath",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 699,
										"src": "474:14:18",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_LowGasSafeMath_$699",
											"typeString": "library LowGasSafeMath"
										}
									},
									"nodeType": "UsingForDirective",
									"src": "468:33:18",
									"typeName": {
										"id": 2324,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "493:7:18",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									}
								},
								{
									"baseFunctions": [
										2753
									],
									"body": {
										"id": 2408,
										"nodeType": "Block",
										"src": "724:527:18",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 2345,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2341,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2339,
																	"name": "feeBips",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2332,
																	"src": "742:7:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">",
																"rightExpression": {
																	"hexValue": "30",
																	"id": 2340,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "752:1:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "742:11:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "&&",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2344,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2342,
																	"name": "feeBips",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2332,
																	"src": "757:7:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<=",
																"rightExpression": {
																	"hexValue": "313030",
																	"id": 2343,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "768:3:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_100_by_1",
																		"typeString": "int_const 100"
																	},
																	"value": "100"
																},
																"src": "757:14:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "742:29:18",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 2338,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "734:7:18",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 2346,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "734:38:18",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2347,
												"nodeType": "ExpressionStatement",
												"src": "734:38:18"
											},
											{
												"assignments": [
													2349
												],
												"declarations": [
													{
														"constant": false,
														"id": 2349,
														"mutability": "mutable",
														"name": "balanceWETH9",
														"nodeType": "VariableDeclaration",
														"scope": 2408,
														"src": "783:20:18",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 2348,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "783:7:18",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2359,
												"initialValue": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 2356,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "838:4:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_PeripheryPaymentsWithFee_$2491",
																		"typeString": "contract PeripheryPaymentsWithFee"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_PeripheryPaymentsWithFee_$2491",
																		"typeString": "contract PeripheryPaymentsWithFee"
																	}
																],
																"id": 2355,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "830:7:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 2354,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "830:7:18",
																	"typeDescriptions": {}
																}
															},
															"id": 2357,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "830:13:18",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 2351,
																	"name": "WETH9",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2083,
																	"src": "813:5:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 2350,
																"name": "IWETH9",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2973,
																"src": "806:6:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_IWETH9_$2973_$",
																	"typeString": "type(contract IWETH9)"
																}
															},
															"id": 2352,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "806:13:18",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IWETH9_$2973",
																"typeString": "contract IWETH9"
															}
														},
														"id": 2353,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "balanceOf",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 52,
														"src": "806:23:18",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address) view external returns (uint256)"
														}
													},
													"id": 2358,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "806:38:18",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "783:61:18"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2363,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2361,
																"name": "balanceWETH9",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2349,
																"src": "862:12:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 2362,
																"name": "amountMinimum",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2328,
																"src": "878:13:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "862:29:18",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "496e73756666696369656e74205745544839",
															"id": 2364,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "893:20:18",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_01e23337f78f001c03af3011e04e4dea54f4997ff97d41da263c1606bf0f9f73",
																"typeString": "literal_string \"Insufficient WETH9\""
															},
															"value": "Insufficient WETH9"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_01e23337f78f001c03af3011e04e4dea54f4997ff97d41da263c1606bf0f9f73",
																"typeString": "literal_string \"Insufficient WETH9\""
															}
														],
														"id": 2360,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "854:7:18",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 2365,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "854:60:18",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2366,
												"nodeType": "ExpressionStatement",
												"src": "854:60:18"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2369,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 2367,
														"name": "balanceWETH9",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2349,
														"src": "929:12:18",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 2368,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "944:1:18",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "929:16:18",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2407,
												"nodeType": "IfStatement",
												"src": "925:320:18",
												"trueBody": {
													"id": 2406,
													"nodeType": "Block",
													"src": "947:298:18",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 2374,
																		"name": "balanceWETH9",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2349,
																		"src": "984:12:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"expression": {
																		"arguments": [
																			{
																				"id": 2371,
																				"name": "WETH9",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2083,
																				"src": "968:5:18",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			],
																			"id": 2370,
																			"name": "IWETH9",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2973,
																			"src": "961:6:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_IWETH9_$2973_$",
																				"typeString": "type(contract IWETH9)"
																			}
																		},
																		"id": 2372,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "961:13:18",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IWETH9_$2973",
																			"typeString": "contract IWETH9"
																		}
																	},
																	"id": 2373,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "withdraw",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 2972,
																	"src": "961:22:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_external_nonpayable$_t_uint256_$returns$__$",
																		"typeString": "function (uint256) external"
																	}
																},
																"id": 2375,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "961:36:18",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 2376,
															"nodeType": "ExpressionStatement",
															"src": "961:36:18"
														},
														{
															"assignments": [
																2378
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 2378,
																	"mutability": "mutable",
																	"name": "feeAmount",
																	"nodeType": "VariableDeclaration",
																	"scope": 2406,
																	"src": "1011:17:18",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 2377,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "1011:7:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 2385,
															"initialValue": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2384,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"arguments": [
																		{
																			"id": 2381,
																			"name": "feeBips",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2332,
																			"src": "1048:7:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"expression": {
																			"id": 2379,
																			"name": "balanceWETH9",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2349,
																			"src": "1031:12:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"id": 2380,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "mul",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 644,
																		"src": "1031:16:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																			"typeString": "function (uint256,uint256) pure returns (uint256)"
																		}
																	},
																	"id": 2382,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "1031:25:18",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "/",
																"rightExpression": {
																	"hexValue": "31305f303030",
																	"id": 2383,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1059:6:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10000_by_1",
																		"typeString": "int_const 10000"
																	},
																	"value": "10_000"
																},
																"src": "1031:34:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "1011:54:18"
														},
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2388,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2386,
																	"name": "feeAmount",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2378,
																	"src": "1083:9:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">",
																"rightExpression": {
																	"hexValue": "30",
																	"id": 2387,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1095:1:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "1083:13:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 2396,
															"nodeType": "IfStatement",
															"src": "1079:74:18",
															"trueBody": {
																"expression": {
																	"arguments": [
																		{
																			"id": 2392,
																			"name": "feeRecipient",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2334,
																			"src": "1129:12:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		{
																			"id": 2393,
																			"name": "feeAmount",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2378,
																			"src": "1143:9:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			},
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"expression": {
																			"id": 2389,
																			"name": "TransferHelper",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3550,
																			"src": "1098:14:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_TransferHelper_$3550_$",
																				"typeString": "type(library TransferHelper)"
																			}
																		},
																		"id": 2391,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "safeTransferETH",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 3549,
																		"src": "1098:30:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
																			"typeString": "function (address,uint256)"
																		}
																	},
																	"id": 2394,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "1098:55:18",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_tuple$__$",
																		"typeString": "tuple()"
																	}
																},
																"id": 2395,
																"nodeType": "ExpressionStatement",
																"src": "1098:55:18"
															}
														},
														{
															"expression": {
																"arguments": [
																	{
																		"id": 2400,
																		"name": "recipient",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2330,
																		"src": "1198:9:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 2403,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 2401,
																			"name": "balanceWETH9",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2349,
																			"src": "1209:12:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "-",
																		"rightExpression": {
																			"id": 2402,
																			"name": "feeAmount",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2378,
																			"src": "1224:9:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "1209:24:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"expression": {
																		"id": 2397,
																		"name": "TransferHelper",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 3550,
																		"src": "1167:14:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_contract$_TransferHelper_$3550_$",
																			"typeString": "type(library TransferHelper)"
																		}
																	},
																	"id": 2399,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "safeTransferETH",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 3549,
																	"src": "1167:30:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
																		"typeString": "function (address,uint256)"
																	}
																},
																"id": 2404,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1167:67:18",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 2405,
															"nodeType": "ExpressionStatement",
															"src": "1167:67:18"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 2326,
										"nodeType": "StructuredDocumentation",
										"src": "507:41:18",
										"text": "@inheritdoc IPeripheryPaymentsWithFee"
									},
									"functionSelector": "9b2c0a37",
									"id": 2409,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "unwrapWETH9WithFee",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 2336,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "715:8:18"
									},
									"parameters": {
										"id": 2335,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2328,
												"mutability": "mutable",
												"name": "amountMinimum",
												"nodeType": "VariableDeclaration",
												"scope": 2409,
												"src": "590:21:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2327,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "590:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2330,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 2409,
												"src": "621:17:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2329,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "621:7:18",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2332,
												"mutability": "mutable",
												"name": "feeBips",
												"nodeType": "VariableDeclaration",
												"scope": 2409,
												"src": "648:15:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2331,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "648:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2334,
												"mutability": "mutable",
												"name": "feeRecipient",
												"nodeType": "VariableDeclaration",
												"scope": 2409,
												"src": "673:20:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2333,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "673:7:18",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "580:119:18"
									},
									"returnParameters": {
										"id": 2337,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "724:0:18"
									},
									"scope": 2491,
									"src": "553:698:18",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										2767
									],
									"body": {
										"id": 2489,
										"nodeType": "Block",
										"src": "1496:485:18",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 2431,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2427,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2425,
																	"name": "feeBips",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2418,
																	"src": "1514:7:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">",
																"rightExpression": {
																	"hexValue": "30",
																	"id": 2426,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1524:1:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "1514:11:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "&&",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2430,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2428,
																	"name": "feeBips",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2418,
																	"src": "1529:7:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<=",
																"rightExpression": {
																	"hexValue": "313030",
																	"id": 2429,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1540:3:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_100_by_1",
																		"typeString": "int_const 100"
																	},
																	"value": "100"
																},
																"src": "1529:14:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "1514:29:18",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 2424,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1506:7:18",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 2432,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1506:38:18",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2433,
												"nodeType": "ExpressionStatement",
												"src": "1506:38:18"
											},
											{
												"assignments": [
													2435
												],
												"declarations": [
													{
														"constant": false,
														"id": 2435,
														"mutability": "mutable",
														"name": "balanceToken",
														"nodeType": "VariableDeclaration",
														"scope": 2489,
														"src": "1555:20:18",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 2434,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "1555:7:18",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2445,
												"initialValue": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 2442,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "1610:4:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_PeripheryPaymentsWithFee_$2491",
																		"typeString": "contract PeripheryPaymentsWithFee"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_PeripheryPaymentsWithFee_$2491",
																		"typeString": "contract PeripheryPaymentsWithFee"
																	}
																],
																"id": 2441,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "1602:7:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 2440,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "1602:7:18",
																	"typeDescriptions": {}
																}
															},
															"id": 2443,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1602:13:18",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 2437,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2412,
																	"src": "1585:5:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 2436,
																"name": "IERC20",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 113,
																"src": "1578:6:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_IERC20_$113_$",
																	"typeString": "type(contract IERC20)"
																}
															},
															"id": 2438,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1578:13:18",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$113",
																"typeString": "contract IERC20"
															}
														},
														"id": 2439,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "balanceOf",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 52,
														"src": "1578:23:18",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address) view external returns (uint256)"
														}
													},
													"id": 2444,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1578:38:18",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1555:61:18"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2449,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2447,
																"name": "balanceToken",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2435,
																"src": "1634:12:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 2448,
																"name": "amountMinimum",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2414,
																"src": "1650:13:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1634:29:18",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "496e73756666696369656e7420746f6b656e",
															"id": 2450,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1665:20:18",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_2cf3b53843c7738cfb0b95230b455802cee89f2ea29be4a30eee707228c97571",
																"typeString": "literal_string \"Insufficient token\""
															},
															"value": "Insufficient token"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_2cf3b53843c7738cfb0b95230b455802cee89f2ea29be4a30eee707228c97571",
																"typeString": "literal_string \"Insufficient token\""
															}
														],
														"id": 2446,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1626:7:18",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 2451,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1626:60:18",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2452,
												"nodeType": "ExpressionStatement",
												"src": "1626:60:18"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2455,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 2453,
														"name": "balanceToken",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2435,
														"src": "1701:12:18",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 2454,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1716:1:18",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "1701:16:18",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2488,
												"nodeType": "IfStatement",
												"src": "1697:278:18",
												"trueBody": {
													"id": 2487,
													"nodeType": "Block",
													"src": "1719:256:18",
													"statements": [
														{
															"assignments": [
																2457
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 2457,
																	"mutability": "mutable",
																	"name": "feeAmount",
																	"nodeType": "VariableDeclaration",
																	"scope": 2487,
																	"src": "1733:17:18",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 2456,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "1733:7:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 2464,
															"initialValue": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2463,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"arguments": [
																		{
																			"id": 2460,
																			"name": "feeBips",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2418,
																			"src": "1770:7:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"expression": {
																			"id": 2458,
																			"name": "balanceToken",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2435,
																			"src": "1753:12:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"id": 2459,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "mul",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 644,
																		"src": "1753:16:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																			"typeString": "function (uint256,uint256) pure returns (uint256)"
																		}
																	},
																	"id": 2461,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "1753:25:18",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "/",
																"rightExpression": {
																	"hexValue": "31305f303030",
																	"id": 2462,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1781:6:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10000_by_1",
																		"typeString": "int_const 10000"
																	},
																	"value": "10_000"
																},
																"src": "1753:34:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "1733:54:18"
														},
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2467,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2465,
																	"name": "feeAmount",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2457,
																	"src": "1805:9:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">",
																"rightExpression": {
																	"hexValue": "30",
																	"id": 2466,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1817:1:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "1805:13:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 2476,
															"nodeType": "IfStatement",
															"src": "1801:78:18",
															"trueBody": {
																"expression": {
																	"arguments": [
																		{
																			"id": 2471,
																			"name": "token",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2412,
																			"src": "1848:5:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		{
																			"id": 2472,
																			"name": "feeRecipient",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2420,
																			"src": "1855:12:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		{
																			"id": 2473,
																			"name": "feeAmount",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2457,
																			"src": "1869:9:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			},
																			{
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			},
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"expression": {
																			"id": 2468,
																			"name": "TransferHelper",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3550,
																			"src": "1820:14:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_TransferHelper_$3550_$",
																				"typeString": "type(library TransferHelper)"
																			}
																		},
																		"id": 2470,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "safeTransfer",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 3477,
																		"src": "1820:27:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
																			"typeString": "function (address,address,uint256)"
																		}
																	},
																	"id": 2474,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "1820:59:18",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_tuple$__$",
																		"typeString": "tuple()"
																	}
																},
																"id": 2475,
																"nodeType": "ExpressionStatement",
																"src": "1820:59:18"
															}
														},
														{
															"expression": {
																"arguments": [
																	{
																		"id": 2480,
																		"name": "token",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2412,
																		"src": "1921:5:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 2481,
																		"name": "recipient",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2416,
																		"src": "1928:9:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 2484,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 2482,
																			"name": "balanceToken",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2435,
																			"src": "1939:12:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "-",
																		"rightExpression": {
																			"id": 2483,
																			"name": "feeAmount",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2457,
																			"src": "1954:9:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "1939:24:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"expression": {
																		"id": 2477,
																		"name": "TransferHelper",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 3550,
																		"src": "1893:14:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_contract$_TransferHelper_$3550_$",
																			"typeString": "type(library TransferHelper)"
																		}
																	},
																	"id": 2479,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "safeTransfer",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 3477,
																	"src": "1893:27:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
																		"typeString": "function (address,address,uint256)"
																	}
																},
																"id": 2485,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1893:71:18",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 2486,
															"nodeType": "ExpressionStatement",
															"src": "1893:71:18"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 2410,
										"nodeType": "StructuredDocumentation",
										"src": "1257:41:18",
										"text": "@inheritdoc IPeripheryPaymentsWithFee"
									},
									"functionSelector": "e0e189a0",
									"id": 2490,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sweepTokenWithFee",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 2422,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "1487:8:18"
									},
									"parameters": {
										"id": 2421,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2412,
												"mutability": "mutable",
												"name": "token",
												"nodeType": "VariableDeclaration",
												"scope": 2490,
												"src": "1339:13:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2411,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1339:7:18",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2414,
												"mutability": "mutable",
												"name": "amountMinimum",
												"nodeType": "VariableDeclaration",
												"scope": 2490,
												"src": "1362:21:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2413,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1362:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2416,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 2490,
												"src": "1393:17:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2415,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1393:7:18",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2418,
												"mutability": "mutable",
												"name": "feeBips",
												"nodeType": "VariableDeclaration",
												"scope": 2490,
												"src": "1420:15:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2417,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1420:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2420,
												"mutability": "mutable",
												"name": "feeRecipient",
												"nodeType": "VariableDeclaration",
												"scope": 2490,
												"src": "1445:20:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2419,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1445:7:18",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1329:142:18"
									},
									"returnParameters": {
										"id": 2423,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1496:0:18"
									},
									"scope": 2491,
									"src": "1303:678:18",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "public"
								}
							],
							"scope": 2492,
							"src": "371:1612:18"
						}
					],
					"src": "45:1939:18"
				},
				"id": 18
			},
			"contracts/base/PeripheryValidation.sol": {
				"ast": {
					"absolutePath": "contracts/base/PeripheryValidation.sol",
					"exportedSymbols": {
						"BlockTimestamp": [
							1984
						],
						"PeripheryValidation": [
							2511
						]
					},
					"id": 2512,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 2493,
							"literals": [
								"solidity",
								"=",
								"0.7",
								".6"
							],
							"nodeType": "PragmaDirective",
							"src": "45:23:19"
						},
						{
							"absolutePath": "contracts/base/BlockTimestamp.sol",
							"file": "./BlockTimestamp.sol",
							"id": 2494,
							"nodeType": "ImportDirective",
							"scope": 2512,
							"sourceUnit": 1985,
							"src": "70:30:19",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 2495,
										"name": "BlockTimestamp",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 1984,
										"src": "143:14:19",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_BlockTimestamp_$1984",
											"typeString": "contract BlockTimestamp"
										}
									},
									"id": 2496,
									"nodeType": "InheritanceSpecifier",
									"src": "143:14:19"
								}
							],
							"contractDependencies": [
								1984
							],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 2511,
							"linearizedBaseContracts": [
								2511,
								1984
							],
							"name": "PeripheryValidation",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 2509,
										"nodeType": "Block",
										"src": "205:89:19",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2504,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 2501,
																	"name": "_blockTimestamp",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1983,
																	"src": "223:15:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
																		"typeString": "function () view returns (uint256)"
																	}
																},
																"id": 2502,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "223:17:19",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<=",
															"rightExpression": {
																"id": 2503,
																"name": "deadline",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2498,
																"src": "244:8:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "223:29:19",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "5472616e73616374696f6e20746f6f206f6c64",
															"id": 2505,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "254:21:19",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c2621685b6a86291a4533558eb72fba04db12a0363db47624d86d9bbb608d293",
																"typeString": "literal_string \"Transaction too old\""
															},
															"value": "Transaction too old"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_c2621685b6a86291a4533558eb72fba04db12a0363db47624d86d9bbb608d293",
																"typeString": "literal_string \"Transaction too old\""
															}
														],
														"id": 2500,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "215:7:19",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 2506,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "215:61:19",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2507,
												"nodeType": "ExpressionStatement",
												"src": "215:61:19"
											},
											{
												"id": 2508,
												"nodeType": "PlaceholderStatement",
												"src": "286:1:19"
											}
										]
									},
									"id": 2510,
									"name": "checkDeadline",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 2499,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2498,
												"mutability": "mutable",
												"name": "deadline",
												"nodeType": "VariableDeclaration",
												"scope": 2510,
												"src": "187:16:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2497,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "187:7:19",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "186:18:19"
									},
									"src": "164:130:19",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 2512,
							"src": "102:194:19"
						}
					],
					"src": "45:252:19"
				},
				"id": 19
			},
			"contracts/base/SelfPermit.sol": {
				"ast": {
					"absolutePath": "contracts/base/SelfPermit.sol",
					"exportedSymbols": {
						"IERC20": [
							113
						],
						"IERC20Permit": [
							35
						],
						"IERC20PermitAllowed": [
							2956
						],
						"ISelfPermit": [
							2836
						],
						"SelfPermit": [
							2678
						]
					},
					"id": 2679,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 2513,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:20"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"file": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"id": 2514,
							"nodeType": "ImportDirective",
							"scope": 2679,
							"sourceUnit": 114,
							"src": "71:56:20",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/drafts/IERC20Permit.sol",
							"file": "@openzeppelin/contracts/drafts/IERC20Permit.sol",
							"id": 2515,
							"nodeType": "ImportDirective",
							"scope": 2679,
							"sourceUnit": 36,
							"src": "128:57:20",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/interfaces/ISelfPermit.sol",
							"file": "../interfaces/ISelfPermit.sol",
							"id": 2516,
							"nodeType": "ImportDirective",
							"scope": 2679,
							"sourceUnit": 2837,
							"src": "187:39:20",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/interfaces/external/IERC20PermitAllowed.sol",
							"file": "../interfaces/external/IERC20PermitAllowed.sol",
							"id": 2517,
							"nodeType": "ImportDirective",
							"scope": 2679,
							"sourceUnit": 2957,
							"src": "227:56:20",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 2519,
										"name": "ISelfPermit",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 2836,
										"src": "612:11:20",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_ISelfPermit_$2836",
											"typeString": "contract ISelfPermit"
										}
									},
									"id": 2520,
									"nodeType": "InheritanceSpecifier",
									"src": "612:11:20"
								}
							],
							"contractDependencies": [
								2836
							],
							"contractKind": "contract",
							"documentation": {
								"id": 2518,
								"nodeType": "StructuredDocumentation",
								"src": "285:295:20",
								"text": "@title Self Permit\n @notice Functionality to call permit on any EIP-2612-compliant token for use in the route\n @dev These functions are expected to be embedded in multicalls to allow EOAs to approve a contract and call a function\n that requires an approval in a single transaction."
							},
							"fullyImplemented": true,
							"id": 2678,
							"linearizedBaseContracts": [
								2678,
								2836
							],
							"name": "SelfPermit",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"baseFunctions": [
										2787
									],
									"body": {
										"id": 2554,
										"nodeType": "Block",
										"src": "839:96:20",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 2541,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "876:3:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 2542,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "876:10:20",
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														{
															"arguments": [
																{
																	"id": 2545,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "896:4:20",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_SelfPermit_$2678",
																		"typeString": "contract SelfPermit"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_SelfPermit_$2678",
																		"typeString": "contract SelfPermit"
																	}
																],
																"id": 2544,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "888:7:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 2543,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "888:7:20",
																	"typeDescriptions": {}
																}
															},
															"id": 2546,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "888:13:20",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2547,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2525,
															"src": "903:5:20",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 2548,
															"name": "deadline",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2527,
															"src": "910:8:20",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 2549,
															"name": "v",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2529,
															"src": "920:1:20",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														{
															"id": 2550,
															"name": "r",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2531,
															"src": "923:1:20",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 2551,
															"name": "s",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2533,
															"src": "926:1:20",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 2538,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2523,
																	"src": "862:5:20",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 2537,
																"name": "IERC20Permit",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 35,
																"src": "849:12:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_IERC20Permit_$35_$",
																	"typeString": "type(contract IERC20Permit)"
																}
															},
															"id": 2539,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "849:19:20",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20Permit_$35",
																"typeString": "contract IERC20Permit"
															}
														},
														"id": 2540,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "permit",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 20,
														"src": "849:26:20",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$__$",
															"typeString": "function (address,address,uint256,uint256,uint8,bytes32,bytes32) external"
														}
													},
													"id": 2552,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "849:79:20",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2553,
												"nodeType": "ExpressionStatement",
												"src": "849:79:20"
											}
										]
									},
									"documentation": {
										"id": 2521,
										"nodeType": "StructuredDocumentation",
										"src": "630:27:20",
										"text": "@inheritdoc ISelfPermit"
									},
									"functionSelector": "f3995c67",
									"id": 2555,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "selfPermit",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 2535,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "830:8:20"
									},
									"parameters": {
										"id": 2534,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2523,
												"mutability": "mutable",
												"name": "token",
												"nodeType": "VariableDeclaration",
												"scope": 2555,
												"src": "691:13:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2522,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "691:7:20",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2525,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 2555,
												"src": "714:13:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2524,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "714:7:20",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2527,
												"mutability": "mutable",
												"name": "deadline",
												"nodeType": "VariableDeclaration",
												"scope": 2555,
												"src": "737:16:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2526,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "737:7:20",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2529,
												"mutability": "mutable",
												"name": "v",
												"nodeType": "VariableDeclaration",
												"scope": 2555,
												"src": "763:7:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 2528,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "763:5:20",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2531,
												"mutability": "mutable",
												"name": "r",
												"nodeType": "VariableDeclaration",
												"scope": 2555,
												"src": "780:9:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2530,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "780:7:20",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2533,
												"mutability": "mutable",
												"name": "s",
												"nodeType": "VariableDeclaration",
												"scope": 2555,
												"src": "799:9:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2532,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "799:7:20",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "681:133:20"
									},
									"returnParameters": {
										"id": 2536,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "839:0:20"
									},
									"scope": 2678,
									"src": "662:273:20",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										2803
									],
									"body": {
										"id": 2595,
										"nodeType": "Block",
										"src": "1163:124:20",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2584,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"expression": {
																	"id": 2576,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "1201:3:20",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 2577,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "1201:10:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															{
																"arguments": [
																	{
																		"id": 2580,
																		"name": "this",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967268,
																		"src": "1221:4:20",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_SelfPermit_$2678",
																			"typeString": "contract SelfPermit"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_contract$_SelfPermit_$2678",
																			"typeString": "contract SelfPermit"
																		}
																	],
																	"id": 2579,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "1213:7:20",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 2578,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "1213:7:20",
																		"typeDescriptions": {}
																	}
																},
																"id": 2581,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1213:13:20",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																},
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															],
															"expression": {
																"arguments": [
																	{
																		"id": 2573,
																		"name": "token",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2558,
																		"src": "1184:5:20",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 2572,
																	"name": "IERC20",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 113,
																	"src": "1177:6:20",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_contract$_IERC20_$113_$",
																		"typeString": "type(contract IERC20)"
																	}
																},
																"id": 2574,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1177:13:20",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_contract$_IERC20_$113",
																	"typeString": "contract IERC20"
																}
															},
															"id": 2575,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "allowance",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 72,
															"src": "1177:23:20",
															"typeDescriptions": {
																"typeIdentifier": "t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$",
																"typeString": "function (address,address) view external returns (uint256)"
															}
														},
														"id": 2582,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1177:50:20",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"id": 2583,
														"name": "value",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2560,
														"src": "1230:5:20",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1177:58:20",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2594,
												"nodeType": "IfStatement",
												"src": "1173:107:20",
												"trueBody": {
													"expression": {
														"arguments": [
															{
																"id": 2586,
																"name": "token",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2558,
																"src": "1248:5:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															{
																"id": 2587,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2560,
																"src": "1255:5:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"id": 2588,
																"name": "deadline",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2562,
																"src": "1262:8:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"id": 2589,
																"name": "v",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2564,
																"src": "1272:1:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															{
																"id": 2590,
																"name": "r",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2566,
																"src": "1275:1:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															{
																"id": 2591,
																"name": "s",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2568,
																"src": "1278:1:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																},
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																{
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																},
																{
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																},
																{
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															],
															"id": 2585,
															"name": "selfPermit",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2555,
															"src": "1237:10:20",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_uint256_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$__$",
																"typeString": "function (address,uint256,uint256,uint8,bytes32,bytes32)"
															}
														},
														"id": 2592,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1237:43:20",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$__$",
															"typeString": "tuple()"
														}
													},
													"id": 2593,
													"nodeType": "ExpressionStatement",
													"src": "1237:43:20"
												}
											}
										]
									},
									"documentation": {
										"id": 2556,
										"nodeType": "StructuredDocumentation",
										"src": "941:27:20",
										"text": "@inheritdoc ISelfPermit"
									},
									"functionSelector": "c2e3140a",
									"id": 2596,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "selfPermitIfNecessary",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 2570,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "1154:8:20"
									},
									"parameters": {
										"id": 2569,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2558,
												"mutability": "mutable",
												"name": "token",
												"nodeType": "VariableDeclaration",
												"scope": 2596,
												"src": "1013:13:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2557,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1013:7:20",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2560,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 2596,
												"src": "1036:13:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2559,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1036:7:20",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2562,
												"mutability": "mutable",
												"name": "deadline",
												"nodeType": "VariableDeclaration",
												"scope": 2596,
												"src": "1059:16:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2561,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1059:7:20",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2564,
												"mutability": "mutable",
												"name": "v",
												"nodeType": "VariableDeclaration",
												"scope": 2596,
												"src": "1085:7:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 2563,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "1085:5:20",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2566,
												"mutability": "mutable",
												"name": "r",
												"nodeType": "VariableDeclaration",
												"scope": 2596,
												"src": "1102:9:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2565,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1102:7:20",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2568,
												"mutability": "mutable",
												"name": "s",
												"nodeType": "VariableDeclaration",
												"scope": 2596,
												"src": "1121:9:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2567,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1121:7:20",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1003:133:20"
									},
									"returnParameters": {
										"id": 2571,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1163:0:20"
									},
									"scope": 2678,
									"src": "973:314:20",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"baseFunctions": [
										2819
									],
									"body": {
										"id": 2631,
										"nodeType": "Block",
										"src": "1507:107:20",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 2617,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "1551:3:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 2618,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "1551:10:20",
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														{
															"arguments": [
																{
																	"id": 2621,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "1571:4:20",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_SelfPermit_$2678",
																		"typeString": "contract SelfPermit"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_SelfPermit_$2678",
																		"typeString": "contract SelfPermit"
																	}
																],
																"id": 2620,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "1563:7:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 2619,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "1563:7:20",
																	"typeDescriptions": {}
																}
															},
															"id": 2622,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1563:13:20",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2623,
															"name": "nonce",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2601,
															"src": "1578:5:20",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 2624,
															"name": "expiry",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2603,
															"src": "1585:6:20",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "74727565",
															"id": 2625,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "bool",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1593:4:20",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"value": "true"
														},
														{
															"id": 2626,
															"name": "v",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2605,
															"src": "1599:1:20",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														{
															"id": 2627,
															"name": "r",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2607,
															"src": "1602:1:20",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 2628,
															"name": "s",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2609,
															"src": "1605:1:20",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 2614,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2599,
																	"src": "1537:5:20",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 2613,
																"name": "IERC20PermitAllowed",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2956,
																"src": "1517:19:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_IERC20PermitAllowed_$2956_$",
																	"typeString": "type(contract IERC20PermitAllowed)"
																}
															},
															"id": 2615,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1517:26:20",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20PermitAllowed_$2956",
																"typeString": "contract IERC20PermitAllowed"
															}
														},
														"id": 2616,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "permit",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 2955,
														"src": "1517:33:20",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$_t_bool_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$__$",
															"typeString": "function (address,address,uint256,uint256,bool,uint8,bytes32,bytes32) external"
														}
													},
													"id": 2629,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1517:90:20",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2630,
												"nodeType": "ExpressionStatement",
												"src": "1517:90:20"
											}
										]
									},
									"documentation": {
										"id": 2597,
										"nodeType": "StructuredDocumentation",
										"src": "1293:27:20",
										"text": "@inheritdoc ISelfPermit"
									},
									"functionSelector": "4659a494",
									"id": 2632,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "selfPermitAllowed",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 2611,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "1498:8:20"
									},
									"parameters": {
										"id": 2610,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2599,
												"mutability": "mutable",
												"name": "token",
												"nodeType": "VariableDeclaration",
												"scope": 2632,
												"src": "1361:13:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2598,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1361:7:20",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2601,
												"mutability": "mutable",
												"name": "nonce",
												"nodeType": "VariableDeclaration",
												"scope": 2632,
												"src": "1384:13:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2600,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1384:7:20",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2603,
												"mutability": "mutable",
												"name": "expiry",
												"nodeType": "VariableDeclaration",
												"scope": 2632,
												"src": "1407:14:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2602,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1407:7:20",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2605,
												"mutability": "mutable",
												"name": "v",
												"nodeType": "VariableDeclaration",
												"scope": 2632,
												"src": "1431:7:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 2604,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "1431:5:20",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2607,
												"mutability": "mutable",
												"name": "r",
												"nodeType": "VariableDeclaration",
												"scope": 2632,
												"src": "1448:9:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2606,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1448:7:20",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2609,
												"mutability": "mutable",
												"name": "s",
												"nodeType": "VariableDeclaration",
												"scope": 2632,
												"src": "1467:9:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2608,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1467:7:20",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1351:131:20"
									},
									"returnParameters": {
										"id": 2612,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1507:0:20"
									},
									"scope": 2678,
									"src": "1325:289:20",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										2835
									],
									"body": {
										"id": 2676,
										"nodeType": "Block",
										"src": "1847:153:20",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2665,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"expression": {
																	"id": 2653,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "1885:3:20",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 2654,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "1885:10:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															{
																"arguments": [
																	{
																		"id": 2657,
																		"name": "this",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967268,
																		"src": "1905:4:20",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_SelfPermit_$2678",
																			"typeString": "contract SelfPermit"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_contract$_SelfPermit_$2678",
																			"typeString": "contract SelfPermit"
																		}
																	],
																	"id": 2656,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "1897:7:20",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 2655,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "1897:7:20",
																		"typeDescriptions": {}
																	}
																},
																"id": 2658,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1897:13:20",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																},
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															],
															"expression": {
																"arguments": [
																	{
																		"id": 2650,
																		"name": "token",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2635,
																		"src": "1868:5:20",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 2649,
																	"name": "IERC20",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 113,
																	"src": "1861:6:20",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_contract$_IERC20_$113_$",
																		"typeString": "type(contract IERC20)"
																	}
																},
																"id": 2651,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1861:13:20",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_contract$_IERC20_$113",
																	"typeString": "contract IERC20"
																}
															},
															"id": 2652,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "allowance",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 72,
															"src": "1861:23:20",
															"typeDescriptions": {
																"typeIdentifier": "t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$",
																"typeString": "function (address,address) view external returns (uint256)"
															}
														},
														"id": 2659,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1861:50:20",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"expression": {
															"arguments": [
																{
																	"id": 2662,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "1919:7:20",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint256_$",
																		"typeString": "type(uint256)"
																	},
																	"typeName": {
																		"id": 2661,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "1919:7:20",
																		"typeDescriptions": {}
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_type$_t_uint256_$",
																		"typeString": "type(uint256)"
																	}
																],
																"id": 2660,
																"name": "type",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967269,
																"src": "1914:4:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																	"typeString": "function () pure"
																}
															},
															"id": 2663,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1914:13:20",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_magic_meta_type_t_uint256",
																"typeString": "type(uint256)"
															}
														},
														"id": 2664,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberName": "max",
														"nodeType": "MemberAccess",
														"src": "1914:17:20",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1861:70:20",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2675,
												"nodeType": "IfStatement",
												"src": "1857:136:20",
												"trueBody": {
													"expression": {
														"arguments": [
															{
																"id": 2667,
																"name": "token",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2635,
																"src": "1963:5:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															{
																"id": 2668,
																"name": "nonce",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2637,
																"src": "1970:5:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"id": 2669,
																"name": "expiry",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2639,
																"src": "1977:6:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"id": 2670,
																"name": "v",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2641,
																"src": "1985:1:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															{
																"id": 2671,
																"name": "r",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2643,
																"src": "1988:1:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															{
																"id": 2672,
																"name": "s",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2645,
																"src": "1991:1:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																},
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																{
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																},
																{
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																},
																{
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															],
															"id": 2666,
															"name": "selfPermitAllowed",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2632,
															"src": "1945:17:20",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_uint256_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$__$",
																"typeString": "function (address,uint256,uint256,uint8,bytes32,bytes32)"
															}
														},
														"id": 2673,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1945:48:20",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$__$",
															"typeString": "tuple()"
														}
													},
													"id": 2674,
													"nodeType": "ExpressionStatement",
													"src": "1945:48:20"
												}
											}
										]
									},
									"documentation": {
										"id": 2633,
										"nodeType": "StructuredDocumentation",
										"src": "1620:27:20",
										"text": "@inheritdoc ISelfPermit"
									},
									"functionSelector": "a4a78f0c",
									"id": 2677,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "selfPermitAllowedIfNecessary",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 2647,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "1838:8:20"
									},
									"parameters": {
										"id": 2646,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2635,
												"mutability": "mutable",
												"name": "token",
												"nodeType": "VariableDeclaration",
												"scope": 2677,
												"src": "1699:13:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2634,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1699:7:20",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2637,
												"mutability": "mutable",
												"name": "nonce",
												"nodeType": "VariableDeclaration",
												"scope": 2677,
												"src": "1722:13:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2636,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1722:7:20",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2639,
												"mutability": "mutable",
												"name": "expiry",
												"nodeType": "VariableDeclaration",
												"scope": 2677,
												"src": "1745:14:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2638,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1745:7:20",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2641,
												"mutability": "mutable",
												"name": "v",
												"nodeType": "VariableDeclaration",
												"scope": 2677,
												"src": "1769:7:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 2640,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "1769:5:20",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2643,
												"mutability": "mutable",
												"name": "r",
												"nodeType": "VariableDeclaration",
												"scope": 2677,
												"src": "1786:9:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2642,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1786:7:20",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2645,
												"mutability": "mutable",
												"name": "s",
												"nodeType": "VariableDeclaration",
												"scope": 2677,
												"src": "1805:9:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2644,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1805:7:20",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1689:131:20"
									},
									"returnParameters": {
										"id": 2648,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1847:0:20"
									},
									"scope": 2678,
									"src": "1652:348:20",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 2679,
							"src": "580:1422:20"
						}
					],
					"src": "45:1958:20"
				},
				"id": 20
			},
			"contracts/interfaces/IMulticall.sol": {
				"ast": {
					"absolutePath": "contracts/interfaces/IMulticall.sol",
					"exportedSymbols": {
						"IMulticall": [
							2693
						]
					},
					"id": 2694,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 2680,
							"literals": [
								"solidity",
								">=",
								"0.7",
								".5"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:21"
						},
						{
							"id": 2681,
							"literals": [
								"abicoder",
								"v2"
							],
							"nodeType": "PragmaDirective",
							"src": "70:19:21"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 2682,
								"nodeType": "StructuredDocumentation",
								"src": "91:109:21",
								"text": "@title Multicall interface\n @notice Enables calling multiple methods in a single call to the contract"
							},
							"fullyImplemented": false,
							"id": 2693,
							"linearizedBaseContracts": [
								2693
							],
							"name": "IMulticall",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 2683,
										"nodeType": "StructuredDocumentation",
										"src": "227:378:21",
										"text": "@notice Call multiple functions in the current contract and return the data from all of them if they all succeed\n @dev The `msg.value` should not be trusted for any method callable from multicall.\n @param data The encoded function data for each of the calls to make to this contract\n @return results The results from each of the calls passed in via data"
									},
									"functionSelector": "ac9650d8",
									"id": 2692,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "multicall",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2687,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2686,
												"mutability": "mutable",
												"name": "data",
												"nodeType": "VariableDeclaration",
												"scope": 2692,
												"src": "629:21:21",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr",
													"typeString": "bytes[]"
												},
												"typeName": {
													"baseType": {
														"id": 2684,
														"name": "bytes",
														"nodeType": "ElementaryTypeName",
														"src": "629:5:21",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_storage_ptr",
															"typeString": "bytes"
														}
													},
													"id": 2685,
													"nodeType": "ArrayTypeName",
													"src": "629:7:21",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes_storage_$dyn_storage_ptr",
														"typeString": "bytes[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "628:23:21"
									},
									"returnParameters": {
										"id": 2691,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2690,
												"mutability": "mutable",
												"name": "results",
												"nodeType": "VariableDeclaration",
												"scope": 2692,
												"src": "678:22:21",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes_memory_ptr_$dyn_memory_ptr",
													"typeString": "bytes[]"
												},
												"typeName": {
													"baseType": {
														"id": 2688,
														"name": "bytes",
														"nodeType": "ElementaryTypeName",
														"src": "678:5:21",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_storage_ptr",
															"typeString": "bytes"
														}
													},
													"id": 2689,
													"nodeType": "ArrayTypeName",
													"src": "678:7:21",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes_storage_$dyn_storage_ptr",
														"typeString": "bytes[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "677:24:21"
									},
									"scope": 2693,
									"src": "610:92:21",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 2694,
							"src": "200:504:21"
						}
					],
					"src": "45:660:21"
				},
				"id": 21
			},
			"contracts/interfaces/IPeripheryImmutableState.sol": {
				"ast": {
					"absolutePath": "contracts/interfaces/IPeripheryImmutableState.sol",
					"exportedSymbols": {
						"IPeripheryImmutableState": [
							2709
						]
					},
					"id": 2710,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 2695,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:22"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 2696,
								"nodeType": "StructuredDocumentation",
								"src": "71:91:22",
								"text": "@title Immutable state\n @notice Functions that return immutable state of the router"
							},
							"fullyImplemented": false,
							"id": 2709,
							"linearizedBaseContracts": [
								2709
							],
							"name": "IPeripheryImmutableState",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 2697,
										"nodeType": "StructuredDocumentation",
										"src": "203:57:22",
										"text": "@return Returns the address of the Uniswap V3 factory"
									},
									"functionSelector": "c45a0155",
									"id": 2702,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "factory",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2698,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "281:2:22"
									},
									"returnParameters": {
										"id": 2701,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2700,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 2702,
												"src": "307:7:22",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2699,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "307:7:22",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "306:9:22"
									},
									"scope": 2709,
									"src": "265:51:22",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2703,
										"nodeType": "StructuredDocumentation",
										"src": "322:40:22",
										"text": "@return Returns the address of WETH9"
									},
									"functionSelector": "4aa4a4fc",
									"id": 2708,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "WETH9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2704,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "381:2:22"
									},
									"returnParameters": {
										"id": 2707,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2706,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 2708,
												"src": "407:7:22",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2705,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "407:7:22",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "406:9:22"
									},
									"scope": 2709,
									"src": "367:49:22",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 2710,
							"src": "162:256:22"
						}
					],
					"src": "45:374:22"
				},
				"id": 22
			},
			"contracts/interfaces/IPeripheryPayments.sol": {
				"ast": {
					"absolutePath": "contracts/interfaces/IPeripheryPayments.sol",
					"exportedSymbols": {
						"IPeripheryPayments": [
							2735
						]
					},
					"id": 2736,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 2711,
							"literals": [
								"solidity",
								">=",
								"0.7",
								".5"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:23"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 2712,
								"nodeType": "StructuredDocumentation",
								"src": "71:92:23",
								"text": "@title Periphery Payments\n @notice Functions to ease deposits and withdrawals of ETH"
							},
							"fullyImplemented": false,
							"id": 2735,
							"linearizedBaseContracts": [
								2735
							],
							"name": "IPeripheryPayments",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 2713,
										"nodeType": "StructuredDocumentation",
										"src": "198:302:23",
										"text": "@notice Unwraps the contract's WETH9 balance and sends it to recipient as ETH.\n @dev The amountMinimum parameter prevents malicious contracts from stealing WETH9 from users.\n @param amountMinimum The minimum amount of WETH9 to unwrap\n @param recipient The address receiving ETH"
									},
									"functionSelector": "49404b7c",
									"id": 2720,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "unwrapWETH9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2718,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2715,
												"mutability": "mutable",
												"name": "amountMinimum",
												"nodeType": "VariableDeclaration",
												"scope": 2720,
												"src": "526:21:23",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2714,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "526:7:23",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2717,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 2720,
												"src": "549:17:23",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2716,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "549:7:23",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "525:42:23"
									},
									"returnParameters": {
										"id": 2719,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "584:0:23"
									},
									"scope": 2735,
									"src": "505:80:23",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2721,
										"nodeType": "StructuredDocumentation",
										"src": "591:225:23",
										"text": "@notice Refunds any ETH balance held by this contract to the `msg.sender`\n @dev Useful for bundling with mint or increase liquidity that uses ether, or exact output swaps\n that use ether for the input amount"
									},
									"functionSelector": "12210e8a",
									"id": 2724,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "refundETH",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2722,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "839:2:23"
									},
									"returnParameters": {
										"id": 2723,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "858:0:23"
									},
									"scope": 2735,
									"src": "821:38:23",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2725,
										"nodeType": "StructuredDocumentation",
										"src": "865:427:23",
										"text": "@notice Transfers the full amount of a token held by this contract to recipient\n @dev The amountMinimum parameter prevents malicious contracts from stealing the token from users\n @param token The contract address of the token which will be transferred to `recipient`\n @param amountMinimum The minimum amount of token required for a transfer\n @param recipient The destination address of the token"
									},
									"functionSelector": "df2ab5bb",
									"id": 2734,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "sweepToken",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2732,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2727,
												"mutability": "mutable",
												"name": "token",
												"nodeType": "VariableDeclaration",
												"scope": 2734,
												"src": "1326:13:23",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2726,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1326:7:23",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2729,
												"mutability": "mutable",
												"name": "amountMinimum",
												"nodeType": "VariableDeclaration",
												"scope": 2734,
												"src": "1349:21:23",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2728,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1349:7:23",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2731,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 2734,
												"src": "1380:17:23",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2730,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1380:7:23",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1316:87:23"
									},
									"returnParameters": {
										"id": 2733,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1420:0:23"
									},
									"scope": 2735,
									"src": "1297:124:23",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 2736,
							"src": "163:1260:23"
						}
					],
					"src": "45:1379:23"
				},
				"id": 23
			},
			"contracts/interfaces/IPeripheryPaymentsWithFee.sol": {
				"ast": {
					"absolutePath": "contracts/interfaces/IPeripheryPaymentsWithFee.sol",
					"exportedSymbols": {
						"IPeripheryPayments": [
							2735
						],
						"IPeripheryPaymentsWithFee": [
							2768
						]
					},
					"id": 2769,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 2737,
							"literals": [
								"solidity",
								">=",
								"0.7",
								".5"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:24"
						},
						{
							"absolutePath": "contracts/interfaces/IPeripheryPayments.sol",
							"file": "./IPeripheryPayments.sol",
							"id": 2738,
							"nodeType": "ImportDirective",
							"scope": 2769,
							"sourceUnit": 2736,
							"src": "71:34:24",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 2740,
										"name": "IPeripheryPayments",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 2735,
										"src": "238:18:24",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IPeripheryPayments_$2735",
											"typeString": "contract IPeripheryPayments"
										}
									},
									"id": 2741,
									"nodeType": "InheritanceSpecifier",
									"src": "238:18:24"
								}
							],
							"contractDependencies": [
								2735
							],
							"contractKind": "interface",
							"documentation": {
								"id": 2739,
								"nodeType": "StructuredDocumentation",
								"src": "107:92:24",
								"text": "@title Periphery Payments\n @notice Functions to ease deposits and withdrawals of ETH"
							},
							"fullyImplemented": false,
							"id": 2768,
							"linearizedBaseContracts": [
								2768,
								2735
							],
							"name": "IPeripheryPaymentsWithFee",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 2742,
										"nodeType": "StructuredDocumentation",
										"src": "263:273:24",
										"text": "@notice Unwraps the contract's WETH9 balance and sends it to recipient as ETH, with a percentage between\n 0 (exclusive), and 1 (inclusive) going to feeRecipient\n @dev The amountMinimum parameter prevents malicious contracts from stealing WETH9 from users."
									},
									"functionSelector": "9b2c0a37",
									"id": 2753,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "unwrapWETH9WithFee",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2751,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2744,
												"mutability": "mutable",
												"name": "amountMinimum",
												"nodeType": "VariableDeclaration",
												"scope": 2753,
												"src": "578:21:24",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2743,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "578:7:24",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2746,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 2753,
												"src": "609:17:24",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2745,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "609:7:24",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2748,
												"mutability": "mutable",
												"name": "feeBips",
												"nodeType": "VariableDeclaration",
												"scope": 2753,
												"src": "636:15:24",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2747,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "636:7:24",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2750,
												"mutability": "mutable",
												"name": "feeRecipient",
												"nodeType": "VariableDeclaration",
												"scope": 2753,
												"src": "661:20:24",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2749,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "661:7:24",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "568:119:24"
									},
									"returnParameters": {
										"id": 2752,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "704:0:24"
									},
									"scope": 2768,
									"src": "541:164:24",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2754,
										"nodeType": "StructuredDocumentation",
										"src": "711:277:24",
										"text": "@notice Transfers the full amount of a token held by this contract to recipient, with a percentage between\n 0 (exclusive) and 1 (inclusive) going to feeRecipient\n @dev The amountMinimum parameter prevents malicious contracts from stealing the token from users"
									},
									"functionSelector": "e0e189a0",
									"id": 2767,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "sweepTokenWithFee",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2765,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2756,
												"mutability": "mutable",
												"name": "token",
												"nodeType": "VariableDeclaration",
												"scope": 2767,
												"src": "1029:13:24",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2755,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1029:7:24",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2758,
												"mutability": "mutable",
												"name": "amountMinimum",
												"nodeType": "VariableDeclaration",
												"scope": 2767,
												"src": "1052:21:24",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2757,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1052:7:24",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2760,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 2767,
												"src": "1083:17:24",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2759,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1083:7:24",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2762,
												"mutability": "mutable",
												"name": "feeBips",
												"nodeType": "VariableDeclaration",
												"scope": 2767,
												"src": "1110:15:24",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2761,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1110:7:24",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2764,
												"mutability": "mutable",
												"name": "feeRecipient",
												"nodeType": "VariableDeclaration",
												"scope": 2767,
												"src": "1135:20:24",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2763,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1135:7:24",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1019:142:24"
									},
									"returnParameters": {
										"id": 2766,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1178:0:24"
									},
									"scope": 2768,
									"src": "993:186:24",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 2769,
							"src": "199:982:24"
						}
					],
					"src": "45:1137:24"
				},
				"id": 24
			},
			"contracts/interfaces/ISelfPermit.sol": {
				"ast": {
					"absolutePath": "contracts/interfaces/ISelfPermit.sol",
					"exportedSymbols": {
						"ISelfPermit": [
							2836
						]
					},
					"id": 2837,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 2770,
							"literals": [
								"solidity",
								">=",
								"0.7",
								".5"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:25"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 2771,
								"nodeType": "StructuredDocumentation",
								"src": "71:117:25",
								"text": "@title Self Permit\n @notice Functionality to call permit on any EIP-2612-compliant token for use in the route"
							},
							"fullyImplemented": false,
							"id": 2836,
							"linearizedBaseContracts": [
								2836
							],
							"name": "ISelfPermit",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 2772,
										"nodeType": "StructuredDocumentation",
										"src": "216:663:25",
										"text": "@notice Permits this contract to spend a given token from `msg.sender`\n @dev The `owner` is always msg.sender and the `spender` is always address(this).\n @param token The address of the token spent\n @param value The amount that can be spent of token\n @param deadline A timestamp, the current blocktime must be less than or equal to this timestamp\n @param v Must produce valid secp256k1 signature from the holder along with `r` and `s`\n @param r Must produce valid secp256k1 signature from the holder along with `v` and `s`\n @param s Must produce valid secp256k1 signature from the holder along with `r` and `v`"
									},
									"functionSelector": "f3995c67",
									"id": 2787,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "selfPermit",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2785,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2774,
												"mutability": "mutable",
												"name": "token",
												"nodeType": "VariableDeclaration",
												"scope": 2787,
												"src": "913:13:25",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2773,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "913:7:25",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2776,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 2787,
												"src": "936:13:25",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2775,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "936:7:25",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2778,
												"mutability": "mutable",
												"name": "deadline",
												"nodeType": "VariableDeclaration",
												"scope": 2787,
												"src": "959:16:25",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2777,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "959:7:25",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2780,
												"mutability": "mutable",
												"name": "v",
												"nodeType": "VariableDeclaration",
												"scope": 2787,
												"src": "985:7:25",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 2779,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "985:5:25",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2782,
												"mutability": "mutable",
												"name": "r",
												"nodeType": "VariableDeclaration",
												"scope": 2787,
												"src": "1002:9:25",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2781,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1002:7:25",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2784,
												"mutability": "mutable",
												"name": "s",
												"nodeType": "VariableDeclaration",
												"scope": 2787,
												"src": "1021:9:25",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2783,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1021:7:25",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "903:133:25"
									},
									"returnParameters": {
										"id": 2786,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1053:0:25"
									},
									"scope": 2836,
									"src": "884:170:25",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2788,
										"nodeType": "StructuredDocumentation",
										"src": "1060:779:25",
										"text": "@notice Permits this contract to spend a given token from `msg.sender`\n @dev The `owner` is always msg.sender and the `spender` is always address(this).\n Can be used instead of #selfPermit to prevent calls from failing due to a frontrun of a call to #selfPermit\n @param token The address of the token spent\n @param value The amount that can be spent of token\n @param deadline A timestamp, the current blocktime must be less than or equal to this timestamp\n @param v Must produce valid secp256k1 signature from the holder along with `r` and `s`\n @param r Must produce valid secp256k1 signature from the holder along with `v` and `s`\n @param s Must produce valid secp256k1 signature from the holder along with `r` and `v`"
									},
									"functionSelector": "c2e3140a",
									"id": 2803,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "selfPermitIfNecessary",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2801,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2790,
												"mutability": "mutable",
												"name": "token",
												"nodeType": "VariableDeclaration",
												"scope": 2803,
												"src": "1884:13:25",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2789,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1884:7:25",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2792,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 2803,
												"src": "1907:13:25",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2791,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1907:7:25",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2794,
												"mutability": "mutable",
												"name": "deadline",
												"nodeType": "VariableDeclaration",
												"scope": 2803,
												"src": "1930:16:25",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2793,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1930:7:25",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2796,
												"mutability": "mutable",
												"name": "v",
												"nodeType": "VariableDeclaration",
												"scope": 2803,
												"src": "1956:7:25",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 2795,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "1956:5:25",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2798,
												"mutability": "mutable",
												"name": "r",
												"nodeType": "VariableDeclaration",
												"scope": 2803,
												"src": "1973:9:25",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2797,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1973:7:25",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2800,
												"mutability": "mutable",
												"name": "s",
												"nodeType": "VariableDeclaration",
												"scope": 2803,
												"src": "1992:9:25",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2799,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1992:7:25",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1874:133:25"
									},
									"returnParameters": {
										"id": 2802,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2024:0:25"
									},
									"scope": 2836,
									"src": "1844:181:25",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2804,
										"nodeType": "StructuredDocumentation",
										"src": "2031:670:25",
										"text": "@notice Permits this contract to spend the sender's tokens for permit signatures that have the `allowed` parameter\n @dev The `owner` is always msg.sender and the `spender` is always address(this)\n @param token The address of the token spent\n @param nonce The current nonce of the owner\n @param expiry The timestamp at which the permit is no longer valid\n @param v Must produce valid secp256k1 signature from the holder along with `r` and `s`\n @param r Must produce valid secp256k1 signature from the holder along with `v` and `s`\n @param s Must produce valid secp256k1 signature from the holder along with `r` and `v`"
									},
									"functionSelector": "4659a494",
									"id": 2819,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "selfPermitAllowed",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2817,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2806,
												"mutability": "mutable",
												"name": "token",
												"nodeType": "VariableDeclaration",
												"scope": 2819,
												"src": "2742:13:25",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2805,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2742:7:25",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2808,
												"mutability": "mutable",
												"name": "nonce",
												"nodeType": "VariableDeclaration",
												"scope": 2819,
												"src": "2765:13:25",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2807,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2765:7:25",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2810,
												"mutability": "mutable",
												"name": "expiry",
												"nodeType": "VariableDeclaration",
												"scope": 2819,
												"src": "2788:14:25",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2809,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2788:7:25",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2812,
												"mutability": "mutable",
												"name": "v",
												"nodeType": "VariableDeclaration",
												"scope": 2819,
												"src": "2812:7:25",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 2811,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "2812:5:25",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2814,
												"mutability": "mutable",
												"name": "r",
												"nodeType": "VariableDeclaration",
												"scope": 2819,
												"src": "2829:9:25",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2813,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2829:7:25",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2816,
												"mutability": "mutable",
												"name": "s",
												"nodeType": "VariableDeclaration",
												"scope": 2819,
												"src": "2848:9:25",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2815,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2848:7:25",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2732:131:25"
									},
									"returnParameters": {
										"id": 2818,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2880:0:25"
									},
									"scope": 2836,
									"src": "2706:175:25",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2820,
										"nodeType": "StructuredDocumentation",
										"src": "2887:801:25",
										"text": "@notice Permits this contract to spend the sender's tokens for permit signatures that have the `allowed` parameter\n @dev The `owner` is always msg.sender and the `spender` is always address(this)\n Can be used instead of #selfPermitAllowed to prevent calls from failing due to a frontrun of a call to #selfPermitAllowed.\n @param token The address of the token spent\n @param nonce The current nonce of the owner\n @param expiry The timestamp at which the permit is no longer valid\n @param v Must produce valid secp256k1 signature from the holder along with `r` and `s`\n @param r Must produce valid secp256k1 signature from the holder along with `v` and `s`\n @param s Must produce valid secp256k1 signature from the holder along with `r` and `v`"
									},
									"functionSelector": "a4a78f0c",
									"id": 2835,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "selfPermitAllowedIfNecessary",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2833,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2822,
												"mutability": "mutable",
												"name": "token",
												"nodeType": "VariableDeclaration",
												"scope": 2835,
												"src": "3740:13:25",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2821,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3740:7:25",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2824,
												"mutability": "mutable",
												"name": "nonce",
												"nodeType": "VariableDeclaration",
												"scope": 2835,
												"src": "3763:13:25",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2823,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3763:7:25",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2826,
												"mutability": "mutable",
												"name": "expiry",
												"nodeType": "VariableDeclaration",
												"scope": 2835,
												"src": "3786:14:25",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2825,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3786:7:25",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2828,
												"mutability": "mutable",
												"name": "v",
												"nodeType": "VariableDeclaration",
												"scope": 2835,
												"src": "3810:7:25",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 2827,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "3810:5:25",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2830,
												"mutability": "mutable",
												"name": "r",
												"nodeType": "VariableDeclaration",
												"scope": 2835,
												"src": "3827:9:25",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2829,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3827:7:25",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2832,
												"mutability": "mutable",
												"name": "s",
												"nodeType": "VariableDeclaration",
												"scope": 2835,
												"src": "3846:9:25",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2831,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3846:7:25",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3730:131:25"
									},
									"returnParameters": {
										"id": 2834,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3878:0:25"
									},
									"scope": 2836,
									"src": "3693:186:25",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 2837,
							"src": "188:3693:25"
						}
					],
					"src": "45:3837:25"
				},
				"id": 25
			},
			"contracts/interfaces/ISwapRouter.sol": {
				"ast": {
					"absolutePath": "contracts/interfaces/ISwapRouter.sol",
					"exportedSymbols": {
						"ISwapRouter": [
							2932
						],
						"IUniswapV3SwapCallback": [
							149
						]
					},
					"id": 2933,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 2838,
							"literals": [
								"solidity",
								">=",
								"0.7",
								".5"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:26"
						},
						{
							"id": 2839,
							"literals": [
								"abicoder",
								"v2"
							],
							"nodeType": "PragmaDirective",
							"src": "70:19:26"
						},
						{
							"absolutePath": "@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol",
							"file": "@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol",
							"id": 2840,
							"nodeType": "ImportDirective",
							"scope": 2933,
							"sourceUnit": 150,
							"src": "91:83:26",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 2842,
										"name": "IUniswapV3SwapCallback",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 149,
										"src": "305:22:26",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IUniswapV3SwapCallback_$149",
											"typeString": "contract IUniswapV3SwapCallback"
										}
									},
									"id": 2843,
									"nodeType": "InheritanceSpecifier",
									"src": "305:22:26"
								}
							],
							"contractDependencies": [
								149
							],
							"contractKind": "interface",
							"documentation": {
								"id": 2841,
								"nodeType": "StructuredDocumentation",
								"src": "176:104:26",
								"text": "@title Router token swapping functionality\n @notice Functions for swapping tokens via Uniswap V3"
							},
							"fullyImplemented": false,
							"id": 2932,
							"linearizedBaseContracts": [
								2932,
								149
							],
							"name": "ISwapRouter",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"canonicalName": "ISwapRouter.ExactInputSingleParams",
									"id": 2860,
									"members": [
										{
											"constant": false,
											"id": 2845,
											"mutability": "mutable",
											"name": "tokenIn",
											"nodeType": "VariableDeclaration",
											"scope": 2860,
											"src": "374:15:26",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 2844,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "374:7:26",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 2847,
											"mutability": "mutable",
											"name": "tokenOut",
											"nodeType": "VariableDeclaration",
											"scope": 2860,
											"src": "399:16:26",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 2846,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "399:7:26",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 2849,
											"mutability": "mutable",
											"name": "fee",
											"nodeType": "VariableDeclaration",
											"scope": 2860,
											"src": "425:10:26",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint24",
												"typeString": "uint24"
											},
											"typeName": {
												"id": 2848,
												"name": "uint24",
												"nodeType": "ElementaryTypeName",
												"src": "425:6:26",
												"typeDescriptions": {
													"typeIdentifier": "t_uint24",
													"typeString": "uint24"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 2851,
											"mutability": "mutable",
											"name": "recipient",
											"nodeType": "VariableDeclaration",
											"scope": 2860,
											"src": "445:17:26",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 2850,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "445:7:26",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 2853,
											"mutability": "mutable",
											"name": "deadline",
											"nodeType": "VariableDeclaration",
											"scope": 2860,
											"src": "472:16:26",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 2852,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "472:7:26",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 2855,
											"mutability": "mutable",
											"name": "amountIn",
											"nodeType": "VariableDeclaration",
											"scope": 2860,
											"src": "498:16:26",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 2854,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "498:7:26",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 2857,
											"mutability": "mutable",
											"name": "amountOutMinimum",
											"nodeType": "VariableDeclaration",
											"scope": 2860,
											"src": "524:24:26",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 2856,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "524:7:26",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 2859,
											"mutability": "mutable",
											"name": "sqrtPriceLimitX96",
											"nodeType": "VariableDeclaration",
											"scope": 2860,
											"src": "558:25:26",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint160",
												"typeString": "uint160"
											},
											"typeName": {
												"id": 2858,
												"name": "uint160",
												"nodeType": "ElementaryTypeName",
												"src": "558:7:26",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "ExactInputSingleParams",
									"nodeType": "StructDefinition",
									"scope": 2932,
									"src": "334:256:26",
									"visibility": "public"
								},
								{
									"documentation": {
										"id": 2861,
										"nodeType": "StructuredDocumentation",
										"src": "596:250:26",
										"text": "@notice Swaps `amountIn` of one token for as much as possible of another token\n @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\n @return amountOut The amount of the received token"
									},
									"functionSelector": "414bf389",
									"id": 2868,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "exactInputSingle",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2864,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2863,
												"mutability": "mutable",
												"name": "params",
												"nodeType": "VariableDeclaration",
												"scope": 2868,
												"src": "877:38:26",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_ExactInputSingleParams_$2860_calldata_ptr",
													"typeString": "struct ISwapRouter.ExactInputSingleParams"
												},
												"typeName": {
													"id": 2862,
													"name": "ExactInputSingleParams",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 2860,
													"src": "877:22:26",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_ExactInputSingleParams_$2860_storage_ptr",
														"typeString": "struct ISwapRouter.ExactInputSingleParams"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "876:40:26"
									},
									"returnParameters": {
										"id": 2867,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2866,
												"mutability": "mutable",
												"name": "amountOut",
												"nodeType": "VariableDeclaration",
												"scope": 2868,
												"src": "943:17:26",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2865,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "943:7:26",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "942:19:26"
									},
									"scope": 2932,
									"src": "851:111:26",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"canonicalName": "ISwapRouter.ExactInputParams",
									"id": 2879,
									"members": [
										{
											"constant": false,
											"id": 2870,
											"mutability": "mutable",
											"name": "path",
											"nodeType": "VariableDeclaration",
											"scope": 2879,
											"src": "1002:10:26",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bytes_storage_ptr",
												"typeString": "bytes"
											},
											"typeName": {
												"id": 2869,
												"name": "bytes",
												"nodeType": "ElementaryTypeName",
												"src": "1002:5:26",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_storage_ptr",
													"typeString": "bytes"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 2872,
											"mutability": "mutable",
											"name": "recipient",
											"nodeType": "VariableDeclaration",
											"scope": 2879,
											"src": "1022:17:26",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 2871,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "1022:7:26",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 2874,
											"mutability": "mutable",
											"name": "deadline",
											"nodeType": "VariableDeclaration",
											"scope": 2879,
											"src": "1049:16:26",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 2873,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1049:7:26",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 2876,
											"mutability": "mutable",
											"name": "amountIn",
											"nodeType": "VariableDeclaration",
											"scope": 2879,
											"src": "1075:16:26",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 2875,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1075:7:26",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 2878,
											"mutability": "mutable",
											"name": "amountOutMinimum",
											"nodeType": "VariableDeclaration",
											"scope": 2879,
											"src": "1101:24:26",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 2877,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1101:7:26",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "ExactInputParams",
									"nodeType": "StructDefinition",
									"scope": 2932,
									"src": "968:164:26",
									"visibility": "public"
								},
								{
									"documentation": {
										"id": 2880,
										"nodeType": "StructuredDocumentation",
										"src": "1138:273:26",
										"text": "@notice Swaps `amountIn` of one token for as much as possible of another along the specified path\n @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\n @return amountOut The amount of the received token"
									},
									"functionSelector": "c04b8d59",
									"id": 2887,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "exactInput",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2883,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2882,
												"mutability": "mutable",
												"name": "params",
												"nodeType": "VariableDeclaration",
												"scope": 2887,
												"src": "1436:32:26",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_ExactInputParams_$2879_calldata_ptr",
													"typeString": "struct ISwapRouter.ExactInputParams"
												},
												"typeName": {
													"id": 2881,
													"name": "ExactInputParams",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 2879,
													"src": "1436:16:26",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_ExactInputParams_$2879_storage_ptr",
														"typeString": "struct ISwapRouter.ExactInputParams"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1435:34:26"
									},
									"returnParameters": {
										"id": 2886,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2885,
												"mutability": "mutable",
												"name": "amountOut",
												"nodeType": "VariableDeclaration",
												"scope": 2887,
												"src": "1496:17:26",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2884,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1496:7:26",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1495:19:26"
									},
									"scope": 2932,
									"src": "1416:99:26",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"canonicalName": "ISwapRouter.ExactOutputSingleParams",
									"id": 2904,
									"members": [
										{
											"constant": false,
											"id": 2889,
											"mutability": "mutable",
											"name": "tokenIn",
											"nodeType": "VariableDeclaration",
											"scope": 2904,
											"src": "1562:15:26",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 2888,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "1562:7:26",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 2891,
											"mutability": "mutable",
											"name": "tokenOut",
											"nodeType": "VariableDeclaration",
											"scope": 2904,
											"src": "1587:16:26",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 2890,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "1587:7:26",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 2893,
											"mutability": "mutable",
											"name": "fee",
											"nodeType": "VariableDeclaration",
											"scope": 2904,
											"src": "1613:10:26",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint24",
												"typeString": "uint24"
											},
											"typeName": {
												"id": 2892,
												"name": "uint24",
												"nodeType": "ElementaryTypeName",
												"src": "1613:6:26",
												"typeDescriptions": {
													"typeIdentifier": "t_uint24",
													"typeString": "uint24"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 2895,
											"mutability": "mutable",
											"name": "recipient",
											"nodeType": "VariableDeclaration",
											"scope": 2904,
											"src": "1633:17:26",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 2894,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "1633:7:26",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 2897,
											"mutability": "mutable",
											"name": "deadline",
											"nodeType": "VariableDeclaration",
											"scope": 2904,
											"src": "1660:16:26",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 2896,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1660:7:26",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 2899,
											"mutability": "mutable",
											"name": "amountOut",
											"nodeType": "VariableDeclaration",
											"scope": 2904,
											"src": "1686:17:26",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 2898,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1686:7:26",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 2901,
											"mutability": "mutable",
											"name": "amountInMaximum",
											"nodeType": "VariableDeclaration",
											"scope": 2904,
											"src": "1713:23:26",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 2900,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1713:7:26",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 2903,
											"mutability": "mutable",
											"name": "sqrtPriceLimitX96",
											"nodeType": "VariableDeclaration",
											"scope": 2904,
											"src": "1746:25:26",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint160",
												"typeString": "uint160"
											},
											"typeName": {
												"id": 2902,
												"name": "uint160",
												"nodeType": "ElementaryTypeName",
												"src": "1746:7:26",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "ExactOutputSingleParams",
									"nodeType": "StructDefinition",
									"scope": 2932,
									"src": "1521:257:26",
									"visibility": "public"
								},
								{
									"documentation": {
										"id": 2905,
										"nodeType": "StructuredDocumentation",
										"src": "1784:250:26",
										"text": "@notice Swaps as little as possible of one token for `amountOut` of another token\n @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\n @return amountIn The amount of the input token"
									},
									"functionSelector": "db3e2198",
									"id": 2912,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "exactOutputSingle",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2908,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2907,
												"mutability": "mutable",
												"name": "params",
												"nodeType": "VariableDeclaration",
												"scope": 2912,
												"src": "2066:39:26",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_ExactOutputSingleParams_$2904_calldata_ptr",
													"typeString": "struct ISwapRouter.ExactOutputSingleParams"
												},
												"typeName": {
													"id": 2906,
													"name": "ExactOutputSingleParams",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 2904,
													"src": "2066:23:26",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_ExactOutputSingleParams_$2904_storage_ptr",
														"typeString": "struct ISwapRouter.ExactOutputSingleParams"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2065:41:26"
									},
									"returnParameters": {
										"id": 2911,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2910,
												"mutability": "mutable",
												"name": "amountIn",
												"nodeType": "VariableDeclaration",
												"scope": 2912,
												"src": "2133:16:26",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2909,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2133:7:26",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2132:18:26"
									},
									"scope": 2932,
									"src": "2039:112:26",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"canonicalName": "ISwapRouter.ExactOutputParams",
									"id": 2923,
									"members": [
										{
											"constant": false,
											"id": 2914,
											"mutability": "mutable",
											"name": "path",
											"nodeType": "VariableDeclaration",
											"scope": 2923,
											"src": "2192:10:26",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bytes_storage_ptr",
												"typeString": "bytes"
											},
											"typeName": {
												"id": 2913,
												"name": "bytes",
												"nodeType": "ElementaryTypeName",
												"src": "2192:5:26",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_storage_ptr",
													"typeString": "bytes"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 2916,
											"mutability": "mutable",
											"name": "recipient",
											"nodeType": "VariableDeclaration",
											"scope": 2923,
											"src": "2212:17:26",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 2915,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "2212:7:26",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 2918,
											"mutability": "mutable",
											"name": "deadline",
											"nodeType": "VariableDeclaration",
											"scope": 2923,
											"src": "2239:16:26",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 2917,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "2239:7:26",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 2920,
											"mutability": "mutable",
											"name": "amountOut",
											"nodeType": "VariableDeclaration",
											"scope": 2923,
											"src": "2265:17:26",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 2919,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "2265:7:26",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 2922,
											"mutability": "mutable",
											"name": "amountInMaximum",
											"nodeType": "VariableDeclaration",
											"scope": 2923,
											"src": "2292:23:26",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 2921,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "2292:7:26",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "ExactOutputParams",
									"nodeType": "StructDefinition",
									"scope": 2932,
									"src": "2157:165:26",
									"visibility": "public"
								},
								{
									"documentation": {
										"id": 2924,
										"nodeType": "StructuredDocumentation",
										"src": "2328:284:26",
										"text": "@notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\n @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\n @return amountIn The amount of the input token"
									},
									"functionSelector": "f28c0498",
									"id": 2931,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "exactOutput",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2927,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2926,
												"mutability": "mutable",
												"name": "params",
												"nodeType": "VariableDeclaration",
												"scope": 2931,
												"src": "2638:33:26",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_ExactOutputParams_$2923_calldata_ptr",
													"typeString": "struct ISwapRouter.ExactOutputParams"
												},
												"typeName": {
													"id": 2925,
													"name": "ExactOutputParams",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 2923,
													"src": "2638:17:26",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_ExactOutputParams_$2923_storage_ptr",
														"typeString": "struct ISwapRouter.ExactOutputParams"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2637:35:26"
									},
									"returnParameters": {
										"id": 2930,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2929,
												"mutability": "mutable",
												"name": "amountIn",
												"nodeType": "VariableDeclaration",
												"scope": 2931,
												"src": "2699:16:26",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2928,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2699:7:26",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2698:18:26"
									},
									"scope": 2932,
									"src": "2617:100:26",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 2933,
							"src": "280:2439:26"
						}
					],
					"src": "45:2675:26"
				},
				"id": 26
			},
			"contracts/interfaces/external/IERC20PermitAllowed.sol": {
				"ast": {
					"absolutePath": "contracts/interfaces/external/IERC20PermitAllowed.sol",
					"exportedSymbols": {
						"IERC20PermitAllowed": [
							2956
						]
					},
					"id": 2957,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 2934,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:27"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 2935,
								"nodeType": "StructuredDocumentation",
								"src": "71:82:27",
								"text": "@title Interface for permit\n @notice Interface used by DAI/CHAI for permit"
							},
							"fullyImplemented": false,
							"id": 2956,
							"linearizedBaseContracts": [
								2956
							],
							"name": "IERC20PermitAllowed",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 2936,
										"nodeType": "StructuredDocumentation",
										"src": "189:802:27",
										"text": "@notice Approve the spender to spend some tokens via the holder signature\n @dev This is the permit interface used by DAI and CHAI\n @param holder The address of the token holder, the token owner\n @param spender The address of the token spender\n @param nonce The holder's nonce, increases at each call to permit\n @param expiry The timestamp at which the permit is no longer valid\n @param allowed Boolean that sets approval amount, true for type(uint256).max and false for 0\n @param v Must produce valid secp256k1 signature from the holder along with `r` and `s`\n @param r Must produce valid secp256k1 signature from the holder along with `v` and `s`\n @param s Must produce valid secp256k1 signature from the holder along with `r` and `v`"
									},
									"functionSelector": "8fcbaf0c",
									"id": 2955,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "permit",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2953,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2938,
												"mutability": "mutable",
												"name": "holder",
												"nodeType": "VariableDeclaration",
												"scope": 2955,
												"src": "1021:14:27",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2937,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1021:7:27",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2940,
												"mutability": "mutable",
												"name": "spender",
												"nodeType": "VariableDeclaration",
												"scope": 2955,
												"src": "1045:15:27",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2939,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1045:7:27",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2942,
												"mutability": "mutable",
												"name": "nonce",
												"nodeType": "VariableDeclaration",
												"scope": 2955,
												"src": "1070:13:27",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2941,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1070:7:27",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2944,
												"mutability": "mutable",
												"name": "expiry",
												"nodeType": "VariableDeclaration",
												"scope": 2955,
												"src": "1093:14:27",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2943,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1093:7:27",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2946,
												"mutability": "mutable",
												"name": "allowed",
												"nodeType": "VariableDeclaration",
												"scope": 2955,
												"src": "1117:12:27",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2945,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1117:4:27",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2948,
												"mutability": "mutable",
												"name": "v",
												"nodeType": "VariableDeclaration",
												"scope": 2955,
												"src": "1139:7:27",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 2947,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "1139:5:27",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2950,
												"mutability": "mutable",
												"name": "r",
												"nodeType": "VariableDeclaration",
												"scope": 2955,
												"src": "1156:9:27",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2949,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1156:7:27",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2952,
												"mutability": "mutable",
												"name": "s",
												"nodeType": "VariableDeclaration",
												"scope": 2955,
												"src": "1175:9:27",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2951,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1175:7:27",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1011:179:27"
									},
									"returnParameters": {
										"id": 2954,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1199:0:27"
									},
									"scope": 2956,
									"src": "996:204:27",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 2957,
							"src": "153:1049:27"
						}
					],
					"src": "45:1158:27"
				},
				"id": 27
			},
			"contracts/interfaces/external/IWETH9.sol": {
				"ast": {
					"absolutePath": "contracts/interfaces/external/IWETH9.sol",
					"exportedSymbols": {
						"IERC20": [
							113
						],
						"IWETH9": [
							2973
						]
					},
					"id": 2974,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 2958,
							"literals": [
								"solidity",
								"=",
								"0.7",
								".6"
							],
							"nodeType": "PragmaDirective",
							"src": "45:23:28"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"file": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"id": 2959,
							"nodeType": "ImportDirective",
							"scope": 2974,
							"sourceUnit": 114,
							"src": "70:56:28",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 2961,
										"name": "IERC20",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 113,
										"src": "179:6:28",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IERC20_$113",
											"typeString": "contract IERC20"
										}
									},
									"id": 2962,
									"nodeType": "InheritanceSpecifier",
									"src": "179:6:28"
								}
							],
							"contractDependencies": [
								113
							],
							"contractKind": "interface",
							"documentation": {
								"id": 2960,
								"nodeType": "StructuredDocumentation",
								"src": "128:31:28",
								"text": "@title Interface for WETH9"
							},
							"fullyImplemented": false,
							"id": 2973,
							"linearizedBaseContracts": [
								2973,
								113
							],
							"name": "IWETH9",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 2963,
										"nodeType": "StructuredDocumentation",
										"src": "192:46:28",
										"text": "@notice Deposit ether to get wrapped ether"
									},
									"functionSelector": "d0e30db0",
									"id": 2966,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "deposit",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2964,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "259:2:28"
									},
									"returnParameters": {
										"id": 2965,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "278:0:28"
									},
									"scope": 2973,
									"src": "243:36:28",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2967,
										"nodeType": "StructuredDocumentation",
										"src": "285:47:28",
										"text": "@notice Withdraw wrapped ether to get ether"
									},
									"functionSelector": "2e1a7d4d",
									"id": 2972,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "withdraw",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2970,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2969,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 2972,
												"src": "355:7:28",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2968,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "355:7:28",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "354:9:28"
									},
									"returnParameters": {
										"id": 2971,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "372:0:28"
									},
									"scope": 2973,
									"src": "337:36:28",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 2974,
							"src": "159:216:28"
						}
					],
					"src": "45:331:28"
				},
				"id": 28
			},
			"contracts/libraries/BytesLib.sol": {
				"ast": {
					"absolutePath": "contracts/libraries/BytesLib.sol",
					"exportedSymbols": {
						"BytesLib": [
							3092
						]
					},
					"id": 3093,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 2975,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0",
								"<",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "343:31:29"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"fullyImplemented": true,
							"id": 3092,
							"linearizedBaseContracts": [
								3092
							],
							"name": "BytesLib",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 3020,
										"nodeType": "Block",
										"src": "535:2871:29",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2991,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2989,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2987,
																	"name": "_length",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2981,
																	"src": "553:7:29",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "+",
																"rightExpression": {
																	"hexValue": "3331",
																	"id": 2988,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "563:2:29",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_31_by_1",
																		"typeString": "int_const 31"
																	},
																	"value": "31"
																},
																"src": "553:12:29",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 2990,
																"name": "_length",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2981,
																"src": "569:7:29",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "553:23:29",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "736c6963655f6f766572666c6f77",
															"id": 2992,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "578:16:29",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_5d3d629f76473d94377d221b1f1c8f2161f7b65cab69e095662ec5d0e026c17e",
																"typeString": "literal_string \"slice_overflow\""
															},
															"value": "slice_overflow"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_5d3d629f76473d94377d221b1f1c8f2161f7b65cab69e095662ec5d0e026c17e",
																"typeString": "literal_string \"slice_overflow\""
															}
														],
														"id": 2986,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "545:7:29",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 2993,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "545:50:29",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2994,
												"nodeType": "ExpressionStatement",
												"src": "545:50:29"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3000,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2998,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2996,
																	"name": "_start",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2979,
																	"src": "613:6:29",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "+",
																"rightExpression": {
																	"id": 2997,
																	"name": "_length",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2981,
																	"src": "622:7:29",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "613:16:29",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 2999,
																"name": "_start",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2979,
																"src": "633:6:29",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "613:26:29",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "736c6963655f6f766572666c6f77",
															"id": 3001,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "641:16:29",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_5d3d629f76473d94377d221b1f1c8f2161f7b65cab69e095662ec5d0e026c17e",
																"typeString": "literal_string \"slice_overflow\""
															},
															"value": "slice_overflow"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_5d3d629f76473d94377d221b1f1c8f2161f7b65cab69e095662ec5d0e026c17e",
																"typeString": "literal_string \"slice_overflow\""
															}
														],
														"id": 2995,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "605:7:29",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 3002,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "605:53:29",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 3003,
												"nodeType": "ExpressionStatement",
												"src": "605:53:29"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3010,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 3005,
																	"name": "_bytes",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2977,
																	"src": "676:6:29",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																},
																"id": 3006,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "length",
																"nodeType": "MemberAccess",
																"src": "676:13:29",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3009,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3007,
																	"name": "_start",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2979,
																	"src": "693:6:29",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "+",
																"rightExpression": {
																	"id": 3008,
																	"name": "_length",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2981,
																	"src": "702:7:29",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "693:16:29",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "676:33:29",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "736c6963655f6f75744f66426f756e6473",
															"id": 3011,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "711:19:29",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_cca2258dcc0d08c244435525255fbef9116c9a31b4c29471218f002bbbceb7a0",
																"typeString": "literal_string \"slice_outOfBounds\""
															},
															"value": "slice_outOfBounds"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_cca2258dcc0d08c244435525255fbef9116c9a31b4c29471218f002bbbceb7a0",
																"typeString": "literal_string \"slice_outOfBounds\""
															}
														],
														"id": 3004,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "668:7:29",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 3012,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "668:63:29",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 3013,
												"nodeType": "ExpressionStatement",
												"src": "668:63:29"
											},
											{
												"assignments": [
													3015
												],
												"declarations": [
													{
														"constant": false,
														"id": 3015,
														"mutability": "mutable",
														"name": "tempBytes",
														"nodeType": "VariableDeclaration",
														"scope": 3020,
														"src": "742:22:29",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 3014,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "742:5:29",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 3016,
												"nodeType": "VariableDeclarationStatement",
												"src": "742:22:29"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "784:2589:29",
													"statements": [
														{
															"cases": [
																{
																	"body": {
																		"nodeType": "YulBlock",
																		"src": "844:2092:29",
																		"statements": [
																			{
																				"nodeType": "YulAssignment",
																				"src": "1012:24:29",
																				"value": {
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "1031:4:29",
																							"type": "",
																							"value": "0x40"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nodeType": "YulIdentifier",
																						"src": "1025:5:29"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "1025:11:29"
																				},
																				"variableNames": [
																					{
																						"name": "tempBytes",
																						"nodeType": "YulIdentifier",
																						"src": "1012:9:29"
																					}
																				]
																			},
																			{
																				"nodeType": "YulVariableDeclaration",
																				"src": "1696:33:29",
																				"value": {
																					"arguments": [
																						{
																							"name": "_length",
																							"nodeType": "YulIdentifier",
																							"src": "1717:7:29"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "1726:2:29",
																							"type": "",
																							"value": "31"
																						}
																					],
																					"functionName": {
																						"name": "and",
																						"nodeType": "YulIdentifier",
																						"src": "1713:3:29"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "1713:16:29"
																				},
																				"variables": [
																					{
																						"name": "lengthmod",
																						"nodeType": "YulTypedName",
																						"src": "1700:9:29",
																						"type": ""
																					}
																				]
																			},
																			{
																				"nodeType": "YulVariableDeclaration",
																				"src": "2070:70:29",
																				"value": {
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "tempBytes",
																									"nodeType": "YulIdentifier",
																									"src": "2088:9:29"
																								},
																								{
																									"name": "lengthmod",
																									"nodeType": "YulIdentifier",
																									"src": "2099:9:29"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "2084:3:29"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "2084:25:29"
																						},
																						{
																							"arguments": [
																								{
																									"kind": "number",
																									"nodeType": "YulLiteral",
																									"src": "2115:4:29",
																									"type": "",
																									"value": "0x20"
																								},
																								{
																									"arguments": [
																										{
																											"name": "lengthmod",
																											"nodeType": "YulIdentifier",
																											"src": "2128:9:29"
																										}
																									],
																									"functionName": {
																										"name": "iszero",
																										"nodeType": "YulIdentifier",
																										"src": "2121:6:29"
																									},
																									"nodeType": "YulFunctionCall",
																									"src": "2121:17:29"
																								}
																							],
																							"functionName": {
																								"name": "mul",
																								"nodeType": "YulIdentifier",
																								"src": "2111:3:29"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "2111:28:29"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "2080:3:29"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "2080:60:29"
																				},
																				"variables": [
																					{
																						"name": "mc",
																						"nodeType": "YulTypedName",
																						"src": "2074:2:29",
																						"type": ""
																					}
																				]
																			},
																			{
																				"nodeType": "YulVariableDeclaration",
																				"src": "2161:27:29",
																				"value": {
																					"arguments": [
																						{
																							"name": "mc",
																							"nodeType": "YulIdentifier",
																							"src": "2176:2:29"
																						},
																						{
																							"name": "_length",
																							"nodeType": "YulIdentifier",
																							"src": "2180:7:29"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "2172:3:29"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "2172:16:29"
																				},
																				"variables": [
																					{
																						"name": "end",
																						"nodeType": "YulTypedName",
																						"src": "2165:3:29",
																						"type": ""
																					}
																				]
																			},
																			{
																				"body": {
																					"nodeType": "YulBlock",
																					"src": "2602:69:29",
																					"statements": [
																						{
																							"expression": {
																								"arguments": [
																									{
																										"name": "mc",
																										"nodeType": "YulIdentifier",
																										"src": "2635:2:29"
																									},
																									{
																										"arguments": [
																											{
																												"name": "cc",
																												"nodeType": "YulIdentifier",
																												"src": "2645:2:29"
																											}
																										],
																										"functionName": {
																											"name": "mload",
																											"nodeType": "YulIdentifier",
																											"src": "2639:5:29"
																										},
																										"nodeType": "YulFunctionCall",
																										"src": "2639:9:29"
																									}
																								],
																								"functionName": {
																									"name": "mstore",
																									"nodeType": "YulIdentifier",
																									"src": "2628:6:29"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "2628:21:29"
																							},
																							"nodeType": "YulExpressionStatement",
																							"src": "2628:21:29"
																						}
																					]
																				},
																				"condition": {
																					"arguments": [
																						{
																							"name": "mc",
																							"nodeType": "YulIdentifier",
																							"src": "2481:2:29"
																						},
																						{
																							"name": "end",
																							"nodeType": "YulIdentifier",
																							"src": "2485:3:29"
																						}
																					],
																					"functionName": {
																						"name": "lt",
																						"nodeType": "YulIdentifier",
																						"src": "2478:2:29"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "2478:11:29"
																				},
																				"nodeType": "YulForLoop",
																				"post": {
																					"nodeType": "YulBlock",
																					"src": "2490:111:29",
																					"statements": [
																						{
																							"nodeType": "YulAssignment",
																							"src": "2516:19:29",
																							"value": {
																								"arguments": [
																									{
																										"name": "mc",
																										"nodeType": "YulIdentifier",
																										"src": "2526:2:29"
																									},
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "2530:4:29",
																										"type": "",
																										"value": "0x20"
																									}
																								],
																								"functionName": {
																									"name": "add",
																									"nodeType": "YulIdentifier",
																									"src": "2522:3:29"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "2522:13:29"
																							},
																							"variableNames": [
																								{
																									"name": "mc",
																									"nodeType": "YulIdentifier",
																									"src": "2516:2:29"
																								}
																							]
																						},
																						{
																							"nodeType": "YulAssignment",
																							"src": "2560:19:29",
																							"value": {
																								"arguments": [
																									{
																										"name": "cc",
																										"nodeType": "YulIdentifier",
																										"src": "2570:2:29"
																									},
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "2574:4:29",
																										"type": "",
																										"value": "0x20"
																									}
																								],
																								"functionName": {
																									"name": "add",
																									"nodeType": "YulIdentifier",
																									"src": "2566:3:29"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "2566:13:29"
																							},
																							"variableNames": [
																								{
																									"name": "cc",
																									"nodeType": "YulIdentifier",
																									"src": "2560:2:29"
																								}
																							]
																						}
																					]
																				},
																				"pre": {
																					"nodeType": "YulBlock",
																					"src": "2214:263:29",
																					"statements": [
																						{
																							"nodeType": "YulVariableDeclaration",
																							"src": "2375:80:29",
																							"value": {
																								"arguments": [
																									{
																										"arguments": [
																											{
																												"arguments": [
																													{
																														"name": "_bytes",
																														"nodeType": "YulIdentifier",
																														"src": "2397:6:29"
																													},
																													{
																														"name": "lengthmod",
																														"nodeType": "YulIdentifier",
																														"src": "2405:9:29"
																													}
																												],
																												"functionName": {
																													"name": "add",
																													"nodeType": "YulIdentifier",
																													"src": "2393:3:29"
																												},
																												"nodeType": "YulFunctionCall",
																												"src": "2393:22:29"
																											},
																											{
																												"arguments": [
																													{
																														"kind": "number",
																														"nodeType": "YulLiteral",
																														"src": "2421:4:29",
																														"type": "",
																														"value": "0x20"
																													},
																													{
																														"arguments": [
																															{
																																"name": "lengthmod",
																																"nodeType": "YulIdentifier",
																																"src": "2434:9:29"
																															}
																														],
																														"functionName": {
																															"name": "iszero",
																															"nodeType": "YulIdentifier",
																															"src": "2427:6:29"
																														},
																														"nodeType": "YulFunctionCall",
																														"src": "2427:17:29"
																													}
																												],
																												"functionName": {
																													"name": "mul",
																													"nodeType": "YulIdentifier",
																													"src": "2417:3:29"
																												},
																												"nodeType": "YulFunctionCall",
																												"src": "2417:28:29"
																											}
																										],
																										"functionName": {
																											"name": "add",
																											"nodeType": "YulIdentifier",
																											"src": "2389:3:29"
																										},
																										"nodeType": "YulFunctionCall",
																										"src": "2389:57:29"
																									},
																									{
																										"name": "_start",
																										"nodeType": "YulIdentifier",
																										"src": "2448:6:29"
																									}
																								],
																								"functionName": {
																									"name": "add",
																									"nodeType": "YulIdentifier",
																									"src": "2385:3:29"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "2385:70:29"
																							},
																							"variables": [
																								{
																									"name": "cc",
																									"nodeType": "YulTypedName",
																									"src": "2379:2:29",
																									"type": ""
																								}
																							]
																						}
																					]
																				},
																				"src": "2210:461:29"
																			},
																			{
																				"expression": {
																					"arguments": [
																						{
																							"name": "tempBytes",
																							"nodeType": "YulIdentifier",
																							"src": "2700:9:29"
																						},
																						{
																							"name": "_length",
																							"nodeType": "YulIdentifier",
																							"src": "2711:7:29"
																						}
																					],
																					"functionName": {
																						"name": "mstore",
																						"nodeType": "YulIdentifier",
																						"src": "2693:6:29"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "2693:26:29"
																				},
																				"nodeType": "YulExpressionStatement",
																				"src": "2693:26:29"
																			},
																			{
																				"expression": {
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "2886:4:29",
																							"type": "",
																							"value": "0x40"
																						},
																						{
																							"arguments": [
																								{
																									"arguments": [
																										{
																											"name": "mc",
																											"nodeType": "YulIdentifier",
																											"src": "2900:2:29"
																										},
																										{
																											"kind": "number",
																											"nodeType": "YulLiteral",
																											"src": "2904:2:29",
																											"type": "",
																											"value": "31"
																										}
																									],
																									"functionName": {
																										"name": "add",
																										"nodeType": "YulIdentifier",
																										"src": "2896:3:29"
																									},
																									"nodeType": "YulFunctionCall",
																									"src": "2896:11:29"
																								},
																								{
																									"arguments": [
																										{
																											"kind": "number",
																											"nodeType": "YulLiteral",
																											"src": "2913:2:29",
																											"type": "",
																											"value": "31"
																										}
																									],
																									"functionName": {
																										"name": "not",
																										"nodeType": "YulIdentifier",
																										"src": "2909:3:29"
																									},
																									"nodeType": "YulFunctionCall",
																									"src": "2909:7:29"
																								}
																							],
																							"functionName": {
																								"name": "and",
																								"nodeType": "YulIdentifier",
																								"src": "2892:3:29"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "2892:25:29"
																						}
																					],
																					"functionName": {
																						"name": "mstore",
																						"nodeType": "YulIdentifier",
																						"src": "2879:6:29"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "2879:39:29"
																				},
																				"nodeType": "YulExpressionStatement",
																				"src": "2879:39:29"
																			}
																		]
																	},
																	"nodeType": "YulCase",
																	"src": "837:2099:29",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "842:1:29",
																		"type": "",
																		"value": "0"
																	}
																},
																{
																	"body": {
																		"nodeType": "YulBlock",
																		"src": "3048:315:29",
																		"statements": [
																			{
																				"nodeType": "YulAssignment",
																				"src": "3070:24:29",
																				"value": {
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "3089:4:29",
																							"type": "",
																							"value": "0x40"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nodeType": "YulIdentifier",
																						"src": "3083:5:29"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "3083:11:29"
																				},
																				"variableNames": [
																					{
																						"name": "tempBytes",
																						"nodeType": "YulIdentifier",
																						"src": "3070:9:29"
																					}
																				]
																			},
																			{
																				"expression": {
																					"arguments": [
																						{
																							"name": "tempBytes",
																							"nodeType": "YulIdentifier",
																							"src": "3276:9:29"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "3287:1:29",
																							"type": "",
																							"value": "0"
																						}
																					],
																					"functionName": {
																						"name": "mstore",
																						"nodeType": "YulIdentifier",
																						"src": "3269:6:29"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "3269:20:29"
																				},
																				"nodeType": "YulExpressionStatement",
																				"src": "3269:20:29"
																			},
																			{
																				"expression": {
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "3318:4:29",
																							"type": "",
																							"value": "0x40"
																						},
																						{
																							"arguments": [
																								{
																									"name": "tempBytes",
																									"nodeType": "YulIdentifier",
																									"src": "3328:9:29"
																								},
																								{
																									"kind": "number",
																									"nodeType": "YulLiteral",
																									"src": "3339:4:29",
																									"type": "",
																									"value": "0x20"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "3324:3:29"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "3324:20:29"
																						}
																					],
																					"functionName": {
																						"name": "mstore",
																						"nodeType": "YulIdentifier",
																						"src": "3311:6:29"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "3311:34:29"
																				},
																				"nodeType": "YulExpressionStatement",
																				"src": "3311:34:29"
																			}
																		]
																	},
																	"nodeType": "YulCase",
																	"src": "3040:323:29",
																	"value": "default"
																}
															],
															"expression": {
																"arguments": [
																	{
																		"name": "_length",
																		"nodeType": "YulIdentifier",
																		"src": "812:7:29"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "805:6:29"
																},
																"nodeType": "YulFunctionCall",
																"src": "805:15:29"
															},
															"nodeType": "YulSwitch",
															"src": "798:2565:29"
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 2977,
														"isOffset": false,
														"isSlot": false,
														"src": "2397:6:29",
														"valueSize": 1
													},
													{
														"declaration": 2981,
														"isOffset": false,
														"isSlot": false,
														"src": "1717:7:29",
														"valueSize": 1
													},
													{
														"declaration": 2981,
														"isOffset": false,
														"isSlot": false,
														"src": "2180:7:29",
														"valueSize": 1
													},
													{
														"declaration": 2981,
														"isOffset": false,
														"isSlot": false,
														"src": "2711:7:29",
														"valueSize": 1
													},
													{
														"declaration": 2981,
														"isOffset": false,
														"isSlot": false,
														"src": "812:7:29",
														"valueSize": 1
													},
													{
														"declaration": 2979,
														"isOffset": false,
														"isSlot": false,
														"src": "2448:6:29",
														"valueSize": 1
													},
													{
														"declaration": 3015,
														"isOffset": false,
														"isSlot": false,
														"src": "1012:9:29",
														"valueSize": 1
													},
													{
														"declaration": 3015,
														"isOffset": false,
														"isSlot": false,
														"src": "2088:9:29",
														"valueSize": 1
													},
													{
														"declaration": 3015,
														"isOffset": false,
														"isSlot": false,
														"src": "2700:9:29",
														"valueSize": 1
													},
													{
														"declaration": 3015,
														"isOffset": false,
														"isSlot": false,
														"src": "3070:9:29",
														"valueSize": 1
													},
													{
														"declaration": 3015,
														"isOffset": false,
														"isSlot": false,
														"src": "3276:9:29",
														"valueSize": 1
													},
													{
														"declaration": 3015,
														"isOffset": false,
														"isSlot": false,
														"src": "3328:9:29",
														"valueSize": 1
													}
												],
												"id": 3017,
												"nodeType": "InlineAssembly",
												"src": "775:2598:29"
											},
											{
												"expression": {
													"id": 3018,
													"name": "tempBytes",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 3015,
													"src": "3390:9:29",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 2985,
												"id": 3019,
												"nodeType": "Return",
												"src": "3383:16:29"
											}
										]
									},
									"id": 3021,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "slice",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2982,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2977,
												"mutability": "mutable",
												"name": "_bytes",
												"nodeType": "VariableDeclaration",
												"scope": 3021,
												"src": "423:19:29",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2976,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "423:5:29",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2979,
												"mutability": "mutable",
												"name": "_start",
												"nodeType": "VariableDeclaration",
												"scope": 3021,
												"src": "452:14:29",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2978,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "452:7:29",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2981,
												"mutability": "mutable",
												"name": "_length",
												"nodeType": "VariableDeclaration",
												"scope": 3021,
												"src": "476:15:29",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2980,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "476:7:29",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "413:84:29"
									},
									"returnParameters": {
										"id": 2985,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2984,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 3021,
												"src": "521:12:29",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2983,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "521:5:29",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "520:14:29"
									},
									"scope": 3092,
									"src": "399:3007:29",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3055,
										"nodeType": "Block",
										"src": "3500:328:29",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3035,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3033,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3031,
																	"name": "_start",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3025,
																	"src": "3518:6:29",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "+",
																"rightExpression": {
																	"hexValue": "3230",
																	"id": 3032,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "3527:2:29",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_20_by_1",
																		"typeString": "int_const 20"
																	},
																	"value": "20"
																},
																"src": "3518:11:29",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 3034,
																"name": "_start",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3025,
																"src": "3533:6:29",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "3518:21:29",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "746f416464726573735f6f766572666c6f77",
															"id": 3036,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3541:20:29",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_f71efb0937d5d9d75bbebe9d7207dad811fd47ced903ea9404d5e8d77eb17a95",
																"typeString": "literal_string \"toAddress_overflow\""
															},
															"value": "toAddress_overflow"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_f71efb0937d5d9d75bbebe9d7207dad811fd47ced903ea9404d5e8d77eb17a95",
																"typeString": "literal_string \"toAddress_overflow\""
															}
														],
														"id": 3030,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "3510:7:29",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 3037,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3510:52:29",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 3038,
												"nodeType": "ExpressionStatement",
												"src": "3510:52:29"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3045,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 3040,
																	"name": "_bytes",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3023,
																	"src": "3580:6:29",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																},
																"id": 3041,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "length",
																"nodeType": "MemberAccess",
																"src": "3580:13:29",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3044,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3042,
																	"name": "_start",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3025,
																	"src": "3597:6:29",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "+",
																"rightExpression": {
																	"hexValue": "3230",
																	"id": 3043,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "3606:2:29",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_20_by_1",
																		"typeString": "int_const 20"
																	},
																	"value": "20"
																},
																"src": "3597:11:29",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "3580:28:29",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "746f416464726573735f6f75744f66426f756e6473",
															"id": 3046,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3610:23:29",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_9f688071e1df0f70b63e3651005878331be1fe9591d6cfb3187cb52a13439e5d",
																"typeString": "literal_string \"toAddress_outOfBounds\""
															},
															"value": "toAddress_outOfBounds"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_9f688071e1df0f70b63e3651005878331be1fe9591d6cfb3187cb52a13439e5d",
																"typeString": "literal_string \"toAddress_outOfBounds\""
															}
														],
														"id": 3039,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "3572:7:29",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 3047,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3572:62:29",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 3048,
												"nodeType": "ExpressionStatement",
												"src": "3572:62:29"
											},
											{
												"assignments": [
													3050
												],
												"declarations": [
													{
														"constant": false,
														"id": 3050,
														"mutability": "mutable",
														"name": "tempAddress",
														"nodeType": "VariableDeclaration",
														"scope": 3055,
														"src": "3644:19:29",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 3049,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "3644:7:29",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 3051,
												"nodeType": "VariableDeclarationStatement",
												"src": "3644:19:29"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "3683:110:29",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "3697:86:29",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"name": "_bytes",
																								"nodeType": "YulIdentifier",
																								"src": "3730:6:29"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "3738:4:29",
																								"type": "",
																								"value": "0x20"
																							}
																						],
																						"functionName": {
																							"name": "add",
																							"nodeType": "YulIdentifier",
																							"src": "3726:3:29"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "3726:17:29"
																					},
																					{
																						"name": "_start",
																						"nodeType": "YulIdentifier",
																						"src": "3745:6:29"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "3722:3:29"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3722:30:29"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nodeType": "YulIdentifier",
																			"src": "3716:5:29"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3716:37:29"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3755:27:29",
																		"type": "",
																		"value": "0x1000000000000000000000000"
																	}
																],
																"functionName": {
																	"name": "div",
																	"nodeType": "YulIdentifier",
																	"src": "3712:3:29"
																},
																"nodeType": "YulFunctionCall",
																"src": "3712:71:29"
															},
															"variableNames": [
																{
																	"name": "tempAddress",
																	"nodeType": "YulIdentifier",
																	"src": "3697:11:29"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 3023,
														"isOffset": false,
														"isSlot": false,
														"src": "3730:6:29",
														"valueSize": 1
													},
													{
														"declaration": 3025,
														"isOffset": false,
														"isSlot": false,
														"src": "3745:6:29",
														"valueSize": 1
													},
													{
														"declaration": 3050,
														"isOffset": false,
														"isSlot": false,
														"src": "3697:11:29",
														"valueSize": 1
													}
												],
												"id": 3052,
												"nodeType": "InlineAssembly",
												"src": "3674:119:29"
											},
											{
												"expression": {
													"id": 3053,
													"name": "tempAddress",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 3050,
													"src": "3810:11:29",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 3029,
												"id": 3054,
												"nodeType": "Return",
												"src": "3803:18:29"
											}
										]
									},
									"id": 3056,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toAddress",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3026,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3023,
												"mutability": "mutable",
												"name": "_bytes",
												"nodeType": "VariableDeclaration",
												"scope": 3056,
												"src": "3431:19:29",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 3022,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3431:5:29",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3025,
												"mutability": "mutable",
												"name": "_start",
												"nodeType": "VariableDeclaration",
												"scope": 3056,
												"src": "3452:14:29",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3024,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3452:7:29",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3430:37:29"
									},
									"returnParameters": {
										"id": 3029,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3028,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 3056,
												"src": "3491:7:29",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3027,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3491:7:29",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3490:9:29"
									},
									"scope": 3092,
									"src": "3412:416:29",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3090,
										"nodeType": "Block",
										"src": "3920:279:29",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3070,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3068,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3066,
																	"name": "_start",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3060,
																	"src": "3938:6:29",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "+",
																"rightExpression": {
																	"hexValue": "33",
																	"id": 3067,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "3947:1:29",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_3_by_1",
																		"typeString": "int_const 3"
																	},
																	"value": "3"
																},
																"src": "3938:10:29",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 3069,
																"name": "_start",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3060,
																"src": "3952:6:29",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "3938:20:29",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "746f55696e7432345f6f766572666c6f77",
															"id": 3071,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3960:19:29",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_428a8ba368fc474210479d5009a3c2ddaf9d762393b1b3cd3cf1b440d48791c5",
																"typeString": "literal_string \"toUint24_overflow\""
															},
															"value": "toUint24_overflow"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_428a8ba368fc474210479d5009a3c2ddaf9d762393b1b3cd3cf1b440d48791c5",
																"typeString": "literal_string \"toUint24_overflow\""
															}
														],
														"id": 3065,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "3930:7:29",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 3072,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3930:50:29",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 3073,
												"nodeType": "ExpressionStatement",
												"src": "3930:50:29"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3080,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 3075,
																	"name": "_bytes",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3058,
																	"src": "3998:6:29",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																},
																"id": 3076,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "length",
																"nodeType": "MemberAccess",
																"src": "3998:13:29",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3079,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3077,
																	"name": "_start",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3060,
																	"src": "4015:6:29",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "+",
																"rightExpression": {
																	"hexValue": "33",
																	"id": 3078,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "4024:1:29",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_3_by_1",
																		"typeString": "int_const 3"
																	},
																	"value": "3"
																},
																"src": "4015:10:29",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "3998:27:29",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "746f55696e7432345f6f75744f66426f756e6473",
															"id": 3081,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4027:22:29",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_92c5fac6e5cb4f75ffccd9c8f373ae2e2c333a8b9c2fdc616c52c36fa31575dc",
																"typeString": "literal_string \"toUint24_outOfBounds\""
															},
															"value": "toUint24_outOfBounds"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_92c5fac6e5cb4f75ffccd9c8f373ae2e2c333a8b9c2fdc616c52c36fa31575dc",
																"typeString": "literal_string \"toUint24_outOfBounds\""
															}
														],
														"id": 3074,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "3990:7:29",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 3082,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3990:60:29",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 3083,
												"nodeType": "ExpressionStatement",
												"src": "3990:60:29"
											},
											{
												"assignments": [
													3085
												],
												"declarations": [
													{
														"constant": false,
														"id": 3085,
														"mutability": "mutable",
														"name": "tempUint",
														"nodeType": "VariableDeclaration",
														"scope": 3090,
														"src": "4060:15:29",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint24",
															"typeString": "uint24"
														},
														"typeName": {
															"id": 3084,
															"name": "uint24",
															"nodeType": "ElementaryTypeName",
															"src": "4060:6:29",
															"typeDescriptions": {
																"typeIdentifier": "t_uint24",
																"typeString": "uint24"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 3086,
												"nodeType": "VariableDeclarationStatement",
												"src": "4060:15:29"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "4095:72:29",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "4109:48:29",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "_bytes",
																						"nodeType": "YulIdentifier",
																						"src": "4135:6:29"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "4143:3:29",
																						"type": "",
																						"value": "0x3"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "4131:3:29"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4131:16:29"
																			},
																			{
																				"name": "_start",
																				"nodeType": "YulIdentifier",
																				"src": "4149:6:29"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4127:3:29"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4127:29:29"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "4121:5:29"
																},
																"nodeType": "YulFunctionCall",
																"src": "4121:36:29"
															},
															"variableNames": [
																{
																	"name": "tempUint",
																	"nodeType": "YulIdentifier",
																	"src": "4109:8:29"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 3058,
														"isOffset": false,
														"isSlot": false,
														"src": "4135:6:29",
														"valueSize": 1
													},
													{
														"declaration": 3060,
														"isOffset": false,
														"isSlot": false,
														"src": "4149:6:29",
														"valueSize": 1
													},
													{
														"declaration": 3085,
														"isOffset": false,
														"isSlot": false,
														"src": "4109:8:29",
														"valueSize": 1
													}
												],
												"id": 3087,
												"nodeType": "InlineAssembly",
												"src": "4086:81:29"
											},
											{
												"expression": {
													"id": 3088,
													"name": "tempUint",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 3085,
													"src": "4184:8:29",
													"typeDescriptions": {
														"typeIdentifier": "t_uint24",
														"typeString": "uint24"
													}
												},
												"functionReturnParameters": 3064,
												"id": 3089,
												"nodeType": "Return",
												"src": "4177:15:29"
											}
										]
									},
									"id": 3091,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toUint24",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3061,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3058,
												"mutability": "mutable",
												"name": "_bytes",
												"nodeType": "VariableDeclaration",
												"scope": 3091,
												"src": "3852:19:29",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 3057,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3852:5:29",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3060,
												"mutability": "mutable",
												"name": "_start",
												"nodeType": "VariableDeclaration",
												"scope": 3091,
												"src": "3873:14:29",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3059,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3873:7:29",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3851:37:29"
									},
									"returnParameters": {
										"id": 3064,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3063,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 3091,
												"src": "3912:6:29",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint24",
													"typeString": "uint24"
												},
												"typeName": {
													"id": 3062,
													"name": "uint24",
													"nodeType": "ElementaryTypeName",
													"src": "3912:6:29",
													"typeDescriptions": {
														"typeIdentifier": "t_uint24",
														"typeString": "uint24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3911:8:29"
									},
									"scope": 3092,
									"src": "3834:365:29",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 3093,
							"src": "376:3825:29"
						}
					],
					"src": "343:3859:29"
				},
				"id": 29
			},
			"contracts/libraries/CallbackValidation.sol": {
				"ast": {
					"absolutePath": "contracts/libraries/CallbackValidation.sol",
					"exportedSymbols": {
						"CallbackValidation": [
							3154
						],
						"IUniswapV3Pool": [
							135
						],
						"IUniswapV3PoolActions": [
							245
						],
						"IUniswapV3PoolDerivedState": [
							276
						],
						"IUniswapV3PoolEvents": [
							395
						],
						"IUniswapV3PoolImmutables": [
							435
						],
						"IUniswapV3PoolOwnerActions": [
							461
						],
						"IUniswapV3PoolState": [
							569
						],
						"PoolAddress": [
							3379
						]
					},
					"id": 3155,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 3094,
							"literals": [
								"solidity",
								"=",
								"0.7",
								".6"
							],
							"nodeType": "PragmaDirective",
							"src": "45:23:30"
						},
						{
							"absolutePath": "@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol",
							"file": "@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol",
							"id": 3095,
							"nodeType": "ImportDirective",
							"scope": 3155,
							"sourceUnit": 136,
							"src": "70:66:30",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/libraries/PoolAddress.sol",
							"file": "./PoolAddress.sol",
							"id": 3096,
							"nodeType": "ImportDirective",
							"scope": 3155,
							"sourceUnit": 3380,
							"src": "137:27:30",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 3097,
								"nodeType": "StructuredDocumentation",
								"src": "166:68:30",
								"text": "@notice Provides validation for callbacks from Uniswap V3 Pools"
							},
							"fullyImplemented": true,
							"id": 3154,
							"linearizedBaseContracts": [
								3154
							],
							"name": "CallbackValidation",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 3121,
										"nodeType": "Block",
										"src": "850:92:30",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 3112,
															"name": "factory",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3100,
															"src": "882:7:30",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"id": 3115,
																	"name": "tokenA",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3102,
																	"src": "914:6:30",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 3116,
																	"name": "tokenB",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3104,
																	"src": "922:6:30",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 3117,
																	"name": "fee",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3106,
																	"src": "930:3:30",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint24",
																		"typeString": "uint24"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint24",
																		"typeString": "uint24"
																	}
																],
																"expression": {
																	"id": 3113,
																	"name": "PoolAddress",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3379,
																	"src": "891:11:30",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_contract$_PoolAddress_$3379_$",
																		"typeString": "type(library PoolAddress)"
																	}
																},
																"id": 3114,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "getPoolKey",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 3331,
																"src": "891:22:30",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_address_$_t_address_$_t_uint24_$returns$_t_struct$_PoolKey_$3300_memory_ptr_$",
																	"typeString": "function (address,address,uint24) pure returns (struct PoolAddress.PoolKey memory)"
																}
															},
															"id": 3118,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "891:43:30",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_PoolKey_$3300_memory_ptr",
																"typeString": "struct PoolAddress.PoolKey memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_struct$_PoolKey_$3300_memory_ptr",
																"typeString": "struct PoolAddress.PoolKey memory"
															}
														],
														"id": 3111,
														"name": "verifyCallback",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															3122,
															3153
														],
														"referencedDeclaration": 3153,
														"src": "867:14:30",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_struct$_PoolKey_$3300_memory_ptr_$returns$_t_contract$_IUniswapV3Pool_$135_$",
															"typeString": "function (address,struct PoolAddress.PoolKey memory) view returns (contract IUniswapV3Pool)"
														}
													},
													"id": 3119,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "867:68:30",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IUniswapV3Pool_$135",
														"typeString": "contract IUniswapV3Pool"
													}
												},
												"functionReturnParameters": 3110,
												"id": 3120,
												"nodeType": "Return",
												"src": "860:75:30"
											}
										]
									},
									"documentation": {
										"id": 3098,
										"nodeType": "StructuredDocumentation",
										"src": "267:411:30",
										"text": "@notice Returns the address of a valid Uniswap V3 Pool\n @param factory The contract address of the Uniswap V3 factory\n @param tokenA The contract address of either token0 or token1\n @param tokenB The contract address of the other token\n @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\n @return pool The V3 pool contract address"
									},
									"id": 3122,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "verifyCallback",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3107,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3100,
												"mutability": "mutable",
												"name": "factory",
												"nodeType": "VariableDeclaration",
												"scope": 3122,
												"src": "716:15:30",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3099,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "716:7:30",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3102,
												"mutability": "mutable",
												"name": "tokenA",
												"nodeType": "VariableDeclaration",
												"scope": 3122,
												"src": "741:14:30",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3101,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "741:7:30",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3104,
												"mutability": "mutable",
												"name": "tokenB",
												"nodeType": "VariableDeclaration",
												"scope": 3122,
												"src": "765:14:30",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3103,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "765:7:30",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3106,
												"mutability": "mutable",
												"name": "fee",
												"nodeType": "VariableDeclaration",
												"scope": 3122,
												"src": "789:10:30",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint24",
													"typeString": "uint24"
												},
												"typeName": {
													"id": 3105,
													"name": "uint24",
													"nodeType": "ElementaryTypeName",
													"src": "789:6:30",
													"typeDescriptions": {
														"typeIdentifier": "t_uint24",
														"typeString": "uint24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "706:99:30"
									},
									"returnParameters": {
										"id": 3110,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3109,
												"mutability": "mutable",
												"name": "pool",
												"nodeType": "VariableDeclaration",
												"scope": 3122,
												"src": "829:19:30",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IUniswapV3Pool_$135",
													"typeString": "contract IUniswapV3Pool"
												},
												"typeName": {
													"id": 3108,
													"name": "IUniswapV3Pool",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 135,
													"src": "829:14:30",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IUniswapV3Pool_$135",
														"typeString": "contract IUniswapV3Pool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "828:21:30"
									},
									"scope": 3154,
									"src": "683:259:30",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3152,
										"nodeType": "Block",
										"src": "1338:130:30",
										"statements": [
											{
												"expression": {
													"id": 3140,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 3132,
														"name": "pool",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3130,
														"src": "1348:4:30",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IUniswapV3Pool_$135",
															"typeString": "contract IUniswapV3Pool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"arguments": [
																	{
																		"id": 3136,
																		"name": "factory",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 3125,
																		"src": "1397:7:30",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 3137,
																		"name": "poolKey",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 3127,
																		"src": "1406:7:30",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_PoolKey_$3300_memory_ptr",
																			"typeString": "struct PoolAddress.PoolKey memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_struct$_PoolKey_$3300_memory_ptr",
																			"typeString": "struct PoolAddress.PoolKey memory"
																		}
																	],
																	"expression": {
																		"id": 3134,
																		"name": "PoolAddress",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 3379,
																		"src": "1370:11:30",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_contract$_PoolAddress_$3379_$",
																			"typeString": "type(library PoolAddress)"
																		}
																	},
																	"id": 3135,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "computeAddress",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 3378,
																	"src": "1370:26:30",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_address_$_t_struct$_PoolKey_$3300_memory_ptr_$returns$_t_address_$",
																		"typeString": "function (address,struct PoolAddress.PoolKey memory) pure returns (address)"
																	}
																},
																"id": 3138,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1370:44:30",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															],
															"id": 3133,
															"name": "IUniswapV3Pool",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 135,
															"src": "1355:14:30",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_IUniswapV3Pool_$135_$",
																"typeString": "type(contract IUniswapV3Pool)"
															}
														},
														"id": 3139,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1355:60:30",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IUniswapV3Pool_$135",
															"typeString": "contract IUniswapV3Pool"
														}
													},
													"src": "1348:67:30",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IUniswapV3Pool_$135",
														"typeString": "contract IUniswapV3Pool"
													}
												},
												"id": 3141,
												"nodeType": "ExpressionStatement",
												"src": "1348:67:30"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 3149,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 3143,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "1433:3:30",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 3144,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "1433:10:30",
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"arguments": [
																	{
																		"id": 3147,
																		"name": "pool",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 3130,
																		"src": "1455:4:30",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IUniswapV3Pool_$135",
																			"typeString": "contract IUniswapV3Pool"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_contract$_IUniswapV3Pool_$135",
																			"typeString": "contract IUniswapV3Pool"
																		}
																	],
																	"id": 3146,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "1447:7:30",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 3145,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "1447:7:30",
																		"typeDescriptions": {}
																	}
																},
																"id": 3148,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1447:13:30",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "1433:27:30",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 3142,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1425:7:30",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 3150,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1425:36:30",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 3151,
												"nodeType": "ExpressionStatement",
												"src": "1425:36:30"
											}
										]
									},
									"documentation": {
										"id": 3123,
										"nodeType": "StructuredDocumentation",
										"src": "948:236:30",
										"text": "@notice Returns the address of a valid Uniswap V3 Pool\n @param factory The contract address of the Uniswap V3 factory\n @param poolKey The identifying key of the V3 pool\n @return pool The V3 pool contract address"
									},
									"id": 3153,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "verifyCallback",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3128,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3125,
												"mutability": "mutable",
												"name": "factory",
												"nodeType": "VariableDeclaration",
												"scope": 3153,
												"src": "1213:15:30",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3124,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1213:7:30",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3127,
												"mutability": "mutable",
												"name": "poolKey",
												"nodeType": "VariableDeclaration",
												"scope": 3153,
												"src": "1230:34:30",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_PoolKey_$3300_memory_ptr",
													"typeString": "struct PoolAddress.PoolKey"
												},
												"typeName": {
													"id": 3126,
													"name": "PoolAddress.PoolKey",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 3300,
													"src": "1230:19:30",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_PoolKey_$3300_storage_ptr",
														"typeString": "struct PoolAddress.PoolKey"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1212:53:30"
									},
									"returnParameters": {
										"id": 3131,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3130,
												"mutability": "mutable",
												"name": "pool",
												"nodeType": "VariableDeclaration",
												"scope": 3153,
												"src": "1313:19:30",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IUniswapV3Pool_$135",
													"typeString": "contract IUniswapV3Pool"
												},
												"typeName": {
													"id": 3129,
													"name": "IUniswapV3Pool",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 135,
													"src": "1313:14:30",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IUniswapV3Pool_$135",
														"typeString": "contract IUniswapV3Pool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1312:21:30"
									},
									"scope": 3154,
									"src": "1189:279:30",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 3155,
							"src": "234:1236:30"
						}
					],
					"src": "45:1426:30"
				},
				"id": 30
			},
			"contracts/libraries/Path.sol": {
				"ast": {
					"absolutePath": "contracts/libraries/Path.sol",
					"exportedSymbols": {
						"BytesLib": [
							3092
						],
						"Path": [
							3287
						]
					},
					"id": 3288,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 3156,
							"literals": [
								"solidity",
								">=",
								"0.6",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:31"
						},
						{
							"absolutePath": "contracts/libraries/BytesLib.sol",
							"file": "./BytesLib.sol",
							"id": 3157,
							"nodeType": "ImportDirective",
							"scope": 3288,
							"sourceUnit": 3093,
							"src": "71:24:31",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 3158,
								"nodeType": "StructuredDocumentation",
								"src": "97:67:31",
								"text": "@title Functions for manipulating path data for multihop swaps"
							},
							"fullyImplemented": true,
							"id": 3287,
							"linearizedBaseContracts": [
								3287
							],
							"name": "Path",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"id": 3161,
									"libraryName": {
										"id": 3159,
										"name": "BytesLib",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 3092,
										"src": "189:8:31",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_BytesLib_$3092",
											"typeString": "library BytesLib"
										}
									},
									"nodeType": "UsingForDirective",
									"src": "183:25:31",
									"typeName": {
										"id": 3160,
										"name": "bytes",
										"nodeType": "ElementaryTypeName",
										"src": "202:5:31",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes_storage_ptr",
											"typeString": "bytes"
										}
									}
								},
								{
									"constant": true,
									"documentation": {
										"id": 3162,
										"nodeType": "StructuredDocumentation",
										"src": "214:48:31",
										"text": "@dev The length of the bytes encoded address"
									},
									"id": 3165,
									"mutability": "constant",
									"name": "ADDR_SIZE",
									"nodeType": "VariableDeclaration",
									"scope": 3287,
									"src": "267:39:31",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 3163,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "267:7:31",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "3230",
										"id": 3164,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "304:2:31",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_20_by_1",
											"typeString": "int_const 20"
										},
										"value": "20"
									},
									"visibility": "private"
								},
								{
									"constant": true,
									"documentation": {
										"id": 3166,
										"nodeType": "StructuredDocumentation",
										"src": "312:44:31",
										"text": "@dev The length of the bytes encoded fee"
									},
									"id": 3169,
									"mutability": "constant",
									"name": "FEE_SIZE",
									"nodeType": "VariableDeclaration",
									"scope": 3287,
									"src": "361:37:31",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 3167,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "361:7:31",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "33",
										"id": 3168,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "397:1:31",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_3_by_1",
											"typeString": "int_const 3"
										},
										"value": "3"
									},
									"visibility": "private"
								},
								{
									"constant": true,
									"documentation": {
										"id": 3170,
										"nodeType": "StructuredDocumentation",
										"src": "405:58:31",
										"text": "@dev The offset of a single token address and pool fee"
									},
									"id": 3175,
									"mutability": "constant",
									"name": "NEXT_OFFSET",
									"nodeType": "VariableDeclaration",
									"scope": 3287,
									"src": "468:59:31",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 3171,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "468:7:31",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"commonType": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										},
										"id": 3174,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"lValueRequested": false,
										"leftExpression": {
											"id": 3172,
											"name": "ADDR_SIZE",
											"nodeType": "Identifier",
											"overloadedDeclarations": [],
											"referencedDeclaration": 3165,
											"src": "507:9:31",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"nodeType": "BinaryOperation",
										"operator": "+",
										"rightExpression": {
											"id": 3173,
											"name": "FEE_SIZE",
											"nodeType": "Identifier",
											"overloadedDeclarations": [],
											"referencedDeclaration": 3169,
											"src": "519:8:31",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"src": "507:20:31",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "private"
								},
								{
									"constant": true,
									"documentation": {
										"id": 3176,
										"nodeType": "StructuredDocumentation",
										"src": "533:42:31",
										"text": "@dev The offset of an encoded pool key"
									},
									"id": 3181,
									"mutability": "constant",
									"name": "POP_OFFSET",
									"nodeType": "VariableDeclaration",
									"scope": 3287,
									"src": "580:61:31",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 3177,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "580:7:31",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"commonType": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										},
										"id": 3180,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"lValueRequested": false,
										"leftExpression": {
											"id": 3178,
											"name": "NEXT_OFFSET",
											"nodeType": "Identifier",
											"overloadedDeclarations": [],
											"referencedDeclaration": 3175,
											"src": "618:11:31",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"nodeType": "BinaryOperation",
										"operator": "+",
										"rightExpression": {
											"id": 3179,
											"name": "ADDR_SIZE",
											"nodeType": "Identifier",
											"overloadedDeclarations": [],
											"referencedDeclaration": 3165,
											"src": "632:9:31",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"src": "618:23:31",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "private"
								},
								{
									"constant": true,
									"documentation": {
										"id": 3182,
										"nodeType": "StructuredDocumentation",
										"src": "647:72:31",
										"text": "@dev The minimum length of an encoding that contains 2 or more pools"
									},
									"id": 3187,
									"mutability": "constant",
									"name": "MULTIPLE_POOLS_MIN_LENGTH",
									"nodeType": "VariableDeclaration",
									"scope": 3287,
									"src": "724:77:31",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 3183,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "724:7:31",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"commonType": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										},
										"id": 3186,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"lValueRequested": false,
										"leftExpression": {
											"id": 3184,
											"name": "POP_OFFSET",
											"nodeType": "Identifier",
											"overloadedDeclarations": [],
											"referencedDeclaration": 3181,
											"src": "777:10:31",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"nodeType": "BinaryOperation",
										"operator": "+",
										"rightExpression": {
											"id": 3185,
											"name": "NEXT_OFFSET",
											"nodeType": "Identifier",
											"overloadedDeclarations": [],
											"referencedDeclaration": 3175,
											"src": "790:11:31",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"src": "777:24:31",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 3200,
										"nodeType": "Block",
										"src": "1066:64:31",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 3198,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 3195,
															"name": "path",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3190,
															"src": "1083:4:31",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 3196,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "1083:11:31",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">=",
													"rightExpression": {
														"id": 3197,
														"name": "MULTIPLE_POOLS_MIN_LENGTH",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3187,
														"src": "1098:25:31",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1083:40:31",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 3194,
												"id": 3199,
												"nodeType": "Return",
												"src": "1076:47:31"
											}
										]
									},
									"documentation": {
										"id": 3188,
										"nodeType": "StructuredDocumentation",
										"src": "808:179:31",
										"text": "@notice Returns true iff the path contains two or more pools\n @param path The encoded swap path\n @return True if path contains two or more pools, otherwise false"
									},
									"id": 3201,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "hasMultiplePools",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3191,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3190,
												"mutability": "mutable",
												"name": "path",
												"nodeType": "VariableDeclaration",
												"scope": 3201,
												"src": "1018:17:31",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 3189,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "1018:5:31",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1017:19:31"
									},
									"returnParameters": {
										"id": 3194,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3193,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 3201,
												"src": "1060:4:31",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 3192,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1060:4:31",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1059:6:31"
									},
									"scope": 3287,
									"src": "992:138:31",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3218,
										"nodeType": "Block",
										"src": "1351:166:31",
										"statements": [
											{
												"expression": {
													"components": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3215,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 3212,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"expression": {
																				"id": 3209,
																				"name": "path",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 3204,
																				"src": "1471:4:31",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes_memory_ptr",
																					"typeString": "bytes memory"
																				}
																			},
																			"id": 3210,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberName": "length",
																			"nodeType": "MemberAccess",
																			"src": "1471:11:31",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "-",
																		"rightExpression": {
																			"id": 3211,
																			"name": "ADDR_SIZE",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3165,
																			"src": "1485:9:31",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "1471:23:31",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 3213,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1470:25:31",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "/",
															"rightExpression": {
																"id": 3214,
																"name": "NEXT_OFFSET",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3175,
																"src": "1498:11:31",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1470:39:31",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"id": 3216,
													"isConstant": false,
													"isInlineArray": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "1469:41:31",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 3208,
												"id": 3217,
												"nodeType": "Return",
												"src": "1462:48:31"
											}
										]
									},
									"documentation": {
										"id": 3202,
										"nodeType": "StructuredDocumentation",
										"src": "1136:141:31",
										"text": "@notice Returns the number of pools in the path\n @param path The encoded swap path\n @return The number of pools in the path"
									},
									"id": 3219,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "numPools",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3205,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3204,
												"mutability": "mutable",
												"name": "path",
												"nodeType": "VariableDeclaration",
												"scope": 3219,
												"src": "1300:17:31",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 3203,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "1300:5:31",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1299:19:31"
									},
									"returnParameters": {
										"id": 3208,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3207,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 3219,
												"src": "1342:7:31",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3206,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1342:7:31",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1341:9:31"
									},
									"scope": 3287,
									"src": "1282:235:31",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3252,
										"nodeType": "Block",
										"src": "1964:129:31",
										"statements": [
											{
												"expression": {
													"id": 3236,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 3231,
														"name": "tokenA",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3225,
														"src": "1974:6:31",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 3234,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1998:1:31",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"expression": {
																"id": 3232,
																"name": "path",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3222,
																"src": "1983:4:31",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"id": 3233,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "toAddress",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 3056,
															"src": "1983:14:31",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_address_$bound_to$_t_bytes_memory_ptr_$",
																"typeString": "function (bytes memory,uint256) pure returns (address)"
															}
														},
														"id": 3235,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1983:17:31",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "1974:26:31",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 3237,
												"nodeType": "ExpressionStatement",
												"src": "1974:26:31"
											},
											{
												"expression": {
													"id": 3243,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 3238,
														"name": "fee",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3229,
														"src": "2010:3:31",
														"typeDescriptions": {
															"typeIdentifier": "t_uint24",
															"typeString": "uint24"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 3241,
																"name": "ADDR_SIZE",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3165,
																"src": "2030:9:31",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"expression": {
																"id": 3239,
																"name": "path",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3222,
																"src": "2016:4:31",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"id": 3240,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "toUint24",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 3091,
															"src": "2016:13:31",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_uint24_$bound_to$_t_bytes_memory_ptr_$",
																"typeString": "function (bytes memory,uint256) pure returns (uint24)"
															}
														},
														"id": 3242,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2016:24:31",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint24",
															"typeString": "uint24"
														}
													},
													"src": "2010:30:31",
													"typeDescriptions": {
														"typeIdentifier": "t_uint24",
														"typeString": "uint24"
													}
												},
												"id": 3244,
												"nodeType": "ExpressionStatement",
												"src": "2010:30:31"
											},
											{
												"expression": {
													"id": 3250,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 3245,
														"name": "tokenB",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3227,
														"src": "2050:6:31",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 3248,
																"name": "NEXT_OFFSET",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3175,
																"src": "2074:11:31",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"expression": {
																"id": 3246,
																"name": "path",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3222,
																"src": "2059:4:31",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"id": 3247,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "toAddress",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 3056,
															"src": "2059:14:31",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_address_$bound_to$_t_bytes_memory_ptr_$",
																"typeString": "function (bytes memory,uint256) pure returns (address)"
															}
														},
														"id": 3249,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2059:27:31",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "2050:36:31",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 3251,
												"nodeType": "ExpressionStatement",
												"src": "2050:36:31"
											}
										]
									},
									"documentation": {
										"id": 3220,
										"nodeType": "StructuredDocumentation",
										"src": "1523:251:31",
										"text": "@notice Decodes the first pool in path\n @param path The bytes encoded swap path\n @return tokenA The first token of the given pool\n @return tokenB The second token of the given pool\n @return fee The fee level of the pool"
									},
									"id": 3253,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "decodeFirstPool",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3223,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3222,
												"mutability": "mutable",
												"name": "path",
												"nodeType": "VariableDeclaration",
												"scope": 3253,
												"src": "1804:17:31",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 3221,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "1804:5:31",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1803:19:31"
									},
									"returnParameters": {
										"id": 3230,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3225,
												"mutability": "mutable",
												"name": "tokenA",
												"nodeType": "VariableDeclaration",
												"scope": 3253,
												"src": "1883:14:31",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3224,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1883:7:31",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3227,
												"mutability": "mutable",
												"name": "tokenB",
												"nodeType": "VariableDeclaration",
												"scope": 3253,
												"src": "1911:14:31",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3226,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1911:7:31",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3229,
												"mutability": "mutable",
												"name": "fee",
												"nodeType": "VariableDeclaration",
												"scope": 3253,
												"src": "1939:10:31",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint24",
													"typeString": "uint24"
												},
												"typeName": {
													"id": 3228,
													"name": "uint24",
													"nodeType": "ElementaryTypeName",
													"src": "1939:6:31",
													"typeDescriptions": {
														"typeIdentifier": "t_uint24",
														"typeString": "uint24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1869:90:31"
									},
									"scope": 3287,
									"src": "1779:314:31",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3267,
										"nodeType": "Block",
										"src": "2397:49:31",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"hexValue": "30",
															"id": 3263,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2425:1:31",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														{
															"id": 3264,
															"name": "POP_OFFSET",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3181,
															"src": "2428:10:31",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 3261,
															"name": "path",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3256,
															"src": "2414:4:31",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 3262,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "slice",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 3021,
														"src": "2414:10:31",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$_t_uint256_$returns$_t_bytes_memory_ptr_$bound_to$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory,uint256,uint256) pure returns (bytes memory)"
														}
													},
													"id": 3265,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2414:25:31",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 3260,
												"id": 3266,
												"nodeType": "Return",
												"src": "2407:32:31"
											}
										]
									},
									"documentation": {
										"id": 3254,
										"nodeType": "StructuredDocumentation",
										"src": "2099:215:31",
										"text": "@notice Gets the segment corresponding to the first pool in the path\n @param path The bytes encoded swap path\n @return The segment containing all data necessary to target the first pool in the path"
									},
									"id": 3268,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getFirstPool",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3257,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3256,
												"mutability": "mutable",
												"name": "path",
												"nodeType": "VariableDeclaration",
												"scope": 3268,
												"src": "2341:17:31",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 3255,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "2341:5:31",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2340:19:31"
									},
									"returnParameters": {
										"id": 3260,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3259,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 3268,
												"src": "2383:12:31",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 3258,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "2383:5:31",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2382:14:31"
									},
									"scope": 3287,
									"src": "2319:127:31",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3285,
										"nodeType": "Block",
										"src": "2710:74:31",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 3278,
															"name": "NEXT_OFFSET",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3175,
															"src": "2738:11:31",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3282,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 3279,
																	"name": "path",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3271,
																	"src": "2751:4:31",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																},
																"id": 3280,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "length",
																"nodeType": "MemberAccess",
																"src": "2751:11:31",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "-",
															"rightExpression": {
																"id": 3281,
																"name": "NEXT_OFFSET",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3175,
																"src": "2765:11:31",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2751:25:31",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 3276,
															"name": "path",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3271,
															"src": "2727:4:31",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 3277,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "slice",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 3021,
														"src": "2727:10:31",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$_t_uint256_$returns$_t_bytes_memory_ptr_$bound_to$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory,uint256,uint256) pure returns (bytes memory)"
														}
													},
													"id": 3283,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2727:50:31",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 3275,
												"id": 3284,
												"nodeType": "Return",
												"src": "2720:57:31"
											}
										]
									},
									"documentation": {
										"id": 3269,
										"nodeType": "StructuredDocumentation",
										"src": "2452:178:31",
										"text": "@notice Skips a token + fee element from the buffer and returns the remainder\n @param path The swap path\n @return The remaining token + fee elements in the path"
									},
									"id": 3286,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "skipToken",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3272,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3271,
												"mutability": "mutable",
												"name": "path",
												"nodeType": "VariableDeclaration",
												"scope": 3286,
												"src": "2654:17:31",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 3270,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "2654:5:31",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2653:19:31"
									},
									"returnParameters": {
										"id": 3275,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3274,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 3286,
												"src": "2696:12:31",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 3273,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "2696:5:31",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2695:14:31"
									},
									"scope": 3287,
									"src": "2635:149:31",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 3288,
							"src": "164:2622:31"
						}
					],
					"src": "45:2742:31"
				},
				"id": 31
			},
			"contracts/libraries/PoolAddress.sol": {
				"ast": {
					"absolutePath": "contracts/libraries/PoolAddress.sol",
					"exportedSymbols": {
						"PoolAddress": [
							3379
						]
					},
					"id": 3380,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 3289,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:32"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 3290,
								"nodeType": "StructuredDocumentation",
								"src": "71:96:32",
								"text": "@title Provides functions for deriving a pool address from the factory, tokens, and the fee"
							},
							"fullyImplemented": true,
							"id": 3379,
							"linearizedBaseContracts": [
								3379
							],
							"name": "PoolAddress",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": true,
									"id": 3293,
									"mutability": "constant",
									"name": "POOL_INIT_CODE_HASH",
									"nodeType": "VariableDeclaration",
									"scope": 3379,
									"src": "193:114:32",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 3291,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "193:7:32",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"value": {
										"hexValue": "307865333466313939623139623262346634376636383434323631396435353535323764323434663738613332393765613839333235663834336638376238623534",
										"id": 3292,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "241:66:32",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_102814774271675688723325049954498779091328469440286648861889194717372678376276_by_1",
											"typeString": "int_const 1028...(70 digits omitted)...6276"
										},
										"value": "0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54"
									},
									"visibility": "internal"
								},
								{
									"canonicalName": "PoolAddress.PoolKey",
									"id": 3300,
									"members": [
										{
											"constant": false,
											"id": 3295,
											"mutability": "mutable",
											"name": "token0",
											"nodeType": "VariableDeclaration",
											"scope": 3300,
											"src": "387:14:32",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 3294,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "387:7:32",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 3297,
											"mutability": "mutable",
											"name": "token1",
											"nodeType": "VariableDeclaration",
											"scope": 3300,
											"src": "411:14:32",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 3296,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "411:7:32",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 3299,
											"mutability": "mutable",
											"name": "fee",
											"nodeType": "VariableDeclaration",
											"scope": 3300,
											"src": "435:10:32",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint24",
												"typeString": "uint24"
											},
											"typeName": {
												"id": 3298,
												"name": "uint24",
												"nodeType": "ElementaryTypeName",
												"src": "435:6:32",
												"typeDescriptions": {
													"typeIdentifier": "t_uint24",
													"typeString": "uint24"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "PoolKey",
									"nodeType": "StructDefinition",
									"scope": 3379,
									"src": "362:90:32",
									"visibility": "public"
								},
								{
									"body": {
										"id": 3330,
										"nodeType": "Block",
										"src": "917:141:32",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 3314,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 3312,
														"name": "tokenA",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3303,
														"src": "931:6:32",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"id": 3313,
														"name": "tokenB",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3305,
														"src": "940:6:32",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "931:15:32",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 3323,
												"nodeType": "IfStatement",
												"src": "927:56:32",
												"trueBody": {
													"expression": {
														"id": 3321,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"components": [
																{
																	"id": 3315,
																	"name": "tokenA",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3303,
																	"src": "949:6:32",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 3316,
																	"name": "tokenB",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3305,
																	"src": "957:6:32",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"id": 3317,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": true,
															"nodeType": "TupleExpression",
															"src": "948:16:32",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_address_$_t_address_$",
																"typeString": "tuple(address,address)"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"components": [
																{
																	"id": 3318,
																	"name": "tokenB",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3305,
																	"src": "968:6:32",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 3319,
																	"name": "tokenA",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3303,
																	"src": "976:6:32",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"id": 3320,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "967:16:32",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_address_$_t_address_$",
																"typeString": "tuple(address,address)"
															}
														},
														"src": "948:35:32",
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$__$",
															"typeString": "tuple()"
														}
													},
													"id": 3322,
													"nodeType": "ExpressionStatement",
													"src": "948:35:32"
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 3325,
															"name": "tokenA",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3303,
															"src": "1017:6:32",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 3326,
															"name": "tokenB",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3305,
															"src": "1033:6:32",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 3327,
															"name": "fee",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3307,
															"src": "1046:3:32",
															"typeDescriptions": {
																"typeIdentifier": "t_uint24",
																"typeString": "uint24"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint24",
																"typeString": "uint24"
															}
														],
														"id": 3324,
														"name": "PoolKey",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3300,
														"src": "1000:7:32",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_struct$_PoolKey_$3300_storage_ptr_$",
															"typeString": "type(struct PoolAddress.PoolKey storage pointer)"
														}
													},
													"id": 3328,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "structConstructorCall",
													"lValueRequested": false,
													"names": [
														"token0",
														"token1",
														"fee"
													],
													"nodeType": "FunctionCall",
													"src": "1000:51:32",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_PoolKey_$3300_memory_ptr",
														"typeString": "struct PoolAddress.PoolKey memory"
													}
												},
												"functionReturnParameters": 3311,
												"id": 3329,
												"nodeType": "Return",
												"src": "993:58:32"
											}
										]
									},
									"documentation": {
										"id": 3301,
										"nodeType": "StructuredDocumentation",
										"src": "458:321:32",
										"text": "@notice Returns PoolKey: the ordered tokens with the matched fee levels\n @param tokenA The first token of a pool, unsorted\n @param tokenB The second token of a pool, unsorted\n @param fee The fee level of the pool\n @return Poolkey The pool details with ordered token0 and token1 assignments"
									},
									"id": 3331,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getPoolKey",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3308,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3303,
												"mutability": "mutable",
												"name": "tokenA",
												"nodeType": "VariableDeclaration",
												"scope": 3331,
												"src": "813:14:32",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3302,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "813:7:32",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3305,
												"mutability": "mutable",
												"name": "tokenB",
												"nodeType": "VariableDeclaration",
												"scope": 3331,
												"src": "837:14:32",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3304,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "837:7:32",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3307,
												"mutability": "mutable",
												"name": "fee",
												"nodeType": "VariableDeclaration",
												"scope": 3331,
												"src": "861:10:32",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint24",
													"typeString": "uint24"
												},
												"typeName": {
													"id": 3306,
													"name": "uint24",
													"nodeType": "ElementaryTypeName",
													"src": "861:6:32",
													"typeDescriptions": {
														"typeIdentifier": "t_uint24",
														"typeString": "uint24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "803:74:32"
									},
									"returnParameters": {
										"id": 3311,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3310,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 3331,
												"src": "901:14:32",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_PoolKey_$3300_memory_ptr",
													"typeString": "struct PoolAddress.PoolKey"
												},
												"typeName": {
													"id": 3309,
													"name": "PoolKey",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 3300,
													"src": "901:7:32",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_PoolKey_$3300_storage_ptr",
														"typeString": "struct PoolAddress.PoolKey"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "900:16:32"
									},
									"scope": 3379,
									"src": "784:274:32",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3377,
										"nodeType": "Block",
										"src": "1403:414:32",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 3346,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 3342,
																	"name": "key",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3336,
																	"src": "1421:3:32",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_PoolKey_$3300_memory_ptr",
																		"typeString": "struct PoolAddress.PoolKey memory"
																	}
																},
																"id": 3343,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "token0",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 3295,
																"src": "1421:10:32",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<",
															"rightExpression": {
																"expression": {
																	"id": 3344,
																	"name": "key",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3336,
																	"src": "1434:3:32",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_PoolKey_$3300_memory_ptr",
																		"typeString": "struct PoolAddress.PoolKey memory"
																	}
																},
																"id": 3345,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "token1",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 3297,
																"src": "1434:10:32",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "1421:23:32",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 3341,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1413:7:32",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 3347,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1413:32:32",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 3348,
												"nodeType": "ExpressionStatement",
												"src": "1413:32:32"
											},
											{
												"expression": {
													"id": 3375,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 3349,
														"name": "pool",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3339,
														"src": "1455:4:32",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"hexValue": "ff",
																						"id": 3357,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "hexString",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "1581:7:32",
																						"typeDescriptions": {
																							"typeIdentifier": "t_stringliteral_8b1a944cf13a9a1c08facb2c9e98623ef3254d2ddb48113885c3e8e97fec8db9",
																							"typeString": "literal_string hex\"ff\""
																						}
																					},
																					{
																						"id": 3358,
																						"name": "factory",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 3334,
																						"src": "1614:7:32",
																						"typeDescriptions": {
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						}
																					},
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"expression": {
																											"id": 3362,
																											"name": "key",
																											"nodeType": "Identifier",
																											"overloadedDeclarations": [],
																											"referencedDeclaration": 3336,
																											"src": "1668:3:32",
																											"typeDescriptions": {
																												"typeIdentifier": "t_struct$_PoolKey_$3300_memory_ptr",
																												"typeString": "struct PoolAddress.PoolKey memory"
																											}
																										},
																										"id": 3363,
																										"isConstant": false,
																										"isLValue": true,
																										"isPure": false,
																										"lValueRequested": false,
																										"memberName": "token0",
																										"nodeType": "MemberAccess",
																										"referencedDeclaration": 3295,
																										"src": "1668:10:32",
																										"typeDescriptions": {
																											"typeIdentifier": "t_address",
																											"typeString": "address"
																										}
																									},
																									{
																										"expression": {
																											"id": 3364,
																											"name": "key",
																											"nodeType": "Identifier",
																											"overloadedDeclarations": [],
																											"referencedDeclaration": 3336,
																											"src": "1680:3:32",
																											"typeDescriptions": {
																												"typeIdentifier": "t_struct$_PoolKey_$3300_memory_ptr",
																												"typeString": "struct PoolAddress.PoolKey memory"
																											}
																										},
																										"id": 3365,
																										"isConstant": false,
																										"isLValue": true,
																										"isPure": false,
																										"lValueRequested": false,
																										"memberName": "token1",
																										"nodeType": "MemberAccess",
																										"referencedDeclaration": 3297,
																										"src": "1680:10:32",
																										"typeDescriptions": {
																											"typeIdentifier": "t_address",
																											"typeString": "address"
																										}
																									},
																									{
																										"expression": {
																											"id": 3366,
																											"name": "key",
																											"nodeType": "Identifier",
																											"overloadedDeclarations": [],
																											"referencedDeclaration": 3336,
																											"src": "1692:3:32",
																											"typeDescriptions": {
																												"typeIdentifier": "t_struct$_PoolKey_$3300_memory_ptr",
																												"typeString": "struct PoolAddress.PoolKey memory"
																											}
																										},
																										"id": 3367,
																										"isConstant": false,
																										"isLValue": true,
																										"isPure": false,
																										"lValueRequested": false,
																										"memberName": "fee",
																										"nodeType": "MemberAccess",
																										"referencedDeclaration": 3299,
																										"src": "1692:7:32",
																										"typeDescriptions": {
																											"typeIdentifier": "t_uint24",
																											"typeString": "uint24"
																										}
																									}
																								],
																								"expression": {
																									"argumentTypes": [
																										{
																											"typeIdentifier": "t_address",
																											"typeString": "address"
																										},
																										{
																											"typeIdentifier": "t_address",
																											"typeString": "address"
																										},
																										{
																											"typeIdentifier": "t_uint24",
																											"typeString": "uint24"
																										}
																									],
																									"expression": {
																										"id": 3360,
																										"name": "abi",
																										"nodeType": "Identifier",
																										"overloadedDeclarations": [],
																										"referencedDeclaration": 4294967295,
																										"src": "1657:3:32",
																										"typeDescriptions": {
																											"typeIdentifier": "t_magic_abi",
																											"typeString": "abi"
																										}
																									},
																									"id": 3361,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": true,
																									"lValueRequested": false,
																									"memberName": "encode",
																									"nodeType": "MemberAccess",
																									"src": "1657:10:32",
																									"typeDescriptions": {
																										"typeIdentifier": "t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$",
																										"typeString": "function () pure returns (bytes memory)"
																									}
																								},
																								"id": 3368,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": false,
																								"kind": "functionCall",
																								"lValueRequested": false,
																								"names": [],
																								"nodeType": "FunctionCall",
																								"src": "1657:43:32",
																								"tryCall": false,
																								"typeDescriptions": {
																									"typeIdentifier": "t_bytes_memory_ptr",
																									"typeString": "bytes memory"
																								}
																							}
																						],
																						"expression": {
																							"argumentTypes": [
																								{
																									"typeIdentifier": "t_bytes_memory_ptr",
																									"typeString": "bytes memory"
																								}
																							],
																							"id": 3359,
																							"name": "keccak256",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 4294967288,
																							"src": "1647:9:32",
																							"typeDescriptions": {
																								"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
																								"typeString": "function (bytes memory) pure returns (bytes32)"
																							}
																						},
																						"id": 3369,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"kind": "functionCall",
																						"lValueRequested": false,
																						"names": [],
																						"nodeType": "FunctionCall",
																						"src": "1647:54:32",
																						"tryCall": false,
																						"typeDescriptions": {
																							"typeIdentifier": "t_bytes32",
																							"typeString": "bytes32"
																						}
																					},
																					{
																						"id": 3370,
																						"name": "POOL_INIT_CODE_HASH",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 3293,
																						"src": "1727:19:32",
																						"typeDescriptions": {
																							"typeIdentifier": "t_bytes32",
																							"typeString": "bytes32"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_stringliteral_8b1a944cf13a9a1c08facb2c9e98623ef3254d2ddb48113885c3e8e97fec8db9",
																							"typeString": "literal_string hex\"ff\""
																						},
																						{
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						},
																						{
																							"typeIdentifier": "t_bytes32",
																							"typeString": "bytes32"
																						},
																						{
																							"typeIdentifier": "t_bytes32",
																							"typeString": "bytes32"
																						}
																					],
																					"expression": {
																						"id": 3355,
																						"name": "abi",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 4294967295,
																						"src": "1539:3:32",
																						"typeDescriptions": {
																							"typeIdentifier": "t_magic_abi",
																							"typeString": "abi"
																						}
																					},
																					"id": 3356,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"memberName": "encodePacked",
																					"nodeType": "MemberAccess",
																					"src": "1539:16:32",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
																						"typeString": "function () pure returns (bytes memory)"
																					}
																				},
																				"id": 3371,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "functionCall",
																				"lValueRequested": false,
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "1539:229:32",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes_memory_ptr",
																					"typeString": "bytes memory"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_bytes_memory_ptr",
																					"typeString": "bytes memory"
																				}
																			],
																			"id": 3354,
																			"name": "keccak256",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967288,
																			"src": "1508:9:32",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
																				"typeString": "function (bytes memory) pure returns (bytes32)"
																			}
																		},
																		"id": 3372,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "1508:278:32",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	],
																	"id": 3353,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "1483:7:32",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint256_$",
																		"typeString": "type(uint256)"
																	},
																	"typeName": {
																		"id": 3352,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "1483:7:32",
																		"typeDescriptions": {}
																	}
																},
																"id": 3373,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1483:317:32",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"id": 3351,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "1462:7:32",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 3350,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "1462:7:32",
																"typeDescriptions": {}
															}
														},
														"id": 3374,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1462:348:32",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address_payable",
															"typeString": "address payable"
														}
													},
													"src": "1455:355:32",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 3376,
												"nodeType": "ExpressionStatement",
												"src": "1455:355:32"
											}
										]
									},
									"documentation": {
										"id": 3332,
										"nodeType": "StructuredDocumentation",
										"src": "1064:236:32",
										"text": "@notice Deterministically computes the pool address given the factory and PoolKey\n @param factory The Uniswap V3 factory contract address\n @param key The PoolKey\n @return pool The contract address of the V3 pool"
									},
									"id": 3378,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "computeAddress",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3337,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3334,
												"mutability": "mutable",
												"name": "factory",
												"nodeType": "VariableDeclaration",
												"scope": 3378,
												"src": "1329:15:32",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3333,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1329:7:32",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3336,
												"mutability": "mutable",
												"name": "key",
												"nodeType": "VariableDeclaration",
												"scope": 3378,
												"src": "1346:18:32",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_PoolKey_$3300_memory_ptr",
													"typeString": "struct PoolAddress.PoolKey"
												},
												"typeName": {
													"id": 3335,
													"name": "PoolKey",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 3300,
													"src": "1346:7:32",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_PoolKey_$3300_storage_ptr",
														"typeString": "struct PoolAddress.PoolKey"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1328:37:32"
									},
									"returnParameters": {
										"id": 3340,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3339,
												"mutability": "mutable",
												"name": "pool",
												"nodeType": "VariableDeclaration",
												"scope": 3378,
												"src": "1389:12:32",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3338,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1389:7:32",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1388:14:32"
									},
									"scope": 3379,
									"src": "1305:512:32",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 3380,
							"src": "167:1652:32"
						}
					],
					"src": "45:1775:32"
				},
				"id": 32
			},
			"contracts/libraries/TransferHelper.sol": {
				"ast": {
					"absolutePath": "contracts/libraries/TransferHelper.sol",
					"exportedSymbols": {
						"IERC20": [
							113
						],
						"TransferHelper": [
							3550
						]
					},
					"id": 3551,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 3381,
							"literals": [
								"solidity",
								">=",
								"0.6",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:33"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"file": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"id": 3382,
							"nodeType": "ImportDirective",
							"scope": 3551,
							"sourceUnit": 114,
							"src": "71:56:33",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"fullyImplemented": true,
							"id": 3550,
							"linearizedBaseContracts": [
								3550
							],
							"name": "TransferHelper",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 3430,
										"nodeType": "Block",
										"src": "690:229:33",
										"statements": [
											{
												"assignments": [
													3395,
													3397
												],
												"declarations": [
													{
														"constant": false,
														"id": 3395,
														"mutability": "mutable",
														"name": "success",
														"nodeType": "VariableDeclaration",
														"scope": 3430,
														"src": "701:12:33",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 3394,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "701:4:33",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 3397,
														"mutability": "mutable",
														"name": "data",
														"nodeType": "VariableDeclaration",
														"scope": 3430,
														"src": "715:17:33",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 3396,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "715:5:33",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 3410,
												"initialValue": {
													"arguments": [
														{
															"arguments": [
																{
																	"expression": {
																		"expression": {
																			"id": 3402,
																			"name": "IERC20",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 113,
																			"src": "782:6:33",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_IERC20_$113_$",
																				"typeString": "type(contract IERC20)"
																			}
																		},
																		"id": 3403,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"memberName": "transferFrom",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 94,
																		"src": "782:19:33",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_declaration_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$",
																			"typeString": "function IERC20.transferFrom(address,address,uint256) returns (bool)"
																		}
																	},
																	"id": 3404,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"memberName": "selector",
																	"nodeType": "MemberAccess",
																	"src": "782:28:33",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	}
																},
																{
																	"id": 3405,
																	"name": "from",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3387,
																	"src": "812:4:33",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 3406,
																	"name": "to",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3389,
																	"src": "818:2:33",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 3407,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3391,
																	"src": "822:5:33",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 3400,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "759:3:33",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 3401,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encodeWithSelector",
																"nodeType": "MemberAccess",
																"src": "759:22:33",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes4) pure returns (bytes memory)"
																}
															},
															"id": 3408,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "759:69:33",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"id": 3398,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3385,
															"src": "748:5:33",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 3399,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "call",
														"nodeType": "MemberAccess",
														"src": "748:10:33",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 3409,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "748:81:33",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "700:129:33"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 3426,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3412,
																"name": "success",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3395,
																"src": "847:7:33",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "&&",
															"rightExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"id": 3424,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 3416,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"expression": {
																					"id": 3413,
																					"name": "data",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3397,
																					"src": "859:4:33",
																					"typeDescriptions": {
																						"typeIdentifier": "t_bytes_memory_ptr",
																						"typeString": "bytes memory"
																					}
																				},
																				"id": 3414,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "length",
																				"nodeType": "MemberAccess",
																				"src": "859:11:33",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "==",
																			"rightExpression": {
																				"hexValue": "30",
																				"id": 3415,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "874:1:33",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			},
																			"src": "859:16:33",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "||",
																		"rightExpression": {
																			"arguments": [
																				{
																					"id": 3419,
																					"name": "data",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3397,
																					"src": "890:4:33",
																					"typeDescriptions": {
																						"typeIdentifier": "t_bytes_memory_ptr",
																						"typeString": "bytes memory"
																					}
																				},
																				{
																					"components": [
																						{
																							"id": 3421,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": true,
																							"lValueRequested": false,
																							"nodeType": "ElementaryTypeNameExpression",
																							"src": "897:4:33",
																							"typeDescriptions": {
																								"typeIdentifier": "t_type$_t_bool_$",
																								"typeString": "type(bool)"
																							},
																							"typeName": {
																								"id": 3420,
																								"name": "bool",
																								"nodeType": "ElementaryTypeName",
																								"src": "897:4:33",
																								"typeDescriptions": {}
																							}
																						}
																					],
																					"id": 3422,
																					"isConstant": false,
																					"isInlineArray": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"nodeType": "TupleExpression",
																					"src": "896:6:33",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_bool_$",
																						"typeString": "type(bool)"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_bytes_memory_ptr",
																						"typeString": "bytes memory"
																					},
																					{
																						"typeIdentifier": "t_type$_t_bool_$",
																						"typeString": "type(bool)"
																					}
																				],
																				"expression": {
																					"id": 3417,
																					"name": "abi",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 4294967295,
																					"src": "879:3:33",
																					"typeDescriptions": {
																						"typeIdentifier": "t_magic_abi",
																						"typeString": "abi"
																					}
																				},
																				"id": 3418,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"memberName": "decode",
																				"nodeType": "MemberAccess",
																				"src": "879:10:33",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_abidecode_pure$__$returns$__$",
																					"typeString": "function () pure"
																				}
																			},
																			"id": 3423,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "879:24:33",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"src": "859:44:33",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	}
																],
																"id": 3425,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "858:46:33",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "847:57:33",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "535446",
															"id": 3427,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "906:5:33",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_a1c4b1d67db284650e7cfb49cb11ce76848206ad466478425bd3418f8bbb9a86",
																"typeString": "literal_string \"STF\""
															},
															"value": "STF"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_a1c4b1d67db284650e7cfb49cb11ce76848206ad466478425bd3418f8bbb9a86",
																"typeString": "literal_string \"STF\""
															}
														],
														"id": 3411,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "839:7:33",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 3428,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "839:73:33",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 3429,
												"nodeType": "ExpressionStatement",
												"src": "839:73:33"
											}
										]
									},
									"documentation": {
										"id": 3383,
										"nodeType": "StructuredDocumentation",
										"src": "158:398:33",
										"text": "@notice Transfers tokens from the targeted address to the given destination\n @notice Errors with 'STF' if transfer fails\n @param token The contract address of the token to be transferred\n @param from The originating address from which the tokens will be transferred\n @param to The destination address of the transfer\n @param value The amount to be transferred"
									},
									"id": 3431,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferFrom",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3392,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3385,
												"mutability": "mutable",
												"name": "token",
												"nodeType": "VariableDeclaration",
												"scope": 3431,
												"src": "596:13:33",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3384,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "596:7:33",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3387,
												"mutability": "mutable",
												"name": "from",
												"nodeType": "VariableDeclaration",
												"scope": 3431,
												"src": "619:12:33",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3386,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "619:7:33",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3389,
												"mutability": "mutable",
												"name": "to",
												"nodeType": "VariableDeclaration",
												"scope": 3431,
												"src": "641:10:33",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3388,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "641:7:33",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3391,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 3431,
												"src": "661:13:33",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3390,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "661:7:33",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "586:94:33"
									},
									"returnParameters": {
										"id": 3393,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "690:0:33"
									},
									"scope": 3550,
									"src": "561:358:33",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3476,
										"nodeType": "Block",
										"src": "1314:206:33",
										"statements": [
											{
												"assignments": [
													3442,
													3444
												],
												"declarations": [
													{
														"constant": false,
														"id": 3442,
														"mutability": "mutable",
														"name": "success",
														"nodeType": "VariableDeclaration",
														"scope": 3476,
														"src": "1325:12:33",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 3441,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "1325:4:33",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 3444,
														"mutability": "mutable",
														"name": "data",
														"nodeType": "VariableDeclaration",
														"scope": 3476,
														"src": "1339:17:33",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 3443,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "1339:5:33",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 3456,
												"initialValue": {
													"arguments": [
														{
															"arguments": [
																{
																	"expression": {
																		"expression": {
																			"id": 3449,
																			"name": "IERC20",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 113,
																			"src": "1394:6:33",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_IERC20_$113_$",
																				"typeString": "type(contract IERC20)"
																			}
																		},
																		"id": 3450,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"memberName": "transfer",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 62,
																		"src": "1394:15:33",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_declaration_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																			"typeString": "function IERC20.transfer(address,uint256) returns (bool)"
																		}
																	},
																	"id": 3451,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"memberName": "selector",
																	"nodeType": "MemberAccess",
																	"src": "1394:24:33",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	}
																},
																{
																	"id": 3452,
																	"name": "to",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3436,
																	"src": "1420:2:33",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 3453,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3438,
																	"src": "1424:5:33",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 3447,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "1371:3:33",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 3448,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encodeWithSelector",
																"nodeType": "MemberAccess",
																"src": "1371:22:33",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes4) pure returns (bytes memory)"
																}
															},
															"id": 3454,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1371:59:33",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"id": 3445,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3434,
															"src": "1360:5:33",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 3446,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "call",
														"nodeType": "MemberAccess",
														"src": "1360:10:33",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 3455,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1360:71:33",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1324:107:33"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 3472,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3458,
																"name": "success",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3442,
																"src": "1449:7:33",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "&&",
															"rightExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"id": 3470,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 3462,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"expression": {
																					"id": 3459,
																					"name": "data",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3444,
																					"src": "1461:4:33",
																					"typeDescriptions": {
																						"typeIdentifier": "t_bytes_memory_ptr",
																						"typeString": "bytes memory"
																					}
																				},
																				"id": 3460,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "length",
																				"nodeType": "MemberAccess",
																				"src": "1461:11:33",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "==",
																			"rightExpression": {
																				"hexValue": "30",
																				"id": 3461,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "1476:1:33",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			},
																			"src": "1461:16:33",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "||",
																		"rightExpression": {
																			"arguments": [
																				{
																					"id": 3465,
																					"name": "data",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3444,
																					"src": "1492:4:33",
																					"typeDescriptions": {
																						"typeIdentifier": "t_bytes_memory_ptr",
																						"typeString": "bytes memory"
																					}
																				},
																				{
																					"components": [
																						{
																							"id": 3467,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": true,
																							"lValueRequested": false,
																							"nodeType": "ElementaryTypeNameExpression",
																							"src": "1499:4:33",
																							"typeDescriptions": {
																								"typeIdentifier": "t_type$_t_bool_$",
																								"typeString": "type(bool)"
																							},
																							"typeName": {
																								"id": 3466,
																								"name": "bool",
																								"nodeType": "ElementaryTypeName",
																								"src": "1499:4:33",
																								"typeDescriptions": {}
																							}
																						}
																					],
																					"id": 3468,
																					"isConstant": false,
																					"isInlineArray": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"nodeType": "TupleExpression",
																					"src": "1498:6:33",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_bool_$",
																						"typeString": "type(bool)"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_bytes_memory_ptr",
																						"typeString": "bytes memory"
																					},
																					{
																						"typeIdentifier": "t_type$_t_bool_$",
																						"typeString": "type(bool)"
																					}
																				],
																				"expression": {
																					"id": 3463,
																					"name": "abi",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 4294967295,
																					"src": "1481:3:33",
																					"typeDescriptions": {
																						"typeIdentifier": "t_magic_abi",
																						"typeString": "abi"
																					}
																				},
																				"id": 3464,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"memberName": "decode",
																				"nodeType": "MemberAccess",
																				"src": "1481:10:33",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_abidecode_pure$__$returns$__$",
																					"typeString": "function () pure"
																				}
																			},
																			"id": 3469,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "1481:24:33",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"src": "1461:44:33",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	}
																],
																"id": 3471,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1460:46:33",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "1449:57:33",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "5354",
															"id": 3473,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1508:4:33",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_8e992d6a09e3feb7936717fa482f3a7086f18407e19b697f3153d17fd25870ca",
																"typeString": "literal_string \"ST\""
															},
															"value": "ST"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_8e992d6a09e3feb7936717fa482f3a7086f18407e19b697f3153d17fd25870ca",
																"typeString": "literal_string \"ST\""
															}
														],
														"id": 3457,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1441:7:33",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 3474,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1441:72:33",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 3475,
												"nodeType": "ExpressionStatement",
												"src": "1441:72:33"
											}
										]
									},
									"documentation": {
										"id": 3432,
										"nodeType": "StructuredDocumentation",
										"src": "925:281:33",
										"text": "@notice Transfers tokens from msg.sender to a recipient\n @dev Errors with ST if transfer fails\n @param token The contract address of the token which will be transferred\n @param to The recipient of the transfer\n @param value The value of the transfer"
									},
									"id": 3477,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransfer",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3439,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3434,
												"mutability": "mutable",
												"name": "token",
												"nodeType": "VariableDeclaration",
												"scope": 3477,
												"src": "1242:13:33",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3433,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1242:7:33",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3436,
												"mutability": "mutable",
												"name": "to",
												"nodeType": "VariableDeclaration",
												"scope": 3477,
												"src": "1265:10:33",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3435,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1265:7:33",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3438,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 3477,
												"src": "1285:13:33",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3437,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1285:7:33",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1232:72:33"
									},
									"returnParameters": {
										"id": 3440,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1314:0:33"
									},
									"scope": 3550,
									"src": "1211:309:33",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3522,
										"nodeType": "Block",
										"src": "1975:205:33",
										"statements": [
											{
												"assignments": [
													3488,
													3490
												],
												"declarations": [
													{
														"constant": false,
														"id": 3488,
														"mutability": "mutable",
														"name": "success",
														"nodeType": "VariableDeclaration",
														"scope": 3522,
														"src": "1986:12:33",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 3487,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "1986:4:33",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 3490,
														"mutability": "mutable",
														"name": "data",
														"nodeType": "VariableDeclaration",
														"scope": 3522,
														"src": "2000:17:33",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 3489,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "2000:5:33",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 3502,
												"initialValue": {
													"arguments": [
														{
															"arguments": [
																{
																	"expression": {
																		"expression": {
																			"id": 3495,
																			"name": "IERC20",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 113,
																			"src": "2055:6:33",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_IERC20_$113_$",
																				"typeString": "type(contract IERC20)"
																			}
																		},
																		"id": 3496,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"memberName": "approve",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 82,
																		"src": "2055:14:33",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_declaration_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																			"typeString": "function IERC20.approve(address,uint256) returns (bool)"
																		}
																	},
																	"id": 3497,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"memberName": "selector",
																	"nodeType": "MemberAccess",
																	"src": "2055:23:33",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	}
																},
																{
																	"id": 3498,
																	"name": "to",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3482,
																	"src": "2080:2:33",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 3499,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3484,
																	"src": "2084:5:33",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 3493,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "2032:3:33",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 3494,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encodeWithSelector",
																"nodeType": "MemberAccess",
																"src": "2032:22:33",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes4) pure returns (bytes memory)"
																}
															},
															"id": 3500,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2032:58:33",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"id": 3491,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3480,
															"src": "2021:5:33",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 3492,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "call",
														"nodeType": "MemberAccess",
														"src": "2021:10:33",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 3501,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2021:70:33",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1985:106:33"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 3518,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3504,
																"name": "success",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3488,
																"src": "2109:7:33",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "&&",
															"rightExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"id": 3516,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 3508,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"expression": {
																					"id": 3505,
																					"name": "data",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3490,
																					"src": "2121:4:33",
																					"typeDescriptions": {
																						"typeIdentifier": "t_bytes_memory_ptr",
																						"typeString": "bytes memory"
																					}
																				},
																				"id": 3506,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "length",
																				"nodeType": "MemberAccess",
																				"src": "2121:11:33",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "==",
																			"rightExpression": {
																				"hexValue": "30",
																				"id": 3507,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "2136:1:33",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			},
																			"src": "2121:16:33",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "||",
																		"rightExpression": {
																			"arguments": [
																				{
																					"id": 3511,
																					"name": "data",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3490,
																					"src": "2152:4:33",
																					"typeDescriptions": {
																						"typeIdentifier": "t_bytes_memory_ptr",
																						"typeString": "bytes memory"
																					}
																				},
																				{
																					"components": [
																						{
																							"id": 3513,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": true,
																							"lValueRequested": false,
																							"nodeType": "ElementaryTypeNameExpression",
																							"src": "2159:4:33",
																							"typeDescriptions": {
																								"typeIdentifier": "t_type$_t_bool_$",
																								"typeString": "type(bool)"
																							},
																							"typeName": {
																								"id": 3512,
																								"name": "bool",
																								"nodeType": "ElementaryTypeName",
																								"src": "2159:4:33",
																								"typeDescriptions": {}
																							}
																						}
																					],
																					"id": 3514,
																					"isConstant": false,
																					"isInlineArray": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"nodeType": "TupleExpression",
																					"src": "2158:6:33",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_bool_$",
																						"typeString": "type(bool)"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_bytes_memory_ptr",
																						"typeString": "bytes memory"
																					},
																					{
																						"typeIdentifier": "t_type$_t_bool_$",
																						"typeString": "type(bool)"
																					}
																				],
																				"expression": {
																					"id": 3509,
																					"name": "abi",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 4294967295,
																					"src": "2141:3:33",
																					"typeDescriptions": {
																						"typeIdentifier": "t_magic_abi",
																						"typeString": "abi"
																					}
																				},
																				"id": 3510,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"memberName": "decode",
																				"nodeType": "MemberAccess",
																				"src": "2141:10:33",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_abidecode_pure$__$returns$__$",
																					"typeString": "function () pure"
																				}
																			},
																			"id": 3515,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "2141:24:33",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"src": "2121:44:33",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	}
																],
																"id": 3517,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2120:46:33",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "2109:57:33",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "5341",
															"id": 3519,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2168:4:33",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_0c382912095e7706ed01a66755a50c713445aceaf5a9168954498b03dd381faa",
																"typeString": "literal_string \"SA\""
															},
															"value": "SA"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_0c382912095e7706ed01a66755a50c713445aceaf5a9168954498b03dd381faa",
																"typeString": "literal_string \"SA\""
															}
														],
														"id": 3503,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2101:7:33",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 3520,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2101:72:33",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 3521,
												"nodeType": "ExpressionStatement",
												"src": "2101:72:33"
											}
										]
									},
									"documentation": {
										"id": 3478,
										"nodeType": "StructuredDocumentation",
										"src": "1526:342:33",
										"text": "@notice Approves the stipulated contract to spend the given allowance in the given token\n @dev Errors with 'SA' if transfer fails\n @param token The contract address of the token to be approved\n @param to The target of the approval\n @param value The amount of the given token the target will be allowed to spend"
									},
									"id": 3523,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeApprove",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3485,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3480,
												"mutability": "mutable",
												"name": "token",
												"nodeType": "VariableDeclaration",
												"scope": 3523,
												"src": "1903:13:33",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3479,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1903:7:33",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3482,
												"mutability": "mutable",
												"name": "to",
												"nodeType": "VariableDeclaration",
												"scope": 3523,
												"src": "1926:10:33",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3481,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1926:7:33",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3484,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 3523,
												"src": "1946:13:33",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3483,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1946:7:33",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1893:72:33"
									},
									"returnParameters": {
										"id": 3486,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1975:0:33"
									},
									"scope": 3550,
									"src": "1873:307:33",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3548,
										"nodeType": "Block",
										"src": "2431:104:33",
										"statements": [
											{
												"assignments": [
													3532,
													null
												],
												"declarations": [
													{
														"constant": false,
														"id": 3532,
														"mutability": "mutable",
														"name": "success",
														"nodeType": "VariableDeclaration",
														"scope": 3548,
														"src": "2442:12:33",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 3531,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "2442:4:33",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													null
												],
												"id": 3542,
												"initialValue": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 3539,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2492:1:33",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 3538,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "NewExpression",
																"src": "2482:9:33",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (uint256) pure returns (bytes memory)"
																},
																"typeName": {
																	"id": 3537,
																	"name": "bytes",
																	"nodeType": "ElementaryTypeName",
																	"src": "2486:5:33",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_storage_ptr",
																		"typeString": "bytes"
																	}
																}
															},
															"id": 3540,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2482:12:33",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															],
															"expression": {
																"id": 3533,
																"name": "to",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3526,
																"src": "2460:2:33",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 3534,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "call",
															"nodeType": "MemberAccess",
															"src": "2460:7:33",
															"typeDescriptions": {
																"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
															}
														},
														"id": 3536,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"names": [
															"value"
														],
														"nodeType": "FunctionCallOptions",
														"options": [
															{
																"id": 3535,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3528,
																"src": "2475:5:33",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"src": "2460:21:33",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 3541,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2460:35:33",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2441:54:33"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 3544,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3532,
															"src": "2513:7:33",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "535445",
															"id": 3545,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2522:5:33",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_48541fce89df928ec30caa1aed6c0cd94b8e2ef76b3c68b10b9a184ceadb93d4",
																"typeString": "literal_string \"STE\""
															},
															"value": "STE"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_48541fce89df928ec30caa1aed6c0cd94b8e2ef76b3c68b10b9a184ceadb93d4",
																"typeString": "literal_string \"STE\""
															}
														],
														"id": 3543,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2505:7:33",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 3546,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2505:23:33",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 3547,
												"nodeType": "ExpressionStatement",
												"src": "2505:23:33"
											}
										]
									},
									"documentation": {
										"id": 3524,
										"nodeType": "StructuredDocumentation",
										"src": "2186:179:33",
										"text": "@notice Transfers ETH to the recipient address\n @dev Fails with `STE`\n @param to The destination of the transfer\n @param value The value to be transferred"
									},
									"id": 3549,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferETH",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3529,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3526,
												"mutability": "mutable",
												"name": "to",
												"nodeType": "VariableDeclaration",
												"scope": 3549,
												"src": "2395:10:33",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3525,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2395:7:33",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3528,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 3549,
												"src": "2407:13:33",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3527,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2407:7:33",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2394:27:33"
									},
									"returnParameters": {
										"id": 3530,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2431:0:33"
									},
									"scope": 3550,
									"src": "2370:165:33",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 3551,
							"src": "129:2408:33"
						}
					],
					"src": "45:2493:33"
				},
				"id": 33
			}
		}
	}
}